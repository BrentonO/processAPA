-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity process_data_dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config3_mult_s_outidx_dEe is 
    generic(
             DataWidth     : integer := 4; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 144
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of process_data_dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config3_mult_s_outidx_dEe is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000", 1 => "0000", 2 => "0000", 3 => "0000", 
    4 => "0000", 5 => "0000", 6 => "0000", 7 => "0000", 
    8 => "0000", 9 => "0001", 10 => "0001", 11 => "0001", 
    12 => "0001", 13 => "0001", 14 => "0001", 15 => "0001", 
    16 => "0001", 17 => "0001", 18 => "0010", 19 => "0010", 
    20 => "0010", 21 => "0010", 22 => "0010", 23 => "0010", 
    24 => "0010", 25 => "0010", 26 => "0010", 27 => "0011", 
    28 => "0011", 29 => "0011", 30 => "0011", 31 => "0011", 
    32 => "0011", 33 => "0011", 34 => "0011", 35 => "0011", 
    36 => "0100", 37 => "0100", 38 => "0100", 39 => "0100", 
    40 => "0100", 41 => "0100", 42 => "0100", 43 => "0100", 
    44 => "0100", 45 => "0101", 46 => "0101", 47 => "0101", 
    48 => "0101", 49 => "0101", 50 => "0101", 51 => "0101", 
    52 => "0101", 53 => "0101", 54 => "0110", 55 => "0110", 
    56 => "0110", 57 => "0110", 58 => "0110", 59 => "0110", 
    60 => "0110", 61 => "0110", 62 => "0110", 63 => "0111", 
    64 => "0111", 65 => "0111", 66 => "0111", 67 => "0111", 
    68 => "0111", 69 => "0111", 70 => "0111", 71 => "0111", 
    72 => "1000", 73 => "1000", 74 => "1000", 75 => "1000", 
    76 => "1000", 77 => "1000", 78 => "1000", 79 => "1000", 
    80 => "1000", 81 => "1001", 82 => "1001", 83 => "1001", 
    84 => "1001", 85 => "1001", 86 => "1001", 87 => "1001", 
    88 => "1001", 89 => "1001", 90 => "1010", 91 => "1010", 
    92 => "1010", 93 => "1010", 94 => "1010", 95 => "1010", 
    96 => "1010", 97 => "1010", 98 => "1010", 99 => "1011", 
    100 => "1011", 101 => "1011", 102 => "1011", 103 => "1011", 
    104 => "1011", 105 => "1011", 106 => "1011", 107 => "1011", 
    108 => "1100", 109 => "1100", 110 => "1100", 111 => "1100", 
    112 => "1100", 113 => "1100", 114 => "1100", 115 => "1100", 
    116 => "1100", 117 => "1101", 118 => "1101", 119 => "1101", 
    120 => "1101", 121 => "1101", 122 => "1101", 123 => "1101", 
    124 => "1101", 125 => "1101", 126 => "1110", 127 => "1110", 
    128 => "1110", 129 => "1110", 130 => "1110", 131 => "1110", 
    132 => "1110", 133 => "1110", 134 => "1110", 135 => "1111", 
    136 => "1111", 137 => "1111", 138 => "1111", 139 => "1111", 
    140 => "1111", 141 => "1111", 142 => "1111", 143 => "1111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

