// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_data_process_data_Pipeline_frame_chan_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        phi_mul,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_d0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_d0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_d0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_d0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_d0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_d0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_d0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_we0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] phi_mul;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_d0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_d0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_d0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_d0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_d0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_d0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_d0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_we0;
output  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_d0;

reg ap_idle;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_we0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_we0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_we0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_we0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_we0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_we0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_we0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln66_fu_239_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] empty_fu_251_p1;
reg   [2:0] empty_reg_449;
reg   [4:0] lshr_ln1_reg_453;
wire   [4:0] first_bit_position_fu_297_p1;
reg   [4:0] first_bit_position_reg_458;
wire   [7:0] adc_words_address0;
reg    adc_words_ce0;
wire   [31:0] adc_words_q0;
wire   [7:0] adc_words_address1;
reg    adc_words_ce1;
wire   [31:0] adc_words_q1;
wire   [63:0] zext_ln108_fu_311_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln111_fu_322_p1;
wire   [63:0] zext_ln73_1_fu_340_p1;
reg   [8:0] iChan_fu_88;
wire   [8:0] iChan_2_fu_245_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_iChan_1;
wire   [13:0] adc_1_fu_420_p2;
wire   [7:0] trunc_ln102_fu_265_p1;
wire   [11:0] shl_ln2_fu_269_p3;
wire   [8:0] shl_ln102_fu_281_p2;
wire   [12:0] zext_ln102_fu_277_p1;
wire   [12:0] zext_ln102_1_fu_287_p1;
wire   [12:0] sub_ln102_fu_291_p2;
wire   [7:0] word_index_fu_301_p4;
wire   [7:0] add_ln111_fu_316_p2;
wire   [17:0] zext_ln73_fu_332_p1;
wire   [17:0] add_ln73_fu_335_p2;
wire   [5:0] zext_ln104_1_fu_355_p1;
wire   [5:0] sub_ln106_fu_358_p2;
wire   [0:0] icmp_ln106_fu_368_p2;
wire   [3:0] trunc_ln106_fu_364_p1;
wire   [31:0] zext_ln104_fu_352_p1;
wire   [31:0] adc_fu_382_p2;
wire   [3:0] bits_from_first_word_fu_374_p3;
wire   [13:0] empty_102_fu_398_p1;
wire   [13:0] bits_from_first_wordcast_fu_402_p1;
wire   [0:0] icmp_ln110_fu_392_p2;
wire   [13:0] shl_ln111_fu_406_p2;
wire   [13:0] trunc_ln108_fu_388_p1;
wire   [13:0] select_ln110_fu_412_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

process_data_process_data_Pipeline_frame_chan_loop_adc_words_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
adc_words_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(adc_words_address0),
    .ce0(adc_words_ce0),
    .q0(adc_words_q0),
    .address1(adc_words_address1),
    .ce1(adc_words_ce1),
    .q1(adc_words_q1)
);

process_data_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln66_fu_239_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            iChan_fu_88 <= iChan_2_fu_245_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            iChan_fu_88 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_239_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_449 <= empty_fu_251_p1;
        first_bit_position_reg_458[4 : 1] <= first_bit_position_fu_297_p1[4 : 1];
        lshr_ln1_reg_453 <= {{ap_sig_allocacmp_iChan_1[7:3]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adc_words_ce0 = 1'b1;
    end else begin
        adc_words_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adc_words_ce1 = 1'b1;
    end else begin
        adc_words_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_239_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_iChan_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_iChan_1 = iChan_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd1))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd2))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd3))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd4))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd5))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd6))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd7))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_reg_449 == 3'd0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_we0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign adc_1_fu_420_p2 = (trunc_ln108_fu_388_p1 | select_ln110_fu_412_p3);

assign adc_fu_382_p2 = adc_words_q1 >> zext_ln104_fu_352_p1;

assign adc_words_address0 = zext_ln111_fu_322_p1;

assign adc_words_address1 = zext_ln108_fu_311_p1;

assign add_ln111_fu_316_p2 = (word_index_fu_301_p4 + 8'd1);

assign add_ln73_fu_335_p2 = (phi_mul + zext_ln73_fu_332_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bits_from_first_word_fu_374_p3 = ((icmp_ln106_fu_368_p2[0:0] == 1'b1) ? 4'd14 : trunc_ln106_fu_364_p1);

assign bits_from_first_wordcast_fu_402_p1 = bits_from_first_word_fu_374_p3;

assign empty_102_fu_398_p1 = adc_words_q0[13:0];

assign empty_fu_251_p1 = ap_sig_allocacmp_iChan_1[2:0];

assign first_bit_position_fu_297_p1 = sub_ln102_fu_291_p2[4:0];

assign iChan_2_fu_245_p2 = (ap_sig_allocacmp_iChan_1 + 9'd1);

assign icmp_ln106_fu_368_p2 = ((sub_ln106_fu_358_p2 > 6'd14) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_392_p2 = ((bits_from_first_word_fu_374_p3 < 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_239_p2 = ((ap_sig_allocacmp_iChan_1 == 9'd256) ? 1'b1 : 1'b0);

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_d0 = adc_1_fu_420_p2;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_d0 = adc_1_fu_420_p2;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_d0 = adc_1_fu_420_p2;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_d0 = adc_1_fu_420_p2;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_d0 = adc_1_fu_420_p2;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_d0 = adc_1_fu_420_p2;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_d0 = adc_1_fu_420_p2;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0 = zext_ln73_1_fu_340_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_d0 = adc_1_fu_420_p2;

assign select_ln110_fu_412_p3 = ((icmp_ln110_fu_392_p2[0:0] == 1'b1) ? shl_ln111_fu_406_p2 : 14'd0);

assign shl_ln102_fu_281_p2 = ap_sig_allocacmp_iChan_1 << 9'd1;

assign shl_ln111_fu_406_p2 = empty_102_fu_398_p1 << bits_from_first_wordcast_fu_402_p1;

assign shl_ln2_fu_269_p3 = {{trunc_ln102_fu_265_p1}, {4'd0}};

assign sub_ln102_fu_291_p2 = (zext_ln102_fu_277_p1 - zext_ln102_1_fu_287_p1);

assign sub_ln106_fu_358_p2 = ($signed(6'd32) - $signed(zext_ln104_1_fu_355_p1));

assign trunc_ln102_fu_265_p1 = ap_sig_allocacmp_iChan_1[7:0];

assign trunc_ln106_fu_364_p1 = sub_ln106_fu_358_p2[3:0];

assign trunc_ln108_fu_388_p1 = adc_fu_382_p2[13:0];

assign word_index_fu_301_p4 = {{sub_ln102_fu_291_p2[12:5]}};

assign zext_ln102_1_fu_287_p1 = shl_ln102_fu_281_p2;

assign zext_ln102_fu_277_p1 = shl_ln2_fu_269_p3;

assign zext_ln104_1_fu_355_p1 = first_bit_position_reg_458;

assign zext_ln104_fu_352_p1 = first_bit_position_reg_458;

assign zext_ln108_fu_311_p1 = word_index_fu_301_p4;

assign zext_ln111_fu_322_p1 = add_ln111_fu_316_p2;

assign zext_ln73_1_fu_340_p1 = add_ln73_fu_335_p2;

assign zext_ln73_fu_332_p1 = lshr_ln1_reg_453;

always @ (posedge ap_clk) begin
    first_bit_position_reg_458[0] <= 1'b0;
end

endmodule //process_data_process_data_Pipeline_frame_chan_loop
