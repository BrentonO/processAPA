-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_data_process_data_Pipeline_VITIS_LOOP_131_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln134_1 : IN STD_LOGIC_VECTOR (21 downto 0);
    phi_mul24 : IN STD_LOGIC_VECTOR (17 downto 0);
    zext_ln131_1 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0 : OUT STD_LOGIC;
    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    planes_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    planes_ce0 : OUT STD_LOGIC;
    planes_we0 : OUT STD_LOGIC;
    planes_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of process_data_process_data_Pipeline_VITIS_LOOP_131_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1770 : STD_LOGIC_VECTOR (12 downto 0) := "1011101110000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln131_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln131_1_cast_fu_203_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln131_1_cast_reg_324 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_3_reg_329 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln134_4_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln134_2_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln131_fu_221_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln2_fu_227_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln134_3_fu_237_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln134_1_fu_241_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln134_1_fu_264_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln134_fu_267_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_s_fu_280_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_280_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln134_fu_302_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_data_mux_8_3_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (13 downto 0);
        din5 : IN STD_LOGIC_VECTOR (13 downto 0);
        din6 : IN STD_LOGIC_VECTOR (13 downto 0);
        din7 : IN STD_LOGIC_VECTOR (13 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component process_data_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_8_3_14_1_1_U52 : component process_data_mux_8_3_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 14,
        din5_WIDTH => 14,
        din6_WIDTH => 14,
        din7_WIDTH => 14,
        din8_WIDTH => 3,
        dout_WIDTH => 14)
    port map (
        din0 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_q0,
        din1 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_q0,
        din2 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_q0,
        din3 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_q0,
        din4 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_q0,
        din5 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_q0,
        din6 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_q0,
        din7 => process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_q0,
        din8 => tmp_s_fu_280_p9,
        dout => tmp_s_fu_280_p10);

    flow_control_loop_pipe_sequential_init_U : component process_data_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln131_fu_215_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_64 <= add_ln131_fu_221_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_3_reg_329 <= ap_sig_allocacmp_i_3;
                    zext_ln131_1_cast_reg_324(13 downto 0) <= zext_ln131_1_cast_fu_203_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln131_1_cast_reg_324(14) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln131_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv13_1));
    add_ln134_1_fu_241_p2 <= std_logic_vector(unsigned(phi_mul24) + unsigned(zext_ln134_3_fu_237_p1));
    add_ln134_fu_267_p2 <= std_logic_vector(unsigned(mul_ln134_1) + unsigned(zext_ln134_1_fu_264_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln131_fu_215_p2)
    begin
        if (((icmp_ln131_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_64;
        end if; 
    end process;

    icmp_ln131_fu_215_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv13_1770) else "0";
    lshr_ln2_fu_227_p4 <= ap_sig_allocacmp_i_3(12 downto 3);
    planes_address0 <= zext_ln134_2_fu_272_p1(22 - 1 downto 0);

    planes_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            planes_ce0 <= ap_const_logic_1;
        else 
            planes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    planes_d0 <= std_logic_vector(unsigned(zext_ln134_fu_302_p1) - unsigned(zext_ln131_1_cast_reg_324));

    planes_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            planes_we0 <= ap_const_logic_1;
        else 
            planes_we0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0 <= zext_ln134_4_fu_247_p1(18 - 1 downto 0);

    process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0 <= ap_const_logic_1;
        else 
            process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_280_p9 <= i_3_reg_329(3 - 1 downto 0);
    zext_ln131_1_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln131_1),15));
    zext_ln134_1_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_329),22));
    zext_ln134_2_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_fu_267_p2),64));
    zext_ln134_3_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_227_p4),18));
    zext_ln134_4_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_1_fu_241_p2),64));
    zext_ln134_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_280_p10),15));
end behav;
