// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_data_process_data_Pipeline_VITIS_LOOP_160_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln163,
        phi_mul24,
        zext_ln160_1,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_q0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_q0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_q0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_q0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_q0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_q0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_q0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0,
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_q0,
        planes2_address0,
        planes2_ce0,
        planes2_we0,
        planes2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [21:0] mul_ln163;
input  [17:0] phi_mul24;
input  [13:0] zext_ln160_1;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_q0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_q0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_q0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_q0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_q0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_q0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_q0;
output  [17:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0;
output   process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0;
input  [13:0] process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_q0;
output  [21:0] planes2_address0;
output   planes2_ce0;
output   planes2_we0;
output  [14:0] planes2_d0;

reg ap_idle;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0;
reg process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0;
reg planes2_ce0;
reg planes2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln160_fu_215_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [14:0] zext_ln160_1_cast_fu_203_p1;
reg   [14:0] zext_ln160_1_cast_reg_324;
reg   [12:0] i_2_reg_329;
wire   [63:0] zext_ln163_4_fu_247_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln163_2_fu_272_p1;
reg   [12:0] i_fu_64;
wire   [12:0] add_ln160_fu_221_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_i_2;
wire   [9:0] lshr_ln3_fu_227_p4;
wire   [17:0] zext_ln163_3_fu_237_p1;
wire   [17:0] add_ln163_1_fu_241_p2;
wire   [21:0] zext_ln163_1_fu_264_p1;
wire   [21:0] add_ln163_fu_267_p2;
wire   [2:0] tmp_1_fu_280_p9;
wire   [13:0] tmp_1_fu_280_p10;
wire   [14:0] zext_ln163_fu_302_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

process_data_mux_8_3_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 14 ),
    .din4_WIDTH( 14 ),
    .din5_WIDTH( 14 ),
    .din6_WIDTH( 14 ),
    .din7_WIDTH( 14 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 14 ))
mux_8_3_14_1_1_U39(
    .din0(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_q0),
    .din1(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_q0),
    .din2(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_q0),
    .din3(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_q0),
    .din4(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_q0),
    .din5(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_q0),
    .din6(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_q0),
    .din7(process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_q0),
    .din8(tmp_1_fu_280_p9),
    .dout(tmp_1_fu_280_p10)
);

process_data_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln160_fu_215_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= add_ln160_fu_221_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_329 <= ap_sig_allocacmp_i_2;
        zext_ln160_1_cast_reg_324[13 : 0] <= zext_ln160_1_cast_fu_203_p1[13 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln160_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 13'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        planes2_ce0 = 1'b1;
    end else begin
        planes2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        planes2_we0 = 1'b1;
    end else begin
        planes2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0 = 1'b1;
    end else begin
        process_data_int_char_FDHDChannelMapSP_int_adc_vectors_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_fu_221_p2 = (ap_sig_allocacmp_i_2 + 13'd1);

assign add_ln163_1_fu_241_p2 = (phi_mul24 + zext_ln163_3_fu_237_p1);

assign add_ln163_fu_267_p2 = (mul_ln163 + zext_ln163_1_fu_264_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln160_fu_215_p2 = ((ap_sig_allocacmp_i_2 == 13'd6000) ? 1'b1 : 1'b0);

assign lshr_ln3_fu_227_p4 = {{ap_sig_allocacmp_i_2[12:3]}};

assign planes2_address0 = zext_ln163_2_fu_272_p1;

assign planes2_d0 = (zext_ln163_fu_302_p1 - zext_ln160_1_cast_reg_324);

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_2_address0 = zext_ln163_4_fu_247_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_3_address0 = zext_ln163_4_fu_247_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_4_address0 = zext_ln163_4_fu_247_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_5_address0 = zext_ln163_4_fu_247_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_6_address0 = zext_ln163_4_fu_247_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_7_address0 = zext_ln163_4_fu_247_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_8_address0 = zext_ln163_4_fu_247_p1;

assign process_data_int_char_FDHDChannelMapSP_int_adc_vectors_address0 = zext_ln163_4_fu_247_p1;

assign tmp_1_fu_280_p9 = i_2_reg_329[2:0];

assign zext_ln160_1_cast_fu_203_p1 = zext_ln160_1;

assign zext_ln163_1_fu_264_p1 = i_2_reg_329;

assign zext_ln163_2_fu_272_p1 = add_ln163_fu_267_p2;

assign zext_ln163_3_fu_237_p1 = lshr_ln3_fu_227_p4;

assign zext_ln163_4_fu_247_p1 = add_ln163_1_fu_241_p2;

assign zext_ln163_fu_302_p1 = tmp_1_fu_280_p10;

always @ (posedge ap_clk) begin
    zext_ln160_1_cast_reg_324[14] <= 1'b0;
end

endmodule //process_data_process_data_Pipeline_VITIS_LOOP_160_2
