# 1 "myproject.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 376 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 108 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_PrintNone(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintInt(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintDouble(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "myproject.cpp" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iostream" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iostream" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 236 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 468 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 469 "/usr/include/features.h" 2 3 4
# 490 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 551 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 552 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 553 "/usr/include/sys/cdefs.h" 2 3 4
# 491 "/usr/include/features.h" 2 3 4
# 514 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 515 "/usr/include/features.h" 2 3 4
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 2 3
# 509 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 512 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iostream" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iosfwd" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iosfwd" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stringfwd.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stringfwd.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/memoryfwd.h" 1 3
# 47 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 52 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stringfwd.h" 3
  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iosfwd" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 1 3
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 62 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdarg.h" 1 3 4
# 30 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) noexcept (true);



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) noexcept (true);

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) noexcept (true);




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) noexcept (true);







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) noexcept (true);




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) noexcept (true);


extern wchar_t *wcsdup (const wchar_t *__s) noexcept (true)
  __attribute__ ((__malloc__)) ;
# 165 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));
# 175 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));





extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     noexcept (true) __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __attribute__ ((__pure__));
# 202 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __attribute__ ((__pure__));
# 213 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) noexcept (true);


extern size_t wcslen (const wchar_t *__s) noexcept (true) __attribute__ ((__pure__));
# 234 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     noexcept (true) __attribute__ ((__pure__));
# 254 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     noexcept (true) __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) noexcept (true);



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true);


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) noexcept (true);




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     noexcept (true);





extern wint_t btowc (int __c) noexcept (true);



extern int wctob (wint_t __c) noexcept (true);



extern int mbsinit (const mbstate_t *__ps) noexcept (true) __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) noexcept (true);


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) noexcept (true);


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) noexcept (true);
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) noexcept (true);
# 338 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) noexcept (true);






extern int wcwidth (wchar_t __c) noexcept (true);



extern int wcswidth (const wchar_t *__s, size_t __n) noexcept (true);





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) noexcept (true);



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 397 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);
# 412 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 429 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) noexcept (true);



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     noexcept (true);




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) noexcept (true);





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) noexcept (true);






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true);

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) noexcept (true);

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) noexcept (true);

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true);

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 512 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);
# 530 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 552 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) noexcept (true);



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true);
# 581 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern int fwide (__FILE *__fp, int __mode) noexcept (true);






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     noexcept (true) ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     noexcept (true) ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     noexcept (true) ;
# 657 "/usr/include/wchar.h" 3 4
extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 688 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     noexcept (true) ;







extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 744 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 799 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 825 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 835 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) noexcept (true);




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);
# 882 "/usr/include/wchar.h" 3 4
}
# 45 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 2 3
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 2 3
# 68 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 74 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 3

#pragma GCC visibility push(default)



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 102 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{
# 133 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_defines.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cxxabi_init_exception.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)


# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3
# 51 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 3
typedef long int ptrdiff_t;
# 118 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/__stddef_max_align_t.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 119 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 2 3
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cxxabi_init_exception.h" 2 3
# 50 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/typeinfo" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/typeinfo" 3



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/hash_bytes.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/new" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/new" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 1 3
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));






void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/new" 3
#pragma GCC visibility pop
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 206 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/exception_ptr.h" 3
      return exception_ptr();

    }


}

}

#pragma GCC visibility pop
# 144 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/nested_exception.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/nested_exception.h" 3
#pragma GCC visibility push(default)







# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/concept_check.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/concept_check.h" 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 180 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 312 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 747 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __bool_constant<__is_assignable(_Tp, _Up)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, __bool_constant<
        __is_trivially_constructible(_Tp, _Args...)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<is_default_constructible<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1590 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1694 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1840 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 1879 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }
# 2072 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };

  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };


  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };



  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;



  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2408 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };



  template<typename _Tp>
                      constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
                      constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
                      constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
                      constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;






  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 2974 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/type_traits" 3
}
# 56 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 72 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 116 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 136 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 176 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 145 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/exception" 2 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 1 3
# 60 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/functexcept.h" 1 3
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 1 3
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/numeric_traits.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 54 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 53) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 15);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 308);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_pair.h" 1 3
# 65 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 76 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


                    constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };







  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 252 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 280 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 521 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 541 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_pair.h" 3
}
# 65 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_types.h" 1 3
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
# 231 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_types.h" 3
  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_funcs.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/debug/assertions.h" 1 3
# 66 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


                                ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {


      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {



      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 1 3
# 66 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ptr_traits.h" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 199 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ptr_traits.h" 3
}
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 100 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;
# 127 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }





      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




                           iterator_type
      base() const
      { return current; }
# 168 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
                           reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }
# 182 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
                           pointer
      operator->() const
      { return std::__addressof(operator*()); }






                           reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






                           reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






                           reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






                           reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






                           reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







                           reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






                           reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







                           reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






                           reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 300 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 390 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }




  template<typename _Iterator>
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 454 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 489 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 531 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 546 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 580 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 622 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 641 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 692 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 737 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 761 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 861 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    { return __it.base(); }
# 1006 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;


      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

                           iterator_type
      base() const
      { return _M_current; }

                           reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

                           pointer
      operator->() const
      { return _M_current; }

                           move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

                           move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

                           move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

                           move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

                           move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

                           move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

                           move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

                           move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

                           reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }



  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 1272 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_iterator.h" 3
}
# 68 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/debug/debug.h" 1 3
# 48 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 70 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/predefined_ops.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 118 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
# 148 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
    { return __it; }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
        && __is_pointer<_II>::__value
        && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 444 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 477 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
        && __is_pointer<_BI1>::__value
        && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 620 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 656 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 722 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 782 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __is_pointer<_II1>::__value
        && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>
 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
 static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 982 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1037 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1069 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1156 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {






                                                       ;
                                                       ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1188 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1219 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
# 1233 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1255 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {



                                                       ;
                                                       ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1298 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1331 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1378 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1413 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }




}
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 3
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 2 3





namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 61 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 270 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 else
   return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {





   return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 else
   return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}





# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdint" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdint" 3








# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 1 3
# 63 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 64 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdint.h" 2 3
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 504 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/localefwd.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/localefwd.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++locale.h" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++locale.h" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/clocale" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) noexcept (true);


extern struct lconv *localeconv (void) noexcept (true);
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) noexcept (true);
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) noexcept (true);



extern void freelocale (locale_t __dataset) noexcept (true);






extern locale_t uselocale (locale_t __dataset) noexcept (true);







}
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/localefwd.h" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cctype" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 35 "/usr/include/bits/endian.h" 3 4
# 1 "/usr/include/bits/endianness.h" 1 3 4
# 36 "/usr/include/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     noexcept (true) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) noexcept (true);
extern int isalpha (int) noexcept (true);
extern int iscntrl (int) noexcept (true);
extern int isdigit (int) noexcept (true);
extern int islower (int) noexcept (true);
extern int isgraph (int) noexcept (true);
extern int isprint (int) noexcept (true);
extern int ispunct (int) noexcept (true);
extern int isspace (int) noexcept (true);
extern int isupper (int) noexcept (true);
extern int isxdigit (int) noexcept (true);



extern int tolower (int __c) noexcept (true);


extern int toupper (int __c) noexcept (true);




extern int isblank (int) noexcept (true);




extern int isctype (int __c, int __mask) noexcept (true);






extern int isascii (int __c) noexcept (true);



extern int toascii (int __c) noexcept (true);



extern int _toupper (int) noexcept (true);
extern int _tolower (int) noexcept (true);
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) noexcept (true);
extern int isalpha_l (int, locale_t) noexcept (true);
extern int iscntrl_l (int, locale_t) noexcept (true);
extern int isdigit_l (int, locale_t) noexcept (true);
extern int islower_l (int, locale_t) noexcept (true);
extern int isgraph_l (int, locale_t) noexcept (true);
extern int isprint_l (int, locale_t) noexcept (true);
extern int ispunct_l (int, locale_t) noexcept (true);
extern int isspace_l (int, locale_t) noexcept (true);
extern int isupper_l (int, locale_t) noexcept (true);
extern int isxdigit_l (int, locale_t) noexcept (true);

extern int isblank_l (int, locale_t) noexcept (true);



extern int __tolower_l (int __c, locale_t __l) noexcept (true);
extern int tolower_l (int __c, locale_t __l) noexcept (true);


extern int __toupper_l (int __c, locale_t __l) noexcept (true);
extern int toupper_l (int __c, locale_t __l) noexcept (true);
# 327 "/usr/include/ctype.h" 3 4
}
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cctype" 2 3
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/atomicity.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/atomicity.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr.h" 1 3
# 30 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 32 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/bits/types/struct_timespec.h" 3 4
};
# 33 "/usr/include/sched.h" 2 3 4





typedef __pid_t pid_t;





# 1 "/usr/include/bits/sched.h" 1 3 4
# 76 "/usr/include/bits/sched.h" 3 4
# 1 "/usr/include/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) noexcept (true);


extern int unshare (int __flags) noexcept (true);


extern int sched_getcpu (void) noexcept (true);


extern int getcpu (unsigned int *, unsigned int *) noexcept (true);


extern int setns (int __fd, int __nstype) noexcept (true);


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     noexcept (true);
extern cpu_set_t *__sched_cpualloc (size_t __count) noexcept (true) ;
extern void __sched_cpufree (cpu_set_t *__set) noexcept (true);

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     noexcept (true);


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) noexcept (true);


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) noexcept (true);


extern int sched_getscheduler (__pid_t __pid) noexcept (true);


extern int sched_yield (void) noexcept (true);


extern int sched_get_priority_max (int __algorithm) noexcept (true);


extern int sched_get_priority_min (int __algorithm) noexcept (true);



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) noexcept (true);
# 130 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) noexcept (true);


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) noexcept (true);


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 73 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 22 "/usr/include/bits/timex.h" 3 4
# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 23 "/usr/include/bits/timex.h" 2 3 4



struct timex
{
# 58 "/usr/include/bits/timex.h" 3 4
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;

};
# 74 "/usr/include/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) noexcept (true);
# 90 "/usr/include/bits/time.h" 3 4
}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4






# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) noexcept (true);



extern time_t time (time_t *__timer) noexcept (true);


extern double difftime (time_t __time1, time_t __time0)
     noexcept (true) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) noexcept (true);
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) noexcept (true);




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     noexcept (true);






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) noexcept (true);






extern struct tm *gmtime (const time_t *__timer) noexcept (true);



extern struct tm *localtime (const time_t *__timer) noexcept (true);
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) noexcept (true);



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) noexcept (true);
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) noexcept (true);



extern char *ctime (const time_t *__timer) noexcept (true);
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) noexcept (true);



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) noexcept (true);
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) noexcept (true);



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) noexcept (true);

extern time_t timelocal (struct tm *__tp) noexcept (true);
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) noexcept (true) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) noexcept (true);


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) noexcept (true);


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     noexcept (true);
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) noexcept (true);




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) noexcept (true);


extern int timer_delete (timer_t __timerid) noexcept (true);



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) noexcept (true);


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     noexcept (true);
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) noexcept (true);






extern int timespec_get (struct timespec *__ts, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 387 "/usr/include/time.h" 3 4
extern int timespec_getres (struct timespec *__ts, int __base)
     noexcept (true);
# 413 "/usr/include/time.h" 3 4
extern int getdate_err;
# 422 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 436 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 31 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/pthread_stack_min-dynamic.h" 1 3 4
# 23 "/usr/include/bits/pthread_stack_min-dynamic.h" 3 4
extern "C" {
extern long int __sysconf (int __name) noexcept (true);
}
# 34 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) noexcept (true);
# 233 "/usr/include/pthread.h" 3 4
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 243 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) noexcept (true);



extern pthread_t pthread_self (void) noexcept (true) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  noexcept (true) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,
           const __sigset_t *sigmask);




extern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,
           __sigset_t *sigmask);







extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     noexcept (true);




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) noexcept (true);


extern int pthread_setconcurrency (int __level) noexcept (true);



extern int pthread_yield (void) noexcept (true);

extern int pthread_yield (void) noexcept (true) __asm__ ("" "sched_yield")
  __attribute__ ((__deprecated__ ("pthread_yield is deprecated, use sched_yield instead")));
# 489 "/usr/include/pthread.h" 3 4
extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
                            ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
                         ;
# 732 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
                            ;
# 745 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
                         ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
                             __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 773 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp (struct __jmp_buf_tag __env[1],
   int __savemask) noexcept (true);






extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_consistent_np (pthread_mutex_t *) noexcept (true) __asm__ ("" "pthread_mutex_consistent") __attribute__ ((__nonnull__ (1)))

  __attribute__ ((__deprecated__ ("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent")));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_getrobust_np (pthread_mutexattr_t *, int *) noexcept (true) __asm__ ("" "pthread_mutexattr_getrobust") __attribute__ ((__nonnull__ (1)))


  __attribute__ ((__deprecated__ ("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust")));







extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *, int) noexcept (true) __asm__ ("" "pthread_mutexattr_setrobust") __attribute__ ((__nonnull__ (1)))


  __attribute__ ((__deprecated__ ("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust")));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1004 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1051 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1171 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) noexcept (true);


extern void *pthread_getspecific (pthread_key_t __key) noexcept (true);


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  noexcept (true) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) noexcept (true);
# 1346 "/usr/include/pthread.h" 3 4
}
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 2 3
# 47 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/atomicity.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 3




# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/allocator.h" 1 3
# 46 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/allocator.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/new_allocator.h" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
 new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();
# 111 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      {







 ::operator delete(__p);
      }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }
# 151 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/allocator.h" 2 3
# 57 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }

    };
# 107 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
 allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }



  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {
# 264 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/allocator.h" 3
 return false;

      }
    };



}
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 2 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ostream_insert.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ostream_insert.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cxxabi_forced.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 2 3



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 1 3
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 104 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x > __y))
   return __x > __y;
 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x < __y))
   return __x < __y;
 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x >= __y))
   return __x >= __y;
 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x <= __y))
   return __x <= __y;
 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 750 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 978 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1055 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1178 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/backward/binders.h" 1 3
# 60 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{
# 107 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1369 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_function.h" 2 3
# 49 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 2 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/range_access.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/range_access.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/initializer_list" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/range_access.h" 2 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 324 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/range_access.h" 3
}
# 52 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/alloc_traits.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/alloc_traits.h" 3



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 1 3
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Alloc2, typename _Tp>
 static auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 static auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 299 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 314 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 326 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 341 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 354 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p, 0); }
# 366 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 377 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 434 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 448 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 460 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 472 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 484 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;


}
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 158 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/alloc_traits.h" 3
  };


}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 2 3
# 52 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 76 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:




      typedef const_iterator __const_iterator;
# 139 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 298 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)"),

       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 450 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 481 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 499 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }
# 514 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
# 529 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 541 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 609 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 656 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 713 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 731 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {

     if (__str.size())
       this->_S_copy(_M_data(), __str._M_data(), __str.size());
     _M_set_length(__str.size());
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign()
     || _Alloc_traits::_S_always_equal()
     || _M_get_allocator() == __str._M_get_allocator())
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
   assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 825 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 954 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 967 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {
# 985 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 1016 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1045 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
                                  ;
 return _M_data()[__pos];
      }
# 1062 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


                                  ;

                                                                   ;
 return _M_data()[__pos];
      }
# 1083 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }
# 1104 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
                           ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
                           ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
                           ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
                           ;
 return operator[](this->size() - 1);
      }
# 1167 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1220 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1237 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
                                        ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1279 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1303 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1348 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1379 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1402 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1418 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
                                        ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1434 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1451 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1464 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1532 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1574 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
                                                           ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1610 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                         ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }
# 1630 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1653 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1676 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1695 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1719 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1737 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1797 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1816 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1835 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
                           ;
 _M_erase(size() - 1, 1);
      }
# 1879 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1901 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1926 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
                                         ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1951 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1975 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1993 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2013 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2035 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2056 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2081 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                        ;
                                             ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2113 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2172 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2231 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2269 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2279 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2289 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2301 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2320 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2336 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2350 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2382 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2399 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2412 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2446 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2460 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2477 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2491 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2526 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2540 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2560 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2575 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2610 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2624 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2644 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2658 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2693 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2707 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2725 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2740 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2775 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2789 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2807 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2823 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2842 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2935 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2961 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2979 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 3003 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3030 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;


      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 5925 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6046 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6093 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6131 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6169 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6207 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6245 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6283 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6303 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6321 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6344 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6361 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}




# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/string_conversions.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/string_conversions.h" 3








# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
# 75 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 158 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 250 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 337 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) ;


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;
# 103 "/usr/include/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 134 "/usr/include/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 33 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4






typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4
# 49 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4
extern "C" {
# 102 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/sys/select.h" 3 4
}
# 180 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 230 "/usr/include/sys/types.h" 3 4
}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) ;


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))

                       ;


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) ;




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) noexcept (true);





}
# 574 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) ;



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 615 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 680 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 693 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 703 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 715 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 725 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 736 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 747 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 757 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 767 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 779 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 789 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
                              ;
# 806 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
# 878 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
                                      ;

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)

                                    ;






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 965 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1021 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1022 "/usr/include/stdlib.h" 2 3 4
# 1033 "/usr/include/stdlib.h" 3 4
}
# 76 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3
# 46 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 2 3
# 121 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/string_conversions.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwchar" 3
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/string_conversions.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {




# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos_t.h" 3 4
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) noexcept (true);

extern int rename (const char *__old, const char *__new) noexcept (true);



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) noexcept (true);
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) noexcept (true);






extern int fclose (FILE *__stream);
# 182 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) ;
# 194 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void)
   __attribute__ ((__malloc__)) ;



extern char *tmpnam (char[20]) noexcept (true) ;




extern char *tmpnam_r (char __s[20]) noexcept (true) ;
# 216 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   noexcept (true) __attribute__ ((__malloc__)) ;






extern int fflush (FILE *__stream);
# 233 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 243 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 252 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 277 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes)
  __attribute__ ((__malloc__)) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) noexcept (true)
  __attribute__ ((__malloc__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  noexcept (true) __attribute__ ((__malloc__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) noexcept (true);



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) noexcept (true);




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) noexcept (true);


extern void setlinebuf (FILE *__stream) noexcept (true);







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) noexcept (true);





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) noexcept (true);



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) noexcept (true);
# 428 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc99_sscanf");
# 453 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 507 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 532 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 543 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 559 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
                                                         ;
# 609 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream)
                                                  ;
# 626 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 685 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 696 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 730 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 754 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 773 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) noexcept (true);

extern int feof (FILE *__stream) noexcept (true) ;

extern int ferror (FILE *__stream) noexcept (true) ;



extern void clearerr_unlocked (FILE *__stream) noexcept (true);
extern int feof_unlocked (FILE *__stream) noexcept (true) ;
extern int ferror_unlocked (FILE *__stream) noexcept (true) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) noexcept (true) ;




extern int fileno_unlocked (FILE *__stream) noexcept (true) ;
# 817 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) ;






extern char *ctermid (char *__s) noexcept (true)
                                     ;





extern char *cuserid (char *__s)
                                     ;




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) noexcept (true);



extern int ftrylockfile (FILE *__stream) noexcept (true) ;


extern void funlockfile (FILE *__stream) noexcept (true);
# 879 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 903 "/usr/include/stdio.h" 3 4
}
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 2 3
# 96 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3
namespace __gnu_cxx
{
# 175 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/string_conversions.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cerrno" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cerrno" 3


# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/bits/errno.h" 1 3 4
# 26 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) noexcept (true) __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;


# 1 "/usr/include/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cerrno" 2 3
# 45 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6401 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }






  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}






# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/functional_hash.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 187 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6627 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };






  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push

 __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }



    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }


#pragma GCC diagnostic pop
 }
  }




}
# 53 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.tcc" 1 3
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     _M_dispose();
                            ;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid"));


 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 if (true)
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 if (false)
   {
     _M_dispose();
                            ;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1155 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1607 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/string" 2 3
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    locale() throw();
# 126 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 438 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 483 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 641 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 668 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 682 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 699 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 718 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 732 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 761 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 775 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 788 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.tcc" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 852 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_classes.h" 2 3
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 2 3




# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/system_error" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/system_error" 3






# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/error_constants.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/error_constants.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cerrno" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cerrno" 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/error_constants.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,


      wrong_protocol_type = 91
    };


}
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/system_error" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/stdexcept" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/stdexcept" 3




namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;


    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;


    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;

    virtual ~underflow_error() noexcept;
  };




}
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/system_error" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 71 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/system_error" 3
  inline namespace _V2 {


  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 110 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std __attribute__ ((__visibility__ ("default")))
{





  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };
# 415 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/system_error" 3
}
# 47 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 2147483647,
      _S_ios_fmtflags_min = ~2147483647
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 2147483647,
      _S_ios_openmode_min = ~2147483647
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 2147483647,
      _S_ios_iostate_min = ~2147483647
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 228 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
  class ios_base
  {
# 246 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
  public:
# 255 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;



    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 489 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 506 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 518 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 631 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 647 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 664 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 690 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 741 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 753 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 764 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 775 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 794 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 810 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 831 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 848 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 862 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 121 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 215 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 232 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 245 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 257 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 269 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 290 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 304 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 322 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 344 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 363 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 378 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 403 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 430 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 456 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 470 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 488 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 504 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 515 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 535 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 551 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 561 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 582 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 597 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 608 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 620 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 633 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual int
      sync() { return 0; }
# 655 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 671 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 693 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 706 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 730 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 748 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 774 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 790 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 3
      [[__deprecated__("stossc is deprecated, use sbumpc instead")]]

      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);





}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/streambuf.tcc" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 863 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/streambuf" 2 3
# 44 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwctype" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwctype" 3
# 50 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) noexcept (true);





extern int iswalpha (wint_t __wc) noexcept (true);


extern int iswcntrl (wint_t __wc) noexcept (true);



extern int iswdigit (wint_t __wc) noexcept (true);



extern int iswgraph (wint_t __wc) noexcept (true);




extern int iswlower (wint_t __wc) noexcept (true);


extern int iswprint (wint_t __wc) noexcept (true);




extern int iswpunct (wint_t __wc) noexcept (true);




extern int iswspace (wint_t __wc) noexcept (true);




extern int iswupper (wint_t __wc) noexcept (true);




extern int iswxdigit (wint_t __wc) noexcept (true);





extern int iswblank (wint_t __wc) noexcept (true);
# 155 "/usr/include/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) noexcept (true);



extern int iswctype (wint_t __wc, wctype_t __desc) noexcept (true);






extern wint_t towlower (wint_t __wc) noexcept (true);


extern wint_t towupper (wint_t __wc) noexcept (true);

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) noexcept (true);


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) noexcept (true);







extern int iswalnum_l (wint_t __wc, locale_t __locale) noexcept (true);





extern int iswalpha_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswcntrl_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswdigit_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswgraph_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswprint_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswpunct_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswspace_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswupper_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswxdigit_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswblank_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     noexcept (true);



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     noexcept (true);






extern wint_t towlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern wint_t towupper_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     noexcept (true);


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) noexcept (true);



}
# 51 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwctype" 2 3
# 80 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cctype" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cctype" 3
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/ctype_base.h" 1 3
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;

    static const mask blank = _ISblank;

  };


}
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 2 3






# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/streambuf_iterator.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 139 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

                               ;


                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {


                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 49 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 71 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 930 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 963 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1013 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1030 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1046 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1063 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1083 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1106 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1133 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1159 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1185 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1218 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1229 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1253 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1272 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1290 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1308 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1325 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1342 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1358 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1375 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1395 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1417 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1440 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1466 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1539 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1669 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1707 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1721 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1735 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1748 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1779 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1792 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1805 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1822 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1834 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1847 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1860 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1873 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}
# 1951 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1972 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1998 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2035 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2095 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2138 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2211 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2274 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2292 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2313 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2331 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2373 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2436 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2461 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2509 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2567 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 139 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1206 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2656 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/locale_facets.h" 2 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.tcc" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/basic_ios.h" 2 3
# 45 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ios" 2 3
# 39 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 57 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      flush();
# 357 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      pos_type
      tellp();
# 368 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 425 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 444 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 454 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 473 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 495 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 537 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 588 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 600 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }


  template<typename _Ch, typename _Up>
    basic_ostream<_Ch, _Up>&
    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_ostream_impl
    {
      using __ostream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_ostream_impl =
    decltype(__is_convertible_to_basic_ostream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
    {
      using __ostream_type =
 __do_is_convertible_to_basic_ostream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream
    : __is_convertible_to_basic_ostream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Ostream, typename _Tp, typename = void>
    struct __is_insertable : false_type {};

  template<typename _Ostream, typename _Tp>
    struct __is_insertable<_Ostream, _Tp,
      __void_t<decltype(declval<_Ostream&>()
          << declval<const _Tp&>())>>
        : true_type {};

  template<typename _Ostream>
    using __rvalue_ostream_type =
      typename __is_convertible_to_basic_ostream<
 _Ostream>::__ostream_type;
# 674 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 3
  template<typename _Ostream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
         __is_convertible_to_basic_ostream<_Ostream>,
         __is_insertable<
    __rvalue_ostream_type<_Ostream>,
    const _Tp&>>::value,
         __rvalue_ostream_type<_Ostream>>::type
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __rvalue_ostream_type<_Ostream> __ret_os = __os;
      __ret_os << __x;
      return __ret_os;
    }



}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ostream.tcc" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 694 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ostream" 2 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iostream" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 57 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      int_type
      get();
# 315 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      int_type
      peek();
# 485 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      unget();
# 555 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      int
      sync();
# 570 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      pos_type
      tellg();
# 585 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);


  template<typename _Ch, typename _Up>
    basic_istream<_Ch, _Up>&
    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_istream_impl
    {
      using __istream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_istream_impl =
    decltype(__is_convertible_to_basic_istream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_istream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
    {
      using __istream_type =
 __do_is_convertible_to_basic_istream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_istream
    : __is_convertible_to_basic_istream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Istream, typename _Tp, typename = void>
    struct __is_extractable : false_type {};

  template<typename _Istream, typename _Tp>
    struct __is_extractable<_Istream, _Tp,
       __void_t<decltype(declval<_Istream&>()
           >> declval<_Tp>())>>
    : true_type {};

  template<typename _Istream>
    using __rvalue_istream_type =
      typename __is_convertible_to_basic_istream<
 _Istream>::__istream_type;
# 972 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 3
  template<typename _Istream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
         __is_convertible_to_basic_istream<_Istream>,
         __is_extractable<
    __rvalue_istream_type<_Istream>,
    _Tp&&>>::value,
         __rvalue_istream_type<_Istream>>::type
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __rvalue_istream_type<_Istream> __ret_is = __is;
      __ret_is >> std::forward<_Tp>(__x);
      return __ret_is;
    }



}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/istream.tcc" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 if (true)
   {
     if (__in.tie())
       __in.tie()->flush();
     if (!__noskip && bool(__in.flags() & ios_base::skipws))
       {
  const __int_type __eof = traits_type::eof();
  __streambuf_type* __sb = __in.rdbuf();
  __int_type __c = __sb->sgetc();

  const __ctype_type& __ct = __check_facet(__in._M_ctype);
  while (!traits_type::eq_int_type(__c, __eof)
         && __ct.is(ctype_base::space,
      traits_type::to_char_type(__c)))
    __c = __sb->snextc();




  if (traits_type::eq_int_type(__c, __eof))
    __err |= ios_base::eofbit;
       }
   }
 if (false)
   {
     __in._M_setstate(ios_base::badbit);
                            ;
   }
 if (false)
   { __in._M_setstate(ios_base::badbit); }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 521 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 992 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/istream" 2 3
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 2 "myproject.cpp" 2

# 1 "./myproject.h" 1



# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 1








# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h" 1
# 41 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h" 1
# 54 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 76 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 133 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 187 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 42 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h" 2
# 164 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 507 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  typedef int __attribute__((bitwidth(_AP_N))) DataType;
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(){};
                inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(int o __attribute__((bitwidth(_AP_N)))):V(o){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  typedef unsigned __attribute__((bitwidth(_AP_N))) DataType;
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(){};
                inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(unsigned o __attribute__((bitwidth(_AP_N)))):V(o){};
};
# 575 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 576 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 587 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 718 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 10 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h" 1
# 16 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 1
# 11 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h" 1
# 40 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 private:
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;
  static const bool sign_flag = _AP_S;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 208 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const bool op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const signed char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_slong op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_ulong op):Base(op) { Base::V = op; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1 << (8 - 1)) - 1);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - bias;

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    op.checkOverflowCsimFix(_AP_W, _AP_S);
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 387 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }


  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;
# 481 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





                inline __attribute__((always_inline)) __attribute__((nodebug)) operator RetType() const { return (RetType)(Base::V); }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return (bool)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return (char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) signed char to_schar() const { return (signed char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) short to_short() const { return (short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return (int)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return (unsigned)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const { return (long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const { return (double)(Base::V); }
# 586 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const volatile { return _AP_W; }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool iszero() const { return Base::V == 0; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == 0; }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not() { Base::V = ~Base::V; }

  template<typename T>
                inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowBaseC(T val) {
# 757 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
    (void)val;

    return;
  }

                inline __attribute__((always_inline)) __attribute__((nodebug)) bool checkOverflowCsim(int _ap_w2, bool _ap_s2,
          bool print = true) const {
# 807 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
      (void)_ap_w2;
      (void)_ap_s2;
      (void)print;

      return 0;
  }
# 841 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 859 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == 0; }





                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 970 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 1019 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 1128 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1195 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1213_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1435 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1496 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret(0); ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret(0); ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret(0); ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V ^ rhs.V; return ret; }
# 1515 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret(0); ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret(0); ret.V = op.V % op2.V; return ret; }
# 1543 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1572 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1597 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1629 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1668 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1692 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
# 1723 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1756 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1784 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1821 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1851 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1882 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1914 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1933 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1960 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1991 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 2023 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 2042 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 2149 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 12 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h" 1
# 27 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 70 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 258 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }
# 339 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_676_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_690_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_704_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 720 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 760 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 798 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 820 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 1018 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1077 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1100 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1128 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1177 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1324 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1348 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 13 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int() {}
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int<_AP_W2>& op): Base((ap_int_base<_AP_W2, true>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_uint<_AP_W2>& op): Base((ap_int_base<_AP_W2, false>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw): Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}







  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(bool val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(signed char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_slong val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_ulong val):Base(val){ this->checkOverflowBaseC(val); }

                ap_int(double val) : Base(val) {}
                ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;
# 161 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint() {}
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_uint<_AP_W2>& op):Base((ap_int_base<_AP_W2, false>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int<_AP_W2>& op):Base((ap_int_base<_AP_W2, true>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw):Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}






  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(bool val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(signed char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_slong val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_ulong val):Base(val) { this->checkOverflowBaseC(val); }

                ap_uint(double val) : Base(val) {}
                ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}





  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;
# 317 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};
# 352 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h" 1
# 20 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  __attribute__((nodebug)) const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 181 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h"
template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 353 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 2
# 17 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h" 2
# 87 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 108 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 295 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) void report() {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op):Base(op.V) {

    operator=(op);



    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp(0);
    tmp.V = op.V;

    operator=(tmp);



    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 458 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 526 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          __attribute__((nodebug)) ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - bias;
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });


    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 800 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2(0);
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1(0);
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowCsimFix(int _ap_w2, bool _ap_s2) const {
# 973 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
      (void)_ap_w2;
      (void)_ap_s2;

      return;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret(0);
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 1002 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != (unsigned long)0))


        ret = ret + 1;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return to_ap_int_base().to_char(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return to_ap_int_base().to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int<_AP_I> to_ap_int() const { return ap_int<_AP_I>(to_ap_int_base()); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp(0);
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (11 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m = 0;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (8 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (5 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator half() const { return to_half(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return (bool)Base::V != 0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator char() const { return (char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator signed char() const { return (signed char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned char() const { return (unsigned char)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator short() const { return (short)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned short() const { return (unsigned short)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator int() const { return to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned int() const { return to_uint(); }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator long() const { return (long)to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned long() const { return (unsigned long)to_uint64(); }






                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_slong() const { return to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; };
# 1231 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1247_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r(0), t(0);
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1301 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1334 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }
# 1349 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1367 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type operator+() { return *this; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W + 1, _AP_I + 1, true>::type operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == (unsigned long)0; }




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V << sh;
# 1485 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V >> sh;
# 1507 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r(0);
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1651 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1737 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == (unsigned long)0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int wl() const { return _AP_W; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int iwl() const { return _AP_I; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_q_mode q_mode() const { return _AP_Q; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_o_mode o_mode() const { return _AP_O; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int n_bits() const { return _AP_N; }
# 1920 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t(0);
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2372 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2460 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 11 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h" 1
# 25 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 212 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 242 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 254 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  }
# 266 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 615 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 679 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 725 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 12 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 66 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 101 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}







  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 168 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 237 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 269 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}



  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 327 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 365 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h" 1
# 20 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 190 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 323 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 366 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2
# 5 "./myproject.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 1
# 6 "./myproject.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream.h" 1
# 15 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream_39.h" 1
# 26 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream_39.h"
namespace hls {
# 52 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream_39.h"
template<typename __STREAM_T__, int DEPTH=0>
class stream;

template<typename __STREAM_T__>
class stream<__STREAM_T__, 0>
{
  public:
    using value_type = __STREAM_T__;

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
      __fpga_set_stream_depth(&this->V, 0);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
      (void)(name);
      __fpga_set_stream_depth(&this->V, 0);
    }


  private:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool empty() const {
        return !__fpga_fifo_not_empty(&V);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) bool full() const {
        return !__fpga_fifo_not_full(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void read(__STREAM_T__& dout) {
        __fpga_fifo_pop(&V, &dout);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool read_dep(__STREAM_T__& dout, volatile bool flag) {
        __fpga_fifo_pop(&V, &dout);
        return flag;
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) __STREAM_T__ read() {
        __STREAM_T__ tmp;
        read(tmp);
        return tmp;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;

        if (__fpga_fifo_nb_pop(&V, &tmp)) {
            dout = tmp;
            return true;
        } else {
            return false;
        }
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const __STREAM_T__& din) {
        __fpga_fifo_push(&V, &din);
    }


    inline __attribute__((noinline)) __attribute__((nodebug)) bool write_dep(const __STREAM_T__& din, volatile bool flag) {
        __fpga_fifo_push(&V, &din);
        return flag;
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) bool write_nb(const __STREAM_T__& din) {
        return __fpga_fifo_nb_push(&V, &din);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned size() const {
        return __fpga_fifo_size(&V);
    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned capacity() const {
        return __fpga_fifo_capacity(&V);
    }


    void set_name(const char* name) { (void)(name); }

  public:
    __STREAM_T__ V __attribute__((no_ctor));
};

template<typename __STREAM_T__, int DEPTH>
class stream : public stream<__STREAM_T__, 0> {
  public:
    inline __attribute__((always_inline)) __attribute__((nodebug)) stream() {
      __fpga_set_stream_depth(&this->V, DEPTH);
    }

    inline __attribute__((always_inline)) __attribute__((nodebug)) stream(const char* name) {
      (void)(name);
      __fpga_set_stream_depth(&this->V, DEPTH);
    }
};
}
# 16 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_stream.h" 2
# 7 "./myproject.h" 2

# 1 "./defines3.h" 1




# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 1
# 6 "./defines3.h" 2
# 1 "./nnet_utils/nnet_types.h" 1



# 1 "/usr/include/assert.h" 1 3 4
# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__));


}
# 5 "./nnet_utils/nnet_types.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstddef" 1 3
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstddef" 3







# 1 "/data/Xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3
# 51 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 6 "./nnet_utils/nnet_types.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3
# 7 "./nnet_utils/nnet_types.h" 2

namespace nnet {


template <typename T, unsigned N> struct array {
    typedef T value_type;
    static const unsigned size = N;

    T data[N];

    T &operator[](size_t pos) { return data[pos]; }

    const T &operator[](size_t pos) const { return data[pos]; }

    array &operator=(const array &other) {
        if (&other == this)
            return *this;

        ({ bool _AssertPred = N == other.size && "Array sizes must match."; __builtin_assume(_AssertPred); });

        VITIS_LOOP_27_1: for (unsigned i = 0; i < N; i++) {
#pragma HLS UNROLL
 data[i] = other[i];
        }
        return *this;
    }
};

}
# 7 "./defines3.h" 2

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3
# 9 "./defines3.h" 2
# 47 "./defines3.h"
typedef nnet::array<ap_fixed<15,15>, 1*1> input_t;
typedef nnet::array<ap_fixed<16,6>, 1*1> layer2_t;
typedef ap_fixed<16,6> model_default_t;
typedef nnet::array<ap_fixed<16,6>, 32*1> layer3_t;
typedef ap_fixed<16,6> conv2d_weight_t;
typedef ap_fixed<16,6> conv2d_bias_t;
typedef nnet::array<ap_fixed<16,6>, 32*1> layer5_t;
typedef nnet::array<ap_fixed<16,6>, 64*1> layer6_t;
typedef ap_fixed<16,6> conv2d_1_weight_t;
typedef ap_fixed<16,6> conv2d_1_bias_t;
typedef nnet::array<ap_fixed<16,6>, 64*1> layer8_t;
typedef nnet::array<ap_fixed<16,6>, 64*1> layer9_t;
typedef ap_fixed<16,6> conv2d_2_weight_t;
typedef ap_fixed<16,6> conv2d_2_bias_t;
typedef nnet::array<ap_fixed<16,6>, 64*1> layer11_t;
typedef nnet::array<ap_fixed<16,6>, 32*1> layer12_t;
typedef ap_fixed<16,6> conv2d_3_weight_t;
typedef ap_fixed<16,6> conv2d_3_bias_t;
typedef nnet::array<ap_fixed<16,6>, 32*1> layer14_t;
typedef nnet::array<ap_fixed<16,6>, 8*1> layer16_t;
typedef ap_fixed<16,6> dense_weight_t;
typedef ap_fixed<16,6> dense_bias_t;
typedef ap_uint<1> layer16_index;
typedef nnet::array<ap_fixed<16,6>, 3*1> layer18_t;
typedef ap_fixed<16,6> dense_1_weight_t;
typedef ap_fixed<16,6> dense_1_bias_t;
typedef ap_uint<1> layer18_index;
typedef nnet::array<ap_fixed<16,6>, 3*1> result_t;
typedef ap_fixed<18,8> dense_1_softmax_table_t;
typedef ap_fixed<18,8,AP_RND,AP_SAT> dense_1_softmax_exp_table_t;
typedef ap_fixed<18,8,AP_RND,AP_SAT> dense_1_softmax_inv_table_t;
# 9 "./myproject.h" 2


void myproject(
    hls::stream<input_t> &zero_padding2d_input,
    hls::stream<result_t> &layer19_out
);
# 4 "myproject.cpp" 2
# 1 "./parameters.h" 1




# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 1
# 6 "./parameters.h" 2

# 1 "./nnet_utils/nnet_code_gen.h" 1



# 1 "./nnet_utils/nnet_helpers.h" 1




# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/algorithm" 1 3
# 59 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/algorithm" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/utility" 1 3
# 59 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/utility" 3
# 69 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/utility" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_relops.h" 1 3
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 85 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 70 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/utility" 2 3








namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };




  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }




  template<size_t... _Indexes> struct _Index_tuple { };
# 298 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/utility" 3
  template<size_t _Num>
    struct _Build_index_tuple
    {

      template<typename, size_t... _Indices>
        using _IdxTuple = _Index_tuple<_Indices...>;

      using __type = __make_integer_seq<_IdxTuple, size_t, _Num>;



    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence

      = __make_integer_seq<integer_sequence, _Tp, _Num>;







  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 394 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/utility" 3
}
# 61 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/algorithm" 2 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 1 3
# 59 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
# 60 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/algorithmfwd.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/algorithmfwd.h" 3








namespace std __attribute__ ((__visibility__ ("default")))
{
# 195 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);
# 224 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  inline namespace _V2
  {
    template<typename _FIter>
      _FIter
      rotate(_FIter, _FIter, _FIter);
  }

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 565 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);
# 594 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);



  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);



}
# 61 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 1 3
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare& __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return std::__is_heap_until(__first, __n, __comp) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __n, __cmp) == __n;
    }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      return std::__is_heap(__first, std::move(__comp),
       std::distance(__first, __last));
    }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare& __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 152 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                     ;
                                                  ;

      __gnu_cxx::__ops::_Iter_less_val __comp;
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }
# 187 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                                  ;
                                                               ;

      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 269 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                         ;
                                                     ;
                                                     ;
                                              ;

      if (__last - __first > 1)
 {
   --__last;
   __gnu_cxx::__ops::_Iter_less_iter __comp;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 302 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                                  ;
                                                         ;
                                                           ;

      if (__last - __first > 1)
 {
   typedef __decltype(__comp) _Cmp;
   __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
   --__last;
   std::__pop_heap(__first, __last, __last, __cmp);
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 358 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                                     ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__make_heap(__first, __last, __comp);
    }
# 384 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                                  ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 420 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                                     ;
                                              ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__sort_heap(__first, __last, __comp);
    }
# 447 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                                  ;
                                                           ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__sort_heap(__first, __last, __cmp);
    }
# 475 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                                     ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last), __comp);
    }
# 503 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;
                                                                  ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last), __cmp);
    }
# 527 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 540 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    {



                                                     ;
                                                                  ;

      const auto __dist = std::distance(__first, __last);
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __dist, __cmp) == __dist;
    }



}
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tempbuf.h" 1 3
# 60 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tempbuf.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_construct.h" 1 3
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 87 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_construct.h" 3
  template<typename _T1>
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }




  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  template<bool>
    struct _Destroy_n_aux
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   for (; __count > 0; (void)++__first, --__count)
     std::_Destroy(std::__addressof(*__first));
   return __first;
 }
    };

  template<>
    struct _Destroy_n_aux<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   std::advance(__first, __count);
   return __first;
 }
    };






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 __destroy_n(__first, __count);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }
# 233 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_construct.h" 3
}
# 61 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tempbuf.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 83 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   if (true)
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      if (true)
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      if (false)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
                          ;
 }
    }


}
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 2 3



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/uniform_int_dist.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/uniform_int_dist.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 1 3
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
# 158 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 288 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 311 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };




  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };
# 382 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -127 - 1; }

      static constexpr signed char
      max() noexcept { return 127; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -32767 - 1; }

      static constexpr short
      max() noexcept { return 32767; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -2147483647 - 1; }

      static constexpr int
      max() noexcept { return 2147483647; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -9223372036854775807L - 1; }

      static constexpr long
      max() noexcept { return 9223372036854775807L; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 9223372036854775807L * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() noexcept { return 9223372036854775807LL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1570 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
  template<> struct numeric_limits<__int128> { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static constexpr __int128 max() noexcept { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static constexpr int digits = 128 - 1; static constexpr int digits10 = (128 - 1) * 643L / 2136; static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast<__int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast<__int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits<unsigned __int128> { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = 128 * 643L / 2136; static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast<unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; };
# 1593 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435e-38F; }

      static constexpr float
      max() noexcept { return 3.40282347e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209290e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return 2.2250738585072014e-308; }

      static constexpr double
      max() noexcept { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() noexcept { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 2.2250738585072014e-308L; }

      static constexpr long double
      max() noexcept { return 1.7976931348623157e+308L; }


      static constexpr long double
      lowest() noexcept { return -1.7976931348623157e+308L; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 2.2204460492503131e-16L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 4.9406564584124654e-324L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/uniform_int_dist.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace __detail
  {

    template<typename _Tp>
      inline bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      }
  }






  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument must be an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                 ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

 friend bool
 operator!=(const param_type& __p1, const param_type& __p2)
 { return !(__p1 == __p2); }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 264 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 348 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      const __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }




}
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, (void) ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 202 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }






  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
  return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 423 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 471 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 506 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 523 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 541 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 556 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 580 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      if (__first == __last)
 return true;
      ++__first;
      return std::none_of(__first, __last, __pred);
    }
# 601 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 668 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 700 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 734 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 797 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 825 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 840 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = std::move(*__first);
     ++__result;
   }
      return __result;
    }
# 894 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 927 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 993 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1023 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {






                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {




      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1178 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1205 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

  inline namespace _V2
  {


  template<typename _ForwardIterator>
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }


  template<typename _BidirectionalIterator>
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }


  template<typename _RandomAccessIterator>
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }
# 1432 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

  }
# 1469 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
  _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
         std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 1546 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;




   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }

   std::move(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);



      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      _DistanceType(__buf.requested_size()),
      __buf.begin(),
      _DistanceType(__buf.size()));
    }
# 1649 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1735 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
# 1755 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                     ;
                                                     ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1784 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
# 1809 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                     ;
                                                                  ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2021 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {





                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2075 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2105 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {





                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2176 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {






                                                                  ;
                                                                  ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2212 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {







                    ;

                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2245 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val)
    {




                                                                  ;
                                                                  ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2278 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {





                    ;

                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
       _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
   _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }
# 2572 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {





                                                  ;
                                                 ;
                                                     ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2613 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {






                                                               ;
                                                              ;
                                                                  ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
        _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Pointer __buffer, _Distance __buffer_size,
      _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2785 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   {
     ++__first1;
     ++__first2;
   }

      return __first2 == __last2;
    }
# 2824 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
# 2838 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;
                                                        ;
                                                        ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2868 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
# 2884 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;
                                                                     ;
                                                                     ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2903 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2952 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;
                                                     ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2984 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;
                                                                  ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3052 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;
                                                     ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;
                                                                  ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, (void)++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3134 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3168 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }

  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }
# 3207 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3221 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, (void)++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3250 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
                                                     ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3274 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;
                                                                  ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3299 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _Tp>
    constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3320 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min{}, __max{};
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3400 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
                                                     ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3428 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;
                                                                  ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _Tp>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3540 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3571 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
       _BinaryPredicate __pred)
    {
      using _Cat1
 = typename iterator_traits<_ForwardIterator1>::iterator_category;
      using _Cat2
 = typename iterator_traits<_ForwardIterator2>::iterator_category;
      using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
      using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
      constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
      if (__ra_iters)
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
 }



      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__ra_iters)
 {
   if (__first1 == __last1)
     return true;
 }
      else
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 == 0 && __d2 == 0)
     return true;
   if (__d1 != __d2)
     return false;
 }

      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches = std::__count_if(__first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches
       || std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3664 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
                                                       ;
                                                       ;

      return
 std::__is_permutation(__first1, __last1, __first2, __last2,
         __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3691 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
     _BinaryPredicate __pred)
    {
                                                       ;
                                                       ;

      return std::__is_permutation(__first1, __last1, __first2, __last2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3767 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _IntType, typename _UniformRandomBitGenerator>
    pair<_IntType, _IntType>
    __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
      _UniformRandomBitGenerator&& __g)
    {
      _IntType __x
 = uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
      return std::make_pair(__x / __b1, __x % __b1);
    }
# 3789 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;

      typedef typename remove_reference<_UniformRandomNumberGenerator>::type
 _Gen;
      typedef typename common_type<typename _Gen::result_type, __ud_type>::type
 __uc_type;

      const __uc_type __urngrange = __g.max() - __g.min();
      const __uc_type __urange = __uc_type(__last - __first);

      if (__urngrange / __urange >= __urange)

      {
 _RandomAccessIterator __i = __first + 1;





 if ((__urange % 2) == 0)
 {
   __distr_type __d{0, 1};
   std::iter_swap(__i++, __first + __d(__g));
 }





 while (__i != __last)
 {
   const __uc_type __swap_range = __uc_type(__i - __first) + 1;

   const pair<__uc_type, __uc_type> __pospos =
     __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);

   std::iter_swap(__i++, __first + __pospos.first);
   std::iter_swap(__i++, __first + __pospos.second);
 }

 return;
      }

      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 3874 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }
# 3895 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3919 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3950 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3990 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4022 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4047 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 4072 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 4095 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4135 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4174 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }
# 4209 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4242 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4290 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, (void)++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4327 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4360 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4392 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4424 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4455 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __gen();
      return __first;
    }
# 4491 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4531 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4564 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {

     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 4599 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4639 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4672 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {





                                                       ;
                                                      ;
                                                     ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4710 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {






                                                       ;
                                                      ;
                                                                  ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4746 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {





                                                    ;
                                                   ;
                                                     ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4785 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {






                                                    ;
                                                   ;
                                                                  ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4822 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                                     ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4852 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;
                                                                  ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4913 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
# 4930 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;
                                                        ;
                                                        ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4963 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
# 4980 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;
                                                                     ;
                                                                     ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5027 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                                     ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 5061 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;
                                                                  ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5130 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 5150 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;
                                                        ;
                                                        ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5180 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5200 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;
                                                                     ;
                                                                     ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5251 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 5269 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;
                                                        ;
                                                        ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5300 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5318 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;
                                                                     ;
                                                                     ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5373 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
# 5391 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;
                                                        ;
                                                        ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5424 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
# 5442 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;
                                                                     ;
                                                                     ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5503 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
# 5523 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                ;
                                                                ;
                                                        ;
                                                        ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5554 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
# 5575 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;
                                                                     ;
                                                                     ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5607 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
                                                     ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5632 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;
                                                                  ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5671 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
                                                     ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5696 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;
                                                                  ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
           typename _Size, typename _UniformRandomBitGenerator>
    _RandomAccessIterator
    __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,
      _RandomAccessIterator __out, random_access_iterator_tag,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      __distrib_type __d{};
      _Size __sample_sz = 0;
      while (__first != __last && __sample_sz != __n)
 {
   __out[__sample_sz++] = *__first;
   ++__first;
 }
      for (auto __pop_sz = __sample_sz; __first != __last;
   ++__first, (void) ++__pop_sz)
 {
   const auto __k = __d(__g, __param_type{0, __pop_sz});
   if (__k < __n)
     __out[__k] = *__first;
 }
      return __out + __sample_sz;
    }


  template<typename _ForwardIterator, typename _OutputIterator, typename _Cat,
           typename _Size, typename _UniformRandomBitGenerator>
    _OutputIterator
    __sample(_ForwardIterator __first, _ForwardIterator __last,
      forward_iterator_tag,
      _OutputIterator __out, _Cat,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      using _USize = make_unsigned_t<_Size>;
      using _Gen = remove_reference_t<_UniformRandomBitGenerator>;
      using __uc_type = common_type_t<typename _Gen::result_type, _USize>;

      __distrib_type __d{};
      _Size __unsampled_sz = std::distance(__first, __last);
      __n = std::min(__n, __unsampled_sz);




      const __uc_type __urngrange = __g.max() - __g.min();
      if (__urngrange / __uc_type(__unsampled_sz) >= __uc_type(__unsampled_sz))


        {
   while (__n != 0 && __unsampled_sz >= 2)
     {
       const pair<_Size, _Size> __p =
  __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);

       --__unsampled_sz;
       if (__p.first < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;

       if (__n == 0) break;

       --__unsampled_sz;
       if (__p.second < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;
     }
        }



      for (; __n != 0; ++__first)
 if (__d(__g, __param_type{0, --__unsampled_sz}) < __n)
   {
     *__out++ = *__first;
     --__n;
   }
      return __out;
    }
# 5841 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_algo.h" 3
}
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/algorithm" 2 3
# 6 "./nnet_utils/nnet_helpers.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 1 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 273 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),
 _M_c_locale_codecvt(0)
      { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
      friend class messages<char>;

    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };






  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
      friend class messages<wchar_t>;

    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };
# 467 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/codecvt.h" 3
  template<>
    class codecvt<char16_t, char, mbstate_t>
    : public __codecvt_abstract_base<char16_t, char, mbstate_t>
    {
    public:

      typedef char16_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char16_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<>
    class codecvt<char32_t, char, mbstate_t>
    : public __codecvt_abstract_base<char32_t, char, mbstate_t>
    {
    public:

      typedef char32_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char32_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }


      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~codecvt_byname() { }
    };


  template<>
    class codecvt_byname<char16_t, char, mbstate_t>
    : public codecvt<char16_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char16_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };

  template<>
    class codecvt_byname<char32_t, char, mbstate_t>
    : public codecvt<char32_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char32_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };





  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);



  extern template class codecvt_byname<char16_t, char, mbstate_t>;
  extern template class codecvt_byname<char32_t, char, mbstate_t>;





}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/basic_file.h" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/basic_file.h" 3


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++io.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++io.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdio" 3
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/basic_file.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();


      __basic_file(__basic_file&& __rv, __c_lock* = 0) noexcept
      : _M_cfile(__rv._M_cfile), _M_cfile_created(__rv._M_cfile_created)
      {
 __rv._M_cfile = nullptr;
 __rv._M_cfile_created = false;
      }

      __basic_file& operator=(const __basic_file&) = delete;
      __basic_file& operator=(__basic_file&&) = delete;

      void
      swap(__basic_file& __f) noexcept
      {
 std::swap(_M_cfile, __f._M_cfile);
 std::swap(_M_cfile_created, __f._M_cfile_created);
      }


      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 79 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {

      template<typename _Tp>
 using __chk_state = __and_<is_copy_assignable<_Tp>,
       is_copy_constructible<_Tp>,
       is_default_constructible<_Tp>>;

      static_assert(__chk_state<typename _Traits::state_type>::value,
      "state_type must be CopyAssignable, CopyConstructible"
      " and DefaultConstructible");

      static_assert(is_same<typename _Traits::pos_type,
       fpos<typename _Traits::state_type>>::value,
      "pos_type must be fpos<state_type>");

    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 155 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();


      basic_filebuf(const basic_filebuf&) = delete;
      basic_filebuf(basic_filebuf&&);





      virtual
      ~basic_filebuf()
      { this->close(); }


      basic_filebuf& operator=(const basic_filebuf&) = delete;
      basic_filebuf& operator=(basic_filebuf&&);
      void swap(basic_filebuf&);






      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 304 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 314 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 344 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 376 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 396 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 442 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
 const bool __testin = _M_mode & ios_base::in;
 const bool __testout = (_M_mode & ios_base::out
    || _M_mode & ios_base::app);

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 475 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 502 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 512 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 528 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 552 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      basic_ifstream(const basic_ifstream&) = delete;

      basic_ifstream(basic_ifstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __istream_type::set_rdbuf(&_M_filebuf); }
# 566 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      ~basic_ifstream()
      { }




      basic_ifstream&
      operator=(const basic_ifstream&) = delete;

      basic_ifstream&
      operator=(basic_ifstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ifstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 598 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 624 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 644 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 677 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 700 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 727 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 737 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 754 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 778 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      basic_ofstream(const basic_ofstream&) = delete;

      basic_ofstream(basic_ofstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __ostream_type::set_rdbuf(&_M_filebuf); }
# 792 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      ~basic_ofstream()
      { }




      basic_ofstream&
      operator=(const basic_ofstream&) = delete;

      basic_ofstream&
      operator=(basic_ofstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ofstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 824 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 850 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 870 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 903 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 926 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 954 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }






      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 1000 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      basic_fstream(const basic_fstream&) = delete;

      basic_fstream(basic_fstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __iostream_type::set_rdbuf(&_M_filebuf); }
# 1014 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      ~basic_fstream()
      { }




      basic_fstream&
      operator=(const basic_fstream&) = delete;

      basic_fstream&
      operator=(basic_fstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_fstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 1046 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 1072 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1093 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1128 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };



  template <class _CharT, class _Traits>
    inline void
    swap(basic_filebuf<_CharT, _Traits>& __x,
  basic_filebuf<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ifstream<_CharT, _Traits>& __x,
  basic_ifstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ofstream<_CharT, _Traits>& __x,
  basic_ofstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_fstream<_CharT, _Traits>& __x,
  basic_fstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }



}


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/fstream.tcc" 1 3
# 38 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/fstream.tcc" 3




namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }


  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf(basic_filebuf&& __rhs)
    : __streambuf_type(__rhs),
    _M_lock(), _M_file(std::move(__rhs._M_file), &_M_lock),
    _M_mode(std::__exchange(__rhs._M_mode, ios_base::openmode(0))),
    _M_state_beg(std::move(__rhs._M_state_beg)),
    _M_state_cur(std::move(__rhs._M_state_cur)),
    _M_state_last(std::move(__rhs._M_state_last)),
    _M_buf(std::__exchange(__rhs._M_buf, nullptr)),
    _M_buf_size(std::__exchange(__rhs._M_buf_size, 1)),
    _M_buf_allocated(std::__exchange(__rhs._M_buf_allocated, false)),
    _M_reading(std::__exchange(__rhs._M_reading, false)),
    _M_writing(std::__exchange(__rhs._M_writing, false)),
    _M_pback(__rhs._M_pback),
    _M_pback_cur_save(std::__exchange(__rhs._M_pback_cur_save, nullptr)),
    _M_pback_end_save(std::__exchange(__rhs._M_pback_end_save, nullptr)),
    _M_pback_init(std::__exchange(__rhs._M_pback_init, false)),
    _M_codecvt(__rhs._M_codecvt),
    _M_ext_buf(std::__exchange(__rhs._M_ext_buf, nullptr)),
    _M_ext_buf_size(std::__exchange(__rhs._M_ext_buf_size, 0)),
    _M_ext_next(std::__exchange(__rhs._M_ext_next, nullptr)),
    _M_ext_end(std::__exchange(__rhs._M_ext_end, nullptr))
    {
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>&
    basic_filebuf<_CharT, _Traits>::
    operator=(basic_filebuf&& __rhs)
    {
      this->close();
      __streambuf_type::operator=(__rhs);
      _M_file.swap(__rhs._M_file);
      _M_mode = std::__exchange(__rhs._M_mode, ios_base::openmode(0));
      _M_state_beg = std::move(__rhs._M_state_beg);
      _M_state_cur = std::move(__rhs._M_state_cur);
      _M_state_last = std::move(__rhs._M_state_last);
      _M_buf = std::__exchange(__rhs._M_buf, nullptr);
      _M_buf_size = std::__exchange(__rhs._M_buf_size, 1);
      _M_buf_allocated = std::__exchange(__rhs._M_buf_allocated, false);
      _M_ext_buf = std::__exchange(__rhs._M_ext_buf, nullptr);
      _M_ext_buf_size = std::__exchange(__rhs._M_ext_buf_size, 0);
      _M_ext_next = std::__exchange(__rhs._M_ext_next, nullptr);
      _M_ext_end = std::__exchange(__rhs._M_ext_end, nullptr);
      _M_reading = std::__exchange(__rhs._M_reading, false);
      _M_writing = std::__exchange(__rhs._M_writing, false);
      _M_pback_cur_save = std::__exchange(__rhs._M_pback_cur_save, nullptr);
      _M_pback_end_save = std::__exchange(__rhs._M_pback_end_save, nullptr);
      _M_pback_init = std::__exchange(__rhs._M_pback_init, false);
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
      return *this;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    swap(basic_filebuf& __rhs)
    {
      __streambuf_type::swap(__rhs);
      _M_file.swap(__rhs._M_file);
      std::swap(_M_mode, __rhs._M_mode);
      std::swap(_M_state_beg, __rhs._M_state_beg);
      std::swap(_M_state_cur, __rhs._M_state_cur);
      std::swap(_M_state_last, __rhs._M_state_last);
      std::swap(_M_buf, __rhs._M_buf);
      std::swap(_M_buf_size, __rhs._M_buf_size);
      std::swap(_M_buf_allocated, __rhs._M_buf_allocated);
      std::swap(_M_ext_buf, __rhs._M_ext_buf);
      std::swap(_M_ext_buf_size, __rhs._M_ext_buf_size);
      std::swap(_M_ext_next, __rhs._M_ext_next);
      std::swap(_M_ext_end, __rhs._M_ext_end);
      std::swap(_M_reading, __rhs._M_reading);
      std::swap(_M_writing, __rhs._M_writing);
      std::swap(_M_pback_cur_save, __rhs._M_pback_cur_save);
      std::swap(_M_pback_end_save, __rhs._M_pback_end_save);
      std::swap(_M_pback_init, __rhs._M_pback_init);
    }


  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 if (true)
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 if (false)
   {
     _M_file.close();
                            ;
   }
 if (false)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid"));


   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file"));

     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file"));

   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file"));

 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));


   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));

     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
   if (overflow() == traits_type::eof())
     return __ret;
   _M_set_buffer(-1);
   _M_writing = false;
 }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
   && __testin)
 {

   const streamsize __avail = this->egptr() - this->gptr();
   if (__avail != 0)
     {
       traits_type::copy(__s, this->gptr(), __avail);
       __s += __avail;
       this->setg(this->eback(), this->gptr() + __avail, this->egptr());
       __ret += __avail;
       __n -= __avail;
     }



   streamsize __len;
   for (;;)
     {
       __len = _M_file.xsgetn(reinterpret_cast<char*>(__s), __n);
       if (__len == -1)
  __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file"));

       if (__len == 0)
  break;

       __n -= __len;
       __ret += __len;
       if (__n == 0)
  break;

       __s += __len;
     }

   if (__n == 0)
     {

       _M_reading = true;
     }
   else if (__len == 0)
     {



       _M_set_buffer(-1);
       _M_reading = false;
     }
 }
      else
 __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__check_facet(_M_codecvt).always_noconv()
   && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 785 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

       off_type __file_off = _M_file.seekoff(0, ios_base::cur);
       if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 1170 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/fstream" 2 3
# 7 "./nnet_utils/nnet_helpers.h" 2

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/map" 1 3
# 59 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/map" 3

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 1 3
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3







# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/aligned_buffer.h" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/aligned_buffer.h" 3







namespace __gnu_cxx
{




  template<typename _Tp>
    struct __aligned_membuf
    {





      struct _Tp2 { _Tp _M_t; };

      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];

      __aligned_membuf() = default;


      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }

      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };
# 89 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/aligned_buffer.h" 3
  template<typename _Tp>
    struct __aligned_buffer
    : std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>
    {
      typename
 std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;

      __aligned_buffer() = default;


      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };


}
# 70 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 99 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };


  template<typename _Key_compare>
    struct _Rb_tree_key_compare
    {
      _Key_compare _M_key_compare;

      _Rb_tree_key_compare()
      noexcept(is_nothrow_default_constructible<_Key_compare>::value)

      : _M_key_compare()
      { }

      _Rb_tree_key_compare(const _Key_compare& __comp)
      : _M_key_compare(__comp)
      { }



      _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;

      _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
 noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
      : _M_key_compare(__x._M_key_compare)
      { }

    };


  struct _Rb_tree_header
  {
    _Rb_tree_node_base _M_header;
    size_t _M_node_count;

    _Rb_tree_header() noexcept
    {
      _M_header._M_color = _S_red;
      _M_reset();
    }


    _Rb_tree_header(_Rb_tree_header&& __x) noexcept
    {
      if (__x._M_header._M_parent != nullptr)
 _M_move_data(__x);
      else
 {
   _M_header._M_color = _S_red;
   _M_reset();
 }
    }


    void
    _M_move_data(_Rb_tree_header& __from)
    {
      _M_header._M_color = __from._M_header._M_color;
      _M_header._M_parent = __from._M_header._M_parent;
      _M_header._M_left = __from._M_header._M_left;
      _M_header._M_right = __from._M_header._M_right;
      _M_header._M_parent->_M_parent = &_M_header;
      _M_node_count = __from._M_node_count;

      __from._M_reset();
    }

    void
    _M_reset()
    {
      _M_header._M_parent = 0;
      _M_header._M_left = &_M_header;
      _M_header._M_right = &_M_header;
      _M_node_count = 0;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
# 231 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
      __gnu_cxx::__aligned_membuf<_Val> _M_storage;

      _Val*
      _M_valptr()
      { return _M_storage._M_ptr(); }

      const _Val*
      _M_valptr() const
      { return _M_storage._M_ptr(); }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it) noexcept
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
        const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
        const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
    _Rb_tree_node_base* __x,
    _Rb_tree_node_base* __p,
    _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
    struct __has_is_transparent
    { };

  template<typename _Cmp, typename _SfinaeType>
    struct __has_is_transparent<_Cmp, _SfinaeType,
    __void_t<typename _Cmp::is_transparent>>
    { typedef void type; };







  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Rb_tree_node<_Val> >::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;


      static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
   "comparison object must be invocable with two arguments of key type");
# 462 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;

    private:


      struct _Reuse_or_alloc_node
      {
 _Reuse_or_alloc_node(_Rb_tree& __t)
   : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 {
   if (_M_root)
     {
       _M_root->_M_parent = 0;

       if (_M_nodes->_M_left)
  _M_nodes = _M_nodes->_M_left;
     }
   else
     _M_nodes = 0;
 }


 _Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;


 ~_Reuse_or_alloc_node()
 { _M_t._M_erase(static_cast<_Link_type>(_M_root)); }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg)

   {
     _Link_type __node = static_cast<_Link_type>(_M_extract());
     if (__node)
       {
  _M_t._M_destroy_node(__node);
  _M_t._M_construct_node(__node, std::forward<_Arg>(__arg));
  return __node;
       }

     return _M_t._M_create_node(std::forward<_Arg>(__arg));
   }

      private:
 _Base_ptr
 _M_extract()
 {
   if (!_M_nodes)
     return _M_nodes;

   _Base_ptr __node = _M_nodes;
   _M_nodes = _M_nodes->_M_parent;
   if (_M_nodes)
     {
       if (_M_nodes->_M_right == __node)
  {
    _M_nodes->_M_right = 0;

    if (_M_nodes->_M_left)
      {
        _M_nodes = _M_nodes->_M_left;

        while (_M_nodes->_M_right)
   _M_nodes = _M_nodes->_M_right;

        if (_M_nodes->_M_left)
   _M_nodes = _M_nodes->_M_left;
      }
  }
       else
  _M_nodes->_M_left = 0;
     }
   else
     _M_root = 0;

   return __node;
 }

 _Base_ptr _M_root;
 _Base_ptr _M_nodes;
 _Rb_tree& _M_t;
      };



      struct _Alloc_node
      {
 _Alloc_node(_Rb_tree& __t)
   : _M_t(__t) { }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg) const

   { return _M_t._M_create_node(std::forward<_Arg>(__arg)); }

      private:
 _Rb_tree& _M_t;
      };

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() noexcept
      { return this->_M_impl; }

      const _Node_allocator&
      _M_get_Node_allocator() const noexcept
      { return this->_M_impl; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }

      void
      _M_put_node(_Link_type __p) noexcept
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
# 630 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
      template<typename... _Args>
 void
 _M_construct_node(_Link_type __node, _Args&&... __args)
 {
   if (true)
     {
       ::new(__node) _Rb_tree_node<_Val>;
       _Alloc_traits::construct(_M_get_Node_allocator(),
           __node->_M_valptr(),
           std::forward<_Args>(__args)...);
     }
   if (false)
     {
       __node->~_Rb_tree_node<_Val>();
       _M_put_node(__node);
                              ;
     }
 }

      template<typename... _Args>
 _Link_type
 _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p) noexcept
      {
 _Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 __p->~_Rb_tree_node<_Val>();
      }


      void
      _M_drop_node(_Link_type __p) noexcept
      {
 _M_destroy_node(__p);
 _M_put_node(__p);
      }

      template<typename _NodeGen>
 _Link_type
 _M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 {
   _Link_type __tmp = __node_gen(*__x->_M_valptr());
   __tmp->_M_color = __x->_M_color;
   __tmp->_M_left = 0;
   __tmp->_M_right = 0;
   return __tmp;
 }

    protected:




      template<typename _Key_compare,
        bool = __is_pod(_Key_compare)>

 struct _Rb_tree_impl
 : public _Node_allocator
 , public _Rb_tree_key_compare<_Key_compare>
 , public _Rb_tree_header
 {
   typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;

   _Rb_tree_impl()
     noexcept(is_nothrow_default_constructible<_Node_allocator>::value && is_nothrow_default_constructible<_Base_key_compare>::value)


   : _Node_allocator()
   { }

   _Rb_tree_impl(const _Rb_tree_impl& __x)
   : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
   , _Base_key_compare(__x._M_key_compare)
   { }






   _Rb_tree_impl(_Rb_tree_impl&&) = default;

   _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
   { }

 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root() noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost() noexcept
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost() noexcept
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const noexcept
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin() noexcept
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const noexcept
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() noexcept
      { return &this->_M_impl._M_header; }

      _Const_Base_ptr
      _M_end() const noexcept
      { return &this->_M_impl._M_header; }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return *__x->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
# 832 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);

    private:

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);

      iterator
      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);

      template<typename _Arg>
 iterator
 _M_insert_lower(_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
 iterator
 _M_insert_equal_lower(_Arg&& __x);

      iterator
      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);

      iterator
      _M_insert_equal_lower_node(_Link_type __z);
# 883 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
      template<typename _NodeGen>
 _Link_type
 _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);

      template<typename _NodeGen>
 _Link_type
 _M_copy(const _Rb_tree& __x, _NodeGen& __gen)
 {
   _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
   _M_leftmost() = _S_minimum(__root);
   _M_rightmost() = _S_maximum(__root);
   _M_impl._M_node_count = __x._M_impl._M_node_count;
   return __root;
 }

      _Link_type
      _M_copy(const _Rb_tree& __x)
      {
 _Alloc_node __an(*this);
 return _M_copy(__x, __an);
      }

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Base_ptr __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Base_ptr __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
       const _Key& __k) const;

    public:




      _Rb_tree() = default;


      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl)
      {
 if (__x._M_root() != 0)
   _M_root() = _M_copy(__x);
      }


      _Rb_tree(const allocator_type& __a)
      : _M_impl(_Compare(), _Node_allocator(__a))
      { }

      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
      {
 if (__x._M_root() != nullptr)
   _M_root() = _M_copy(__x);
      }

      _Rb_tree(_Rb_tree&&) = default;

      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
      : _Rb_tree(std::move(__x), _Node_allocator(__a))
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);


      ~_Rb_tree() noexcept
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_header._M_left); }

      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_header._M_left); }

      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_header); }

      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_header); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      bool
      empty() const noexcept
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const noexcept
      { return _M_impl._M_node_count; }

      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }

      void
      swap(_Rb_tree& __t)
      noexcept(__is_nothrow_swappable<_Compare>::value);



      template<typename _Arg>
 pair<iterator, bool>
 _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
 iterator
 _M_insert_equal(_Arg&& __x);

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename... _Args>
 pair<iterator, bool>
 _M_emplace_unique(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_equal(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
# 1103 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
      template<typename _InputIterator>
 void
 _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
 void
 _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      {
                                      ;
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      {
                                      ;
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 1159 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 1181 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear() noexcept
      {
 _M_erase(_M_begin());
 _M_impl._M_reset();
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_find_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_find_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_find_tr(const _Kt& __k) const
 {
   auto __j = _M_lower_bound_tr(__k);
   if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
     __j = end();
   return __j;
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 size_type
 _M_count_tr(const _Kt& __k) const
 {
   auto __p = _M_equal_range_tr(__k);
   return std::distance(__p.first, __p.second);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_lower_bound_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_lower_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x != 0)
     if (!_M_impl._M_key_compare(_S_key(__x), __k))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return const_iterator(__y);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_upper_bound_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_upper_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x != 0)
     if (_M_impl._M_key_compare(__k, _S_key(__x)))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return const_iterator(__y);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 pair<iterator, iterator>
 _M_equal_range_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   auto __ret = __const_this->_M_equal_range_tr(__k);
   return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 pair<const_iterator, const_iterator>
 _M_equal_range_tr(const _Kt& __k) const
 {
   auto __low = _M_lower_bound_tr(__k);
   auto __high = __low;
   auto& __cmp = _M_impl._M_key_compare;
   while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
     ++__high;
   return { __low, __high };
 }



      bool
      __rb_verify() const;


      _Rb_tree&
      operator=(_Rb_tree&&)
      noexcept(_Alloc_traits::_S_nothrow_move()
        && is_nothrow_move_assignable<_Compare>::value);

      template<typename _Iterator>
 void
 _M_assign_unique(_Iterator, _Iterator);

      template<typename _Iterator>
 void
 _M_assign_equal(_Iterator, _Iterator);

    private:

      void
      _M_move_data(_Rb_tree& __x, std::true_type)
      { _M_impl._M_move_data(__x._M_impl); }



      void
      _M_move_data(_Rb_tree&, std::false_type);


      void
      _M_move_assign(_Rb_tree&, std::true_type);



      void
      _M_move_assign(_Rb_tree&, std::false_type);
# 1544 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
    {
      using __eq = typename _Alloc_traits::is_always_equal;
      if (__x._M_root() != nullptr)
 _M_move_data(__x, __eq());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 _M_move_data(__x, std::true_type());
      else
 {
   _Alloc_node __an(*this);
   auto __lbd =
     [&__an](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __an(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x, __lbd);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, true_type)
    {
      clear();
      if (__x._M_root() != nullptr)
 _M_move_data(__x, std::true_type());
      std::__alloc_on_move(_M_get_Node_allocator(),
      __x._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 return _M_move_assign(__x, true_type{});



      _Reuse_or_alloc_node __roan(*this);
      _M_impl._M_reset();
      if (__x._M_root() != nullptr)
 {
   auto __lbd =
     [&__roan](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __roan(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x, __lbd);
   __x.clear();
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(_Rb_tree&& __x)
    noexcept(_Alloc_traits::_S_nothrow_move()
      && is_nothrow_move_assignable<_Compare>::value)
    {
      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_unique(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __roan);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_equal(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __roan);
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != &__x)
 {


   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       auto& __this_alloc = this->_M_get_Node_allocator();
       auto& __that_alloc = __x._M_get_Node_allocator();
       if (!_Alloc_traits::_S_always_equal()
    && __this_alloc != __that_alloc)
  {


    clear();
    std::__alloc_on_copy(__this_alloc, __that_alloc);
  }
     }


   _Reuse_or_alloc_node __roan(*this);
   _M_impl._M_reset();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     _M_root() = _M_copy(__x, __roan);
 }

      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_(_Base_ptr __x, _Base_ptr __p,

   _Arg&& __v,



   _NodeGen& __node_gen)
      {
 bool __insert_left = (__x != 0 || __p == _M_end()
         || _M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key(__p)));

 _Link_type __z = __node_gen(std::forward<_Arg>(__v));

 _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
          this->_M_impl._M_header);
 ++_M_impl._M_node_count;
 return iterator(__z);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
  _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
    typename _Compare, typename _Alloc>
    template<typename _NodeGen>
      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
      {

 _Link_type __top = _M_clone_node(__x, __node_gen);
 __top->_M_parent = __p;

 if (true)
   {
     if (__x->_M_right)
       __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
     __p = __top;
     __x = _S_left(__x);

     while (__x != 0)
       {
  _Link_type __y = _M_clone_node(__x, __node_gen);
  __p->_M_left = __y;
  __y->_M_parent = __p;
  if (__x->_M_right)
    __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  __p = __y;
  __x = _S_left(__x);
       }
   }
 if (false)
   {
     _M_erase(__top);
                            ;
   }
 return __top;
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_drop_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Base_ptr __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x);
       _Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
     iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Base_ptr __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x);
       _Const_Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
     const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree& __t)
    noexcept(__is_nothrow_swappable<_Compare>::value)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     _M_impl._M_move_data(__t._M_impl);
 }
      else if (__t._M_root() == 0)
 __t._M_impl._M_move_data(_M_impl);
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
   std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
 }

      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
    __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
  _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 {
   _Alloc_node __an(*this);
   return _Res(_M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v), __an),
        true);
 }

      return _Res(iterator(__res.first), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      _Alloc_node __an(*this);
      return _M_insert_(__res.first, __res.second,
   std::forward<_Arg>(__v), __an);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_unique_(const_iterator __position,

   _Arg&& __v,



   _NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v),
     __node_gen);
      return iterator(__res.first);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_equal_(const_iterator __position,

         _Arg&& __v,



         _NodeGen& __node_gen)
      {
 pair<_Base_ptr, _Base_ptr> __res
   = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

 if (__res.second)
   return _M_insert_(__res.first, __res.second,
       std::forward<_Arg>(__v),
       __node_gen);

 return _M_insert_equal_lower(std::forward<_Arg>(__v));
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_S_key(__z),
            _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _S_key(__z)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower_node(_Link_type __z)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
  _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower_node(__y, __z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_unique(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 if (true)
   {
     typedef pair<iterator, bool> _Res;
     auto __res = _M_get_insert_unique_pos(_S_key(__z));
     if (__res.second)
       return _Res(_M_insert_node(__res.first, __res.second, __z), true);

     _M_drop_node(__z);
     return _Res(iterator(__res.first), false);
   }
 if (false)
   {
     _M_drop_node(__z);
                            ;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_equal(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 if (true)
   {
     auto __res = _M_get_insert_equal_pos(_S_key(__z));
     return _M_insert_node(__res.first, __res.second, __z);
   }
 if (false)
   {
     _M_drop_node(__z);
                            ;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 if (true)
   {
     auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     _M_drop_node(__z);
     return iterator(__res.first);
   }
 if (false)
   {
     _M_drop_node(__z);
                            ;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 if (true)
   {
     auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     return _M_insert_equal_lower_node(__z);
   }
 if (false)
   {
     _M_drop_node(__z);
                            ;
   }
      }


  template<typename _Key, typename _Val, typename _KoV,
    typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KoV,
    typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_drop_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   _M_erase_aux(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      _M_erase_aux(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
         const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }
# 2628 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_tree.h" 3
}
# 61 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/map" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 1 3
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 3






# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/array" 1 3
# 33 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/array" 3
# 43 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/array" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };
     typedef true_type _Is_swappable;
     typedef true_type _Is_nothrow_swappable;

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 93 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


                           iterator
      begin() noexcept
      { return iterator(data()); }

                           const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

                           iterator
      end() noexcept
      { return iterator(data() + _Nm); }

                           const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

                           reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

                           const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

                           reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

                           const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

                           const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

                           const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

                           const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

                           const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


                           reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

                           reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

                           reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

                           reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

                           pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

                           const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };
# 250 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/array" 3
  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }


  template<typename _Tp, std::size_t _Nm>
    inline


    typename enable_if<
      std::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type



    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }


  template<typename _Tp, std::size_t _Nm>
    typename enable_if<
      !std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type
    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Tp>
    struct tuple_size;


  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    struct tuple_element;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<std::array<_Tp, _Nm>> : true_type
    { };


}
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/uses_allocator.h" 1 3
# 35 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __erased_type { };

  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_same<_Tp, __erased_type>, is_convertible<_Alloc, _Tp>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

                    constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    {
      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>,
   is_constructible<_Tp, _Args..., _Alloc>>::value, "construction with"
   " an allocator must be possible if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;







  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : conditional<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>>::type { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
                      constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
                      constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      __uses_allocator_construct_impl(__use_alloc<_Tp, _Alloc, _Args...>(__a),
          __ptr, std::forward<_Args>(__args)...);
    }


}
# 41 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/invoke.h" 1 3
# 34 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/invoke.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 52 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }


}
# 42 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename... _Elements>
    class tuple;

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;

  template<std::size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 176 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename... _UElements>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 _M_tail(*this) = _M_tail(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
               is_nothrow_move_assignable<_Inherited>>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 _M_tail(*this) = std::move(_M_tail(__in));
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this) = std::move
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(__is_nothrow_swappable<_Head>::value
               && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<std::size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr _Tuple_impl()
      : _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head)
      : _Base(__head) { }

      template<typename _UHead>
        explicit
        constexpr _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename _UHead>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _UHead>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_assignable<_Head>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 return *this;
      }

      template<typename _UHead>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UHead>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
   return *this;
 }

      template<typename _UHead>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead>&& __in)
        {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(__is_nothrow_swappable<_Head>::value)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
    };



  template<bool, typename... _Elements>
  struct _TC
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, const _UElements&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return __and_<is_convertible<const _UElements&, _Elements>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, _UElements&&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return __and_<is_convertible<_UElements&&, _Elements>...>::value;
    }

    template<typename _SrcTuple>
    static constexpr bool _NonNestedTuple()
    {
      return __and_<__not_<is_same<tuple<_Elements...>,
                                   typename remove_cv<
                                     typename remove_reference<_SrcTuple>::type
                                   >::type>>,
                     __not_<is_convertible<_SrcTuple, _Elements...>>,
                     __not_<is_constructible<_Elements..., _SrcTuple>>
              >::value;
    }
    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return __not_<is_same<tuple<_Elements...>,
        typename remove_const<
          typename remove_reference<_UElements...>::type
          >::type>>::value;
    }
  };

  template<typename... _Elements>
  struct _TC<false, _Elements...>
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _NonNestedTuple()
    {
      return true;
    }
    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return true;
    }
  };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;



      template<typename _Dummy>
      struct _TC2
      {
        static constexpr bool _DefaultConstructibleTuple()
        {
          return __and_<is_default_constructible<_Elements>...>::value;
        }
        static constexpr bool _ImplicitlyDefaultConstructibleTuple()
        {
          return __and_<__is_implicitly_default_constructible<_Elements>...>
            ::value;
        }
      };

    public:
      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = true>
      constexpr tuple()
      : _Inherited() { }

      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _DefaultConstructibleTuple()
                                  &&
                                  !_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = false>
      explicit constexpr tuple()
      : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value,
            _Elements...>;

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=true>
        constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=false>
      explicit constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }



      template<typename... _UElements> using _TMC =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && (_TC<(sizeof...(_UElements)==1), _Elements...>::
     template _NotSameTuple<_UElements...>()),
                      _Elements...>;



      template<typename... _UElements> using _TMCT =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && !is_same<tuple<_Elements...>,
      tuple<_UElements...>>::value,
                      _Elements...>;

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=true>
        constexpr tuple(_UElements&&... __elements)
        : _Inherited(std::forward<_UElements>(__elements)...) { }

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=false>
        explicit constexpr tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;



      template<typename _Dummy> using _TNTC =
        _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
            _Elements...>;

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=true>
        constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=false>
        explicit constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
        constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
        explicit constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements>
 typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements), tuple&>::type
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements>
 typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements), tuple&>::type
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };
# 889 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 3
  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }


      tuple() = default;

      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&) { }
      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&, const tuple&) { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
      : _Inherited() { }

      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<
                  __and_<
                    is_default_constructible<_U1>,
                    is_default_constructible<_U2>,
                    __not_<
                      __and_<__is_implicitly_default_constructible<_U1>,
                             __is_implicitly_default_constructible<_U2>>>>
                  ::value, bool>::type = false>

      explicit constexpr tuple()
      : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value, _T1, _T2>;

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && _TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = true>
        constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && !_TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = false>
        explicit constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }



      using _TMC = _TC<true, _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<typename decay<_U1>::type,
         allocator_arg_t>::value,
 bool>::type = true>
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<typename decay<_U1>::type,
         allocator_arg_t>::value,
 bool>::type = false>
        explicit constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=false>

 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };
# 1278 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 3
  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };




  template<size_t __i>
    struct tuple_element<__i, tuple<>>
    {
      static_assert(__i < tuple_size<tuple<>>::value,
   "tuple index is in range");
    };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type&&>(std::get<__i>(__t));
    }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<const __element_type&&>(std::get<__i>(__t));
    }





  template<typename _Head, size_t __i, typename... _Tail>
    constexpr _Head&
    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<typename _Head, size_t __i, typename... _Tail>
    constexpr const _Head&
    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }



  template <typename _Tp, typename... _Types>
    constexpr const _Tp&&
    get(const tuple<_Types...>&& __t) noexcept
    { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }



  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }



  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<typename std::remove_cv
            <typename std::remove_reference<_Tuple>::type>::type>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
    inline


    typename enable_if<__and_<__is_swappable<_Elements>...>::value
      >::type



    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename... _Elements>
    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;






  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };



                    constexpr _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };


  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }
# 1712 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/tuple" 3
}
# 64 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class multimap;
# 98 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 126 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
# 183 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      map() = default;







      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 205 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      map(const map&) = default;







      map(map&&) = default;
# 226 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      map(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      map(const map& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      map(map&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      map(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }
# 270 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_unique(__first, __last); }
# 287 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }







      ~map() = default;
# 316 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      map&
      operator=(const map&) = default;


      map&
      operator=(map&&) = default;
# 334 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }






      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 489 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))

   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
         std::tuple<const key_type&>(__k),
         std::tuple<>());



 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::tuple<>());
 return (*__i).second;
      }
# 534 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 572 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 602 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 800 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }




      std::pair<iterator, bool>
      insert(value_type&& __x)
      { return _M_t._M_insert_unique(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value,
        pair<iterator, bool>>
 insert(_Pair&& __x)
 { return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
# 827 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 856 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 insert(const_iterator __position, _Pair&& __x)
 {
   return _M_t._M_emplace_hint_unique(__position,
          std::forward<_Pair>(__x));
 }
# 889 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_unique(__first, __last); }
# 1029 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 1066 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 1086 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 1120 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      void
      swap(map& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 1167 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1192 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1213 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 1237 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 1262 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 1282 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 1302 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 1331 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1360 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 1432 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1449 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 1515 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_map.h" 3
}
# 62 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/map" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 1 3
# 64 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class map;
# 96 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 125 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
# 180 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      multimap() = default;







      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 202 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      multimap(const multimap&) = default;
# 211 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      multimap(multimap&&) = default;
# 223 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multimap(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      multimap(const multimap& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      multimap(multimap&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      multimap(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }
# 266 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_equal(__first, __last); }
# 282 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }







      ~multimap() = default;
# 311 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap&) = default;


      multimap&
      operator=(multimap&&) = default;
# 329 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }




      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 487 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 514 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 536 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }




      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 insert(_Pair&& __x)
 { return _M_t._M_emplace_equal(std::forward<_Pair>(__x)); }
# 575 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>
 insert(const_iterator __position, _Pair&& __x)
 {
   return _M_t._M_emplace_hint_equal(__position,
         std::forward<_Pair>(__x));
 }
# 609 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_equal(__first, __last); }
# 622 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 699 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 736 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 757 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 794 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 840 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 864 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 882 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 906 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 931 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 951 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 971 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 998 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1025 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 1096 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1113 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
  multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 1179 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_multimap.h" 3
}
# 63 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/map" 2 3
# 9 "./nnet_utils/nnet_helpers.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3





# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {






# 1 "/usr/include/bits/math-vector.h" 1 3 4
# 25 "/usr/include/bits/math-vector.h" 3 4
# 1 "/usr/include/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 163 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbit (double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinf (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnan (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) noexcept (true);


extern int __issignaling (double __value) noexcept (true)
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern double acos (double __x) noexcept (true); extern double __acos (double __x) noexcept (true);

extern double asin (double __x) noexcept (true); extern double __asin (double __x) noexcept (true);

extern double atan (double __x) noexcept (true); extern double __atan (double __x) noexcept (true);

extern double atan2 (double __y, double __x) noexcept (true); extern double __atan2 (double __y, double __x) noexcept (true);


 extern double cos (double __x) noexcept (true); extern double __cos (double __x) noexcept (true);

 extern double sin (double __x) noexcept (true); extern double __sin (double __x) noexcept (true);

extern double tan (double __x) noexcept (true); extern double __tan (double __x) noexcept (true);




extern double cosh (double __x) noexcept (true); extern double __cosh (double __x) noexcept (true);

extern double sinh (double __x) noexcept (true); extern double __sinh (double __x) noexcept (true);

extern double tanh (double __x) noexcept (true); extern double __tanh (double __x) noexcept (true);



 extern void sincos (double __x, double *__sinx, double *__cosx) noexcept (true); extern void __sincos (double __x, double *__sinx, double *__cosx) noexcept (true);





extern double acosh (double __x) noexcept (true); extern double __acosh (double __x) noexcept (true);

extern double asinh (double __x) noexcept (true); extern double __asinh (double __x) noexcept (true);

extern double atanh (double __x) noexcept (true); extern double __atanh (double __x) noexcept (true);





 extern double exp (double __x) noexcept (true); extern double __exp (double __x) noexcept (true);


extern double frexp (double __x, int *__exponent) noexcept (true); extern double __frexp (double __x, int *__exponent) noexcept (true);


extern double ldexp (double __x, int __exponent) noexcept (true); extern double __ldexp (double __x, int __exponent) noexcept (true);


 extern double log (double __x) noexcept (true); extern double __log (double __x) noexcept (true);


extern double log10 (double __x) noexcept (true); extern double __log10 (double __x) noexcept (true);


extern double modf (double __x, double *__iptr) noexcept (true); extern double __modf (double __x, double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) noexcept (true); extern double __exp10 (double __x) noexcept (true);




extern double expm1 (double __x) noexcept (true); extern double __expm1 (double __x) noexcept (true);


extern double log1p (double __x) noexcept (true); extern double __log1p (double __x) noexcept (true);


extern double logb (double __x) noexcept (true); extern double __logb (double __x) noexcept (true);




extern double exp2 (double __x) noexcept (true); extern double __exp2 (double __x) noexcept (true);


extern double log2 (double __x) noexcept (true); extern double __log2 (double __x) noexcept (true);






 extern double pow (double __x, double __y) noexcept (true); extern double __pow (double __x, double __y) noexcept (true);


extern double sqrt (double __x) noexcept (true); extern double __sqrt (double __x) noexcept (true);



extern double hypot (double __x, double __y) noexcept (true); extern double __hypot (double __x, double __y) noexcept (true);




extern double cbrt (double __x) noexcept (true); extern double __cbrt (double __x) noexcept (true);






extern double ceil (double __x) noexcept (true) __attribute__ ((__const__)); extern double __ceil (double __x) noexcept (true) __attribute__ ((__const__));


extern double fabs (double __x) noexcept (true) __attribute__ ((__const__)); extern double __fabs (double __x) noexcept (true) __attribute__ ((__const__));


extern double floor (double __x) noexcept (true) __attribute__ ((__const__)); extern double __floor (double __x) noexcept (true) __attribute__ ((__const__));


extern double fmod (double __x, double __y) noexcept (true); extern double __fmod (double __x, double __y) noexcept (true);
# 183 "/usr/include/bits/mathcalls.h" 3 4
extern int finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern double drem (double __x, double __y) noexcept (true); extern double __drem (double __x, double __y) noexcept (true);



extern double significand (double __x) noexcept (true); extern double __significand (double __x) noexcept (true);






extern double copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double nan (const char *__tagb) noexcept (true); extern double __nan (const char *__tagb) noexcept (true);
# 220 "/usr/include/bits/mathcalls.h" 3 4
extern double j0 (double) noexcept (true); extern double __j0 (double) noexcept (true);
extern double j1 (double) noexcept (true); extern double __j1 (double) noexcept (true);
extern double jn (int, double) noexcept (true); extern double __jn (int, double) noexcept (true);
extern double y0 (double) noexcept (true); extern double __y0 (double) noexcept (true);
extern double y1 (double) noexcept (true); extern double __y1 (double) noexcept (true);
extern double yn (int, double) noexcept (true); extern double __yn (int, double) noexcept (true);





extern double erf (double) noexcept (true); extern double __erf (double) noexcept (true);
extern double erfc (double) noexcept (true); extern double __erfc (double) noexcept (true);
extern double lgamma (double) noexcept (true); extern double __lgamma (double) noexcept (true);




extern double tgamma (double) noexcept (true); extern double __tgamma (double) noexcept (true);





extern double gamma (double) noexcept (true); extern double __gamma (double) noexcept (true);







extern double lgamma_r (double, int *__signgamp) noexcept (true); extern double __lgamma_r (double, int *__signgamp) noexcept (true);






extern double rint (double __x) noexcept (true); extern double __rint (double __x) noexcept (true);


extern double nextafter (double __x, double __y) noexcept (true); extern double __nextafter (double __x, double __y) noexcept (true);

extern double nexttoward (double __x, long double __y) noexcept (true); extern double __nexttoward (double __x, long double __y) noexcept (true);




extern double nextdown (double __x) noexcept (true); extern double __nextdown (double __x) noexcept (true);

extern double nextup (double __x) noexcept (true); extern double __nextup (double __x) noexcept (true);



extern double remainder (double __x, double __y) noexcept (true); extern double __remainder (double __x, double __y) noexcept (true);



extern double scalbn (double __x, int __n) noexcept (true); extern double __scalbn (double __x, int __n) noexcept (true);



extern int ilogb (double __x) noexcept (true); extern int __ilogb (double __x) noexcept (true);




extern long int llogb (double __x) noexcept (true); extern long int __llogb (double __x) noexcept (true);




extern double scalbln (double __x, long int __n) noexcept (true); extern double __scalbln (double __x, long int __n) noexcept (true);



extern double nearbyint (double __x) noexcept (true); extern double __nearbyint (double __x) noexcept (true);



extern double round (double __x) noexcept (true) __attribute__ ((__const__)); extern double __round (double __x) noexcept (true) __attribute__ ((__const__));



extern double trunc (double __x) noexcept (true) __attribute__ ((__const__)); extern double __trunc (double __x) noexcept (true) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) noexcept (true); extern double __remquo (double __x, double __y, int *__quo) noexcept (true);






extern long int lrint (double __x) noexcept (true); extern long int __lrint (double __x) noexcept (true);
__extension__
extern long long int llrint (double __x) noexcept (true); extern long long int __llrint (double __x) noexcept (true);



extern long int lround (double __x) noexcept (true); extern long int __lround (double __x) noexcept (true);
__extension__
extern long long int llround (double __x) noexcept (true); extern long long int __llround (double __x) noexcept (true);



extern double fdim (double __x, double __y) noexcept (true); extern double __fdim (double __x, double __y) noexcept (true);


extern double fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) noexcept (true); extern double __fma (double __x, double __y, double __z) noexcept (true);




extern double roundeven (double __x) noexcept (true) __attribute__ ((__const__)); extern double __roundeven (double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalize (double *__cx, const double *__x) noexcept (true);






extern double fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorder (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) noexcept (true); extern double __getpayload (const double *__x) noexcept (true);


extern int setpayload (double *__x, double __payload) noexcept (true);


extern int setpayloadsig (double *__x, double __payload) noexcept (true);







extern double scalb (double __x, double __n) noexcept (true); extern double __scalb (double __x, double __n) noexcept (true);
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitf (float __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinff (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) noexcept (true);


extern int __issignalingf (float __value) noexcept (true)
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern float acosf (float __x) noexcept (true); extern float __acosf (float __x) noexcept (true);

extern float asinf (float __x) noexcept (true); extern float __asinf (float __x) noexcept (true);

extern float atanf (float __x) noexcept (true); extern float __atanf (float __x) noexcept (true);

extern float atan2f (float __y, float __x) noexcept (true); extern float __atan2f (float __y, float __x) noexcept (true);


 extern float cosf (float __x) noexcept (true); extern float __cosf (float __x) noexcept (true);

 extern float sinf (float __x) noexcept (true); extern float __sinf (float __x) noexcept (true);

extern float tanf (float __x) noexcept (true); extern float __tanf (float __x) noexcept (true);




extern float coshf (float __x) noexcept (true); extern float __coshf (float __x) noexcept (true);

extern float sinhf (float __x) noexcept (true); extern float __sinhf (float __x) noexcept (true);

extern float tanhf (float __x) noexcept (true); extern float __tanhf (float __x) noexcept (true);



 extern void sincosf (float __x, float *__sinx, float *__cosx) noexcept (true); extern void __sincosf (float __x, float *__sinx, float *__cosx) noexcept (true);





extern float acoshf (float __x) noexcept (true); extern float __acoshf (float __x) noexcept (true);

extern float asinhf (float __x) noexcept (true); extern float __asinhf (float __x) noexcept (true);

extern float atanhf (float __x) noexcept (true); extern float __atanhf (float __x) noexcept (true);





 extern float expf (float __x) noexcept (true); extern float __expf (float __x) noexcept (true);


extern float frexpf (float __x, int *__exponent) noexcept (true); extern float __frexpf (float __x, int *__exponent) noexcept (true);


extern float ldexpf (float __x, int __exponent) noexcept (true); extern float __ldexpf (float __x, int __exponent) noexcept (true);


 extern float logf (float __x) noexcept (true); extern float __logf (float __x) noexcept (true);


extern float log10f (float __x) noexcept (true); extern float __log10f (float __x) noexcept (true);


extern float modff (float __x, float *__iptr) noexcept (true); extern float __modff (float __x, float *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) noexcept (true); extern float __exp10f (float __x) noexcept (true);




extern float expm1f (float __x) noexcept (true); extern float __expm1f (float __x) noexcept (true);


extern float log1pf (float __x) noexcept (true); extern float __log1pf (float __x) noexcept (true);


extern float logbf (float __x) noexcept (true); extern float __logbf (float __x) noexcept (true);




extern float exp2f (float __x) noexcept (true); extern float __exp2f (float __x) noexcept (true);


extern float log2f (float __x) noexcept (true); extern float __log2f (float __x) noexcept (true);






 extern float powf (float __x, float __y) noexcept (true); extern float __powf (float __x, float __y) noexcept (true);


extern float sqrtf (float __x) noexcept (true); extern float __sqrtf (float __x) noexcept (true);



extern float hypotf (float __x, float __y) noexcept (true); extern float __hypotf (float __x, float __y) noexcept (true);




extern float cbrtf (float __x) noexcept (true); extern float __cbrtf (float __x) noexcept (true);






extern float ceilf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __ceilf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fabsf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __fabsf (float __x) noexcept (true) __attribute__ ((__const__));


extern float floorf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __floorf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) noexcept (true); extern float __fmodf (float __x, float __y) noexcept (true);
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinff (float __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) noexcept (true); extern float __dremf (float __x, float __y) noexcept (true);



extern float significandf (float __x) noexcept (true); extern float __significandf (float __x) noexcept (true);






extern float copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float nanf (const char *__tagb) noexcept (true); extern float __nanf (const char *__tagb) noexcept (true);
# 213 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));





extern float j0f (float) noexcept (true); extern float __j0f (float) noexcept (true);
extern float j1f (float) noexcept (true); extern float __j1f (float) noexcept (true);
extern float jnf (int, float) noexcept (true); extern float __jnf (int, float) noexcept (true);
extern float y0f (float) noexcept (true); extern float __y0f (float) noexcept (true);
extern float y1f (float) noexcept (true); extern float __y1f (float) noexcept (true);
extern float ynf (int, float) noexcept (true); extern float __ynf (int, float) noexcept (true);





extern float erff (float) noexcept (true); extern float __erff (float) noexcept (true);
extern float erfcf (float) noexcept (true); extern float __erfcf (float) noexcept (true);
extern float lgammaf (float) noexcept (true); extern float __lgammaf (float) noexcept (true);




extern float tgammaf (float) noexcept (true); extern float __tgammaf (float) noexcept (true);





extern float gammaf (float) noexcept (true); extern float __gammaf (float) noexcept (true);







extern float lgammaf_r (float, int *__signgamp) noexcept (true); extern float __lgammaf_r (float, int *__signgamp) noexcept (true);






extern float rintf (float __x) noexcept (true); extern float __rintf (float __x) noexcept (true);


extern float nextafterf (float __x, float __y) noexcept (true); extern float __nextafterf (float __x, float __y) noexcept (true);

extern float nexttowardf (float __x, long double __y) noexcept (true); extern float __nexttowardf (float __x, long double __y) noexcept (true);




extern float nextdownf (float __x) noexcept (true); extern float __nextdownf (float __x) noexcept (true);

extern float nextupf (float __x) noexcept (true); extern float __nextupf (float __x) noexcept (true);



extern float remainderf (float __x, float __y) noexcept (true); extern float __remainderf (float __x, float __y) noexcept (true);



extern float scalbnf (float __x, int __n) noexcept (true); extern float __scalbnf (float __x, int __n) noexcept (true);



extern int ilogbf (float __x) noexcept (true); extern int __ilogbf (float __x) noexcept (true);




extern long int llogbf (float __x) noexcept (true); extern long int __llogbf (float __x) noexcept (true);




extern float scalblnf (float __x, long int __n) noexcept (true); extern float __scalblnf (float __x, long int __n) noexcept (true);



extern float nearbyintf (float __x) noexcept (true); extern float __nearbyintf (float __x) noexcept (true);



extern float roundf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundf (float __x) noexcept (true) __attribute__ ((__const__));



extern float truncf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __truncf (float __x) noexcept (true) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) noexcept (true); extern float __remquof (float __x, float __y, int *__quo) noexcept (true);






extern long int lrintf (float __x) noexcept (true); extern long int __lrintf (float __x) noexcept (true);
__extension__
extern long long int llrintf (float __x) noexcept (true); extern long long int __llrintf (float __x) noexcept (true);



extern long int lroundf (float __x) noexcept (true); extern long int __lroundf (float __x) noexcept (true);
__extension__
extern long long int llroundf (float __x) noexcept (true); extern long long int __llroundf (float __x) noexcept (true);



extern float fdimf (float __x, float __y) noexcept (true); extern float __fdimf (float __x, float __y) noexcept (true);


extern float fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) noexcept (true); extern float __fmaf (float __x, float __y, float __z) noexcept (true);




extern float roundevenf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundevenf (float __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef (float *__cx, const float *__x) noexcept (true);






extern float fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) noexcept (true); extern float __getpayloadf (const float *__x) noexcept (true);


extern int setpayloadf (float *__x, float __payload) noexcept (true);


extern int setpayloadsigf (float *__x, float __payload) noexcept (true);







extern float scalbf (float __x, float __n) noexcept (true); extern float __scalbf (float __x, float __n) noexcept (true);
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitl (long double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) noexcept (true);


extern int __issignalingl (long double __value) noexcept (true)
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) noexcept (true); extern long double __acosl (long double __x) noexcept (true);

extern long double asinl (long double __x) noexcept (true); extern long double __asinl (long double __x) noexcept (true);

extern long double atanl (long double __x) noexcept (true); extern long double __atanl (long double __x) noexcept (true);

extern long double atan2l (long double __y, long double __x) noexcept (true); extern long double __atan2l (long double __y, long double __x) noexcept (true);


 extern long double cosl (long double __x) noexcept (true); extern long double __cosl (long double __x) noexcept (true);

 extern long double sinl (long double __x) noexcept (true); extern long double __sinl (long double __x) noexcept (true);

extern long double tanl (long double __x) noexcept (true); extern long double __tanl (long double __x) noexcept (true);




extern long double coshl (long double __x) noexcept (true); extern long double __coshl (long double __x) noexcept (true);

extern long double sinhl (long double __x) noexcept (true); extern long double __sinhl (long double __x) noexcept (true);

extern long double tanhl (long double __x) noexcept (true); extern long double __tanhl (long double __x) noexcept (true);



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true);





extern long double acoshl (long double __x) noexcept (true); extern long double __acoshl (long double __x) noexcept (true);

extern long double asinhl (long double __x) noexcept (true); extern long double __asinhl (long double __x) noexcept (true);

extern long double atanhl (long double __x) noexcept (true); extern long double __atanhl (long double __x) noexcept (true);





 extern long double expl (long double __x) noexcept (true); extern long double __expl (long double __x) noexcept (true);


extern long double frexpl (long double __x, int *__exponent) noexcept (true); extern long double __frexpl (long double __x, int *__exponent) noexcept (true);


extern long double ldexpl (long double __x, int __exponent) noexcept (true); extern long double __ldexpl (long double __x, int __exponent) noexcept (true);


 extern long double logl (long double __x) noexcept (true); extern long double __logl (long double __x) noexcept (true);


extern long double log10l (long double __x) noexcept (true); extern long double __log10l (long double __x) noexcept (true);


extern long double modfl (long double __x, long double *__iptr) noexcept (true); extern long double __modfl (long double __x, long double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) noexcept (true); extern long double __exp10l (long double __x) noexcept (true);




extern long double expm1l (long double __x) noexcept (true); extern long double __expm1l (long double __x) noexcept (true);


extern long double log1pl (long double __x) noexcept (true); extern long double __log1pl (long double __x) noexcept (true);


extern long double logbl (long double __x) noexcept (true); extern long double __logbl (long double __x) noexcept (true);




extern long double exp2l (long double __x) noexcept (true); extern long double __exp2l (long double __x) noexcept (true);


extern long double log2l (long double __x) noexcept (true); extern long double __log2l (long double __x) noexcept (true);






 extern long double powl (long double __x, long double __y) noexcept (true); extern long double __powl (long double __x, long double __y) noexcept (true);


extern long double sqrtl (long double __x) noexcept (true); extern long double __sqrtl (long double __x) noexcept (true);



extern long double hypotl (long double __x, long double __y) noexcept (true); extern long double __hypotl (long double __x, long double __y) noexcept (true);




extern long double cbrtl (long double __x) noexcept (true); extern long double __cbrtl (long double __x) noexcept (true);






extern long double ceill (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __ceill (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fabsl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __fabsl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double floorl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __floorl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) noexcept (true); extern long double __fmodl (long double __x, long double __y) noexcept (true);
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) noexcept (true); extern long double __dreml (long double __x, long double __y) noexcept (true);



extern long double significandl (long double __x) noexcept (true); extern long double __significandl (long double __x) noexcept (true);






extern long double copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) noexcept (true); extern long double __nanl (const char *__tagb) noexcept (true);
# 213 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));





extern long double j0l (long double) noexcept (true); extern long double __j0l (long double) noexcept (true);
extern long double j1l (long double) noexcept (true); extern long double __j1l (long double) noexcept (true);
extern long double jnl (int, long double) noexcept (true); extern long double __jnl (int, long double) noexcept (true);
extern long double y0l (long double) noexcept (true); extern long double __y0l (long double) noexcept (true);
extern long double y1l (long double) noexcept (true); extern long double __y1l (long double) noexcept (true);
extern long double ynl (int, long double) noexcept (true); extern long double __ynl (int, long double) noexcept (true);





extern long double erfl (long double) noexcept (true); extern long double __erfl (long double) noexcept (true);
extern long double erfcl (long double) noexcept (true); extern long double __erfcl (long double) noexcept (true);
extern long double lgammal (long double) noexcept (true); extern long double __lgammal (long double) noexcept (true);




extern long double tgammal (long double) noexcept (true); extern long double __tgammal (long double) noexcept (true);





extern long double gammal (long double) noexcept (true); extern long double __gammal (long double) noexcept (true);







extern long double lgammal_r (long double, int *__signgamp) noexcept (true); extern long double __lgammal_r (long double, int *__signgamp) noexcept (true);






extern long double rintl (long double __x) noexcept (true); extern long double __rintl (long double __x) noexcept (true);


extern long double nextafterl (long double __x, long double __y) noexcept (true); extern long double __nextafterl (long double __x, long double __y) noexcept (true);

extern long double nexttowardl (long double __x, long double __y) noexcept (true); extern long double __nexttowardl (long double __x, long double __y) noexcept (true);




extern long double nextdownl (long double __x) noexcept (true); extern long double __nextdownl (long double __x) noexcept (true);

extern long double nextupl (long double __x) noexcept (true); extern long double __nextupl (long double __x) noexcept (true);



extern long double remainderl (long double __x, long double __y) noexcept (true); extern long double __remainderl (long double __x, long double __y) noexcept (true);



extern long double scalbnl (long double __x, int __n) noexcept (true); extern long double __scalbnl (long double __x, int __n) noexcept (true);



extern int ilogbl (long double __x) noexcept (true); extern int __ilogbl (long double __x) noexcept (true);




extern long int llogbl (long double __x) noexcept (true); extern long int __llogbl (long double __x) noexcept (true);




extern long double scalblnl (long double __x, long int __n) noexcept (true); extern long double __scalblnl (long double __x, long int __n) noexcept (true);



extern long double nearbyintl (long double __x) noexcept (true); extern long double __nearbyintl (long double __x) noexcept (true);



extern long double roundl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundl (long double __x) noexcept (true) __attribute__ ((__const__));



extern long double truncl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __truncl (long double __x) noexcept (true) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) noexcept (true); extern long double __remquol (long double __x, long double __y, int *__quo) noexcept (true);






extern long int lrintl (long double __x) noexcept (true); extern long int __lrintl (long double __x) noexcept (true);
__extension__
extern long long int llrintl (long double __x) noexcept (true); extern long long int __llrintl (long double __x) noexcept (true);



extern long int lroundl (long double __x) noexcept (true); extern long int __lroundl (long double __x) noexcept (true);
__extension__
extern long long int llroundl (long double __x) noexcept (true); extern long long int __llroundl (long double __x) noexcept (true);



extern long double fdiml (long double __x, long double __y) noexcept (true); extern long double __fdiml (long double __x, long double __y) noexcept (true);


extern long double fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) noexcept (true); extern long double __fmal (long double __x, long double __y, long double __z) noexcept (true);




extern long double roundevenl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizel (long double *__cx, const long double *__x) noexcept (true);






extern long double fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) noexcept (true); extern long double __getpayloadl (const long double *__x) noexcept (true);


extern int setpayloadl (long double *__x, long double __payload) noexcept (true);


extern int setpayloadsigl (long double *__x, long double __payload) noexcept (true);







extern long double scalbl (long double __x, long double __n) noexcept (true); extern long double __scalbl (long double __x, long double __n) noexcept (true);
# 400 "/usr/include/math.h" 2 3 4
# 450 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) noexcept (true); extern _Float32 __acosf32 (_Float32 __x) noexcept (true);

extern _Float32 asinf32 (_Float32 __x) noexcept (true); extern _Float32 __asinf32 (_Float32 __x) noexcept (true);

extern _Float32 atanf32 (_Float32 __x) noexcept (true); extern _Float32 __atanf32 (_Float32 __x) noexcept (true);

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) noexcept (true); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) noexcept (true);


 extern _Float32 cosf32 (_Float32 __x) noexcept (true); extern _Float32 __cosf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinf32 (_Float32 __x) noexcept (true); extern _Float32 __sinf32 (_Float32 __x) noexcept (true);

extern _Float32 tanf32 (_Float32 __x) noexcept (true); extern _Float32 __tanf32 (_Float32 __x) noexcept (true);




extern _Float32 coshf32 (_Float32 __x) noexcept (true); extern _Float32 __coshf32 (_Float32 __x) noexcept (true);

extern _Float32 sinhf32 (_Float32 __x) noexcept (true); extern _Float32 __sinhf32 (_Float32 __x) noexcept (true);

extern _Float32 tanhf32 (_Float32 __x) noexcept (true); extern _Float32 __tanhf32 (_Float32 __x) noexcept (true);



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true);





extern _Float32 acoshf32 (_Float32 __x) noexcept (true); extern _Float32 __acoshf32 (_Float32 __x) noexcept (true);

extern _Float32 asinhf32 (_Float32 __x) noexcept (true); extern _Float32 __asinhf32 (_Float32 __x) noexcept (true);

extern _Float32 atanhf32 (_Float32 __x) noexcept (true); extern _Float32 __atanhf32 (_Float32 __x) noexcept (true);





 extern _Float32 expf32 (_Float32 __x) noexcept (true); extern _Float32 __expf32 (_Float32 __x) noexcept (true);


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) noexcept (true); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) noexcept (true);


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) noexcept (true); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) noexcept (true);


 extern _Float32 logf32 (_Float32 __x) noexcept (true); extern _Float32 __logf32 (_Float32 __x) noexcept (true);


extern _Float32 log10f32 (_Float32 __x) noexcept (true); extern _Float32 __log10f32 (_Float32 __x) noexcept (true);


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) noexcept (true); extern _Float32 __exp10f32 (_Float32 __x) noexcept (true);




extern _Float32 expm1f32 (_Float32 __x) noexcept (true); extern _Float32 __expm1f32 (_Float32 __x) noexcept (true);


extern _Float32 log1pf32 (_Float32 __x) noexcept (true); extern _Float32 __log1pf32 (_Float32 __x) noexcept (true);


extern _Float32 logbf32 (_Float32 __x) noexcept (true); extern _Float32 __logbf32 (_Float32 __x) noexcept (true);




extern _Float32 exp2f32 (_Float32 __x) noexcept (true); extern _Float32 __exp2f32 (_Float32 __x) noexcept (true);


extern _Float32 log2f32 (_Float32 __x) noexcept (true); extern _Float32 __log2f32 (_Float32 __x) noexcept (true);






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) noexcept (true);


extern _Float32 sqrtf32 (_Float32 __x) noexcept (true); extern _Float32 __sqrtf32 (_Float32 __x) noexcept (true);



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) noexcept (true);




extern _Float32 cbrtf32 (_Float32 __x) noexcept (true); extern _Float32 __cbrtf32 (_Float32 __x) noexcept (true);






extern _Float32 ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) noexcept (true);
# 198 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) noexcept (true); extern _Float32 __nanf32 (const char *__tagb) noexcept (true);
# 220 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) noexcept (true); extern _Float32 __j0f32 (_Float32) noexcept (true);
extern _Float32 j1f32 (_Float32) noexcept (true); extern _Float32 __j1f32 (_Float32) noexcept (true);
extern _Float32 jnf32 (int, _Float32) noexcept (true); extern _Float32 __jnf32 (int, _Float32) noexcept (true);
extern _Float32 y0f32 (_Float32) noexcept (true); extern _Float32 __y0f32 (_Float32) noexcept (true);
extern _Float32 y1f32 (_Float32) noexcept (true); extern _Float32 __y1f32 (_Float32) noexcept (true);
extern _Float32 ynf32 (int, _Float32) noexcept (true); extern _Float32 __ynf32 (int, _Float32) noexcept (true);





extern _Float32 erff32 (_Float32) noexcept (true); extern _Float32 __erff32 (_Float32) noexcept (true);
extern _Float32 erfcf32 (_Float32) noexcept (true); extern _Float32 __erfcf32 (_Float32) noexcept (true);
extern _Float32 lgammaf32 (_Float32) noexcept (true); extern _Float32 __lgammaf32 (_Float32) noexcept (true);




extern _Float32 tgammaf32 (_Float32) noexcept (true); extern _Float32 __tgammaf32 (_Float32) noexcept (true);
# 252 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) noexcept (true); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) noexcept (true);






extern _Float32 rintf32 (_Float32 __x) noexcept (true); extern _Float32 __rintf32 (_Float32 __x) noexcept (true);


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true);






extern _Float32 nextdownf32 (_Float32 __x) noexcept (true); extern _Float32 __nextdownf32 (_Float32 __x) noexcept (true);

extern _Float32 nextupf32 (_Float32 __x) noexcept (true); extern _Float32 __nextupf32 (_Float32 __x) noexcept (true);



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 scalbnf32 (_Float32 __x, int __n) noexcept (true); extern _Float32 __scalbnf32 (_Float32 __x, int __n) noexcept (true);



extern int ilogbf32 (_Float32 __x) noexcept (true); extern int __ilogbf32 (_Float32 __x) noexcept (true);




extern long int llogbf32 (_Float32 __x) noexcept (true); extern long int __llogbf32 (_Float32 __x) noexcept (true);




extern _Float32 scalblnf32 (_Float32 __x, long int __n) noexcept (true); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) noexcept (true);



extern _Float32 nearbyintf32 (_Float32 __x) noexcept (true); extern _Float32 __nearbyintf32 (_Float32 __x) noexcept (true);



extern _Float32 roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true);






extern long int lrintf32 (_Float32 __x) noexcept (true); extern long int __lrintf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llrintf32 (_Float32 __x) noexcept (true); extern long long int __llrintf32 (_Float32 __x) noexcept (true);



extern long int lroundf32 (_Float32 __x) noexcept (true); extern long int __lroundf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llroundf32 (_Float32 __x) noexcept (true); extern long long int __llroundf32 (_Float32 __x) noexcept (true);



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) noexcept (true);


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true);




extern _Float32 roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) noexcept (true);






extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) noexcept (true); extern _Float32 __getpayloadf32 (const _Float32 *__x) noexcept (true);


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) noexcept (true);


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) noexcept (true);
# 451 "/usr/include/math.h" 2 3 4
# 467 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) noexcept (true); extern _Float64 __acosf64 (_Float64 __x) noexcept (true);

extern _Float64 asinf64 (_Float64 __x) noexcept (true); extern _Float64 __asinf64 (_Float64 __x) noexcept (true);

extern _Float64 atanf64 (_Float64 __x) noexcept (true); extern _Float64 __atanf64 (_Float64 __x) noexcept (true);

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) noexcept (true); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) noexcept (true);


 extern _Float64 cosf64 (_Float64 __x) noexcept (true); extern _Float64 __cosf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinf64 (_Float64 __x) noexcept (true); extern _Float64 __sinf64 (_Float64 __x) noexcept (true);

extern _Float64 tanf64 (_Float64 __x) noexcept (true); extern _Float64 __tanf64 (_Float64 __x) noexcept (true);




extern _Float64 coshf64 (_Float64 __x) noexcept (true); extern _Float64 __coshf64 (_Float64 __x) noexcept (true);

extern _Float64 sinhf64 (_Float64 __x) noexcept (true); extern _Float64 __sinhf64 (_Float64 __x) noexcept (true);

extern _Float64 tanhf64 (_Float64 __x) noexcept (true); extern _Float64 __tanhf64 (_Float64 __x) noexcept (true);



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true);





extern _Float64 acoshf64 (_Float64 __x) noexcept (true); extern _Float64 __acoshf64 (_Float64 __x) noexcept (true);

extern _Float64 asinhf64 (_Float64 __x) noexcept (true); extern _Float64 __asinhf64 (_Float64 __x) noexcept (true);

extern _Float64 atanhf64 (_Float64 __x) noexcept (true); extern _Float64 __atanhf64 (_Float64 __x) noexcept (true);





 extern _Float64 expf64 (_Float64 __x) noexcept (true); extern _Float64 __expf64 (_Float64 __x) noexcept (true);


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) noexcept (true); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) noexcept (true);


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) noexcept (true); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) noexcept (true);


 extern _Float64 logf64 (_Float64 __x) noexcept (true); extern _Float64 __logf64 (_Float64 __x) noexcept (true);


extern _Float64 log10f64 (_Float64 __x) noexcept (true); extern _Float64 __log10f64 (_Float64 __x) noexcept (true);


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) noexcept (true); extern _Float64 __exp10f64 (_Float64 __x) noexcept (true);




extern _Float64 expm1f64 (_Float64 __x) noexcept (true); extern _Float64 __expm1f64 (_Float64 __x) noexcept (true);


extern _Float64 log1pf64 (_Float64 __x) noexcept (true); extern _Float64 __log1pf64 (_Float64 __x) noexcept (true);


extern _Float64 logbf64 (_Float64 __x) noexcept (true); extern _Float64 __logbf64 (_Float64 __x) noexcept (true);




extern _Float64 exp2f64 (_Float64 __x) noexcept (true); extern _Float64 __exp2f64 (_Float64 __x) noexcept (true);


extern _Float64 log2f64 (_Float64 __x) noexcept (true); extern _Float64 __log2f64 (_Float64 __x) noexcept (true);






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float64 sqrtf64 (_Float64 __x) noexcept (true); extern _Float64 __sqrtf64 (_Float64 __x) noexcept (true);



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) noexcept (true);




extern _Float64 cbrtf64 (_Float64 __x) noexcept (true); extern _Float64 __cbrtf64 (_Float64 __x) noexcept (true);






extern _Float64 ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 198 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) noexcept (true); extern _Float64 __nanf64 (const char *__tagb) noexcept (true);
# 220 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) noexcept (true); extern _Float64 __j0f64 (_Float64) noexcept (true);
extern _Float64 j1f64 (_Float64) noexcept (true); extern _Float64 __j1f64 (_Float64) noexcept (true);
extern _Float64 jnf64 (int, _Float64) noexcept (true); extern _Float64 __jnf64 (int, _Float64) noexcept (true);
extern _Float64 y0f64 (_Float64) noexcept (true); extern _Float64 __y0f64 (_Float64) noexcept (true);
extern _Float64 y1f64 (_Float64) noexcept (true); extern _Float64 __y1f64 (_Float64) noexcept (true);
extern _Float64 ynf64 (int, _Float64) noexcept (true); extern _Float64 __ynf64 (int, _Float64) noexcept (true);





extern _Float64 erff64 (_Float64) noexcept (true); extern _Float64 __erff64 (_Float64) noexcept (true);
extern _Float64 erfcf64 (_Float64) noexcept (true); extern _Float64 __erfcf64 (_Float64) noexcept (true);
extern _Float64 lgammaf64 (_Float64) noexcept (true); extern _Float64 __lgammaf64 (_Float64) noexcept (true);




extern _Float64 tgammaf64 (_Float64) noexcept (true); extern _Float64 __tgammaf64 (_Float64) noexcept (true);
# 252 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) noexcept (true); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) noexcept (true);






extern _Float64 rintf64 (_Float64 __x) noexcept (true); extern _Float64 __rintf64 (_Float64 __x) noexcept (true);


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true);






extern _Float64 nextdownf64 (_Float64 __x) noexcept (true); extern _Float64 __nextdownf64 (_Float64 __x) noexcept (true);

extern _Float64 nextupf64 (_Float64 __x) noexcept (true); extern _Float64 __nextupf64 (_Float64 __x) noexcept (true);



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 scalbnf64 (_Float64 __x, int __n) noexcept (true); extern _Float64 __scalbnf64 (_Float64 __x, int __n) noexcept (true);



extern int ilogbf64 (_Float64 __x) noexcept (true); extern int __ilogbf64 (_Float64 __x) noexcept (true);




extern long int llogbf64 (_Float64 __x) noexcept (true); extern long int __llogbf64 (_Float64 __x) noexcept (true);




extern _Float64 scalblnf64 (_Float64 __x, long int __n) noexcept (true); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) noexcept (true);



extern _Float64 nearbyintf64 (_Float64 __x) noexcept (true); extern _Float64 __nearbyintf64 (_Float64 __x) noexcept (true);



extern _Float64 roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true);






extern long int lrintf64 (_Float64 __x) noexcept (true); extern long int __lrintf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llrintf64 (_Float64 __x) noexcept (true); extern long long int __llrintf64 (_Float64 __x) noexcept (true);



extern long int lroundf64 (_Float64 __x) noexcept (true); extern long int __lroundf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llroundf64 (_Float64 __x) noexcept (true); extern long long int __llroundf64 (_Float64 __x) noexcept (true);



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);




extern _Float64 roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) noexcept (true);






extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) noexcept (true); extern _Float64 __getpayloadf64 (const _Float64 *__x) noexcept (true);


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) noexcept (true);


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) noexcept (true);
# 468 "/usr/include/math.h" 2 3 4
# 501 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) noexcept (true); extern _Float32x __acosf32x (_Float32x __x) noexcept (true);

extern _Float32x asinf32x (_Float32x __x) noexcept (true); extern _Float32x __asinf32x (_Float32x __x) noexcept (true);

extern _Float32x atanf32x (_Float32x __x) noexcept (true); extern _Float32x __atanf32x (_Float32x __x) noexcept (true);

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) noexcept (true); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) noexcept (true);


 extern _Float32x cosf32x (_Float32x __x) noexcept (true); extern _Float32x __cosf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinf32x (_Float32x __x) noexcept (true); extern _Float32x __sinf32x (_Float32x __x) noexcept (true);

extern _Float32x tanf32x (_Float32x __x) noexcept (true); extern _Float32x __tanf32x (_Float32x __x) noexcept (true);




extern _Float32x coshf32x (_Float32x __x) noexcept (true); extern _Float32x __coshf32x (_Float32x __x) noexcept (true);

extern _Float32x sinhf32x (_Float32x __x) noexcept (true); extern _Float32x __sinhf32x (_Float32x __x) noexcept (true);

extern _Float32x tanhf32x (_Float32x __x) noexcept (true); extern _Float32x __tanhf32x (_Float32x __x) noexcept (true);



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true);





extern _Float32x acoshf32x (_Float32x __x) noexcept (true); extern _Float32x __acoshf32x (_Float32x __x) noexcept (true);

extern _Float32x asinhf32x (_Float32x __x) noexcept (true); extern _Float32x __asinhf32x (_Float32x __x) noexcept (true);

extern _Float32x atanhf32x (_Float32x __x) noexcept (true); extern _Float32x __atanhf32x (_Float32x __x) noexcept (true);





 extern _Float32x expf32x (_Float32x __x) noexcept (true); extern _Float32x __expf32x (_Float32x __x) noexcept (true);


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) noexcept (true); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) noexcept (true);


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) noexcept (true); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) noexcept (true);


 extern _Float32x logf32x (_Float32x __x) noexcept (true); extern _Float32x __logf32x (_Float32x __x) noexcept (true);


extern _Float32x log10f32x (_Float32x __x) noexcept (true); extern _Float32x __log10f32x (_Float32x __x) noexcept (true);


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) noexcept (true); extern _Float32x __exp10f32x (_Float32x __x) noexcept (true);




extern _Float32x expm1f32x (_Float32x __x) noexcept (true); extern _Float32x __expm1f32x (_Float32x __x) noexcept (true);


extern _Float32x log1pf32x (_Float32x __x) noexcept (true); extern _Float32x __log1pf32x (_Float32x __x) noexcept (true);


extern _Float32x logbf32x (_Float32x __x) noexcept (true); extern _Float32x __logbf32x (_Float32x __x) noexcept (true);




extern _Float32x exp2f32x (_Float32x __x) noexcept (true); extern _Float32x __exp2f32x (_Float32x __x) noexcept (true);


extern _Float32x log2f32x (_Float32x __x) noexcept (true); extern _Float32x __log2f32x (_Float32x __x) noexcept (true);






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32x sqrtf32x (_Float32x __x) noexcept (true); extern _Float32x __sqrtf32x (_Float32x __x) noexcept (true);



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) noexcept (true);




extern _Float32x cbrtf32x (_Float32x __x) noexcept (true); extern _Float32x __cbrtf32x (_Float32x __x) noexcept (true);






extern _Float32x ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 198 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) noexcept (true); extern _Float32x __nanf32x (const char *__tagb) noexcept (true);
# 220 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) noexcept (true); extern _Float32x __j0f32x (_Float32x) noexcept (true);
extern _Float32x j1f32x (_Float32x) noexcept (true); extern _Float32x __j1f32x (_Float32x) noexcept (true);
extern _Float32x jnf32x (int, _Float32x) noexcept (true); extern _Float32x __jnf32x (int, _Float32x) noexcept (true);
extern _Float32x y0f32x (_Float32x) noexcept (true); extern _Float32x __y0f32x (_Float32x) noexcept (true);
extern _Float32x y1f32x (_Float32x) noexcept (true); extern _Float32x __y1f32x (_Float32x) noexcept (true);
extern _Float32x ynf32x (int, _Float32x) noexcept (true); extern _Float32x __ynf32x (int, _Float32x) noexcept (true);





extern _Float32x erff32x (_Float32x) noexcept (true); extern _Float32x __erff32x (_Float32x) noexcept (true);
extern _Float32x erfcf32x (_Float32x) noexcept (true); extern _Float32x __erfcf32x (_Float32x) noexcept (true);
extern _Float32x lgammaf32x (_Float32x) noexcept (true); extern _Float32x __lgammaf32x (_Float32x) noexcept (true);




extern _Float32x tgammaf32x (_Float32x) noexcept (true); extern _Float32x __tgammaf32x (_Float32x) noexcept (true);
# 252 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true);






extern _Float32x rintf32x (_Float32x __x) noexcept (true); extern _Float32x __rintf32x (_Float32x __x) noexcept (true);


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true);






extern _Float32x nextdownf32x (_Float32x __x) noexcept (true); extern _Float32x __nextdownf32x (_Float32x __x) noexcept (true);

extern _Float32x nextupf32x (_Float32x __x) noexcept (true); extern _Float32x __nextupf32x (_Float32x __x) noexcept (true);



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x scalbnf32x (_Float32x __x, int __n) noexcept (true); extern _Float32x __scalbnf32x (_Float32x __x, int __n) noexcept (true);



extern int ilogbf32x (_Float32x __x) noexcept (true); extern int __ilogbf32x (_Float32x __x) noexcept (true);




extern long int llogbf32x (_Float32x __x) noexcept (true); extern long int __llogbf32x (_Float32x __x) noexcept (true);




extern _Float32x scalblnf32x (_Float32x __x, long int __n) noexcept (true); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) noexcept (true);



extern _Float32x nearbyintf32x (_Float32x __x) noexcept (true); extern _Float32x __nearbyintf32x (_Float32x __x) noexcept (true);



extern _Float32x roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true);






extern long int lrintf32x (_Float32x __x) noexcept (true); extern long int __lrintf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llrintf32x (_Float32x __x) noexcept (true); extern long long int __llrintf32x (_Float32x __x) noexcept (true);



extern long int lroundf32x (_Float32x __x) noexcept (true); extern long int __lroundf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llroundf32x (_Float32x __x) noexcept (true); extern long long int __llroundf32x (_Float32x __x) noexcept (true);



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);




extern _Float32x roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) noexcept (true);






extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) noexcept (true); extern _Float32x __getpayloadf32x (const _Float32x *__x) noexcept (true);


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) noexcept (true);


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) noexcept (true);
# 502 "/usr/include/math.h" 2 3 4
# 518 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) noexcept (true); extern _Float64x __acosf64x (_Float64x __x) noexcept (true);

extern _Float64x asinf64x (_Float64x __x) noexcept (true); extern _Float64x __asinf64x (_Float64x __x) noexcept (true);

extern _Float64x atanf64x (_Float64x __x) noexcept (true); extern _Float64x __atanf64x (_Float64x __x) noexcept (true);

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) noexcept (true); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) noexcept (true);


 extern _Float64x cosf64x (_Float64x __x) noexcept (true); extern _Float64x __cosf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinf64x (_Float64x __x) noexcept (true); extern _Float64x __sinf64x (_Float64x __x) noexcept (true);

extern _Float64x tanf64x (_Float64x __x) noexcept (true); extern _Float64x __tanf64x (_Float64x __x) noexcept (true);




extern _Float64x coshf64x (_Float64x __x) noexcept (true); extern _Float64x __coshf64x (_Float64x __x) noexcept (true);

extern _Float64x sinhf64x (_Float64x __x) noexcept (true); extern _Float64x __sinhf64x (_Float64x __x) noexcept (true);

extern _Float64x tanhf64x (_Float64x __x) noexcept (true); extern _Float64x __tanhf64x (_Float64x __x) noexcept (true);



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true);





extern _Float64x acoshf64x (_Float64x __x) noexcept (true); extern _Float64x __acoshf64x (_Float64x __x) noexcept (true);

extern _Float64x asinhf64x (_Float64x __x) noexcept (true); extern _Float64x __asinhf64x (_Float64x __x) noexcept (true);

extern _Float64x atanhf64x (_Float64x __x) noexcept (true); extern _Float64x __atanhf64x (_Float64x __x) noexcept (true);





 extern _Float64x expf64x (_Float64x __x) noexcept (true); extern _Float64x __expf64x (_Float64x __x) noexcept (true);


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) noexcept (true); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) noexcept (true);


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) noexcept (true); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) noexcept (true);


 extern _Float64x logf64x (_Float64x __x) noexcept (true); extern _Float64x __logf64x (_Float64x __x) noexcept (true);


extern _Float64x log10f64x (_Float64x __x) noexcept (true); extern _Float64x __log10f64x (_Float64x __x) noexcept (true);


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) noexcept (true); extern _Float64x __exp10f64x (_Float64x __x) noexcept (true);




extern _Float64x expm1f64x (_Float64x __x) noexcept (true); extern _Float64x __expm1f64x (_Float64x __x) noexcept (true);


extern _Float64x log1pf64x (_Float64x __x) noexcept (true); extern _Float64x __log1pf64x (_Float64x __x) noexcept (true);


extern _Float64x logbf64x (_Float64x __x) noexcept (true); extern _Float64x __logbf64x (_Float64x __x) noexcept (true);




extern _Float64x exp2f64x (_Float64x __x) noexcept (true); extern _Float64x __exp2f64x (_Float64x __x) noexcept (true);


extern _Float64x log2f64x (_Float64x __x) noexcept (true); extern _Float64x __log2f64x (_Float64x __x) noexcept (true);






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64x sqrtf64x (_Float64x __x) noexcept (true); extern _Float64x __sqrtf64x (_Float64x __x) noexcept (true);



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) noexcept (true);




extern _Float64x cbrtf64x (_Float64x __x) noexcept (true); extern _Float64x __cbrtf64x (_Float64x __x) noexcept (true);






extern _Float64x ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 198 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) noexcept (true); extern _Float64x __nanf64x (const char *__tagb) noexcept (true);
# 220 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) noexcept (true); extern _Float64x __j0f64x (_Float64x) noexcept (true);
extern _Float64x j1f64x (_Float64x) noexcept (true); extern _Float64x __j1f64x (_Float64x) noexcept (true);
extern _Float64x jnf64x (int, _Float64x) noexcept (true); extern _Float64x __jnf64x (int, _Float64x) noexcept (true);
extern _Float64x y0f64x (_Float64x) noexcept (true); extern _Float64x __y0f64x (_Float64x) noexcept (true);
extern _Float64x y1f64x (_Float64x) noexcept (true); extern _Float64x __y1f64x (_Float64x) noexcept (true);
extern _Float64x ynf64x (int, _Float64x) noexcept (true); extern _Float64x __ynf64x (int, _Float64x) noexcept (true);





extern _Float64x erff64x (_Float64x) noexcept (true); extern _Float64x __erff64x (_Float64x) noexcept (true);
extern _Float64x erfcf64x (_Float64x) noexcept (true); extern _Float64x __erfcf64x (_Float64x) noexcept (true);
extern _Float64x lgammaf64x (_Float64x) noexcept (true); extern _Float64x __lgammaf64x (_Float64x) noexcept (true);




extern _Float64x tgammaf64x (_Float64x) noexcept (true); extern _Float64x __tgammaf64x (_Float64x) noexcept (true);
# 252 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true);






extern _Float64x rintf64x (_Float64x __x) noexcept (true); extern _Float64x __rintf64x (_Float64x __x) noexcept (true);


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true);






extern _Float64x nextdownf64x (_Float64x __x) noexcept (true); extern _Float64x __nextdownf64x (_Float64x __x) noexcept (true);

extern _Float64x nextupf64x (_Float64x __x) noexcept (true); extern _Float64x __nextupf64x (_Float64x __x) noexcept (true);



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x scalbnf64x (_Float64x __x, int __n) noexcept (true); extern _Float64x __scalbnf64x (_Float64x __x, int __n) noexcept (true);



extern int ilogbf64x (_Float64x __x) noexcept (true); extern int __ilogbf64x (_Float64x __x) noexcept (true);




extern long int llogbf64x (_Float64x __x) noexcept (true); extern long int __llogbf64x (_Float64x __x) noexcept (true);




extern _Float64x scalblnf64x (_Float64x __x, long int __n) noexcept (true); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) noexcept (true);



extern _Float64x nearbyintf64x (_Float64x __x) noexcept (true); extern _Float64x __nearbyintf64x (_Float64x __x) noexcept (true);



extern _Float64x roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true);






extern long int lrintf64x (_Float64x __x) noexcept (true); extern long int __lrintf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llrintf64x (_Float64x __x) noexcept (true); extern long long int __llrintf64x (_Float64x __x) noexcept (true);



extern long int lroundf64x (_Float64x __x) noexcept (true); extern long int __lroundf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llroundf64x (_Float64x __x) noexcept (true); extern long long int __llroundf64x (_Float64x __x) noexcept (true);



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);




extern _Float64x roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) noexcept (true);






extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) noexcept (true); extern _Float64x __getpayloadf64x (const _Float64x *__x) noexcept (true);


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) noexcept (true);


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) noexcept (true);
# 519 "/usr/include/math.h" 2 3 4
# 566 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) noexcept (true);


extern float fdiv (double __x, double __y) noexcept (true);


extern float fmul (double __x, double __y) noexcept (true);


extern float fsub (double __x, double __y) noexcept (true);
# 567 "/usr/include/math.h" 2 3 4
# 585 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) noexcept (true);


extern float fdivl (long double __x, long double __y) noexcept (true);


extern float fmull (long double __x, long double __y) noexcept (true);


extern float fsubl (long double __x, long double __y) noexcept (true);
# 586 "/usr/include/math.h" 2 3 4
# 611 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) noexcept (true);


extern double ddivl (long double __x, long double __y) noexcept (true);


extern double dmull (long double __x, long double __y) noexcept (true);


extern double dsubl (long double __x, long double __y) noexcept (true);
# 612 "/usr/include/math.h" 2 3 4
# 691 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 692 "/usr/include/math.h" 2 3 4
# 701 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 702 "/usr/include/math.h" 2 3 4
# 711 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 712 "/usr/include/math.h" 2 3 4
# 741 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 742 "/usr/include/math.h" 2 3 4
# 751 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 752 "/usr/include/math.h" 2 3 4
# 781 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 782 "/usr/include/math.h" 2 3 4
# 848 "/usr/include/math.h" 3 4
extern int signgam;
# 928 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1048 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     noexcept (true) __attribute__ ((__const__));
# 46 "/usr/include/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 1049 "/usr/include/math.h" 2 3 4
# 1060 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1091 "/usr/include/math.h" 3 4
extern "C++" {
# 1122 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1340 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1383 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 77 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1889 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
}





}
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 10 "./nnet_utils/nnet_helpers.h" 2

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/stdlib.h" 1 3
# 36 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/stdlib.h" 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
# 37 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 12 "./nnet_utils/nnet_helpers.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/vector" 1 3
# 59 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/vector" 3




# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 1 3
# 67 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   if (true)
     {
       for (; __first != __last; ++__first, (void)++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__result, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 113 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;




      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 179 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 242 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, (void)++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur, __alloc);
                          ;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 378 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      if (true)
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      if (false)
 {
   std::_Destroy(__first2, __mid2, __alloc);
                          ;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>
 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
                          ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return {__first, __cur};
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
                          ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 810 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }

  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 883 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_uninitialized.h" 3
}
# 64 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/vector" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 1 3
# 74 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(), _M_finish(), _M_end_of_storage()
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
# 231 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      {
 _M_deallocate(_M_impl._M_start,
        _M_impl._M_end_of_storage - _M_impl._M_start);
      }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 338 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
# 351 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
   "std::vector must have a non-const, non-volatile value_type");






      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }





      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 414 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }
# 427 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 458 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
 _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 476 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }
# 515 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 541 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 565 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      ~vector() noexcept
      {
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
                                      ;
      }
# 581 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 595 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 616 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
 return *this;
      }
# 635 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 652 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 680 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 823 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 843 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   _M_fill_insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 875 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 914 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 929 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      {
                                  ;
 return *(this->_M_impl._M_start + __n);
      }
# 947 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      {
                                  ;
 return *(this->_M_impl._M_start + __n);
      }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
      }

    public:
# 978 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 996 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      {
                              ;
 return *begin();
      }





      const_reference
      front() const noexcept
      {
                              ;
 return *begin();
      }





      reference
      back() noexcept
      {
                              ;
 return *(end() - 1);
      }





      const_reference
      back() const noexcept
      {
                              ;
 return *(end() - 1);
      }
# 1054 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      _Tp*
      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 1073 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
                                   ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
                                   ;
   }
 else
   _M_realloc_insert(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args);
# 1111 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      pop_back() noexcept
      {
                              ;
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
                                 ;
      }
# 1133 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args)
 { return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
# 1149 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1179 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_insert_rval(__position, std::move(__x)); }
# 1196 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      {
 auto __offset = __position - cbegin();
 _M_range_insert(begin() + __offset, __l.begin(), __l.end(),
   std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1221 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1263 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1315 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1342 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1366 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      void
      swap(vector& __x) noexcept
      {


                                                          ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
 pointer
 _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
 {
   pointer __result = this->_M_allocate(__n);
   if (true)
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   if (false)
     {
       _M_deallocate(__result, __n);
                              ;
     }
 }
# 1419 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
 {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   if (true) {
     for (; __first != __last; ++__first)

       emplace_back(*__first);



   } if (false) {
     clear();
                            ;
   }
 }


      template<typename _ForwardIterator>
 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 1502 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);







      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
 { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
 {
   _M_range_insert(__pos, __first, __last,
     std::__iterator_category(__first));
 }


      template<typename _InputIterator>
 void
 _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();
# 1589 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
      struct _Temporary_value
      {
 template<typename... _Args>
   explicit
   _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
   {
     _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
         std::forward<_Args>(__args)...);
   }

 ~_Temporary_value()
 { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }

 value_type&
 _M_val() { return *reinterpret_cast<_Tp*>(&__buf); }

      private:
 pointer
 _M_ptr() { return pointer_traits<pointer>::pointer_to(_M_val()); }

 vector* _M_this;
 typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
      };



      template<typename _Arg>
 void
 _M_insert_aux(iterator __position, _Arg&& __arg);

      template<typename... _Args>
 void
 _M_realloc_insert(iterator __position, _Args&&... __args);


      iterator
      _M_insert_rval(const_iterator __position, value_type&& __v);


      template<typename... _Args>
 iterator
 _M_emplace_aux(const_iterator __position, _Args&&... __args);


      iterator
      _M_emplace_aux(const_iterator __position, value_type&& __v)
      { return _M_insert_rval(__position, std::move(__v)); }



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 if (size_type __n = this->_M_impl._M_finish - __pos)
   {
     std::_Destroy(__pos, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     this->_M_impl._M_finish = __pos;
                                       ;
   }
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {


     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }


      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const noexcept
 { return __ptr; }


      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__to_address(__ptr); }
# 1729 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
    };
# 1751 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1768 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }



}
# 65 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/vector" 2 3
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_bvector.h" 1 3
# 64 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
     || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_type * __v,
   unsigned int __first, unsigned int __last, bool __x)
  {
    const _Bit_type __fmask = ~0ul << __first;
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    const _Bit_type __mask = __fmask & __lmask;

    if (__x)
      *__v |= __mask;
    else
      *__v &= ~__mask;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 _Bit_type* __first_p = __first._M_p;
 if (__first._M_offset != 0)
   __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);

 __builtin_memset(__first_p, __x ? ~0 : 0,
    (__last._M_p - __first_p) * sizeof(_Bit_type));

 if (__last._M_offset != 0)
   __fill_bvector(__last._M_p, 0, __last._M_offset, __x);
      }
    else if (__first._M_offset != __last._M_offset)
      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl_data
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
 : _M_start(__x._M_start), _M_finish(__x._M_finish)
 , _M_end_of_storage(__x._M_end_of_storage)
 { __x._M_reset(); }

 void
 _M_move_data(_Bvector_impl_data&& __x) noexcept
 {
   this->_M_start = __x._M_start;
   this->_M_finish = __x._M_finish;
   this->_M_end_of_storage = __x._M_end_of_storage;
   __x._M_reset();
 }


 void
 _M_reset() noexcept
 {
   _M_start = _M_finish = _Bit_iterator();
   _M_end_of_storage = _Bit_pointer();
 }
      };

      struct _Bvector_impl
 : public _Bit_alloc_type, public _Bvector_impl_data
 {
 public:
   _Bvector_impl() noexcept(is_nothrow_default_constructible<_Bit_alloc_type>::value)

   : _Bit_alloc_type()
   { }

   _Bvector_impl(const _Bit_alloc_type& __a) noexcept
   : _Bit_alloc_type(__a)
   { }


 _Bvector_impl(_Bvector_impl&&) = default;


 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (this->_M_end_of_storage)
     return std::__addressof(this->_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return this->_M_impl; }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return this->_M_impl; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }


      _Bvector_base() = default;




      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&&) = default;


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
     _M_impl._M_reset();
   }
      }


      void
      _M_move_data(_Bvector_base&& __x) noexcept
      { _M_impl._M_move_data(std::move(__x._M_impl)); }


      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };



}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 587 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_bvector.h" 3
  template<typename _Alloc>
    class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
    {
      typedef _Bvector_base<_Alloc> _Base;
      typedef typename _Base::_Bit_pointer _Bit_pointer;
      typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


      friend struct std::hash<vector>;


    public:
      typedef bool value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Bit_reference reference;
      typedef bool const_reference;
      typedef _Bit_reference* pointer;
      typedef const bool* const_pointer;
      typedef _Bit_iterator iterator;
      typedef _Bit_const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef _Alloc allocator_type;

      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_S_nword;
      using _Base::_M_get_Bit_allocator;

    public:

      vector() = default;




      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }


      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
      const allocator_type& __a = allocator_type())





      : _Base(__a)
      {
 _M_initialize(__n);
 _M_initialize_value(__value);
      }

      vector(const vector& __x)
      : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
      }


      vector(vector&&) = default;

      vector(vector&& __x, const allocator_type& __a)
      noexcept(_Bit_alloc_traits::_S_always_equal())
      : _Base(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_move_data(std::move(__x));
 else
   {
     _M_initialize(__x.size());
     _M_copy_aligned(__x.begin(), __x.end(), begin());
     __x.clear();
   }
      }

      vector(const vector& __x, const allocator_type& __a)
      : _Base(__a)
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
      }

      vector(initializer_list<bool> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_initialize_range(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 710 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_bvector.h" 3
      ~vector() noexcept { }

      vector&
      operator=(const vector& __x)
      {
 if (&__x == this)
   return *this;

 if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
   {
     if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
       {
  this->_M_deallocate();
  std::__alloc_on_copy(_M_get_Bit_allocator(),
         __x._M_get_Bit_allocator());
  _M_initialize(__x.size());
       }
     else
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
   }

 if (__x.size() > capacity())
   {
     this->_M_deallocate();
     _M_initialize(__x.size());
   }
 this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
        begin());
 return *this;
      }


      vector&
      operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
      {
 if (_Bit_alloc_traits::_S_propagate_on_move_assign()
     || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
   {
     this->_M_deallocate();
     this->_M_move_data(std::move(__x));
     std::__alloc_on_move(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
   }
 else
   {
     if (__x.size() > capacity())
       {
  this->_M_deallocate();
  _M_initialize(__x.size());
       }
     this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
            begin());
     __x.clear();
   }
 return *this;
      }

      vector&
      operator=(initializer_list<bool> __l)
      {
 this->assign (__l.begin(), __l.end());
 return *this;
      }






      void
      assign(size_type __n, const bool& __x)
      { _M_fill_assign(__n, __x); }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 801 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_bvector.h" 3
      void
      assign(initializer_list<bool> __l)
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }


      iterator
      begin() noexcept
      { return this->_M_impl._M_start; }

      const_iterator
      begin() const noexcept
      { return this->_M_impl._M_start; }

      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }

      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }


      const_iterator
      cbegin() const noexcept
      { return this->_M_impl._M_start; }

      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      size_type
      size() const noexcept
      { return size_type(end() - begin()); }

      size_type
      max_size() const noexcept
      {
 const size_type __isize =
   __gnu_cxx::__numeric_traits<difference_type>::__max
   - int(_S_word_bit) + 1;
 const size_type __asize
   = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
 return (__asize <= __isize / int(_S_word_bit)
  ? __asize * int(_S_word_bit) : __isize);
      }

      size_type
      capacity() const noexcept
      { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
    - begin()); }

      bool
      empty() const noexcept
      { return begin() == end(); }

      reference
      operator[](size_type __n)
      {
 return *iterator(this->_M_impl._M_start._M_p
    + __n / int(_S_word_bit), __n % int(_S_word_bit));
      }

      const_reference
      operator[](size_type __n) const
      {
 return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
      }

    protected:
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
      }

    public:
      reference
      at(size_type __n)
      { _M_range_check(__n); return (*this)[__n]; }

      const_reference
      at(size_type __n) const
      { _M_range_check(__n); return (*this)[__n]; }

      void
      reserve(size_type __n)
      {
 if (__n > max_size())
   __throw_length_error(("vector::reserve"));
 if (capacity() < __n)
   _M_reallocate(__n);
      }

      reference
      front()
      { return *begin(); }

      const_reference
      front() const
      { return *begin(); }

      reference
      back()
      { return *(end() - 1); }

      const_reference
      back() const
      { return *(end() - 1); }






      void
      data() noexcept { }

      void
      push_back(bool __x)
      {
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(end(), __x);
      }

      void
      swap(vector& __x) noexcept
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);
 _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
      }


      static void
      swap(reference __x, reference __y) noexcept
      {
 bool __tmp = __x;
 __x = __y;
 __y = __tmp;
      }

      iterator

      insert(const_iterator __position, const bool& __x = bool())



      {
 const difference_type __n = __position - begin();
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
     && __position == end())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(__position._M_const_cast(), __x);
 return begin() + __n;
      }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position,
        _InputIterator __first, _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(__position._M_const_cast(),
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1017 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_bvector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const bool& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }







      iterator
      insert(const_iterator __p, initializer_list<bool> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }


      void
      pop_back()
      { --this->_M_impl._M_finish; }

      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }

      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

      void
      resize(size_type __new_size, bool __x = bool())
      {
 if (__new_size < size())
   _M_erase_at_end(begin() + difference_type(__new_size));
 else
   insert(end(), __new_size - size(), __x);
      }


      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }


      void
      flip() noexcept
      {
 _Bit_type * const __end = this->_M_impl._M_end_addr();
 for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
   *__p = ~*__p;
      }

      void
      clear() noexcept
      { _M_erase_at_end(begin()); }


      template<typename... _Args>



 void

 emplace_back(_Args&&... __args)
 {
   push_back(bool(__args...));



 }

      template<typename... _Args>
 iterator
 emplace(const_iterator __pos, _Args&&... __args)
 { return insert(__pos, bool(__args...)); }


    protected:

      iterator
      _M_copy_aligned(const_iterator __first, const_iterator __last,
        iterator __result)
      {
 _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
 return std::copy(const_iterator(__last._M_p, 0), __last,
    iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
      {
 if (__n)
   {
     _Bit_pointer __q = this->_M_allocate(__n);
     this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
     this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
   }
 else
   {
     this->_M_impl._M_end_of_storage = _Bit_pointer();
     this->_M_impl._M_start = iterator(0, 0);
   }
 this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);

      }

      void
      _M_initialize_value(bool __x)
      {
 if (_Bit_type* __p = this->_M_impl._M_start._M_p)
   __builtin_memset(__p, __x ? ~0 : 0,
      (this->_M_impl._M_end_addr() - __p)
      * sizeof(_Bit_type));
      }

      void
      _M_reallocate(size_type __n);


      bool
      _M_shrink_to_fit();






      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
 {
   _M_initialize(static_cast<size_type>(__n));
   _M_initialize_value(__x);
 }

      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 { _M_initialize_range(__first, __last,
         std::__iterator_category(__first)); }

      template<typename _InputIterator>
 void
 _M_initialize_range(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }

      template<typename _ForwardIterator>
 void
 _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   _M_initialize(__n);
   std::copy(__first, __last, this->_M_impl._M_start);
 }
# 1203 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/stl_bvector.h" 3
      void
      _M_fill_assign(size_t __n, bool __x)
      {
 if (__n > size())
   {
     _M_initialize_value(__x);
     insert(end(), __n - size(), __x);
   }
 else
   {
     _M_erase_at_end(begin() + __n);
     _M_initialize_value(__x);
   }
      }

      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag)
 {
   iterator __cur = begin();
   for (; __first != __last && __cur != end(); ++__cur, ++__first)
     *__cur = *__first;
   if (__first == __last)
     _M_erase_at_end(__cur);
   else
     insert(end(), __first, __last);
 }

      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
 {
   const size_type __len = std::distance(__first, __last);
   if (__len < size())
     _M_erase_at_end(std::copy(__first, __last, begin()));
   else
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       insert(end(), __mid, __last);
     }
 }





      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
      __true_type)
 { _M_fill_insert(__pos, __n, __x); }

      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos,
      _InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_insert_range(__pos, __first, __last,
     std::__iterator_category(__first)); }

      void
      _M_fill_insert(iterator __position, size_type __n, bool __x);

      template<typename _InputIterator>
 void
 _M_insert_range(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     {
       __pos = insert(__pos, *__first);
       ++__pos;
     }
 }

      template<typename _ForwardIterator>
 void
 _M_insert_range(iterator __position, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);

      void
      _M_insert_aux(iterator __position, bool __x);

      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      void
      _M_erase_at_end(iterator __pos)
      { this->_M_impl._M_finish = __pos; }

      iterator
      _M_erase(iterator __pos);

      iterator
      _M_erase(iterator __first, iterator __last);
  };



}



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/vector" 2 3



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/vector.tcc" 1 3
# 59 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
                                ;
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>



      void

      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
                                   ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
                                   ;
   }
 else
   _M_realloc_insert(end(), std::forward<_Args>(__args)...);



      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == end())
   {
                                   ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
                                   ;
   }
 else
   {

     const auto __pos = begin() + (__position - cbegin());


     _Temporary_value __x_copy(this, __x);
     _M_insert_aux(__pos, std::move(__x_copy._M_val()));



   }
      else

 _M_realloc_insert(begin() + (__position - cbegin()), __x);




      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
                                      ;
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
                                ;

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   const size_type __add = __n - size();
                                     ;
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __add, __val, _M_get_Tp_allocator());
                                     ;
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert(end(), __first, __last,
     std::__iterator_category(__first));
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
                                  ;
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     const size_type __attribute__((__unused__)) __n = __len - size();
                                     ;
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
                                     ;
   }
      }


  template<typename _Tp, typename _Alloc>
    auto
    vector<_Tp, _Alloc>::
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == cend())
   {
                                   ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::move(__v));
     ++this->_M_impl._M_finish;
                                   ;
   }
 else
   _M_insert_aux(begin() + __n, std::move(__v));
      else
 _M_realloc_insert(begin() + __n, std::move(__v));

      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      auto
      vector<_Tp, _Alloc>::
      _M_emplace_aux(const_iterator __position, _Args&&... __args)
      -> iterator
      {
 const auto __n = __position - cbegin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   if (__position == cend())
     {
                                     ;
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           std::forward<_Args>(__args)...);
       ++this->_M_impl._M_finish;
                                     ;
     }
   else
     {



       _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
       _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
     }
 else
   _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);

 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Arg&& __arg)






    {
                                    ;
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          std::move(*(this->_M_impl._M_finish - 1)));
      ++this->_M_impl._M_finish;
                                    ;



      std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





      *__position = std::forward<_Arg>(__arg);

    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_realloc_insert(iterator __position, _Args&&... __args)






    {
      const size_type __len =
 _M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
      pointer __old_finish = this->_M_impl._M_finish;
      const size_type __elems_before = __position - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);
      if (true)
 {





   _Alloc_traits::construct(this->_M_impl,
       __new_start + __elems_before,

       std::forward<_Args>(__args)...);



   __new_finish = pointer();

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (__old_start, __position.base(),
      __new_start, _M_get_Tp_allocator());

   ++__new_finish;

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (__position.base(), __old_finish,
      __new_finish, _M_get_Tp_allocator());
 }
      if (false)
 {
   if (!__new_finish)
     _Alloc_traits::destroy(this->_M_impl,
       __new_start + __elems_before);
   else
     std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
   _M_deallocate(__new_start, __len);
                          ;
 }
                                   ;
      std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _M_deallocate(__old_start,
      this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {



       _Temporary_value __tmp(this, __x);
       value_type& __x_copy = __tmp._M_val();

       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
                                    ;
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
                                    ;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
                                    ;
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
                                                    ;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
                                              ;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       if (false)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
                                    ;
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   const size_type __size = size();
   size_type __navail = size_type(this->_M_impl._M_end_of_storage
      - this->_M_impl._M_finish);

   if (__size > max_size() || __navail > max_size() - __size)
     __builtin_unreachable();

   if (__navail >= __n)
     {
                                       ;
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
                                       ;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       pointer __new_start(this->_M_allocate(__len));
       pointer __destroy_from = pointer();
       if (true)
  {
    std::__uninitialized_default_n_a(__new_start + __size,
         __n, _M_get_Tp_allocator());
    __destroy_from = __new_start + __size;
    std::__uninitialized_move_if_noexcept_a(
        this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());
  }
       if (false)
  {
    if (__destroy_from)
      std::_Destroy(__destroy_from, __destroy_from + __n,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
                                    ;
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_start + __size + __n;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
                                   ;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 if (__pos == end())
   {
     for (; __first != __last; ++__first)
       insert(end(), *__first);
   }
 else if (__first != __last)
   {
     vector __tmp(__first, __last, _M_get_Tp_allocator());
     insert(__pos,
     std::make_move_iterator(__tmp.begin()),
     std::make_move_iterator(__tmp.end()));
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
                                      ;
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
                                      ;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
                                      ;
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
                                                      ;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
                                                ;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  if (true)
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  if (false)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
                             ;
    }
                               ;
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      iterator __finish(_M_copy_aligned(begin(), end(), __start));
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   iterator __finish = std::copy(__position, end(),
     __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  iterator __finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
  this->_M_impl._M_finish = __finish;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   iterator __finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      if (true)
 {
   _M_reallocate(size());
   return true;
 }
      if (false)
 { return false; }
    }




}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/vector" 2 3
# 13 "./nnet_utils/nnet_helpers.h" 2

namespace nnet {
# 252 "./nnet_utils/nnet_helpers.h"
template <class src_T, class dst_T, size_t OFFSET, size_t SIZE> void copy_data(std::vector<src_T> src, dst_T dst[SIZE]) {
    typename std::vector<src_T>::const_iterator in_begin = src.cbegin() + OFFSET;
    typename std::vector<src_T>::const_iterator in_end = in_begin + SIZE;
    std::copy(in_begin, in_end, dst);
}

template <class src_T, class dst_T, size_t OFFSET, size_t SIZE>
void copy_data(src_T src[1], hls::stream<dst_T> &dst) {
    src_T* in_begin = src + OFFSET;
    src_T* in_end = in_begin + SIZE;

    size_t i_pack = 0;
    dst_T dst_pack;
    VITIS_LOOP_265_1: for (src_T* i = in_begin; i != in_end; ++i) {
        dst_pack[i_pack++] = typename dst_T::value_type(*i);
        if (i_pack == dst_T::size) {
            i_pack = 0;
            dst.write(dst_pack);
        }
    }
}


template <class src_T, class dst_T, size_t OFFSET, size_t SIZE> void copy_data_axi(std::vector<src_T> src, dst_T dst[SIZE]) {
    VITIS_LOOP_276_1: for (auto i = 0; i < SIZE; i++)
        if (i == SIZE - 1) {
            dst[i].data = src[i];
            dst[i].last = 1;
        } else {
            dst[i].data = src[i];
            dst[i].last = 0;
        }
}

template <class res_T, size_t SIZE> void print_result(res_T result[SIZE], std::ostream &out, bool keep = false) {
    VITIS_LOOP_287_1: for (int i = 0; i < SIZE; i++) {
        out << result[i] << " ";
    }
    out << std::endl;
}

template <class res_T, size_t SIZE> void print_result(hls::stream<res_T> &result, std::ostream &out, bool keep = false) {
    VITIS_LOOP_294_1: for (int i = 0; i < SIZE / res_T::size; i++) {
        res_T res_pack = result.read();
        VITIS_LOOP_296_2: for (int j = 0; j < res_T::size; j++) {
            out << res_pack[j] << " ";
        }
        if (keep)
            result.write(res_pack);
    }
    out << std::endl;
}

template <class data_T, size_t SIZE> void fill_zero(data_T data[SIZE]) { std::fill_n(data, SIZE, 0.); }

template <class data_T, size_t SIZE> void fill_zero(hls::stream<data_T> &data) {
    VITIS_LOOP_308_1: for (int i = 0; i < SIZE / data_T::size; i++) {
        data_T data_pack;
        VITIS_LOOP_310_2: for (int j = 0; j < data_T::size; j++) {
            data_pack[j] = 0.;
        }
        data.write(data_pack);
    }
}

template <class dataType, unsigned int nrows> int read_file_1D(const char *filename, dataType data[nrows]) {
    FILE *fp;
    fp = fopen(filename, "r");
    if (fp == 0) {
        return -1;
    }

    float newval;
    VITIS_LOOP_325_1: for (int ii = 0; ii < nrows; ii++) {
        if (fscanf(fp, "%f\n", &newval) != 0) {
            data[ii] = newval;
        } else {
            return -2;
        }
    }
    fclose(fp);
    return 0;
}

template <class dataType, unsigned int nrows, unsigned int ncols>
int read_file_2D(const char *filename, dataType data[nrows][ncols]) {
    FILE *fp;
    fp = fopen(filename, "r");
    if (fp == 0) {
        return -1;
    }

    float newval;
    VITIS_LOOP_345_1: for (int ii = 0; ii < nrows; ii++) {
        VITIS_LOOP_346_2: for (int jj = 0; jj < ncols; jj++) {
            if (fscanf(fp, "%f\n", &newval) != 0) {
                data[ii][jj] = newval;
            } else {
                return -2;
            }
        }
    }
    fclose(fp);
    return 0;
}

template <class in_T, class out_T, int N_IN> void change_type(hls::stream<in_T> &in, hls::stream<out_T> &out) {
    in_T datareg;
    hls::stream<out_T> input_trunc;
    VITIS_LOOP_361_1: for (int ii = 0; ii < N_IN; ii++) {
        out << (out_T)in.read();
    }
}

template <class data_T, int N_IN> void hls_stream_debug(hls::stream<data_T> &data, hls::stream<data_T> &res) {
    data_T datareg;
    VITIS_LOOP_368_1: for (int ii = 0; ii < N_IN; ii++) {
        datareg = data.read();
        std::cout << "[" << ii << "]: " << datareg << std::endl;
        res << datareg;
    }
}

constexpr int ceillog2(int x) { return (x <= 2) ? 1 : 1 + ceillog2((x + 1) / 2); }

constexpr int floorlog2(int x) { return (x < 2) ? 0 : 1 + floorlog2(x / 2); }

constexpr int pow2(int x) { return x == 0 ? 1 : 2 * pow2(x - 1); }

}
# 5 "./nnet_utils/nnet_code_gen.h" 2


namespace nnet {

template <class data_T, typename CONFIG_T> class FillConv1DBuffer {
  public:
    static void fill_buffer(data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
                            data_T buffer[CONFIG_T::n_pixels][CONFIG_T::filt_width * CONFIG_T::n_chan],
                            const unsigned partition) {

    }
};

template <class data_T, typename CONFIG_T> class FillConv2DBuffer {
  public:
    static void
    fill_buffer(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
                data_T buffer[CONFIG_T::n_pixels][CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan],
                const unsigned partition) {

    }
};



}
# 8 "./parameters.h" 2


# 1 "./nnet_utils/nnet_activation.h" 1




# 1 "./nnet_utils/nnet_common.h" 1
# 22 "./nnet_utils/nnet_common.h"
namespace nnet {


enum io_type { io_parallel = 0, io_stream };
enum strategy { latency, resource };
# 36 "./nnet_utils/nnet_common.h"
template <class T, int N, class Op> T reduce(const T *x, Op op) {
    static constexpr int leftN = pow2(floorlog2(N - 1)) > 0 ? pow2(floorlog2(N - 1)) : 0;
    static constexpr int rightN = N - leftN > 0 ? N - leftN : 0;
    if (N == 1) {
        return x[0];
    }
    if (N == 2) {
        return op(x[0], x[1]);
    }
    return op(reduce<T, leftN, Op>(x, op), reduce<T, rightN, Op>(x + leftN, op));
}

template <class T> class Op_add {
  public:
    T operator()(T a, T b) { return a + b; }
};

template <class T> class Op_and {
  public:
    T operator()(T a, T b) { return a && b; }
};

template <class T> class Op_or {
  public:
    T operator()(T a, T b) { return a || b; }
};

template <class T> class Op_max {
  public:
    T operator()(T a, T b) { return a >= b ? a : b; }
};

template <class T> class Op_min {
  public:
    T operator()(T a, T b) { return a <= b ? a : b; }
};

}
# 6 "./nnet_utils/nnet_activation.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
# 7 "./nnet_utils/nnet_activation.h" 2

namespace nnet {

struct activ_config {

    static const unsigned n_in = 10;


    static const unsigned table_size = 1024;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;


    typedef ap_fixed<18, 8> table_t;
};




template <class data_T, class res_T, typename CONFIG_T> void linear(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 VITIS_LOOP_31_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        res[ii] = data[ii];
    }
}




template <class data_T, class res_T, typename CONFIG_T> void relu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 data_T datareg;
    VITIS_LOOP_43_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            res[ii] = datareg;
        else
            res[ii] = 0;
    }
}

template <class data_T, class res_T, int MAX_INT, typename CONFIG_T>
void relu_max(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 data_T datareg;
    VITIS_LOOP_57_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg < 0)
            res[ii] = 0;
        else if (datareg > MAX_INT)
            res[ii] = MAX_INT;
        else
            res[ii] = datareg;
    }
}

template <class data_T, class res_T, typename CONFIG_T> void relu6(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    relu_max<data_T, res_T, 6, CONFIG_T>(data, res);
}

template <class data_T, class res_T, typename CONFIG_T> void relu1(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    relu_max<data_T, res_T, 1, CONFIG_T>(data, res);
}




inline float sigmoid_fcn_float(float input) { return 1.0 / (1 + std::exp(-input)); }

template <typename CONFIG_T, int N_TABLE> void init_sigmoid_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    VITIS_LOOP_84_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = sigmoid_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];




    if (!initialized) {
        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    VITIS_LOOP_114_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 16;
        index = data_round + 8 * CONFIG_T::table_size / 16;
        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)sigmoid_table[index];
    }
}





enum class softmax_implementation { latency = 0, legacy = 1, stable = 2, argmax = 3 };

inline float exp_fcn_float(float input) { return std::exp(input); }

template <class data_T, typename CONFIG_T> inline float softmax_real_val_from_idx(unsigned i) {

    static constexpr int N = ceillog2(CONFIG_T::table_size);
    data_T x(0);
    x(x.width - 1, x.width - N) = i;
    return (float)x;
}

template <class data_T, typename CONFIG_T> inline unsigned softmax_idx_from_real_val(data_T x) {

    static constexpr int N = ceillog2(CONFIG_T::table_size);
    ap_uint<N> y = x(x.width - 1, x.width - N);
    return (unsigned)y(N - 1, 0);
}

template <class data_T, typename CONFIG_T>
void init_exp_table(typename CONFIG_T::exp_table_t table_out[CONFIG_T::table_size]) {

    VITIS_LOOP_151_1: for (unsigned i = 0; i < CONFIG_T::table_size; i++) {

        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::exp_table_t exp_x = exp_fcn_float(x);
        table_out[i] = exp_x;
    }
}

template <class data_T, typename CONFIG_T>
void init_invert_table(typename CONFIG_T::inv_table_t table_out[CONFIG_T::table_size]) {

    VITIS_LOOP_162_1: for (unsigned i = 0; i < CONFIG_T::table_size; i++) {
        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::inv_table_t inv_x = 1 / x;
        table_out[i] = inv_x;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_latency(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS pipeline


 bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }


    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];
#pragma HLS array_partition variable=exp_res complete
 typename CONFIG_T::exp_table_t exp_sum(0);
    VITIS_LOOP_195_1: for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
#pragma HLS unroll
 unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(data[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum =
        reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum =
        invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];
    VITIS_LOOP_209_2: for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
#pragma HLS unroll
 res[i] = exp_res[i] * inv_exp_sum;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_stable(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS pipeline


 bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }


    Op_max<data_T> op_max;
    data_T x_max = reduce<data_T, CONFIG_T::n_in, Op_max<data_T>>(data, op_max);


    ap_fixed<data_T::width, data_T::iwidth, AP_RND, AP_SAT> d_xi_xmax[CONFIG_T::n_in];
    VITIS_LOOP_243_1: for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
#pragma HLS unroll
 d_xi_xmax[i] = data[i] - x_max;
    }


    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];
#pragma HLS array_partition variable=exp_res complete
 typename CONFIG_T::exp_table_t exp_sum(0);
    VITIS_LOOP_252_2: for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
#pragma HLS unroll
 unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(d_xi_xmax[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum =
        reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum =
        invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];
    VITIS_LOOP_266_3: for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
#pragma HLS unroll
 res[i] = exp_res[i] * inv_exp_sum;
    }
}

template <typename CONFIG_T, int N_TABLE> void init_exp_table_legacy(typename CONFIG_T::table_t table_out[N_TABLE]) {
    VITIS_LOOP_273_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = exp_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <typename CONFIG_T, int N_TABLE> void init_invert_table_legacy(typename CONFIG_T::table_t table_out[N_TABLE]) {


    VITIS_LOOP_286_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 64.0 * ii / float(N_TABLE);

        if (in_val > 0.0)
            table_out[ii] = 1.0 / in_val;
        else
            table_out[ii] = 0.0;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_legacy(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::table_t invert_table[CONFIG_T::table_size];





    if (!initialized) {
        init_exp_table_legacy<CONFIG_T, CONFIG_T::table_size>(exp_table);
        init_invert_table_legacy<CONFIG_T, CONFIG_T::table_size>(invert_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 typename CONFIG_T::table_t exp_res[CONFIG_T::n_in];
    typename CONFIG_T::table_t exp_diff_res;
    data_T data_cache[CONFIG_T::n_in];
    int data_round;
    int index;
    VITIS_LOOP_323_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_cache[ii] = data[ii];
        exp_res[ii] = 0;
    }

    VITIS_LOOP_328_2: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        VITIS_LOOP_329_3: for (int jj = 0; jj < CONFIG_T::n_in; jj++) {
            if (ii == jj)
                exp_diff_res = 1;
            else {
                data_round = (data_cache[jj] - data_cache[ii]) * CONFIG_T::table_size / 16;
                index = data_round + 8 * CONFIG_T::table_size / 16;
                if (index < 0)
                    index = 0;
                if (index > CONFIG_T::table_size - 1)
                    index = CONFIG_T::table_size - 1;
                exp_diff_res = exp_table[index];
            }
            exp_res[ii] += exp_diff_res;
        }
    }


    VITIS_LOOP_346_4: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        int exp_res_index = exp_res[ii] * CONFIG_T::table_size / 64;
        if (exp_res_index < 0)
            exp_res_index = 0;
        if (exp_res_index > CONFIG_T::table_size - 1)
            exp_res_index = CONFIG_T::table_size - 1;

        res[ii] = (res_T)invert_table[exp_res_index];
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_argmax(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    VITIS_LOOP_359_1: for (int i = 0; i < CONFIG_T::n_in; i++) {
#pragma HLS UNROLL
 res[i] = (res_T)0;
    }

    data_T maximum = data[0];
    int idx = 0;

    VITIS_LOOP_367_2: for (int i = 1; i < CONFIG_T::n_in; i++) {
#pragma HLS PIPELINE
 if (data[i] > maximum) {
            maximum = data[i];
            idx = i;
        }
    }

    res[idx] = (res_T)1;
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS inline
 switch (CONFIG_T::implementation) {
    case softmax_implementation::latency:
        softmax_latency<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::stable:
        softmax_stable<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::legacy:
        softmax_legacy<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::argmax:
        softmax_argmax<data_T, res_T, CONFIG_T>(data, res);
        break;
    }
}




template <typename CONFIG_T, int N_TABLE> void init_tanh_table(typename CONFIG_T::table_t table_out[N_TABLE]) {

    VITIS_LOOP_402_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 4.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = tanh(in_val);


        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T> void tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];




    if (!initialized) {
        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    VITIS_LOOP_432_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 8;
        index = data_round + 4 * CONFIG_T::table_size / 8;

        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)tanh_table[index];
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void hard_sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 VITIS_LOOP_451_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        auto datareg = CONFIG_T::slope * data[ii] + CONFIG_T::shift;
        if (datareg > 1)
            datareg = 1;
        else if (datareg < 0)
            datareg = 0;
        res[ii] = datareg;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void hard_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    if (CONFIG_T::io_type == io_parallel) {
#pragma HLS PIPELINE
 }

    VITIS_LOOP_467_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        auto sigmoid = CONFIG_T::slope * data[ii] + CONFIG_T::shift;
        if (sigmoid > 1)
            sigmoid = 1;
        else if (sigmoid < 0)
            sigmoid = 0;
        res[ii] = 2 * sigmoid - 1;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void leaky_relu(data_T data[CONFIG_T::n_in], data_T alpha, res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 data_T datareg;
    VITIS_LOOP_485_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            res[ii] = datareg;
        else
            res[ii] = alpha * datareg;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void thresholded_relu(data_T data[CONFIG_T::n_in], data_T theta, res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 data_T datareg;
    VITIS_LOOP_502_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > theta)
            res[ii] = datareg;
        else
            res[ii] = 0;
    }
}




inline float softplus_fcn_float(float input) { return std::log(std::exp(input) + 1.); }

template <typename CONFIG_T, int N_TABLE> void init_softplus_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    VITIS_LOOP_519_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = softplus_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softplus(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    VITIS_LOOP_549_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 16;
        index = data_round + 8 * CONFIG_T::table_size / 16;
        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)softplus_table[index];
    }
}




inline float softsign_fcn_float(float input) { return input / (std::abs(input) + 1.); }

template <typename CONFIG_T, int N_TABLE> void init_softsign_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    VITIS_LOOP_568_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = softsign_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softsign(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);
        initialized = true;
    }

#pragma HLS PIPELINE


 int data_round;
    int index;
    VITIS_LOOP_598_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 16;
        index = data_round + 8 * CONFIG_T::table_size / 16;
        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)softsign_table[index];
    }
}




inline float elu_fcn_float(float input) { return std::exp(input) - 1.; }

template <typename CONFIG_T, int N_TABLE> void init_elu_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    VITIS_LOOP_617_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0 * ii / float(N_TABLE);

        typename CONFIG_T::table_t real_val = elu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], const res_T alpha, res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);
        initialized = true;
    }

#pragma HLS PIPELINE

 data_T datareg;

    int index;
    VITIS_LOOP_647_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = datareg;
        } else {
            index = datareg * CONFIG_T::table_size / -8;
            if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            res[ii] = alpha * elu_table[index];
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T> void elu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    elu<data_T, res_T, CONFIG_T>(data, 1.0, res);
}




inline float selu_fcn_float(float input) {
    return 1.0507009873554804934193349852946 * (1.6732632423543772848170429916717 * (std::exp(input) - 1.));
}

template <typename CONFIG_T, int N_TABLE> void init_selu_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    VITIS_LOOP_674_1: for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0 * ii / float(N_TABLE);

        typename CONFIG_T::table_t real_val = selu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T> void selu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);
        initialized = true;
    }

#pragma HLS PIPELINE

 data_T datareg;

    int index;
    VITIS_LOOP_703_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = res_T(1.0507009873554804934193349852946) * datareg;
        } else {
            index = datareg * CONFIG_T::table_size / -8;
            if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            res[ii] = selu_table[index];
        }
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void prelu(data_T data[CONFIG_T::n_in], data_T alpha[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 data_T datareg;
    VITIS_LOOP_724_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            res[ii] = datareg;
        else
            res[ii] = alpha[ii] * datareg;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void binary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 data_T datareg;
    res_T cache;
    VITIS_LOOP_742_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            cache = 1;
        else
            cache = -1;

        res[ii] = (res_T)cache;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void ternary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
#pragma HLS PIPELINE

 data_T datareg;
    res_T cache;
    VITIS_LOOP_762_1: for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = 2 * data[ii];
        if (datareg > 1)
            cache = 1;
        else if (datareg > -1 && datareg <= 1)
            cache = 0;
        else
            cache = -1;

        res[ii] = (res_T)cache;
    }
}

}
# 11 "./parameters.h" 2
# 1 "./nnet_utils/nnet_activation_stream.h" 1







# 1 "./nnet_utils/nnet_stream.h" 1







namespace nnet {

struct broadcast_config {
    static const unsigned in_height = 1;
    static const unsigned in_width = 1;
    static const unsigned in_chan = 3;
    static const unsigned out_height = 2;
    static const unsigned out_width = 2;
    static const unsigned out_chan = 3;
};

template <class data_T, class res_T, int N>
void clone_stream(hls::stream<data_T> &data, hls::stream<res_T> &res1, hls::stream<res_T> &res2) {
CloneLoop:
    for (int i = 0; i < N / data_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data1;
        res_T out_data2;



    ClonePack:
        for (int j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 out_data1[j] = in_data[j];
            out_data2[j] = in_data[j];
        }

        res1.write(out_data1);
        res2.write(out_data2);
    }
}

template <class data_T, class res_T, int N>
void clone_stream(hls::stream<data_T> &data, hls::stream<res_T> &res1, hls::stream<res_T> &res2, hls::stream<res_T> &res3) {
CloneLoop:
    for (int i = 0; i < N / data_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data1;
        res_T out_data2;
        res_T out_data3;




    ClonePack:
        for (int j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 out_data1[j] = in_data[j];
            out_data2[j] = in_data[j];
            out_data3[j] = in_data[j];
        }

        res1.write(out_data1);
        res2.write(out_data2);
        res3.write(out_data3);
    }
}

template <class data_T, class res_T, int N> void repack_stream(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    if (data_T::size == res_T::size) {
        VITIS_LOOP_73_1: for (int i = 0; i < N / data_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
            res_T out_data;


            VITIS_LOOP_80_2: for (int j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 out_data[j] = in_data[j];
            }

            res.write(out_data);
        }
    } else if (data_T::size > res_T::size) {
        constexpr unsigned pack_diff = data_T::size / res_T::size;
        VITIS_LOOP_89_3: for (int i = 0; i < N / data_T::size; i++) {
            if (N / data_T::size > 1) {
#pragma HLS PIPELINE
 }

            data_T in_data = data.read();
            res_T out_data;


            VITIS_LOOP_98_4: for (int j = 0; j < pack_diff; j++) {
#pragma HLS PIPELINE

 res_T out_data;
                VITIS_LOOP_102_5: for (int k = 0; k < res_T::size; k++) {
#pragma HLS UNROLL
 out_data[k] = in_data[j * res_T::size + k];
                }
                res.write(out_data);
            }
        }
    } else {
        res_T out_data;
        constexpr unsigned pack_diff = res_T::size / data_T::size;
        unsigned pack_cnt = 0;
        VITIS_LOOP_113_6: for (int i = 0; i < N / data_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
            VITIS_LOOP_117_7: for (int j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 out_data[pack_cnt * data_T::size + j] = in_data[j];
            }

            if (pack_cnt == pack_diff - 1) {
                res.write(out_data);
                pack_cnt = 0;
            } else {
                pack_cnt++;
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void broadcast_stream_1x1xC(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::in_height == 1 && CONFIG_T::in_width == 1 && CONFIG_T::in_chan == CONFIG_T::out_chan; __builtin_assume(_AssertPred); });
    int n_dupl = (CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::out_chan) /
                 (CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::in_chan);
BroadcastLoop:
    for (int i = 0; i < CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::in_chan / data_T::size; i++) {
#pragma HLS PIPELINE
 data_T in_data = data.read();
        VITIS_LOOP_141_1: for (int j = 0; j < n_dupl; j++) {
#pragma HLS PIPELINE
 res_T out_data;

            VITIS_LOOP_145_2: for (int k = 0; k < res_T::size; k++) {
#pragma HLS UNROLL
 out_data[k] = in_data[k];
            }
            res.write(out_data);
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void broadcast_stream_HxWx1(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::in_chan == 1 && CONFIG_T::in_height == CONFIG_T::out_height && CONFIG_T::in_width == CONFIG_T::out_width; __builtin_assume(_AssertPred); });

BroadcastLoop:
    for (int i = 0; i < CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::in_chan / data_T::size; i++) {
#pragma HLS PIPELINE
 data_T in_data = data.read();
        res_T out_data;

        VITIS_LOOP_164_1: for (int k = 0; k < res_T::size; k++) {
#pragma HLS UNROLL
 out_data[k] = in_data[0];
        }
        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void broadcast_stream(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    if (CONFIG_T::in_height == 1 && CONFIG_T::in_width == 1 && CONFIG_T::in_chan == CONFIG_T::out_chan) {
        broadcast_stream_1x1xC<data_T, res_T, CONFIG_T>(data, res);
    } else if (CONFIG_T::in_chan == 1 && CONFIG_T::in_height == CONFIG_T::out_height &&
               CONFIG_T::in_width == CONFIG_T::out_width) {
        broadcast_stream_HxWx1<data_T, res_T, CONFIG_T>(data, res);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void transpose_2d(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    typename data_T::value_type data_array[CONFIG_T::height * CONFIG_T::width];
#pragma HLS ARRAY_PARTITION variable=data_array complete

 VITIS_LOOP_187_1: for (int i = 0; i < CONFIG_T::height * CONFIG_T::width / data_T::size; i++) {
#pragma HLS PIPELINE
 data_T in_data = data.read();
        VITIS_LOOP_190_2: for (int j = 0; j < data_T::size; j++) {
            data_array[i * data_T::size + j] = typename data_T::value_type(in_data[j]);
        }
    }

    VITIS_LOOP_195_3: for (int i = 0; i < CONFIG_T::height * CONFIG_T::width / res_T::size; i++) {
#pragma HLS PIPELINE
 res_T out_data;

        VITIS_LOOP_199_4: for (int j = 0; j < res_T::size; j++) {
            out_data[j] = typename res_T::value_type(data_array[j * data_T::size + i]);
        }
        res.write(out_data);
    }
}
}
# 9 "./nnet_utils/nnet_activation_stream.h" 2

# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
# 11 "./nnet_utils/nnet_activation_stream.h" 2

namespace nnet {




template <class data_T, class res_T, typename CONFIG_T> void linear(hls::stream<data_T> &data, hls::stream<res_T> &res) {
LinearActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    LinearPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 out_data[j] = in_data[j];
        }

        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T> void relu(hls::stream<data_T> &data, hls::stream<res_T> &res) {
ReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    ReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 if (in_data[j] > 0)
                out_data[j] = in_data[j];
            else
                out_data[j] = 0;
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T> void sigmoid(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];




    if (!initialized) {
        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);
        initialized = true;
    }

SigmoidActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    SigmoidPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 int data_round = in_data[j] * CONFIG_T::table_size / 16;
            int index = data_round + 8 * CONFIG_T::table_size / 16;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = sigmoid_table[index];
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void softmax_latency(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<typename data_T::value_type, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }

    constexpr unsigned multiplier_limit = ((data_T::size + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    constexpr unsigned ii = data_T::size / multiplier_limit;


    typename CONFIG_T::exp_table_t exp_res[data_T::size];
#pragma HLS array_partition variable=exp_res complete
 typename CONFIG_T::exp_table_t exp_sum(0);
SoftmaxExpLoop:
    for (unsigned i = 0; i < CONFIG_T::n_in / data_T::size; i++) {
#pragma HLS PIPELINE II=ii

 data_T in_pack = data.read();
    SoftmaxExpPackLoop:
        for (unsigned j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 unsigned x = softmax_idx_from_real_val<typename data_T::value_type, CONFIG_T>(in_pack[j]);
            exp_res[j] = exp_table[x];
        }



        Op_add<typename CONFIG_T::exp_table_t> op_add;
        exp_sum =
            reduce<typename CONFIG_T::exp_table_t, data_T::size, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

        typename CONFIG_T::inv_table_t inv_exp_sum =
            invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];

        res_T out_pack;


    SoftmaxInvPackLoop:
        for (unsigned j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
#pragma HLS ALLOCATION operation instances=mul limit=multiplier_limit
 out_pack[j] = exp_res[j] * inv_exp_sum;
        }
        res.write(out_pack);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_stable(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<typename data_T::value_type, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }

    constexpr unsigned multiplier_limit = ((data_T::size + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    constexpr unsigned ii = data_T::size / multiplier_limit;

    typename data_T::value_type data_array[data_T::size];
#pragma HLS ARRAY_PARTITION variable=data_array complete
SoftmaxArrayLoop:
    for (unsigned i = 0; i < CONFIG_T::n_in / data_T::size; i++) {
#pragma HLS PIPELINE II=ii

 data_T in_pack = data.read();
    SoftmaxArrayPackLoop:
        for (unsigned j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 data_array[j] = in_pack[j];
        }


        Op_max<typename data_T::value_type> op_max;
        typename data_T::value_type x_max =
            reduce<typename data_T::value_type, data_T::size, Op_max<typename data_T::value_type>>(data_array, op_max);


        ap_fixed<data_T::value_type::width, data_T::value_type::iwidth, AP_RND, AP_SAT> d_xi_xmax[data_T::size];
        VITIS_LOOP_213_1: for (unsigned j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 d_xi_xmax[j] = data_array[j] - x_max;
        }


        typename CONFIG_T::exp_table_t exp_res[data_T::size];
#pragma HLS ARRAY_PARTITION variable=exp_res complete
 typename CONFIG_T::exp_table_t exp_sum(0);
        VITIS_LOOP_222_2: for (unsigned j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 unsigned x = softmax_idx_from_real_val<typename data_T::value_type, CONFIG_T>(d_xi_xmax[j]);
            exp_res[j] = exp_table[x];
        }



        Op_add<typename CONFIG_T::exp_table_t> op_add;
        exp_sum =
            reduce<typename CONFIG_T::exp_table_t, data_T::size, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

        typename CONFIG_T::inv_table_t inv_exp_sum =
            invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];

        res_T out_pack;


    SoftmaxInvPackLoop:
        for (unsigned j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
#pragma HLS ALLOCATION operation instances=mul limit=multiplier_limit
 out_pack[j] = exp_res[j] * inv_exp_sum;
        }
        res.write(out_pack);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_legacy(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::table_t invert_table[CONFIG_T::table_size];





    if (!initialized) {
        init_exp_table_legacy<CONFIG_T, CONFIG_T::table_size>(exp_table);
        init_invert_table_legacy<CONFIG_T, CONFIG_T::table_size>(invert_table);
        initialized = true;
    }


    typename CONFIG_T::table_t exp_res[data_T::size];
    typename CONFIG_T::table_t exp_diff_res;
    typename data_T::value_type data_cache[data_T::size];

SoftmaxInitLoop:
    for (unsigned s = 0; s < CONFIG_T::n_in / data_T::size; s++) {
#pragma HLS PIPELINE
 data_T in_pack = data.read();
    SoftmaxInitPackLoop:
        for (unsigned j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL
 data_cache[j] = in_pack[j];
            exp_res[j] = 0;
        }

    SoftmaxExpLoop:
        for (int i = 0; i < data_T::size; i++) {
#pragma HLS UNROLL
 SoftmaxExpInner:
            for (int j = 0; j < data_T::size; j++) {
#pragma HLS UNROLL

 if (i == j) {
                    exp_diff_res = 1;
                } else {
                    int data_round = (data_cache[j] - data_cache[i]) * CONFIG_T::table_size / 16;
                    int index = data_round + 8 * CONFIG_T::table_size / 16;
                    if (index < 0)
                        index = 0;
                    if (index > CONFIG_T::table_size - 1)
                        index = CONFIG_T::table_size - 1;
                    exp_diff_res = exp_table[index];
                }

                exp_res[i] += exp_diff_res;
            }
        }

        res_T out_pack;


    SoftmaxInvPackLoop:
        for (unsigned j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL

 int exp_res_index = exp_res[j] * CONFIG_T::table_size / 64;
            if (exp_res_index < 0)
                exp_res_index = 0;
            if (exp_res_index > CONFIG_T::table_size - 1)
                exp_res_index = CONFIG_T::table_size - 1;

            out_pack[j] = (typename res_T::value_type)invert_table[exp_res_index];
        }
        res.write(out_pack);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_argmax(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    VITIS_LOOP_328_1: for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE
 data_T in_data = data.read();
        res_T out_data;

        VITIS_LOOP_333_2: for (int i = 0; i < res_T::size; i++) {
#pragma HLS UNROLL
 out_data[i] = (typename res_T::value_type)0;
        }

        typename data_T::value_type maximum = in_data[0];
        int idx = 0;

        VITIS_LOOP_341_3: for (int i = 1; i < res_T::size; i++) {
#pragma HLS PIPELINE
 if (in_data[i] > maximum) {
                maximum = in_data[i];
                idx = i;
            }
        }

        out_data[idx] = (typename res_T::value_type)1;
        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T> void softmax(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::axis == -1; __builtin_assume(_AssertPred); });

    switch (CONFIG_T::implementation) {
    case softmax_implementation::latency:
        softmax_latency<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::stable:
        softmax_stable<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::legacy:
        softmax_legacy<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::argmax:
        softmax_argmax<data_T, res_T, CONFIG_T>(data, res);
        break;
    }
}





template <class data_T, class res_T, typename CONFIG_T> void tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];




    if (!initialized) {
        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);
        initialized = true;
    }

TanHActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    TanHPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 int data_round = in_data[j] * CONFIG_T::table_size / 8;
            int index = data_round + 4 * CONFIG_T::table_size / 8;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = tanh_table[index];
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void hard_sigmoid(hls::stream<data_T> &data, hls::stream<res_T> &res) {

HardSigmoidActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    HardSigmoidPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 auto datareg = CONFIG_T::slope * in_data[j] + CONFIG_T::shift;
            if (datareg > 1)
                datareg = 1;
            else if (datareg < 0)
                datareg = 0;
            out_data[j] = datareg;
        }

        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T> void hard_tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {

HardSigmoidActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    HardSigmoidPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 auto sigmoid = CONFIG_T::slope * in_data[j] + CONFIG_T::shift;
            if (sigmoid > 1)
                sigmoid = 1;
            else if (sigmoid < 0)
                sigmoid = 0;
            out_data[j] = 2 * sigmoid - 1;
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void leaky_relu(hls::stream<data_T> &data, typename data_T::value_type alpha, hls::stream<res_T> &res) {
LeakyReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    LeakyReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 if (in_data[j] > 0)
                out_data[j] = in_data[j];
            else
                out_data[j] = alpha * in_data[j];
        }
        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void thresholded_relu(hls::stream<data_T> &data, typename data_T::value_type theta, hls::stream<res_T> &res) {
ThresholdedReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    ThresholdedReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 if (in_data[j] > theta)
                out_data[j] = in_data[j];
            else
                out_data[j] = 0;
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T> void softplus(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);
        initialized = true;
    }

SoftplusActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    SoftplusPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 int data_round = in_data[j] * CONFIG_T::table_size / 16;
            int index = data_round + 8 * CONFIG_T::table_size / 16;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = softplus_table[index];
        }
        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T> void softsign(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);
        initialized = true;
    }

SoftsignActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    SoftsignPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 int data_round = in_data[j] * CONFIG_T::table_size / 16;
            int index = data_round + 8 * CONFIG_T::table_size / 16;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = softsign_table[index];
        }
        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void elu(hls::stream<data_T> &data, typename data_T::value_type alpha, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);
        initialized = true;
    }

EluActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    EluPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL

 typename data_T::value_type datareg = in_data[j];
            if (datareg >= 0) {
                out_data[j] = datareg;
            } else {
                int index = datareg * CONFIG_T::table_size / -8;
                if (index > CONFIG_T::table_size - 1)
                    index = CONFIG_T::table_size - 1;
                out_data[j] = alpha * elu_table[index];
            }
        }
        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T> void elu(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    elu<data_T, res_T, CONFIG_T>(data, 1.0, res);
}





template <class data_T, class res_T, typename CONFIG_T> void selu(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);
        initialized = true;
    }

SeluActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    SeluPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL

 typename data_T::value_type datareg = in_data[j];
            if (datareg >= 0) {
                out_data[j] = (typename data_T::value_type)1.0507009873554804934193349852946 * datareg;
            } else {
                int index = datareg * CONFIG_T::table_size / -8;
                if (index > CONFIG_T::table_size - 1)
                    index = CONFIG_T::table_size - 1;
                out_data[j] = selu_table[index];
            }
        }
        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void prelu(hls::stream<data_T> &data, typename data_T::value_type alpha[CONFIG_T::n_in], hls::stream<res_T> &res) {
PReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    PReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 if (in_data[j] > 0)
                out_data[j] = in_data[j];
            else
                out_data[j] = alpha[i * res_T::size + j] * in_data[j];
        }
        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void binary_tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {
PReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    PReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 if (in_data[j] > 0)
                out_data[j] = (typename res_T::value_type)1;
            else
                out_data[j] = (typename res_T::value_type) - 1;
        }
        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void ternary_tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {
PReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
#pragma HLS PIPELINE

 data_T in_data = data.read();
        res_T out_data;


    PReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
#pragma HLS UNROLL
 if (in_data[j] > 1)
                out_data[j] = (typename res_T::value_type)1;
            else if (in_data[j] <= -1)
                out_data[j] = (typename res_T::value_type) - 1;
            else
                out_data[j] = (typename res_T::value_type)0;
        }
        res.write(out_data);
    }
}

}
# 12 "./parameters.h" 2
# 1 "./nnet_utils/nnet_conv2d.h" 1




# 1 "./nnet_utils/nnet_conv2d_latency.h" 1




# 1 "./nnet_utils/nnet_mult.h" 1







# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 9 "./nnet_utils/nnet_mult.h" 2

namespace nnet {

namespace product {






class Product {};

template <class x_T, class w_T> class both_binary : public Product {
  public:
    static x_T product(x_T a, w_T w) {

#pragma HLS INLINE
 return a == w;
    }
};

template <class x_T, class w_T> class weight_binary : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(-a) {

#pragma HLS INLINE
 if (w == 0)
            return -a;
        else
            return a;
    }
};

template <class x_T, class w_T> class data_binary : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(-w) {

#pragma HLS INLINE
 if (a == 0)
            return -w;
        else
            return w;
    }
};

template <class x_T, class w_T> class weight_ternary : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(-a) {

#pragma HLS INLINE
 if (w == 0)
            return 0;
        else if (w == -1)
            return -a;
        else
            return a;
    }
};

template <class x_T, class w_T> class mult : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(a * w) {

#pragma HLS INLINE
 return a * w;
    }
};

template <class x_T, class w_T> class weight_exponential : public Product {
  public:
    using r_T = ap_fixed<2 * (decltype(w_T::weight)::width + x_T::width), (decltype(w_T::weight)::width + x_T::width)>;
    static r_T product(x_T a, w_T w) {

#pragma HLS INLINE


 r_T y = static_cast<r_T>(a) << w.weight;


        return w.sign == 1 ? y : static_cast<r_T>(-y);
    }
};

}

template <class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value &&
                                   std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value,
                               ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>>::type
cast(typename CONFIG_T::accum_t x) {
    return (ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>)(x - CONFIG_T::n_in / 2) * 2;
}

template <class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<
    std::is_same<data_T, ap_uint<1>>::value && !std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value, res_T>::type
cast(typename CONFIG_T::accum_t x) {
    return (res_T)x;
}

template <class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<(!std::is_same<data_T, ap_uint<1>>::value), res_T>::type cast(typename CONFIG_T::accum_t x) {
    return (res_T)x;
}

}
# 6 "./nnet_utils/nnet_conv2d_latency.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
# 7 "./nnet_utils/nnet_conv2d_latency.h" 2

namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void conv_2d_latency_cl(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
    constexpr unsigned mult_n_in = CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan;
    constexpr unsigned mult_n_out = CONFIG_T::n_filt;

    data_T data_buf[CONFIG_T::n_pixels][mult_n_in];
#pragma HLS ARRAY_PARTITION variable=data_buf complete dim=0

 typename CONFIG_T::accum_t mult[mult_n_in * mult_n_out];
#pragma HLS ARRAY_PARTITION variable=mult complete

 typename CONFIG_T::accum_t acc[mult_n_out];
#pragma HLS ARRAY_PARTITION variable=acc complete

#pragma HLS ARRAY_PARTITION variable=weights complete
#pragma HLS ARRAY_PARTITION variable=biases complete


#pragma HLS ALLOCATION operation instances=mul limit=CONFIG_T::mult_config::multiplier_limit

PartitionLoop:
    for (int i_part = 0; i_part < CONFIG_T::n_partitions; i_part++) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor rewind

 CONFIG_T::template fill_buffer<data_T, CONFIG_T>::fill_buffer(data, data_buf, i_part);

    PixelLoop:
        for (unsigned i_pxl = 0; i_pxl < CONFIG_T::n_pixels; i_pxl++) {
#pragma HLS UNROLL

 data_T cache;


        Product1:
            for (int i_in = 0; i_in < mult_n_in; i_in++) {
#pragma HLS UNROLL
 cache = data_buf[i_pxl][i_in];
            Product2:
                for (int i_out = 0; i_out < mult_n_out; i_out++) {
#pragma HLS UNROLL
 mult[i_in * mult_n_out + i_out] =
                        CONFIG_T::mult_config::template product<data_T, typename CONFIG_T::mult_config::weight_t>::product(
                            cache, weights[i_in * mult_n_out + i_out]);
                }
            }


        ResetAccum:
            for (int i_acc = 0; i_acc < mult_n_out; i_acc++) {
#pragma HLS UNROLL
 acc[i_acc] = (typename CONFIG_T::accum_t)biases[i_acc];
            }


        Accum1:
            for (int i_in = 0; i_in < mult_n_in; i_in++) {
#pragma HLS UNROLL
 Accum2:
                for (int i_out = 0; i_out < mult_n_out; i_out++) {
#pragma HLS UNROLL
 acc[i_out] += mult[i_in * mult_n_out + i_out];
                }
            }


        Result:
            for (int i_res = 0; i_res < mult_n_out; i_res++) {
#pragma HLS UNROLL
 *(res++) = cast<data_T, res_T, typename CONFIG_T::mult_config>(acc[i_res]);
            }
        }
    }
}

}
# 6 "./nnet_utils/nnet_conv2d.h" 2
# 1 "./nnet_utils/nnet_conv2d_resource.h" 1




# 1 "./nnet_utils/nnet_dense.h" 1





# 1 "./nnet_utils/nnet_dense_latency.h" 1







# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 9 "./nnet_utils/nnet_dense_latency.h" 2

namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void dense_latency(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                   typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                   typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
    data_T cache;
    typename CONFIG_T::accum_t mult[CONFIG_T::n_in * CONFIG_T::n_out];
    typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


#pragma HLS function_instantiate variable=weights,biases




#pragma HLS PIPELINE II=CONFIG_T::reuse_factor


#pragma HLS ARRAY_PARTITION variable=biases complete
#pragma HLS ARRAY_PARTITION variable=mult complete
#pragma HLS ARRAY_PARTITION variable=acc complete

#pragma HLS ALLOCATION operation instances=mul limit=CONFIG_T::multiplier_limit


Product1:
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        cache = data[ii];
    Product2:
        for (int jj = 0; jj < CONFIG_T::n_out; jj++) {
            int index = ii * CONFIG_T::n_out + jj;
            mult[index] = CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(cache, weights[index]);
        }
    }


ResetAccum:
    for (int iacc = 0; iacc < CONFIG_T::n_out; iacc++) {
        acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }


Accum1:
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
    Accum2:
        for (int jj = 0; jj < CONFIG_T::n_out; jj++) {
            int index = ii * CONFIG_T::n_out + jj;
            acc[jj] += mult[index];
        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

}
# 7 "./nnet_utils/nnet_dense.h" 2
# 1 "./nnet_utils/nnet_dense_resource.h" 1






# 1 "/usr/include/assert.h" 1 3 4
# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__));


}
# 8 "./nnet_utils/nnet_dense_resource.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 9 "./nnet_utils/nnet_dense_resource.h" 2

namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_leq_nin(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                               typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                               typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in * CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in * CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit / CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    ({ bool _AssertPred = (multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed"; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = (multiplier_limit == block_factor) && "This function is correct only for RF <= N_IN"; __builtin_assume(_AssertPred); });

#pragma HLS function_instantiate variable=weights,biases

#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor
#pragma HLS ARRAY_PARTITION variable=biases complete

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=acc complete

InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
#pragma HLS UNROLL
 acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }

ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind

 int w_index = ir;
        int in_index = ir;
        int out_index = 0;
        int acc_step = 0;

    MultLoop:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL

 acc[out_index] += static_cast<typename CONFIG_T::accum_t>(
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]));


            w_index += rufactor;

            in_index += rufactor;
            if (in_index >= nin) {
                in_index = ir;
            }

            if (acc_step + 1 >= multscale) {
                acc_step = 0;
                out_index++;
            } else {
                acc_step++;
            }
        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
#pragma HLS UNROLL
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_gt_nin_rem0(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                                   typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                                   typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = (CONFIG_T::reuse_factor > CONFIG_T::n_in * CONFIG_T::n_out ? CONFIG_T::n_in * CONFIG_T::n_out : CONFIG_T::reuse_factor);
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in * CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in * CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit / CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    ({ bool _AssertPred = (multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed"; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = (rufactor > nin && rufactor % nin == 0) && "This function is correct only for RF > N_IN && RF % N_IN == 0"; __builtin_assume(_AssertPred); });

#pragma HLS function_instantiate variable=weights,biases

#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor
#pragma HLS ARRAY_PARTITION variable=biases complete

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=acc complete

InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
#pragma HLS UNROLL
 acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }

    int w_index;
    int in_index = 0;
    int out_index;
    int outstep = 0;
    const int outscale = rufactor / nin;

    int outidx[rufactor];
IndexLoop:
    for (int ir = 0; ir < rufactor; ir++) {
        outidx[ir] = outstep;
        if ((ir + 1) % nin == 0) {
            outstep++;
        }
    }

ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind

 w_index = ir;
        out_index = outidx[ir] ;

    MultLoop:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL
 acc[out_index] += static_cast<typename CONFIG_T::accum_t>(
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]));

            w_index += rufactor;
            if (w_index >= CONFIG_T::n_in * CONFIG_T::n_out)
                break;
            out_index += outscale;
        }

        in_index++;
        if (in_index >= nin) {
            in_index = 0;

        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
#pragma HLS UNROLL
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_gt_nin(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                              typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                              typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in * CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in * CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit / CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    ({ bool _AssertPred = (multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed"; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = (rufactor > nin) && "This function is correct only for RF > N_IN"; __builtin_assume(_AssertPred); });

#pragma HLS function_instantiate variable=weights,biases

#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor
#pragma HLS ARRAY_PARTITION variable=biases complete

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=acc complete

InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
#pragma HLS UNROLL
 acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }

ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind
 typename CONFIG_T::accum_t tmpmult[block_factor];
#pragma HLS ARRAY_PARTITION variable=tmpmult complete

 MultLoop:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL
 int w_index = ir + rufactor * im;
            int in_index = w_index % nin;
            if (w_index >= CONFIG_T::n_in * CONFIG_T::n_out)
                continue;
            tmpmult[im] =
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]);
        }

        typename CONFIG_T::accum_t mult[multiplier_limit];
#pragma HLS ARRAY_PARTITION variable=mult complete

 ResetMult:
        for (int imult = 0; imult < multiplier_limit; imult++) {
#pragma HLS UNROLL
 mult[imult] = 0;
        }

    AccumLoop1:
        for (int im = 0; im < block_factor; im++) {
#pragma HLS UNROLL
 int w_index = ir + rufactor * im;
            int out_index = w_index / multfactor;
            if (out_index >= multiplier_limit)
                continue;
            mult[out_index] += tmpmult[im];
        }

    AccumLoop2:
        for (int im = 0; im < multiplier_limit; im++) {
#pragma HLS UNROLL


 acc[im] += mult[im];
        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
#pragma HLS UNROLL
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                    typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

#pragma HLS INLINE recursive

 if (CONFIG_T::reuse_factor <= CONFIG_T::n_in) {
        dense_resource_rf_leq_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else if (CONFIG_T::reuse_factor % CONFIG_T::n_in == 0) {
        dense_resource_rf_gt_nin_rem0<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource_rf_gt_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 8 "./nnet_utils/nnet_dense.h" 2


# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 11 "./nnet_utils/nnet_dense.h" 2

namespace nnet {

struct dense_config {

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned n_in = 10;
    static const unsigned n_out = 10;


    static const unsigned io_type = io_parallel;
    static const unsigned strategy = latency;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;


    template <class x_T, class y_T> using product = nnet::product::mult<x_T, y_T>;
};

template <class data_T, class res_T, typename CONFIG_T>
void dense(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
           typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
           typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
#pragma HLS inline
 if (CONFIG_T::strategy == nnet::latency) {
        dense_latency<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 6 "./nnet_utils/nnet_conv2d_resource.h" 2

namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void conv_2d_resource_cl(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
    constexpr unsigned mult_n_in = CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan;
    constexpr unsigned mult_n_out = CONFIG_T::n_filt;
    constexpr unsigned block_factor = ((mult_n_in * mult_n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);

    constexpr unsigned multiplier_limit = ((mult_n_in * mult_n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    constexpr unsigned multscale = multiplier_limit / mult_n_out;

    ({ bool _AssertPred = (multiplier_limit % mult_n_out == 0 || CONFIG_T::reuse_factor >= mult_n_in) && "The current Reuse Factor is not allowed"; __builtin_assume(_AssertPred); });

    ({ bool _AssertPred = (multiplier_limit == block_factor) && "This function is correct only for RF <= FILT_HEIGHT * FILT_WIDTH * N_CHAN"; __builtin_assume(_AssertPred); });


    data_T data_buf[CONFIG_T::n_pixels][mult_n_in];
#pragma HLS ARRAY_PARTITION variable=data_buf complete dim=0

#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor
#pragma HLS ARRAY_PARTITION variable=biases complete

 typename CONFIG_T::accum_t acc[CONFIG_T::n_pixels][mult_n_out];
#pragma HLS ARRAY_PARTITION variable=acc complete dim=0

PartitionLoop:
    for (unsigned i_part = 0; i_part < CONFIG_T::n_partitions; i_part++) {


        CONFIG_T::template fill_buffer<data_T, CONFIG_T>::fill_buffer(data, data_buf, i_part);

    PixelInitAccumLoop:
        for (unsigned i_pxl = 0; i_pxl < CONFIG_T::n_pixels; i_pxl++) {
#pragma HLS UNROLL

 InitAccumLoop:
            for (unsigned i_acc = 0; i_acc < mult_n_out; i_acc++) {
#pragma HLS UNROLL
 acc[i_pxl][i_acc] = (typename CONFIG_T::accum_t)biases[i_acc];
            }
        }

    ReuseLoop:
        for (unsigned i_rf = 0; i_rf < CONFIG_T::reuse_factor; i_rf++) {
#pragma HLS PIPELINE II=1 rewind

 unsigned i_w = i_rf;
            unsigned i_in = i_rf;
            unsigned i_out = 0;
            unsigned i_acc = 0;

        MultLoop:
            for (unsigned i_blk = 0; i_blk < block_factor; i_blk++) {
#pragma HLS UNROLL

 PixelMultLoop:
                for (unsigned i_pxl = 0; i_pxl < CONFIG_T::n_pixels; i_pxl++) {
#pragma HLS UNROLL

 acc[i_pxl][i_out] += static_cast<typename CONFIG_T::accum_t>(
                        CONFIG_T::mult_config::template product<data_T, typename CONFIG_T::mult_config::weight_t>::product(
                            data_buf[i_pxl][i_in], weights[i_w]));
                }


                i_w += CONFIG_T::reuse_factor;

                i_in += CONFIG_T::reuse_factor;
                if (i_in >= mult_n_in) {
                    i_in = i_rf;
                }

                if (i_acc + 1 >= multscale) {
                    i_acc = 0;
                    i_out++;
                } else {
                    i_acc++;
                }
            }
        }

    PixelResultLoop:
        for (unsigned i_pxl = 0; i_pxl < CONFIG_T::n_pixels; i_pxl++) {
#pragma HLS UNROLL

 ResultLoop:
            for (unsigned i_res = 0; i_res < mult_n_out; i_res++) {
#pragma HLS UNROLL
 *(res++) = cast<data_T, res_T, typename CONFIG_T::mult_config>(acc[i_pxl][i_res]);
            }
        }
    }
}

}
# 7 "./nnet_utils/nnet_conv2d.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 1 3
# 40 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cstdlib" 3
# 8 "./nnet_utils/nnet_conv2d.h" 2

namespace nnet {

struct conv2d_config {

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 10;
    static const unsigned in_width = 10;
    static const unsigned n_chan = 1;
    static const unsigned filt_height = 1;
    static const unsigned filt_width = 1;
    static const unsigned kernel_size = filt_height * filt_width;
    static const unsigned n_filt = 1;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 10;
    static const unsigned out_width = 10;
    static const unsigned dilation_height = 1;
    static const unsigned dilation_width = 1;

    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;
};

template <class data_T, class res_T, typename CONFIG_T>
void conv_2d_cl(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
#pragma HLS INLINE region

 if (CONFIG_T::strategy == nnet::latency) {
        conv_2d_latency_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        conv_2d_resource_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pointwise_conv_2d_cl(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
                          res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
                          typename CONFIG_T::weight_t weights[CONFIG_T::n_chan * CONFIG_T::n_filt],
                          typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
    ({ bool _AssertPred = CONFIG_T::filt_width == 1; __builtin_assume(_AssertPred); });

#pragma HLS INLINE region


 if (CONFIG_T::strategy == nnet::latency) {
        conv_2d_latency_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        conv_2d_resource_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 13 "./parameters.h" 2
# 1 "./nnet_utils/nnet_conv2d_stream.h" 1



# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_shift_reg.h" 1
# 44 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_shift_reg.h"
template<typename __SHIFT_T__, unsigned int __SHIFT_DEPTH__ = 32>
class ap_shift_reg
{
  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) ap_shift_reg(){
#pragma HLS inline
 if (std::is_class<__SHIFT_T__>::value) {
#pragma HLS aggregate variable = Array bit
 }
    }
    inline __attribute__((always_inline)) __attribute__((nodebug)) ap_shift_reg(const char* name) {
      (void)name;
#pragma HLS inline
 if (std::is_class<__SHIFT_T__>::value) {
#pragma HLS aggregate variable = Array bit
 }
    }

  private:

    ap_shift_reg(const ap_shift_reg< __SHIFT_T__, __SHIFT_DEPTH__ >& shreg)
    {
        VITIS_LOOP_67_1: for (unsigned i = 0; i < __SHIFT_DEPTH__; ++i)
            Array[i] = shreg.Array[i];
    }

    ap_shift_reg& operator = (const ap_shift_reg< __SHIFT_T__,
        __SHIFT_DEPTH__ >& shreg)
    {
        VITIS_LOOP_74_1: for (unsigned i = 0; i < __SHIFT_DEPTH__; ++i)
            Array[i] = shreg.Array[i];
        return *this;
    }

  public:

    inline __attribute__((always_inline)) __attribute__((nodebug)) __SHIFT_T__ shift(__SHIFT_T__ DataIn,
        unsigned int Addr = __SHIFT_DEPTH__ - 1, bool Enable = true)
    {





        __SHIFT_T__ DataOut = __fpga_shift_register_peek((__SHIFT_T__*)Array, Addr);
        __fpga_shift_register_shift(DataIn, (__SHIFT_T__*)Array, Enable);
        return DataOut;

    }


    inline __attribute__((always_inline)) __attribute__((nodebug)) __SHIFT_T__ read(unsigned int Addr = __SHIFT_DEPTH__ - 1) const
    {






        return __fpga_shift_register_peek((__SHIFT_T__*)Array, Addr);

    }

  protected:
    __SHIFT_T__ Array[__SHIFT_DEPTH__] __attribute__((no_ctor));
};
# 5 "./nnet_utils/nnet_conv2d_stream.h" 2


# 1 "./nnet_utils/nnet_conv_stream.h" 1








namespace nnet {

enum class conv_implementation { linebuffer = 0, encoded = 1 };




template <unsigned K, unsigned S, unsigned W> unsigned scale_index_K_gte_S(const unsigned idx) {
#pragma HLS INLINE

 if (idx < K - S) {
        return idx;
    }

    constexpr unsigned nW = ((W - K) / S) * S + K;
    constexpr unsigned sW = (((K + S - 1) / S) - 1) * S + K;
    if (idx >= nW) {
        return sW;
    }

    const unsigned r = nW - idx;
    if (r <= K - S) {
        return sW - r;
    }

    return K - S + (idx - (K - S)) % S;
}

template <unsigned K, unsigned S, unsigned W> unsigned scale_index_K_lt_S(const unsigned idx) {
#pragma HLS INLINE

 if (idx < S - K) {
        return idx;
    }

    constexpr unsigned nW = ((W - K) / S) * S + K;
    constexpr unsigned sW = (((S + K - 1) / K) - 1) * S + K;
    if (idx >= nW) {
        return sW;
    }

    const unsigned r = nW - idx;
    if (r <= S - K) {
        return sW - r;
    }

    return S - K + (idx - (S - K)) % S;
}

template <unsigned K, unsigned S, unsigned W> class scale_index_regular {
  public:
    static unsigned scale_index(const unsigned idx) {
#pragma HLS INLINE

 if (K >= S) {
            return scale_index_K_gte_S<K, S, W>(idx);
        } else {
            return scale_index_K_lt_S<K, S, W>(idx);
        }
    }
};

template <unsigned K, unsigned S, unsigned W> class scale_index_unscaled {
  public:
    static unsigned scale_index(const unsigned idx) {
#pragma HLS INLINE
 return idx;
    }
};

template <class data_T, class res_T, typename CONFIG_T>
void mult_buffer(hls::stream<typename data_T::value_type> data_window[CONFIG_T::kernel_size * CONFIG_T::n_chan],
                 res_T &res_pack, hls::stream<res_T> &res_stream, unsigned &outputs_ready,
                 typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
                 typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
#pragma HLS INLINE

 typename data_T::value_type data[CONFIG_T::kernel_size * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable = data complete
 typename res_T::value_type res[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable = res complete

InitData:
    for (int id = 0; id < CONFIG_T::kernel_size * CONFIG_T::n_chan; id++) {
#pragma HLS UNROLL
 data[id] = data_window[id].read();
    }

#pragma HLS INLINE recursive
 if (CONFIG_T::strategy == nnet::latency) {
        dense_latency<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(
            data, res, weights, biases);
    } else {
        dense_resource<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(
            data, res, weights, biases);
    }

CastLoop:
    for (unsigned jj = 0; jj < CONFIG_T::n_filt; jj++) {
#pragma HLS UNROLL
 if (res_T::size / CONFIG_T::n_filt == 1) {
            res_pack[jj] = res[jj];
        } else {
            res_pack[outputs_ready * CONFIG_T::n_filt + jj] = res[jj];
        }
    }

    if (res_T::size / CONFIG_T::n_filt == 1) {
        res_stream.write(res_pack);
    } else {
        if (outputs_ready == (res_T::size / CONFIG_T::n_filt) - 1) {
            res_stream.write(res_pack);
            outputs_ready = 0;
        } else {
            outputs_ready++;
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void compute_output_encoded(const data_T &in_elem,
                            hls::stream<typename data_T::value_type> data_window[CONFIG_T::kernel_size * CONFIG_T::n_chan],
                            hls::stream<res_T> &res, res_T &res_pack, unsigned &outputs_ready,
                            typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
                            typename CONFIG_T::bias_t biases[CONFIG_T::n_filt], ap_uint<CONFIG_T::kernel_size> *pixel_idx) {
#pragma HLS INLINE

MultLoop:
    for (unsigned p = 0; p < data_T::size / CONFIG_T::n_chan; p++) {
#pragma HLS PIPELINE II = CONFIG_T::reuse_factor
 CopyDataFilt:
        for (unsigned f = 0; f < CONFIG_T::kernel_size; f++) {
#pragma HLS UNROLL
 CopyDataChan:
            for (unsigned c = 0; c < CONFIG_T::n_chan; c++) {
#pragma HLS UNROLL
 if (pixel_idx[p][f])
                    data_window[f * CONFIG_T::n_chan + c].write(in_elem[p * CONFIG_T::n_chan + c]);
            }
        }
        if (pixel_idx[p][CONFIG_T::kernel_size - 1]) {
            mult_buffer<data_T, res_T, CONFIG_T>(data_window, res_pack, res, outputs_ready, weights, biases);
        }
    }
}




template <class data_T, typename CONFIG_T>
void kernel_shift_1d(const data_T &in_elem,
                     typename data_T::value_type kernel_window[CONFIG_T::filt_width * CONFIG_T::n_chan]) {
#pragma HLS inline


 static const int filt_width = CONFIG_T::filt_width - 1;
KernelShiftWidth:
    for (int i_iw = 0; i_iw < filt_width; i_iw++) {
#pragma HLS PIPELINE II = 1
 KernelShiftChannel:
        for (unsigned i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {
#pragma HLS UNROLL

 kernel_window[i_iw * CONFIG_T::n_chan + i_ic] = kernel_window[(i_iw + 1) * CONFIG_T::n_chan + i_ic];
        }
    }


    static const int lastheight = (CONFIG_T::filt_width - 1) * CONFIG_T::n_chan;
KernelPushChannel:
    for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {
#pragma HLS UNROLL
 kernel_window[lastheight + i_ic] = in_elem[i_ic];
    }
}

template <class data_T, typename CONFIG_T>
void kernel_shift_2d(
    typename data_T::value_type shift_buffer[CONFIG_T::filt_height][CONFIG_T::n_chan],
    typename data_T::value_type kernel_window[CONFIG_T::filt_width * CONFIG_T::filt_height * CONFIG_T::n_chan]) {
#pragma HLS inline


 static const int filt_width = CONFIG_T::filt_width - 1;
KernelShiftWidth:
    for (int i_iw = 0; i_iw < filt_width; i_iw++) {
#pragma HLS PIPELINE II = 1
 KernelShiftHeight:
        for (unsigned i_ih = 0; i_ih < CONFIG_T::filt_height; i_ih++) {
        KernelShiftChannel:
            for (unsigned i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {

                kernel_window[i_ih * CONFIG_T::filt_width * CONFIG_T::n_chan + i_iw * CONFIG_T::n_chan + i_ic] =
                    kernel_window[i_ih * CONFIG_T::filt_width * CONFIG_T::n_chan + (i_iw + 1) * CONFIG_T::n_chan + i_ic];
            }
        }
    }


    static const int lastheight = (CONFIG_T::filt_width - 1) * CONFIG_T::n_chan;
KernelPushHeight:
    for (int i_ih = 0; i_ih < CONFIG_T::filt_height; i_ih++) {
#pragma HLS UNROLL
 KernelPushChannel:
        for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {
            kernel_window[lastheight + i_ih * CONFIG_T::filt_width * CONFIG_T::n_chan + i_ic] = shift_buffer[i_ih][i_ic];
        }
    }
}

template <class data_T, typename CONFIG_T>
void shift_line_buffer(
    const data_T &in_elem,
    ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width> line_buffer[(CONFIG_T::filt_height - 1 > 1 ? CONFIG_T::filt_height - 1 : 1)]
                                                                             [CONFIG_T::n_chan],
    typename data_T::value_type kernel_window[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan]) {

#pragma HLS PIPELINE


 typename data_T::value_type shift_buffer[CONFIG_T::filt_height][CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable = shift_buffer complete dim = 0

UpdateBuffer:
    for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {
#pragma HLS UNROLL


 shift_buffer[CONFIG_T::filt_height - 1][i_ic] = in_elem[i_ic];
    }

LineBufferDataIn:
    for (int i_ic = 0; i_ic < CONFIG_T::n_chan; i_ic++) {

    LineBufferShift:
        for (unsigned i_ih = 1; i_ih < CONFIG_T::filt_height; i_ih++) {
#pragma HLS UNROLL
 typename data_T::value_type pop_elem = line_buffer[i_ih - 1][i_ic].shift(
                shift_buffer[CONFIG_T::filt_height - i_ih][i_ic]);
            shift_buffer[CONFIG_T::filt_height - i_ih - 1][i_ic] =
                pop_elem;
        }
    }
    kernel_shift_2d<data_T, CONFIG_T>(shift_buffer, kernel_window);
}

template <class data_T, class res_T, typename CONFIG_T>
void compute_output_buffer_2d(
    const data_T &in_elem,
    ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width> line_buffer[(CONFIG_T::filt_height - 1 > 1 ? CONFIG_T::filt_height - 1 : 1)]
                                                                             [CONFIG_T::n_chan],
    hls::stream<res_T> &res_stream,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
#pragma HLS INLINE OFF


 const static int lShiftX = CONFIG_T::filt_width - 1;
    const static int lShiftY = CONFIG_T::filt_height - 1;


    static int pX = 0;
    static int pY = 0;

    static int sX = 0;
    static int sY = 0;

    static typename data_T::value_type kernel_data[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable = kernel_data complete

 typename res_T::value_type res_out[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable = res_out complete dim = 0

 res_T res_pack;



    nnet::shift_line_buffer<data_T, CONFIG_T>(in_elem, line_buffer, kernel_data);


    if ((sX - lShiftX) == 0 && (sY - lShiftY) == 0 && pY > lShiftY - 1 && pX > lShiftX - 1) {



        if (CONFIG_T::strategy == nnet::latency) {
            dense_latency<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(
                kernel_data, res_out, weights, biases);
        } else {
            dense_resource<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(
                kernel_data, res_out, weights, biases);
        }


    CastLoop:
        for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS UNROLL
 res_pack[i_ic] = res_out[i_ic];
        }


        res_stream.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::in_width)
    {
        pX = 0;
        sX = 0;
        if (pY + 1 == CONFIG_T::in_height) {
            pY = 0;
            sY = 0;
        } else {
            pY = pY + 1;

            sY = ((sY - lShiftY) == 0) ? sY - CONFIG_T::stride_height + 1 : sY + 1;
        }
    } else {
        pX = pX + 1;

        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
}


template <class data_T, class res_T, typename CONFIG_T>
void compute_output_buffer_1d(
    const data_T &in_elem, hls::stream<res_T> &res_stream,
    typename CONFIG_T::weight_t weights[CONFIG_T::kernel_size * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
#pragma HLS INLINE


 const static int lShiftX = CONFIG_T::filt_width - 1;


    static int pX = 0;
    static int sX = 0;

    static typename data_T::value_type kernel_data[CONFIG_T::filt_width * CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable = kernel_data complete

 typename res_T::value_type res_out[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable = res_out complete dim = 0

 res_T res_pack;



    nnet::kernel_shift_1d<data_T, CONFIG_T>(in_elem, kernel_data);


    if ((sX - lShiftX) == 0 && pX > lShiftX - 1) {


#pragma HLS INLINE recursive
 if (CONFIG_T::strategy == nnet::latency) {
            dense_latency<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(
                kernel_data, res_out, weights, biases);
        } else {
            dense_resource<typename data_T::value_type, typename res_T::value_type, typename CONFIG_T::mult_config>(
                kernel_data, res_out, weights, biases);
        }


    CastLoop:
        for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS UNROLL
 res_pack[i_ic] = res_out[i_ic];
        }


        res_stream.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::in_width)
    {
        pX = 0;
        sX = 0;
    } else {
        pX = pX + 1;

        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
}

}
# 8 "./nnet_utils/nnet_conv2d_stream.h" 2

namespace nnet {

template <class data_T, typename CONFIG_T>
void compute_scaled_indices_2d(const unsigned h_idx, const unsigned w_idx,
                               ap_uint<CONFIG_T::filt_height * CONFIG_T::filt_width> *pixel_idx) {
    const unsigned sh_idx = CONFIG_T::template scale_index_height<CONFIG_T::filt_height, CONFIG_T::stride_height,
                                                                  CONFIG_T::in_height>::scale_index(h_idx);
    unsigned wp_idx = w_idx * (data_T::size / CONFIG_T::n_chan);

ComputeIndex:
    for (unsigned p = 0; p < data_T::size / CONFIG_T::n_chan; p++) {
#pragma HLS UNROLL

 unsigned sw_idx = CONFIG_T::template scale_index_width<CONFIG_T::filt_width, CONFIG_T::stride_width,
                                                               CONFIG_T::in_width>::scale_index(wp_idx + p);
        pixel_idx[p] = CONFIG_T::pixels[sh_idx * CONFIG_T::min_width + sw_idx];
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void conv_2d_encoded_cl(
    hls::stream<data_T> &data, hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
    ({ bool _AssertPred = CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::filt_height == CONFIG_T::filt_width; __builtin_assume(_AssertPred); });

    hls::stream<typename data_T::value_type> data_window[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
    const int win_depth = CONFIG_T::filt_height * CONFIG_T::out_width;
    VITIS_LOOP_38_1: for (unsigned i_out = 0; i_out < CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan; i_out++) {
#pragma HLS STREAM variable=data_window[i_out] depth=win_depth
 }

#pragma HLS ARRAY_PARTITION variable=CONFIG_T::pixels complete

 res_T res_pack;

    unsigned outputs_ready = 0;

    ap_uint<CONFIG_T::filt_height * CONFIG_T::filt_width> pixel_idx[data_T::size / CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable=pixel_idx complete

ReadInputHeight:
    for (unsigned i_ih = 0; i_ih < CONFIG_T::in_height; i_ih++) {
    ReadInputWidth:
        for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width / (data_T::size / CONFIG_T::n_chan); i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (CONFIG_T::strategy == nnet::latency && data_T::size / CONFIG_T::n_chan == 1) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 }
            compute_scaled_indices_2d<data_T, CONFIG_T>(i_ih, i_iw, pixel_idx);
            compute_output_encoded<data_T, res_T, CONFIG_T>(data.read(), data_window, res, res_pack, outputs_ready, weights,
                                                            biases, pixel_idx);
        }
    }
}


template <class data_T, class res_T, typename CONFIG_T>
void conv_2d_buffer_cl(
    hls::stream<data_T> &data, hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
    ({ bool _AssertPred = CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });

    static ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width> line_buffer[(CONFIG_T::filt_height - 1 > 1 ? CONFIG_T::filt_height - 1 : 1)]
                                                                                    [CONFIG_T::n_chan];
#pragma HLS ARRAY_PARTITION variable = line_buffer complete dim = 2

ReadInputHeight:
    for (unsigned i_ih = 0; i_ih < CONFIG_T::in_height; i_ih++) {
    ReadInputWidth:
        for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width; i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (CONFIG_T::strategy == nnet::latency) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 }
            if (CONFIG_T::filt_height > 1) {
                compute_output_buffer_2d<data_T, res_T, CONFIG_T>(data.read(), line_buffer, res, weights, biases);
            } else {
                compute_output_buffer_1d<data_T, res_T, CONFIG_T>(data.read(), res, weights, biases);
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void conv_2d_cl(
    hls::stream<data_T> &data, hls::stream<res_T> &res,
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt]) {
#pragma HLS inline recursive
 switch (CONFIG_T::implementation) {
    case conv_implementation::linebuffer:
        conv_2d_buffer_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
        break;
    case conv_implementation::encoded:
        conv_2d_encoded_cl<data_T, res_T, CONFIG_T>(data, res, weights, biases);
        break;
    }
}

}
# 14 "./parameters.h" 2

# 1 "./nnet_utils/nnet_dense_compressed.h" 1






# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 8 "./nnet_utils/nnet_dense_compressed.h" 2

namespace nnet {

template <typename CONFIG_T>
void fill_mult(typename CONFIG_T::index_t index, typename CONFIG_T::accum_t mult[CONFIG_T::n_out],
               typename CONFIG_T::accum_t weight) {
    VITIS_LOOP_14_1: for (unsigned k = 0; k < CONFIG_T::n_out; k++) {
#pragma HLS UNROLL
 if (k == index)
            mult[k] += weight;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_compressed(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                      typename CONFIG_T::weight_t weights[CONFIG_T::n_nonzeros],
                      typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int multiplier_limit = ((CONFIG_T::n_nonzeros + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);

    typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=acc complete
#pragma HLS ARRAY_PARTITION variable=biases complete
#pragma HLS ARRAY_RESHAPE variable=weights block factor=multiplier_limit


#pragma HLS AGGREGATE variable=weights




InitAccum:
    for (unsigned i = 0; i < CONFIG_T::n_out; i++) {
#pragma HLS UNROLL
 acc[i] = (typename CONFIG_T::accum_t)(biases[i]);
    }


    const int rufactor = CONFIG_T::reuse_factor;
ReuseLoop:
    for (unsigned ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind

 typename CONFIG_T::accum_t mult[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=mult complete

 ResetMult:
        for (int imult = 0; imult < CONFIG_T::n_out; imult++) {
#pragma HLS UNROLL
 mult[imult] = 0;
        }

    CompressedMultLoop:
        for (unsigned im = 0; im < multiplier_limit; im++) {
#pragma HLS UNROLL
 unsigned w = im * rufactor + ir;
            auto row = weights[w].row_index;
            auto col = weights[w].col_index;
            auto weight_cache = weights[w].weight;
            data_T data_cache = data[row];

            typename CONFIG_T::accum_t prod =
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data_cache, weight_cache);
            fill_mult<CONFIG_T>(col, mult, prod);
        }

        VITIS_LOOP_74_1: for (int im = 0; im < CONFIG_T::n_out; im++) {
            acc[im] += mult[im];
        }
    }


ResultLoop:
    for (unsigned i = 0; i < CONFIG_T::n_out; i++) {
#pragma HLS UNROLL

 res[i] = cast<data_T, res_T, CONFIG_T>(acc[i]);
    }
}

}
# 16 "./parameters.h" 2
# 1 "./nnet_utils/nnet_dense_stream.h" 1






# 1 "/usr/include/assert.h" 1 3 4
# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__));


}
# 8 "./nnet_utils/nnet_dense_stream.h" 2
# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 9 "./nnet_utils/nnet_dense_stream.h" 2

namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void dense_wrapper(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                   typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                   typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
#pragma HLS INLINE recursive
 if (CONFIG_T::strategy == nnet::latency) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor
 dense_latency<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense(hls::stream<data_T> &data_stream, hls::stream<res_T> &res_stream,
           typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
           typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
    typename data_T::value_type data[CONFIG_T::n_in];
#pragma HLS ARRAY_PARTITION variable=data complete

 typename res_T::value_type res[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=res complete

DataPrepare:
    for (int i_in = 0; i_in < CONFIG_T::n_in / data_T::size; i_in++) {
        if (CONFIG_T::n_in / data_T::size > 1) {
#pragma HLS PIPELINE
 }
        data_T data_pack = data_stream.read();
    DataPack:
        for (int i_pack = 0; i_pack < data_T::size; i_pack++) {
#pragma HLS UNROLL
 data[i_in * data_T::size + i_pack] = data_pack[i_pack];
        }
    }

    dense_wrapper<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(data, res, weights, biases);

ResWrite:
    for (unsigned i_out = 0; i_out < CONFIG_T::n_out / res_T::size; i_out++) {
        if (CONFIG_T::n_out / res_T::size > 1) {
#pragma HLS PIPELINE
 }
        res_T res_pack;

    ResPack:
        for (int i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = res[i_out * res_T::size + i_pack];
        }
        res_stream.write(res_pack);
    }
}

}
# 17 "./parameters.h" 2
# 1 "./nnet_utils/nnet_padding.h" 1



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 5 "./nnet_utils/nnet_padding.h" 2

namespace nnet {

struct padding1d_config {
    static const unsigned n_chan = 10;
    static const unsigned in_width = 10;
    static const unsigned out_width = 10;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
};

template <class data_T, class res_T, typename CONFIG_T>
void zeropad1d_cf(data_T data[CONFIG_T::n_chan * CONFIG_T::in_width], data_T res[CONFIG_T::n_chan * CONFIG_T::out_width]) {
#pragma HLS PIPELINE

 VITIS_LOOP_20_1: for (int j = 0; j < CONFIG_T::n_chan; j++) {
        VITIS_LOOP_21_2: for (int i = 0; i < CONFIG_T::pad_left; i++) {
            *(res++) = 0;
        }

        VITIS_LOOP_25_3: for (int i = 0; i < CONFIG_T::in_width; i++) {
            *(res++) = (res_T) * (data++);
        }

        VITIS_LOOP_29_4: for (int i = 0; i < CONFIG_T::pad_right; i++) {
            *(res++) = 0;
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void zeropad1d_cl(data_T data[CONFIG_T::n_chan * CONFIG_T::in_width], res_T res[CONFIG_T::n_chan * CONFIG_T::out_width]) {
#pragma HLS PIPELINE

 VITIS_LOOP_39_1: for (int i = 0; i < CONFIG_T::pad_left; i++) {
        VITIS_LOOP_40_2: for (int j = 0; j < CONFIG_T::n_chan; j++) {
            *(res++) = 0;
        }
    }

    VITIS_LOOP_45_3: for (int i = 0; i < CONFIG_T::in_width; i++) {
        VITIS_LOOP_46_4: for (int j = 0; j < CONFIG_T::n_chan; j++) {
            *(res++) = (res_T) * (data++);
        }
    }

    VITIS_LOOP_51_5: for (int i = 0; i < CONFIG_T::pad_right; i++) {
        VITIS_LOOP_52_6: for (int j = 0; j < CONFIG_T::n_chan; j++) {
            *(res++) = 0;
        }
    }
}

struct padding2d_config {
    static const unsigned n_chan = 10;
    static const unsigned in_height = 10;
    static const unsigned in_width = 10;
    static const unsigned out_height = 10;
    static const unsigned out_width = 10;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
};

template <class data_T, class res_T, typename CONFIG_T>
void zeropad2d_cf(data_T data[CONFIG_T::n_chan * CONFIG_T::in_height * CONFIG_T::in_width],
                  data_T res[CONFIG_T::n_chan * CONFIG_T::out_height * CONFIG_T::out_width]) {
#pragma HLS PIPELINE

 VITIS_LOOP_75_1: for (int k = 0; k < CONFIG_T::n_chan; k++) {

        VITIS_LOOP_77_2: for (int i = 0; i < CONFIG_T::pad_top; i++) {
            VITIS_LOOP_78_3: for (int j = 0; j < CONFIG_T::out_width; j++) {
                *(res++) = 0;
            }
        }

        VITIS_LOOP_83_4: for (int i = 0; i < CONFIG_T::in_height; i++) {
            VITIS_LOOP_84_5: for (int j = 0; j < CONFIG_T::pad_left; j++) {
                *(res++) = 0;
            }
            VITIS_LOOP_87_6: for (int j = 0; j < CONFIG_T::in_width; j++) {
                *(res++) = (res_T) * (data++);
            }
            VITIS_LOOP_90_7: for (int j = 0; j < CONFIG_T::pad_right; j++) {
                *(res++) = 0;
            }
        }

        VITIS_LOOP_95_8: for (int i = 0; i < CONFIG_T::pad_bottom; i++) {
            VITIS_LOOP_96_9: for (int j = 0; j < CONFIG_T::out_width; j++) {
                *(res++) = 0;
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void zeropad2d_cl(data_T data[CONFIG_T::n_chan * CONFIG_T::in_height * CONFIG_T::in_width],
                  res_T res[CONFIG_T::n_chan * CONFIG_T::out_height * CONFIG_T::out_width]) {
#pragma HLS PIPELINE

 VITIS_LOOP_108_1: for (int i = 0; i < CONFIG_T::pad_top; i++) {
        VITIS_LOOP_109_2: for (int j = 0; j < CONFIG_T::out_width; j++) {
            VITIS_LOOP_110_3: for (int k = 0; k < CONFIG_T::n_chan; k++) {
                *(res++) = 0;
            }
        }
    }

    VITIS_LOOP_116_4: for (int i = 0; i < CONFIG_T::in_height; i++) {
        VITIS_LOOP_117_5: for (int j = 0; j < CONFIG_T::pad_left; j++) {
            VITIS_LOOP_118_6: for (int k = 0; k < CONFIG_T::n_chan; k++) {
                *(res++) = 0;
            }
        }
        VITIS_LOOP_122_7: for (int j = 0; j < CONFIG_T::in_width; j++) {
            VITIS_LOOP_123_8: for (int k = 0; k < CONFIG_T::n_chan; k++) {
                *(res++) = (res_T) * (data++);
            }
        }
        VITIS_LOOP_127_9: for (int j = 0; j < CONFIG_T::pad_right; j++) {
            VITIS_LOOP_128_10: for (int k = 0; k < CONFIG_T::n_chan; k++) {
                *(res++) = 0;
            }
        }
    }

    VITIS_LOOP_134_11: for (int i = 0; i < CONFIG_T::pad_bottom; i++) {
        VITIS_LOOP_135_12: for (int j = 0; j < CONFIG_T::out_width; j++) {
            VITIS_LOOP_136_13: for (int k = 0; k < CONFIG_T::n_chan; k++) {
                *(res++) = 0;
            }
        }
    }
}

}
# 18 "./parameters.h" 2
# 1 "./nnet_utils/nnet_padding_stream.h" 1



# 1 "/data/Xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 5 "./nnet_utils/nnet_padding_stream.h" 2

namespace nnet {

template <class res_T, typename CONFIG_T> void fill_zero(hls::stream<res_T> &res) {
#pragma HLS INLINE
 res_T res_part;
    VITIS_LOOP_11_1: for (int c = 0; c < CONFIG_T::n_chan; c++) {
#pragma HLS UNROLL
 res_part[c] = 0;
    }
    res.write(res_part);
}

template <class data_T, class res_T, typename CONFIG_T> void fill_data(hls::stream<data_T> &data, hls::stream<res_T> &res) {
#pragma HLS INLINE
 data_T data_part = data.read();
    res_T res_part;
    VITIS_LOOP_22_1: for (int c = 0; c < CONFIG_T::n_chan; c++) {
#pragma HLS UNROLL
 res_part[c] = data_part[c];
    }
    res.write(res_part);
}

template <class data_T, class res_T, typename CONFIG_T>
void zeropad1d_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
PadLeft:
    for (int i = 0; i < CONFIG_T::pad_left; i++) {
        fill_zero<res_T, CONFIG_T>(res);
    }

CopyMain:
    for (int i = 0; i < CONFIG_T::in_width; i++) {
        fill_data<data_T, res_T, CONFIG_T>(data, res);
    }

PadRight:
    for (int i = 0; i < CONFIG_T::pad_right; i++) {
        fill_zero<res_T, CONFIG_T>(res);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void zeropad2d_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {

PadTop:
    for (int i = 0; i < CONFIG_T::pad_top; i++) {
    PadTopWidth:
        for (int j = 0; j < CONFIG_T::out_width; j++) {
            fill_zero<res_T, CONFIG_T>(res);
        }
    }

PadMain:
    for (int i = 0; i < CONFIG_T::in_height; i++) {
    PadLeft:
        for (int j = 0; j < CONFIG_T::pad_left; j++) {
            fill_zero<res_T, CONFIG_T>(res);
        }
    CopyMain:
        for (int j = 0; j < CONFIG_T::in_width; j++) {
            fill_data<data_T, res_T, CONFIG_T>(data, res);
        }
    PadRight:
        for (int j = 0; j < CONFIG_T::pad_right; j++) {
            fill_zero<res_T, CONFIG_T>(res);
        }
    }

PadBottom:
    for (int i = 0; i < CONFIG_T::pad_bottom; i++) {
    PadBottomWidth:
        for (int j = 0; j < CONFIG_T::out_width; j++) {
            fill_zero<res_T, CONFIG_T>(res);
        }
    }
}

}
# 19 "./parameters.h" 2
# 1 "./nnet_utils/nnet_pooling.h" 1






namespace nnet {


template <typename T, int N> T max(T x[N]) {
    T y = x[0];
    VITIS_LOOP_12_1: for (int i = 1; i < N; i++) {
        y = x[i] > y ? x[i] : y;
    }
    return y;
}

template <int W, int N> ap_int<W> avg(ap_int<W> (&x)[N]) {

    ap_int<W + ceillog2(N)> tmp = 0;
    VITIS_LOOP_21_1: for (int i = 0; i < N; i++) {
        tmp += x[i];
    }
    tmp /= N;

    ap_int<W> y = tmp;
    return tmp;
}

template <int W, int I, int N> ap_fixed<W, I> avg(ap_fixed<W, I> (&x)[N]) {

    ap_fixed<W + ceillog2(N), I + ceillog2(N)> tmp = 0;
    VITIS_LOOP_33_1: for (int i = 0; i < N; i++) {
        tmp += x[i];
    }
    tmp /= N;

    ap_fixed<W, I> y = tmp;
    return y;
}


template <typename T, int N> T avg(T (&x)[N]) {
    T y = 0;
    VITIS_LOOP_45_1: for (int i = 0; i < N; i++) {
        y += x[i];
    }
    y /= N;
    return y;
}


enum Pool_Op { Max, Average };
template <typename T, int N, Pool_Op op> T pool_op(T (&x)[N]) {
    switch (op) {
    case Max:
        return max<T, N>(x);
    case Average:
        return avg(x);

    }
}

template <typename T, Pool_Op op> T pad_val() {







    switch (op) {
    case Max: {
        T x = 0;
        x[x.width - 1] = 1;
        return x;
        break;
    }
    case Average:
        return 0;
    }
}

struct pooling1d_config {

    static const unsigned n_in = 10;
    static const unsigned pool_width = 2;
    static const unsigned stride_width = 2;
    static const unsigned n_out = (n_in - pool_width) / stride_width + 1;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const bool count_pad = false;

    static const Pool_Op pool_op = Max;
};

template <typename CONFIG_T> constexpr int pool_op_limit_1d() {
    return CONFIG_T::n_in * CONFIG_T::n_filt / CONFIG_T::reuse_factor;
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling1d_cl(data_T data[CONFIG_T::n_in * CONFIG_T::n_filt], res_T res[CONFIG_T::n_out * CONFIG_T::n_filt]) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor


 const int limit = pool_op_limit_1d<CONFIG_T>();
#pragma HLS ALLOCATION function instances=CONFIG_T::pool_op limit=limit

 unsigned padded_width = CONFIG_T::n_in + CONFIG_T::pad_left + CONFIG_T::pad_right;
    if (CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) {
        padded_width -= padded_width - (padded_width / CONFIG_T::stride_width * CONFIG_T::stride_width);
    }

    VITIS_LOOP_114_1: for (int ff = 0; ff < CONFIG_T::n_filt; ff++) {

        VITIS_LOOP_116_2: for (int ii = 0; ii < padded_width; ii += CONFIG_T::stride_width) {
            data_T pool[CONFIG_T::pool_width];
#pragma HLS ARRAY_PARTITION variable=pool complete dim=0

 unsigned img_overlap = 0;

            VITIS_LOOP_122_3: for (int jj = 0; jj < CONFIG_T::stride_width; jj++) {
                if (ii + jj < CONFIG_T::pad_left || ii + jj >= (padded_width - CONFIG_T::pad_right)) {

                    pool[jj] = pad_val<data_T, CONFIG_T::pool_op>();
                    if (CONFIG_T::count_pad)
                        img_overlap++;
                } else {
                    pool[jj] = data[(ii + jj - CONFIG_T::pad_left) * CONFIG_T::n_filt + ff];
                    img_overlap++;
                }
            }



            res[(ii / CONFIG_T::stride_width) * CONFIG_T::n_filt + ff] =
                pool_op<data_T, CONFIG_T::pool_width, CONFIG_T::pool_op>(pool);

            if (CONFIG_T::pool_op == Average) {
                data_T rescale = static_cast<data_T>(CONFIG_T::pool_width) / img_overlap;
                res[(ii / CONFIG_T::stride_width) * CONFIG_T::n_filt + ff] *= rescale;
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void global_pooling1d_cl(data_T data[CONFIG_T::n_in * CONFIG_T::n_filt], res_T res[CONFIG_T::n_filt]) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor

 ({ bool _AssertPred = CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_width == CONFIG_T::stride_width; __builtin_assume(_AssertPred); });


    const int limit = pool_op_limit_1d<CONFIG_T>();
#pragma HLS ALLOCATION function instances=CONFIG_T::pool_op limit=limit

 VITIS_LOOP_158_1: for (int ff = 0; ff < CONFIG_T::n_filt; ff++) {
        data_T pool[CONFIG_T::n_in];
#pragma HLS ARRAY_PARTITION variable=pool complete dim=0
 VITIS_LOOP_161_2: for (int jj = 0; jj < CONFIG_T::n_in; jj++) {
            pool[jj] = data[jj * CONFIG_T::n_filt + ff];
        }

        res[ff] = pool_op<data_T, CONFIG_T::n_in, CONFIG_T::pool_op>(pool);
    }
}

struct pooling2d_config {

    static const unsigned in_height = 10;
    static const unsigned in_width = 10;
    static const unsigned n_filt = 4;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;
    static const unsigned out_height = (in_height - pool_height) / stride_height + 1;
    static const unsigned out_width = (in_width - pool_width) / stride_width + 1;

    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const bool count_pad = false;

    static const Pool_Op pool_op = Max;

    static const unsigned reuse_factor = 1;


    typedef float accum_t;
};

template <typename CONFIG_T> constexpr int pool_op_limit() {
    return (CONFIG_T::out_height * CONFIG_T::out_width) * CONFIG_T::n_filt / CONFIG_T::reuse_factor;
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling2d_cl(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_filt],
                  res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt]) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor


 const int limit = pool_op_limit<CONFIG_T>();
#pragma HLS ALLOCATION function instances=CONFIG_T::pool_op limit=limit

 unsigned padded_height = CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom;
    unsigned padded_width = CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right;
    if (CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) {
        padded_height -= padded_height - (padded_height / CONFIG_T::stride_height * CONFIG_T::stride_height);
        padded_width -= padded_width - (padded_width / CONFIG_T::stride_width * CONFIG_T::stride_width);
    }

    VITIS_LOOP_215_1: for (int ff = 0; ff < CONFIG_T::n_filt; ff++) {

        VITIS_LOOP_217_2: for (int ii = 0; ii < padded_height; ii += CONFIG_T::stride_height) {

            VITIS_LOOP_219_3: for (int jj = 0; jj < padded_width; jj += CONFIG_T::stride_width) {
                data_T pool[CONFIG_T::pool_height * CONFIG_T::pool_width];
#pragma HLS ARRAY_PARTITION variable=pool complete dim=0

 unsigned img_overlap = 0;

                VITIS_LOOP_225_4: for (int kk = 0; kk < CONFIG_T::stride_height; kk++) {

                    VITIS_LOOP_227_5: for (int ll = 0; ll < CONFIG_T::stride_width; ll++) {
                        if (ii + kk < CONFIG_T::pad_top || ii + kk >= (padded_height - CONFIG_T::pad_bottom) ||
                            jj + ll < CONFIG_T::pad_left || jj + ll >= (padded_width - CONFIG_T::pad_right)) {

                            pool[kk * CONFIG_T::stride_width + ll] = pad_val<data_T, CONFIG_T::pool_op>();
                            if (CONFIG_T::count_pad)
                                img_overlap++;
                        } else {
                            pool[kk * CONFIG_T::stride_width + ll] =
                                data[(ii + kk - CONFIG_T::pad_top) * CONFIG_T::in_width * CONFIG_T::n_filt +
                                     (jj + ll - CONFIG_T::pad_left) * CONFIG_T::n_filt + ff];
                            img_overlap++;
                        }
                    }
                }



                res[(ii / CONFIG_T::stride_height) * CONFIG_T::out_width * CONFIG_T::n_filt +
                    (jj / CONFIG_T::stride_width) * CONFIG_T::n_filt + ff] =
                    pool_op<data_T, CONFIG_T::pool_height * CONFIG_T::pool_width, CONFIG_T::pool_op>(pool);

                if (CONFIG_T::pool_op == Average) {
                    data_T rescale =
                        static_cast<data_T>(CONFIG_T::pool_height) * static_cast<data_T>(CONFIG_T::pool_width) / img_overlap;
                    res[(ii / CONFIG_T::stride_height) * CONFIG_T::out_width * CONFIG_T::n_filt +
                        (jj / CONFIG_T::stride_width) * CONFIG_T::n_filt + ff] *= rescale;
                }
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling2d_cf(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_filt],
                  res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt]) {
#pragma HLS PIPELINE II=CONFIG_T::reuse_factor


 const int limit = pool_op_limit<CONFIG_T>();
#pragma HLS ALLOCATION function instances=CONFIG_T::pool_op limit=limit

 unsigned padded_height = CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom;
    unsigned padded_width = CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right;
    if (CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) {
        padded_height -= padded_height - (padded_height / CONFIG_T::stride_height * CONFIG_T::stride_height);
        padded_width -= padded_width - (padded_width / CONFIG_T::stride_width * CONFIG_T::stride_width);
    }

    VITIS_LOOP_276_1: for (int ff = 0; ff < CONFIG_T::n_filt; ff++) {

        VITIS_LOOP_278_2: for (int ii = 0; ii < padded_height; ii += CONFIG_T::stride_height) {

            VITIS_LOOP_280_3: for (int jj = 0; jj < padded_width; jj += CONFIG_T::stride_width) {
                data_T pool[CONFIG_T::pool_height * CONFIG_T::pool_width];
#pragma HLS ARRAY_PARTITION variable=pool complete dim=0

 unsigned img_overlap = 0;

                VITIS_LOOP_286_4: for (int kk = 0; kk < CONFIG_T::stride_height; kk++) {

                    VITIS_LOOP_288_5: for (int ll = 0; ll < CONFIG_T::stride_width; ll++) {
                        if (ii + kk < CONFIG_T::pad_top || ii + kk >= (padded_height - CONFIG_T::pad_bottom) ||
                            jj + ll < CONFIG_T::pad_left || jj + ll >= (padded_width - CONFIG_T::pad_right)) {

                            pool[kk * CONFIG_T::stride_width + ll] = pad_val<data_T, CONFIG_T::pool_op>();
                            if (CONFIG_T::count_pad)
                                img_overlap++;
                        } else {
                            pool[kk * CONFIG_T::stride_width + ll] =
                                data[(ii + kk - CONFIG_T::pad_top) * CONFIG_T::in_width +
                                     ff * CONFIG_T::in_width * CONFIG_T::in_height + ll + jj - CONFIG_T::pad_left];
                            img_overlap++;
                        }
                    }
                }



                res[(ii / CONFIG_T::stride_height) * CONFIG_T::out_width + (jj / CONFIG_T::stride_width) +
                    ff * CONFIG_T::out_height * CONFIG_T::out_width] =
                    pool_op<data_T, CONFIG_T::pool_height * CONFIG_T::pool_width, CONFIG_T::pool_op>(pool);

                if (CONFIG_T::pool_op == Average) {
                    data_T rescale =
                        static_cast<data_T>(CONFIG_T::pool_height) * static_cast<data_T>(CONFIG_T::pool_width) / img_overlap;
                    res[(ii / CONFIG_T::stride_height) * CONFIG_T::out_width + (jj / CONFIG_T::stride_width) +
                        ff * CONFIG_T::out_height * CONFIG_T::out_width] *= rescale;
                }
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void global_pooling2d_cl(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_filt],
                         res_T res[CONFIG_T::n_filt]) {
    ({ bool _AssertPred = CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_width == CONFIG_T::stride_width; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_height == CONFIG_T::stride_height; __builtin_assume(_AssertPred); });

#pragma HLS PIPELINE II=CONFIG_T::reuse_factor

 const int limit = pool_op_limit<CONFIG_T>();
#pragma HLS ALLOCATION instances=pool_op limit=limit function

FiltLoop:
    for (int filt = 0; filt < CONFIG_T::n_filt; filt++) {
        data_T pool[CONFIG_T::in_height * CONFIG_T::in_width];

    InputLoop:
        for (int i = 0; i < CONFIG_T::in_height * CONFIG_T::in_width; i++) {
            pool[i] = data[i * CONFIG_T::n_filt + filt];
        }

        res[filt] = static_cast<res_T>(pool_op<data_T, CONFIG_T::in_height * CONFIG_T::in_width, CONFIG_T::pool_op>(pool));
    }
}

}
# 20 "./parameters.h" 2
# 1 "./nnet_utils/nnet_pooling_stream.h" 1








# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h" 1
# 37 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
# 1 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/hls_half.h" 1
# 38 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h" 2
# 69 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
namespace hls {

    template<typename T>
    class numeric_limits {
    public:
        static T max() { return std::numeric_limits<T>::max(); }
        static T min() { return std::numeric_limits<T>::min(); }
        static T epsilon() { return std::numeric_limits<T>::epsilon(); }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_fixed<W,I,Q,O> > {
    public:
        static ap_fixed<W,I,Q,O> max() {
            ap_int<W> m = ::hls::numeric_limits<ap_int<W> >::max();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> min() {
            ap_int<W> m = ::hls::numeric_limits<ap_int<W> >::min();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> epsilon() {
          ap_fixed<W,I,Q,O> x = 0;
          x[0] = 1;

          return x;
        }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_ufixed<W,I,Q,O> > {
    public:
        static ap_ufixed<W,I,Q,O> max() {
            ap_uint<W> m = ::hls::numeric_limits<ap_uint<W> >::max();
            ap_ufixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_ufixed<W,I,Q,O> min() { return 0; }
        static ap_ufixed<W,I,Q,O> epsilon() {
          ap_ufixed<W,I,Q,O> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_int<W> > {
    public:
        static ap_int<W> max() { ap_int<W> m = min(); return ~m; }
        static ap_int<W> min() { ap_int<W> m = 0; m[W-1] = 1; return m; }
        static ap_int<W> epsilon() {
          ap_int<W> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_uint<W> > {
    public:
        static ap_uint<W> max() { ap_uint<W> zero = 0; return ~zero; }
        static ap_uint<W> min() { return 0; }
        static ap_uint<W> epsilon() {
          ap_uint<W> x = 0;
          x[0] = 1;
          return x;
        }
    };
}


namespace hlstmp {

    template<typename T>
    class numeric_limits {
    public:
        static T max() { return std::numeric_limits<T>::max(); }
        static T min() { return std::numeric_limits<T>::min(); }
        static T epsilon() { return std::numeric_limits<T>::epsilon(); }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_fixed<W,I,Q,O> > {
    public:
        static ap_fixed<W,I,Q,O> max() {
            ap_int<W> m = ::hlstmp::numeric_limits<ap_int<W> >::max();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> min() {
            ap_int<W> m = ::hlstmp::numeric_limits<ap_int<W> >::min();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> epsilon() {
          ap_fixed<W,I,Q,O> x = 0;
          x[0] = 1;

          return x;
        }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_ufixed<W,I,Q,O> > {
    public:
        static ap_ufixed<W,I,Q,O> max() {
            ap_uint<W> m = ::hlstmp::numeric_limits<ap_uint<W> >::max();
            ap_ufixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_ufixed<W,I,Q,O> min() { return 0; }
        static ap_ufixed<W,I,Q,O> epsilon() {
          ap_ufixed<W,I,Q,O> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_int<W> > {
    public:
        static ap_int<W> max() { ap_int<W> m = min(); return ~m; }
        static ap_int<W> min() { ap_int<W> m = 0; m[W-1] = 1; return m; }
        static ap_int<W> epsilon() {
          ap_int<W> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_uint<W> > {
    public:
        static ap_uint<W> max() { ap_uint<W> zero = 0; return ~zero; }
        static ap_uint<W> min() { return 0; }
        static ap_uint<W> epsilon() {
          ap_uint<W> x = 0;
          x[0] = 1;
          return x;
        }
    };
}


static inline
const
uint32_t pow2(uint32_t e)
{
    switch(e) {
        case 0: return 1; break;
        case 1: return 2; break;
        case 2: return 4; break;
        case 3: return 8; break;
        case 4: return 16; break;
        case 5: return 32; break;
        case 6: return 64; break;
        case 7: return 128; break;
        case 8: return 256; break;
        case 9: return 512; break;
        case 10: return 1024; break;
        case 11: return 2048; break;
        default: return 0;
    }
}

template<typename T>


__attribute__((hls_preserve))


T reg(T d)
{
#pragma HLS PIPELINE II=1
#pragma HLS LATENCY min=1 max=1
#pragma HLS INLINE off
 return d;
}
# 271 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
static inline
float to_float(float v)
{
    return v;
}

template<int _W, int _I>
float to_float(ap_fixed<_W, _I> v)
{
    return v.to_float();
}
# 290 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
template <typename T>
class fp_struct
{
};

union single_cast {
    float f;
    uint32_t i;
};

template <>
class fp_struct<float>
{
public:
    const static int EXP_INFNAN = 255;
    const static int EXP_BIAS = 127;
    const static int EXP_BITS = 8;
    const static int SIG_BITS = 23;
    const static int BITS = 32;

    fp_struct() {
    }
    fp_struct(float f) {


        union single_cast dc;
        dc.f = f;
        ap_uint<32> data = dc.i;





        sign[0] = data[31];
        exp(7,0)= data(30,23);
        sig(22,0)= data(22,0);
    }
    fp_struct(ap_uint<32> data) {
        sign[0] = data[31];
        exp(7,0)= data(30,23);
        sig(22,0)= data(22,0);
    }
    fp_struct(uint32_t i) {
        ap_uint<32> data = i;
        sign[0] = data[31];
        exp(7,0)= data(30,23);
        sig(22,0)= data(22,0);
    }
    inline ap_uint<32> data() const {
        ap_uint<32> t;
        t[31] = sign[0];
        t(30,23) = exp(7,0);
        t(22,0) = sig(22,0);
        return t;
    }
    inline int expv() const {
        return exp-127;
    }
    inline int32_t to_int() const {
        return data().to_int();
    }
    inline float to_float() const {


        union single_cast ret;
        ret.i = data().to_uint();
        return ret.f;







    }
    inline void set_mantissa(ap_ufixed<1+SIG_BITS,1> mantissa) {
        ap_ufixed<SIG_BITS,0> significand = mantissa;
        sig = significand(SIG_BITS-1,0);
    }
    inline ap_ufixed<1+SIG_BITS,1> mantissa() const {
        ap_ufixed<1+SIG_BITS,1> y = 0;
        y(y.wl()-1,0) = sig(SIG_BITS-1,0);
        y[y.wl()-1] = 1;
        return y;
    }
    inline float to_ieee() const {
        return to_float();
    }
    inline int __signbit() const {
        return sign.to_int();
    }

    static float infinity() {
        fp_struct<float> x;
        x.sign = 0;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    static float minus_infinity() {
        fp_struct<float> x;
        x.sign = 1;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    typedef uint32_t inttype;
    typedef ap_uint<32> data_type;
    ap_uint<1> sign;
    ap_uint<EXP_BITS> exp;
    ap_uint<SIG_BITS> sig;
};
# 420 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
static inline
void
castSingle(
    float din,
    fp_struct<float> &dout)
{
    fp_struct<float> t(din);
    dout = t;
}

static inline
float
castSingle(
    fp_struct<float> din)
{
    return din.to_float();
}

static inline
void
dumpSingle(
    float da,
    fp_struct<float> ds)
{
# 457 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
   (void)(da);
   (void)(ds);

}







union double_cast {
    double d;
    uint64_t i;
};

template <>
class fp_struct<double>
{
public:
    const static int EXP_INFNAN = 2047;
    const static int EXP_BIAS = 1023;
    const static int EXP_BITS = 11;
    const static int SIG_BITS = 52;
    const static int BITS = 64;

    fp_struct() {
    }
    fp_struct(double f) {
        union double_cast dc;
        dc.d = f;
        ap_uint<64> data = dc.i;
        sign[0] = data[63];
        exp(10,0) = data(62,52);
        sig(51,0) = data(51,0);
    }
    fp_struct(ap_uint<64> data) {
        sign[0] = data[63];
        exp(10,0) = data(62,52);
        sig(51,0) = data(51,0);
    }
    fp_struct(uint64_t i) {
        ap_uint<64> data = i;
        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    inline ap_uint<64> data() const {
        ap_uint<64> t;
        t[EXP_BITS+SIG_BITS+1-1] = sign[0];
        t(EXP_BITS-1+SIG_BITS,SIG_BITS) = exp(EXP_BITS-1,0);
        t(SIG_BITS-1,0) = sig(SIG_BITS-1,0);
        return t;
    }
    inline int64_t to_int() const {
        return data().to_int64();
    }
    inline int expv() const {
        return exp-1023;
    }
    inline ap_uint<20> sig_msb() const {
        return sig(51,32);
    }
    inline ap_uint<32> sig_lsb() const {
        return sig(31,0);
    }
    inline double to_double() const {
        union double_cast ret;
        ret.i = data().to_uint64();
        return ret.d;
    }
    inline void set_mantissa(ap_ufixed<1+SIG_BITS,1> mantissa) {
        ap_ufixed<SIG_BITS,0> significand = mantissa;
        sig = significand(SIG_BITS-1,0);
    }
    inline ap_ufixed<1+SIG_BITS,1> mantissa() const {
        ap_ufixed<1+SIG_BITS,1> y = 0;
        y(y.wl()-1,0) = sig(SIG_BITS-1,0);
        y[y.wl()-1] = 1;
        return y;
    }
    inline double to_ieee() const {
        return to_double();
    }
    inline int __signbit() const {
        return sign.to_int();
    }

    static double infinity() {
        fp_struct<double> x;
        x.sign = 0;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    static double minus_infinity() {
        fp_struct<double> x;
        x.sign = 1;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    typedef uint64_t inttype;
    typedef ap_uint<64> data_type;
    ap_uint<1> sign;
    ap_uint<EXP_BITS> exp;
    ap_uint<SIG_BITS> sig;
};
# 581 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
static inline
void
castDouble(
    double din,
    fp_struct<double> &dout)
{
    fp_struct<double> t(din);
    dout = t;
}

static inline
double
castDouble(
    fp_struct<double> din)
{
    return din.to_double();
}

static inline
void
dumpDouble(
    double da,
    fp_struct<double> ds)
{
# 618 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
   (void)(da);
   (void)(ds);

}
# 631 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
union half_cast {
    half d;
    uint16_t i;
};


template <>
class fp_struct<half>
{
public:
    const static int EXP_INFNAN = 31;
    const static int EXP_BIAS = 15;
    const static int EXP_BITS = 5;
    const static int SIG_BITS = 10;
    const static int BITS = 16;

    fp_struct() {
    }
    fp_struct(half f) {

        union half_cast dc;
        dc.d = f;
        ap_uint<16> data = dc.i;



        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    fp_struct(ap_uint<16> data) {
        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    fp_struct(uint16_t i) {
        ap_uint<16> data = i;
        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    inline ap_uint<16> data() const {
        ap_uint<16> t;
        t[EXP_BITS+SIG_BITS+1-1] = sign[0];
        t(EXP_BITS-1+SIG_BITS,SIG_BITS) = exp(EXP_BITS-1,0);
        t(SIG_BITS-1,0) = sig(SIG_BITS-1,0);
        return t;
    }
    inline int expv() const {
        return exp-EXP_BIAS;
    }
    inline int16_t to_int() const {
        return uint16_t(data().to_int());
    }
    inline half to_half() const {

        union half_cast ret;
        ret.i = data().to_uint64();
        return ret.d;





    }
    inline void set_mantissa(ap_ufixed<1+SIG_BITS,1> mantissa) {
        ap_ufixed<SIG_BITS,0> significand = mantissa;
        sig = significand(SIG_BITS-1,0);
    }
    inline ap_ufixed<1+SIG_BITS,1> mantissa() const {
        ap_ufixed<1+SIG_BITS,1> y = 0;
        y(y.wl()-1,0) = sig(SIG_BITS-1,0);
        y[y.wl()-1] = 1;
        return y;
    }
    inline half to_ieee() const {
        return to_half();
    }
    inline int __signbit() const {
        return sign.to_int();
    }

    static half infinity() {
        fp_struct<half> x;
        x.sign = 0;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    static half minus_infinity() {
        fp_struct<half> x;
        x.sign = 1;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    typedef uint16_t inttype;
    typedef ap_uint<16> data_type;
    ap_uint<1> sign;
    ap_uint<EXP_BITS> exp;
    ap_uint<SIG_BITS> sig;
};
# 749 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
static inline
void
castHalf(
    half din,
    fp_struct<half> &dout)
{
    fp_struct<half> t(din);
    dout = t;
}

static inline
half
castHalf(
    fp_struct<half> din)
{
    return din.to_half();
}

static inline
void
dumpHalf(
    half da,
    fp_struct<half> ds)
{
# 786 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
   (void)(da);
   (void)(ds);

}
# 804 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
template < unsigned int _Base, unsigned int _Num >
class Power
{
public:
    static const unsigned int Value = _Base * Power< _Base, _Num - 1 >::Value;
};

template < unsigned int _Base >
class Power< _Base, 0 >
{
public:
    static const unsigned int Value = 1;
};
# 826 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
template < unsigned int _Num, unsigned int _I=_Num/2>
class BitWidth
{
public:
    static const unsigned int Value = 1 + BitWidth<_Num,_I/2>::Value;
};

template <unsigned int _Num>
class BitWidth<_Num, 0>
{
public:
    static const unsigned int Value = 2;
};
# 848 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
template < unsigned int _Num, unsigned int _I=_Num/2>
class UnsignedBitWidth
{
public:
    static const unsigned int Value = 1 + UnsignedBitWidth<_Num,_I/2>::Value;
};

template <unsigned int _Num>
class UnsignedBitWidth<_Num, 0>
{
public:
    static const unsigned int Value = 1;
};
# 869 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
template < typename T >
class Type_BitWidth
{
public:
    static const unsigned int Value = 8*sizeof(T);
};

template <int W >
class Type_BitWidth< ap_uint<W> >
{
public:
    static const unsigned int Value = W;
};

template < int W >
class Type_BitWidth< ap_int<W> >
{
public:
    static const unsigned int Value = W;
};

template < int W, int I >
class Type_BitWidth< ap_ufixed<W, I> >
{
public:
    static const unsigned int Value = W;
};

template < int W, int I >
class Type_BitWidth< ap_fixed<W, I> >
{
public:
    static const unsigned int Value = W;
};
# 917 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
template <typename _T, int _Num, int _I=_Num-1>
class Table : public Table<_T, _Num, _I-1>
{
public:
    typedef typename _T::TableType TableType;
    static const typename _T::TableType dummy;
    static const int size = _Num;

};

template <typename _T, int _Num>
class Table<_T, _Num, 0>
{
public:
    static const typename _T::TableType dummy;
    static typename _T::TableType array[_Num];
};
# 944 "/data/Xilinx/Vitis_HLS/2023.1/common/technology/autopilot/utils/x_hls_utils.h"
template <typename _T, int _Num, int _I>
const typename _T::TableType Table<_T, _Num, _I>::dummy
    = Table<_T, _Num, 0>::array[_I] = _T::apply(_I,_Num) + 0*Table<_T, _Num, _I-1>::dummy;

template <typename _T, int _Num>
const typename _T::TableType Table<_T, _Num, 0>::dummy
    = Table<_T, _Num, 0>::array[0] = _T::apply(0,_Num);




template <typename _T, int _Num>
typename _T::TableType Table<_T, _Num, 0>::array[_Num];



template <class T>
struct is_fptype { static const bool value = false; };
template <> struct is_fptype<float> { static const bool value = true; };
template <> struct is_fptype<double> { static const bool value = true; };
template <> struct is_fptype<half> { static const bool value = true; };

template <class T>
struct is_integraltype { static const bool value = false; };
template <> struct is_integraltype<int> { static const bool value = true; };
template <> struct is_integraltype<unsigned int> { static const bool value = true; };
template <> struct is_integraltype<char> { static const bool value = true; };
template <> struct is_integraltype<signed char> { static const bool value = true; };
template <> struct is_integraltype<unsigned char> { static const bool value = true; };
template <> struct is_integraltype<short> { static const bool value = true; };
template <> struct is_integraltype<unsigned short> { static const bool value = true; };
template <> struct is_integraltype<long> { static const bool value = true; };
template <> struct is_integraltype<unsigned long> { static const bool value = true; };
template <> struct is_integraltype<long long> { static const bool value = true; };
template <> struct is_integraltype<unsigned long long> { static const bool value = true; };
template <int W> struct is_integraltype<ap_int<W> > { static const bool value = true; };
template <int W> struct is_integraltype<ap_uint<W> > { static const bool value = true; };

template <class T>
struct is_fixedtype { static const bool value = false; };
template <int W, int I, ap_q_mode Q, ap_o_mode O> struct is_fixedtype<ap_fixed<W,I,Q,O> > { static const bool value = true; };
template <int W, int I, ap_q_mode Q, ap_o_mode O> struct is_fixedtype<ap_ufixed<W,I,Q,O> > { static const bool value = true; };

namespace hls {
    template<bool B, class T = void>
    struct enable_if {};

    template<class T>
    struct enable_if<true, T> { typedef T type; };
    template<typename T, T _v>
    struct integral_constant
    {
        static const T value = _v;
        typedef T value_type;
        typedef integral_constant<T,_v> type;
        operator value_type() { return value; }
    };

    typedef integral_constant<bool, true> true_type;
    typedef integral_constant<bool, false> false_type;

    template<typename T1, typename T2>
    struct is_same;

    template<typename T1, typename T2>
    struct is_same : public false_type { };

    template<typename T1>
    struct is_same<T1,T1> : public true_type { };

    template<typename T>
    struct is_arithmetic : public integral_constant<bool, (is_integraltype<T>::value || is_fptype<T>::value)> { };
}

template<typename T1, typename T2>
struct enable_or { static const bool value = T1::value || T2::value; };

template<typename T1, typename T2>
struct enable_and { static const bool value = T1::value && T2::value; };



template<typename T, bool = is_integraltype<T>::value>
struct __promote { typedef double type; };

template<typename T>
struct __promote<T, false> { };

template<>
struct __promote<double> { typedef double type; };

template<>
struct __promote<float> { typedef float type; };

template<>
struct __promote<half> { typedef half type; };
# 10 "./nnet_utils/nnet_pooling_stream.h" 2

namespace nnet {





template <class T, int N, class CONFIG_T> T reduce_pool(T x[N]) {
#pragma HLS INLINE
 if (CONFIG_T::pool_op == Max) {
        Op_max<T> op_max;
        return reduce<T, N, Op_max<T>>(x, op_max);
    } else {
        Op_add<T> op_add;
        T sum = reduce<T, N, Op_add<T>>(x, op_add);
        return sum / N;
    }
}

template <unsigned TABLE_SIZE, unsigned POOL_SIZE> void init_pool_table(unsigned table[TABLE_SIZE]) {
    VITIS_LOOP_30_1: for (unsigned ii = 0; ii < TABLE_SIZE; ii++) {
        table[ii] = ii % POOL_SIZE;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void compute_pool_encoded_2d(
    const unsigned h_idx, const unsigned w_idx, const data_T &in_elem,
    hls::stream<typename data_T::value_type> data_window[CONFIG_T::pool_height * CONFIG_T::pool_width * CONFIG_T::n_filt],
    hls::stream<res_T> &res, res_T &res_pack, unsigned &outputs_ready) {

    constexpr unsigned nH =
        ((CONFIG_T::in_height - CONFIG_T::pool_height) / CONFIG_T::stride_height) * CONFIG_T::stride_height +
        CONFIG_T::pool_height;

    constexpr unsigned sH =
        (((CONFIG_T::pool_height + CONFIG_T::stride_height - 1) / CONFIG_T::stride_height) - 1) * CONFIG_T::stride_height + CONFIG_T::pool_height;

    constexpr unsigned nW = ((CONFIG_T::in_width - CONFIG_T::pool_width) / CONFIG_T::stride_width) * CONFIG_T::stride_width +
                            CONFIG_T::pool_width;

    constexpr unsigned sW =
        (((CONFIG_T::pool_width + CONFIG_T::stride_width - 1) / CONFIG_T::stride_width) - 1) * CONFIG_T::stride_width + CONFIG_T::pool_width;


    bool initialized = false;
    unsigned pool_table_height[CONFIG_T::in_height];
    unsigned pool_table_width[CONFIG_T::in_width];





    if (!initialized) {
        init_pool_table<CONFIG_T::in_height, CONFIG_T::pool_height>(pool_table_height);
        init_pool_table<CONFIG_T::in_width, CONFIG_T::pool_width>(pool_table_width);
        initialized = true;
    }

#pragma HLS INLINE

 if (data_T::size / CONFIG_T::n_filt > 1) {
#pragma HLS ARRAY_PARTITION variable=pool_table_height complete
#pragma HLS ARRAY_PARTITION variable=pool_table_width complete
 }

    typename CONFIG_T::accum_t pool_window[CONFIG_T::pool_height * CONFIG_T::pool_width];
#pragma HLS ARRAY_PARTITION variable=pool_window complete

 const unsigned sh_idx = pool_table_height[h_idx] * CONFIG_T::pool_width;
    const unsigned wp_idx = w_idx * (data_T::size / CONFIG_T::n_filt);

PixelLoop:
    for (unsigned p = 0; p < data_T::size / CONFIG_T::n_filt; p++) {
#pragma HLS PIPELINE

 ap_uint<CONFIG_T::pool_height *CONFIG_T::pool_width> filt_mask = 0;
        if ((h_idx < nH) && (wp_idx + p < nW)) {
            filt_mask = sh_idx + pool_table_width[wp_idx + p] + 1;
        }

    CopyDataFilt:
        for (unsigned c = 0; c < CONFIG_T::n_filt; c++) {
            if (filt_mask > 0)
                data_window[c * CONFIG_T::pool_height * CONFIG_T::pool_width + filt_mask.to_uint() - 1].write(
                    in_elem[p * CONFIG_T::n_filt + c]);
        }

        if (filt_mask == CONFIG_T::pool_height * CONFIG_T::pool_width) {
        FiltLoop:
            for (unsigned c = 0; c < CONFIG_T::n_filt; c++) {
            PoolLoop:
                for (unsigned f = 0; f < CONFIG_T::pool_height * CONFIG_T::pool_width; f++) {
                    pool_window[f] = data_window[c * CONFIG_T::pool_height * CONFIG_T::pool_width + f].read();
                }
                if (res_T::size / CONFIG_T::n_filt ==
                    1) {
                    res_pack[c] =
                        reduce_pool<typename CONFIG_T::accum_t, CONFIG_T::pool_height * CONFIG_T::pool_width, CONFIG_T>(
                            pool_window);
                } else {
                    res_pack[outputs_ready * CONFIG_T::n_filt + c] =
                        reduce_pool<typename CONFIG_T::accum_t, CONFIG_T::pool_height * CONFIG_T::pool_width, CONFIG_T>(
                            pool_window);
                }
            }
            if (res_T::size / CONFIG_T::n_filt ==
                1) {
                res.write(res_pack);
            } else {
                if (outputs_ready == (res_T::size / CONFIG_T::n_filt) - 1) {
                    res.write(res_pack);
                    outputs_ready = 0;
                } else {
                    outputs_ready++;
                }
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling2d_encoded_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_height == CONFIG_T::stride_height && CONFIG_T::pool_width == CONFIG_T::stride_width; __builtin_assume(_AssertPred); });

    res_T res_pack;

    unsigned outputs_ready = 0;

    hls::stream<typename data_T::value_type> data_window[CONFIG_T::pool_height * CONFIG_T::pool_width * CONFIG_T::n_filt];
    constexpr int win_depth = CONFIG_T::pool_height * CONFIG_T::out_width;
    VITIS_LOOP_142_1: for (unsigned i_out = 0; i_out < CONFIG_T::pool_height * CONFIG_T::pool_width * CONFIG_T::n_filt; i_out++) {
#pragma HLS STREAM variable=data_window[i_out] depth=win_depth
 }

    constexpr int pack_factor = data_T::size / CONFIG_T::n_filt;

ReadInputHeight:
    for (unsigned i_ih = 0; i_ih < CONFIG_T::in_height; i_ih++) {
    ReadInputWidth:
        for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width / (pack_factor); i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (res_T::size / CONFIG_T::n_filt == 1) {
#pragma HLS PIPELINE II=pack_factor
 }
            compute_pool_encoded_2d<data_T, res_T, CONFIG_T>(i_ih, i_iw, data.read(), data_window, res, res_pack,
                                                             outputs_ready);
        }
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void compute_pool_buffer_2d(const data_T &in_elem,
                            ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width>
                                line_buffer[(CONFIG_T::pool_height - 1 > 1 ? CONFIG_T::pool_height - 1 : 1)][CONFIG_T::n_filt],
                            hls::stream<res_T> &res) {
#pragma HLS INLINE
 const static int lShiftX = CONFIG_T::pool_width - 1;
    const static int lShiftY = CONFIG_T::pool_height - 1;
    static int pX = 0;
    static int pY = 0;
    static int sX = 0;
    static int sY = 0;

    typename CONFIG_T::accum_t pool_window[CONFIG_T::pool_height * CONFIG_T::pool_width];
#pragma HLS ARRAY_PARTITION variable=pool_window complete

 static typename data_T::value_type kernel_data[CONFIG_T::pool_height * CONFIG_T::pool_width * CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable = kernel_data complete dim = 0

 res_T res_pack;



    nnet::shift_line_buffer<data_T, CONFIG_T>(in_elem, line_buffer, kernel_data);


    if ((sX - lShiftX) == 0 && (sY - lShiftY) == 0 && pY > lShiftY - 1 && pX > lShiftX - 1) {
    FiltLoop:
        for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS PIPELINE


 PoolLoop:
            for (unsigned i_ihw = 0; i_ihw < CONFIG_T::pool_height * CONFIG_T::pool_width; i_ihw++) {
                pool_window[i_ihw] = kernel_data[i_ihw * CONFIG_T::n_filt + i_ic];
            }


            res_pack[i_ic] =
                reduce_pool<typename CONFIG_T::accum_t, CONFIG_T::pool_height * CONFIG_T::pool_width, CONFIG_T>(pool_window);
        }


        res.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::in_width)
    {
        pX = 0;
        sX = 0;
        if (pY + 1 == CONFIG_T::in_height) {
            pY = 0;
            sY = 0;
        } else {
            pY = pY + 1;

            sY = ((sY - lShiftY) == 0) ? sY - CONFIG_T::stride_height + 1 : sY + 1;
        }
    } else {
        pX = pX + 1;

        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling2d_buffer_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_height == CONFIG_T::stride_height && CONFIG_T::pool_width == CONFIG_T::stride_width; __builtin_assume(_AssertPred); });

    static ap_shift_reg<typename data_T::value_type, CONFIG_T::in_width> line_buffer[(CONFIG_T::pool_height - 1 > 1 ? CONFIG_T::pool_height - 1 : 1)]
                                                                                    [CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable = line_buffer complete dim = 2

ReadInputHeight:
    for (unsigned i_ih = 0; i_ih < CONFIG_T::in_height; i_ih++) {
    ReadInputWidth:
        for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width; i_iw++) {
#pragma HLS LOOP_FLATTEN
#pragma HLS PIPELINE

 compute_pool_buffer_2d<data_T, res_T, CONFIG_T>(data.read(), line_buffer, res);
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling2d_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
#pragma HLS inline recursive
 switch (CONFIG_T::implementation) {
    case conv_implementation::linebuffer:
        pooling2d_buffer_cl<data_T, res_T, CONFIG_T>(data, res);
        break;
    case conv_implementation::encoded:
        pooling2d_encoded_cl<data_T, res_T, CONFIG_T>(data, res);
        break;
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void compute_pool_encoded_1d(const unsigned w_idx, const data_T &in_elem,
                             hls::stream<typename data_T::value_type> data_window[CONFIG_T::pool_width * CONFIG_T::n_filt],
                             hls::stream<res_T> &res, res_T &res_pack, unsigned &outputs_ready) {

    constexpr unsigned nW =
        ((CONFIG_T::n_in - CONFIG_T::pool_width) / CONFIG_T::stride_width) * CONFIG_T::stride_width + CONFIG_T::pool_width;

    constexpr unsigned sW =
        (((CONFIG_T::pool_width + CONFIG_T::stride_width - 1) / CONFIG_T::stride_width) - 1) * CONFIG_T::stride_width + CONFIG_T::pool_width;


    bool initialized = false;
    unsigned pool_table_width[CONFIG_T::n_in];




    if (!initialized) {
        init_pool_table<CONFIG_T::n_in, CONFIG_T::pool_width>(pool_table_width);
        initialized = true;
    }

#pragma HLS INLINE

 if (data_T::size / CONFIG_T::n_filt > 1) {
#pragma HLS ARRAY_PARTITION variable=pool_table_width complete
 }

    typename CONFIG_T::accum_t pool_window[CONFIG_T::pool_width];
#pragma HLS ARRAY_PARTITION variable=pool_window complete

 const unsigned wp_idx = w_idx * (data_T::size / CONFIG_T::n_filt);

PixelLoop:
    for (unsigned p = 0; p < data_T::size / CONFIG_T::n_filt; p++) {
#pragma HLS PIPELINE

 ap_uint<CONFIG_T::pool_width> filt_mask = 0;
        if (wp_idx + p < nW) {
            filt_mask = pool_table_width[wp_idx + p] + 1;
        }

    CopyDataFilt:
        for (unsigned c = 0; c < CONFIG_T::n_filt; c++) {
            if (filt_mask > 0)
                data_window[c * CONFIG_T::pool_width + filt_mask.to_uint() - 1].write(in_elem[p * CONFIG_T::n_filt + c]);
        }

        if (filt_mask == CONFIG_T::pool_width) {
        FiltLoop:
            for (unsigned c = 0; c < CONFIG_T::n_filt; c++) {
            PoolLoop:
                for (unsigned f = 0; f < CONFIG_T::pool_width; f++) {
                    pool_window[f] = data_window[c * CONFIG_T::pool_width + f].read();
                }
                if (res_T::size / CONFIG_T::n_filt ==
                    1) {
                    res_pack[c] = reduce_pool<typename CONFIG_T::accum_t, CONFIG_T::pool_width, CONFIG_T>(pool_window);
                } else {
                    res_pack[outputs_ready * CONFIG_T::n_filt + c] =
                        reduce_pool<typename CONFIG_T::accum_t, CONFIG_T::pool_width, CONFIG_T>(pool_window);
                }
            }
            if (res_T::size / CONFIG_T::n_filt ==
                1) {
                res.write(res_pack);
            } else {
                if (outputs_ready == (res_T::size / CONFIG_T::n_filt) - 1) {
                    res.write(res_pack);
                    outputs_ready = 0;
                } else {
                    outputs_ready++;
                }
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling1d_encoded_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_width == CONFIG_T::stride_width; __builtin_assume(_AssertPred); });

    res_T res_pack;

    unsigned outputs_ready = 0;

    hls::stream<typename data_T::value_type> data_window[CONFIG_T::pool_width * CONFIG_T::n_filt];
    constexpr int win_depth = CONFIG_T::n_out;
    VITIS_LOOP_359_1: for (unsigned i_out = 0; i_out < CONFIG_T::pool_width * CONFIG_T::n_filt; i_out++) {
#pragma HLS STREAM variable=data_window[i_out] depth=win_depth
 }

    constexpr int pack_factor = data_T::size / CONFIG_T::n_filt;

ReadInputWidth:
    for (unsigned i_iw = 0; i_iw < CONFIG_T::n_in / (pack_factor); i_iw++) {
#pragma HLS LOOP_FLATTEN
 if (res_T::size / CONFIG_T::n_filt == 1) {
#pragma HLS PIPELINE II=pack_factor
 }
        compute_pool_encoded_1d<data_T, res_T, CONFIG_T>(i_iw, data.read(), data_window, res, res_pack, outputs_ready);
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void compute_pool_buffer_1d(const data_T &in_elem, hls::stream<res_T> &res) {
#pragma HLS INLINE
 const static int lShiftX = CONFIG_T::pool_width - 1;

    static int pX = 0;
    static int sX = 0;

    typename CONFIG_T::accum_t pool_window[CONFIG_T::pool_width];
#pragma HLS ARRAY_PARTITION variable=pool_window complete

 static typename data_T::value_type kernel_data[CONFIG_T::pool_width * CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable = kernel_data complete dim = 0

 res_T res_pack;




    nnet::kernel_shift_1d<data_T, CONFIG_T>(in_elem, kernel_data);


    if ((sX - lShiftX) == 0 && pX > lShiftX - 1) {
    FiltLoop:
        for (unsigned i_ic = 0; i_ic < CONFIG_T::n_filt; i_ic++) {
#pragma HLS PIPELINE


 PoolLoop:
            for (unsigned i_iw = 0; i_iw < CONFIG_T::pool_width; i_iw++) {
                pool_window[i_iw] = kernel_data[i_iw * CONFIG_T::n_filt + i_ic];
            }


            res_pack[i_ic] = reduce_pool<typename CONFIG_T::accum_t, CONFIG_T::pool_width, CONFIG_T>(pool_window);
        }


        res.write(res_pack);
    }


    if (pX + 1 == CONFIG_T::n_in)
    {
        pX = 0;
        sX = 0;
    } else {
        pX = pX + 1;

        sX = ((sX - lShiftX) == 0) ? sX - CONFIG_T::stride_width + 1 : sX + 1;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling1d_buffer_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });

ReadInputWidth:
    for (unsigned i_iw = 0; i_iw < CONFIG_T::n_in; i_iw++) {
#pragma HLS LOOP_FLATTEN
#pragma HLS PIPELINE
 compute_pool_buffer_1d<data_T, res_T, CONFIG_T>(data.read(), res);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void pooling1d_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
#pragma HLS inline recursive
 switch (CONFIG_T::implementation) {
    case conv_implementation::linebuffer:
        pooling1d_buffer_cl<data_T, res_T, CONFIG_T>(data, res);
        break;
    case conv_implementation::encoded:
        pooling1d_encoded_cl<data_T, res_T, CONFIG_T>(data, res);
        break;
    }
}





template <class T, int N, class CONFIG_T> T reduce_global_pool(T x, T y[N]) {
#pragma HLS INLINE
 if (CONFIG_T::pool_op == Max) {
        Op_max<T> op_max;
        T y_max = reduce<T, N, Op_max<T>>(y, op_max);
        return (x > y_max) ? x : y_max;
    } else {
        Op_add<T> op_add;
        T y_sum = reduce<T, N, Op_add<T>>(y, op_add);
        return x + y_sum;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void compute_global_pool(const data_T &in_elem, typename CONFIG_T::accum_t data_window[CONFIG_T::n_filt]) {
PoolFilt:
    for (unsigned c = 0; c < CONFIG_T::n_filt; c++) {
#pragma HLS UNROLL

 typename CONFIG_T::accum_t data_pack[data_T::size / CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable=data_pack complete dim=0

 PixelLoop:
        for (unsigned p = 0; p < data_T::size / CONFIG_T::n_filt; p++) {
#pragma HLS UNROLL
 data_pack[p] = in_elem[p * CONFIG_T::n_filt + c];
        }
        data_window[c] = reduce_global_pool<typename CONFIG_T::accum_t, data_T::size / CONFIG_T::n_filt, CONFIG_T>(
            data_window[c], data_pack);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void global_pooling2d_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_height == CONFIG_T::stride_height && CONFIG_T::pool_width == CONFIG_T::stride_width; __builtin_assume(_AssertPred); });

    typename CONFIG_T::accum_t data_window[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable=data_window complete

 typename CONFIG_T::accum_t init = 0;
    if (CONFIG_T::pool_op == Max) {
        init = hls::numeric_limits<typename CONFIG_T::accum_t>::min();
    }

PoolInitLoop:
    for (unsigned i_init = 0; i_init < CONFIG_T::n_filt; i_init++) {
#pragma HLS UNROLL
 data_window[i_init] = init;
    }

ReadInputHeight:
    for (unsigned i_ih = 0; i_ih < CONFIG_T::in_height; i_ih++) {
    ReadInputWidth:
        for (unsigned i_iw = 0; i_iw < CONFIG_T::in_width / (data_T::size / CONFIG_T::n_filt); i_iw++) {
#pragma HLS LOOP_FLATTEN
 compute_global_pool<data_T, res_T, CONFIG_T>(data.read(), data_window);
        }
    }

    if (CONFIG_T::pool_op == Max) {
    MaxPoolRes:
        for (unsigned i_res = 0; i_res < CONFIG_T::n_filt / res_T::size; i_res++) {
#pragma HLS PIPELINE

 res_T res_pack;

        MaxPoolPack:
            for (unsigned i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = data_window[i_pack];
            }
            res.write(res_pack);
        }
    } else {
    AvgPoolRes:
        for (unsigned i_res = 0; i_res < CONFIG_T::n_filt / res_T::size; i_res++) {
#pragma HLS PIPELINE

 res_T res_pack;

        AvgPoolPack:
            for (unsigned i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = data_window[i_pack] / (CONFIG_T::in_height * CONFIG_T::in_width);
            }
            res.write(res_pack);
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void global_pooling1d_cl(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    ({ bool _AssertPred = CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0; __builtin_assume(_AssertPred); });
    ({ bool _AssertPred = CONFIG_T::pool_width == CONFIG_T::stride_width; __builtin_assume(_AssertPred); });

    typename CONFIG_T::accum_t data_window[CONFIG_T::n_filt];
#pragma HLS ARRAY_PARTITION variable=data_window complete

 typename CONFIG_T::accum_t init = 0;
    if (CONFIG_T::pool_op == Max) {
        init = hls::numeric_limits<typename CONFIG_T::accum_t>::min();
    }

PoolInitLoop:
    for (unsigned i_init = 0; i_init < CONFIG_T::n_filt; i_init++) {
#pragma HLS UNROLL
 data_window[i_init] = init;
    }

ReadInput:
    for (unsigned i_iw = 0; i_iw < CONFIG_T::n_in / (data_T::size / CONFIG_T::n_filt); i_iw++) {
#pragma HLS LOOP_FLATTEN
 compute_global_pool<data_T, res_T, CONFIG_T>(data.read(), data_window);
    }

    if (CONFIG_T::pool_op == Max) {
    MaxPoolRes:
        for (unsigned i_res = 0; i_res < CONFIG_T::n_filt / res_T::size; i_res++) {
#pragma HLS PIPELINE

 res_T res_pack;

        MaxPoolPack:
            for (unsigned i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = data_window[i_pack];
            }
            res.write(res_pack);
        }
    } else {
    AvgPoolRes:
        for (unsigned i_res = 0; i_res < CONFIG_T::n_filt / res_T::size; i_res++) {
#pragma HLS PIPELINE

 res_T res_pack;

        AvgPoolPack:
            for (unsigned i_pack = 0; i_pack < res_T::size; i_pack++) {
#pragma HLS UNROLL
 res_pack[i_pack] = data_window[i_pack] / CONFIG_T::n_in;
            }
            res.write(res_pack);
        }
    }
}

}
# 21 "./parameters.h" 2


# 1 "./weights/w3.h" 1
# 12 "./weights/w3.h"
conv2d_weight_t w3[288] = {0.0808807313, -0.1529192328, 0.0303818248, 0.0516290441, -0.1030274630, -0.1349618882, -0.0159975290, -0.0547107607, 0.0120132491, 0.1279450655, 0.0886933655, -0.0383258052, -0.0940233171, -0.1207953021, 0.1397102028, -0.1131374389, 0.0963478610, 0.1378877759, -0.0324609727, 0.1083168015, 0.1443557441, -0.0991425365, -0.0429915003, -0.0044926908, 0.0461482853, -0.0348984636, 0.0146316979, -0.0146213118, 0.0464251116, -0.0689082816, -0.1050479263, -0.0399283022, -0.0277259108, 0.1193696037, 0.0580411479, 0.1158611849, 0.1290129870, -0.0785648376, 0.0745139942, -0.0879776627, 0.1458421946, -0.0330642872, 0.0630616397, 0.0587507933, -0.0708997697, 0.1188532189, 0.0064922748, -0.0631198734, 0.0638953224, -0.0489340797, -0.0561947040, 0.0011133348, -0.0129904673, -0.1223661155, -0.0503167994, 0.1209169030, 0.0651420653, 0.1405147463, -0.0292626601, 0.0830507949, 0.0280760694, -0.0393892862, 0.0447385721, -0.0518374257, -0.0308144540, -0.0412118472, -0.0608762242, 0.0759489313, 0.0510370731, -0.0106933238, 0.0324417055, 0.0517822318, -0.0484856516, 0.1137328148, 0.0560037978, 0.1065103412, 0.1210148409, 0.0983907953, -0.0164128002, 0.0258613564, -0.0370528363, 0.1186100468, 0.0057339165, 0.0625944883, -0.0499234460, 0.1499550492, -0.0361177437, 0.0129241031, 0.1523264199, 0.0495077036, 0.1007577181, -0.0153169967, 0.0155303935, -0.0767052993, -0.0294628665, -0.0410018973, 0.1194308251, 0.0652454495, -0.1108483300, 0.0475379303, -0.0302424580, 0.1164351925, -0.0272647161, -0.0865298510, -0.1113317832, 0.0460496992, -0.0771058202, 0.0263781603, 0.0919028744, -0.1064304411, 0.0204379465, -0.0175175387, -0.1165665090, -0.1147025973, 0.0679682940, -0.1281102598, 0.0927642137, -0.1052206159, -0.0676887706, 0.1257979274, -0.0869904384, 0.0281782802, 0.1252029091, -0.0689976066, 0.1491006911, 0.0653263032, 0.0584680624, 0.1119272560, 0.0141804079, 0.1367932409, 0.0349359140, -0.0123329572, 0.0616902597, -0.0994555429, 0.0625104308, -0.1046313122, -0.0675674230, 0.1241495758, 0.0227930881, 0.0823498592, 0.0962195396, 0.1239886656, -0.0776370764, 0.1522815526, -0.0816689134, -0.1064816788, -0.1212220490, -0.0742263347, -0.1376830935, -0.1123602092, -0.0613177121, -0.0941502005, 0.0533194430, -0.0734666660, -0.1400061250, 0.1105697900, 0.1281482726, -0.1534997374, -0.0747049078, 0.1207812056, -0.0832570046, -0.0957727209, 0.0691972449, -0.1236869022, -0.0551854931, -0.0173421893, -0.0346509628, 0.0208857376, -0.0280375350, 0.0770571306, 0.0232529156, -0.0258836430, 0.0339656360, -0.1109161675, -0.0195393544, -0.0107380124, 0.1169941053, -0.1296164840, -0.0727241933, -0.1221697778, 0.0211418867, -0.1433959603, -0.0261452999, 0.0758137405, 0.0428253673, -0.1363363266, 0.0959799588, 0.0796592087, -0.1152987480, -0.0784722716, 0.1221406907, -0.1429666430, -0.1362470835, 0.0828144625, 0.0611195564, -0.0812743679, 0.1026478708, -0.1024966985, 0.0188228376, -0.1255768836, -0.1392405629, 0.0732125416, -0.0555762239, -0.0753180012, 0.0057210103, -0.1297917664, 0.0945225731, -0.0497489609, 0.1144057363, 0.0265049245, -0.0458659381, 0.0929764509, -0.0735409260, -0.1331502050, 0.0186986141, 0.0838826746, -0.0435443632, 0.0833459347, -0.1043319628, -0.0764892399, -0.1295413822, 0.0511610806, 0.1188913286, 0.0352207273, 0.1265383959, 0.0389710665, -0.0156901404, 0.0728565156, 0.0717191324, 0.1453687996, 0.0009179331, -0.1032616869, 0.0873129964, 0.0539457165, -0.0337220430, 0.1007525325, -0.0637647808, 0.0819769725, 0.0020582164, 0.0657615513, 0.0739663392, -0.0917203352, -0.0014008953, -0.0246940255, 0.0163413361, 0.0603519529, -0.0227440856, -0.0008580784, 0.0980733484, 0.0389072634, -0.0074517978, -0.0533292107, 0.0733190924, -0.1359042376, -0.0964178368, 0.0944537148, 0.0916378051, 0.0272724032, -0.1205507591, 0.0294864122, -0.0468760803, -0.0096607246, 0.1504120082, 0.0312335044, -0.1227353588, -0.0188281257, -0.1190407276, 0.1484447718, -0.0586877093, -0.0743744001, -0.0175446738, -0.0074906899, 0.0669369474, 0.1249326244, -0.0099302419, 0.0061878795, 0.0801350772, 0.0905275196, -0.0491586179, -0.0100108562, 0.0616692156, 0.1082539856, -0.1130260602, -0.1004909053, 0.0951031968, 0.0255289245, 0.1106452793, 0.1369335204};
# 24 "./parameters.h" 2
# 1 "./weights/b3.h" 1
# 12 "./weights/b3.h"
conv2d_bias_t b3[32] = {0.0183438975, -0.0162795130, -0.0090422230, -0.0136332018, -0.0132486438, 0.0095426263, -0.0198771190, -0.0037434632, -0.0078560077, -0.0202369187, -0.0051884325, 0.0111699086, 0.0149105769, -0.0121823559, -0.0196598917, -0.0197540857, 0.0222387258, 0.0160658099, 0.0089399200, 0.0133531913, 0.0032975809, 0.0140805785, 0.0193948932, -0.0046087634, -0.0019348855, -0.0201369245, -0.0085384827, -0.0119085396, 0.0050264909, 0.0066361492, -0.0189821757, -0.0184732284};
# 25 "./parameters.h" 2
# 1 "./weights/w6.h" 1
# 12 "./weights/w6.h"
conv2d_1_weight_t w6[18432] = {-0.0435433090, 0.0184683856, -0.0774960965, 0.0554001965, -0.0535502434, -0.0207023472, -0.0054538860, -0.0801303610, 0.0504970811, -0.0395447090, -0.0322148986, 0.0637131631, -0.0312025528, -0.0628169850, 0.0270475298, -0.0662109405, -0.0193449687, 0.0173664261, -0.0746902749, -0.0741518587, 0.0746576563, 0.0530890897, 0.0398565531, -0.0133187156, -0.0494130142, -0.0616564564, 0.0499911755, -0.0024213460, -0.0510747246, -0.0201865006, 0.0072975308, 0.0044271480, 0.0966887027, 0.0512979552, -0.0265374798, -0.0638590828, -0.0361054912, -0.0650697276, -0.0620316267, 0.0190409627, 0.0447963662, -0.0947577059, 0.0856885538, -0.0086984579, -0.0287277717, -0.0885281190, -0.0673424378, -0.0946450010, -0.0234266501, -0.0373452120, -0.0460198522, 0.0613736995, 0.0927258804, -0.0604477152, 0.0379414186, -0.0228214860, 0.0066602831, -0.0822833776, -0.0170460138, -0.0439293869, -0.0246148929, -0.0513069294, -0.0012168208, -0.0492674001, -0.0321505591, -0.0758414268, -0.0488429703, 0.0221659131, 0.0209994130, 0.0746197104, -0.0018024939, -0.0397049300, -0.0025798320, 0.0475924425, 0.0423396751, -0.0682132170, -0.0375016704, 0.0045021456, -0.0240753256, -0.0526333749, 0.0194956120, 0.0063935257, -0.0087522501, -0.0704687536, -0.0039188159, 0.0972043946, 0.0214352719, 0.0249135289, 0.0550894924, -0.0623672642, -0.0502058156, 0.0038848291, -0.0363335460, 0.0455097444, 0.0414502509, -0.0798708275, -0.0356361419, 0.0648876131, -0.0576181784, 0.0461052023, -0.0850925893, 0.0365581661, -0.0564913563, 0.0363541543, -0.0556636415, 0.0080886707, -0.0220021363, 0.0156048499, -0.0325819626, 0.0826038867, -0.0264853910, -0.0588064231, 0.0732730851, 0.0207795426, 0.0827966705, 0.0612247922, 0.0790396109, -0.0129132224, 0.0390018933, 0.0484213904, 0.0115032019, -0.0746184811, -0.0042556901, -0.0373245478, 0.0486045852, 0.0604648665, -0.0936498120, -0.0627097860, -0.0216996018, -0.0592118166, -0.0601114295, -0.0114104347, 0.0467463657, -0.0193128996, -0.0556220561, 0.0067890720, -0.0402773432, -0.0883325338, -0.0405075327, -0.0016421537, 0.0123194735, 0.0133949248, 0.0082380716, -0.0629046708, 0.0335191600, 0.0471737906, -0.0154780718, -0.0178486910, 0.0193434376, -0.0057190428, -0.0056257038, 0.0464405529, -0.0119442651, -0.0208820291, 0.0245433375, 0.0557855703, -0.0424060039, -0.0187440850, -0.0870376900, -0.0145689314, 0.0997048095, -0.0275855623, -0.0825679153, -0.0196639244, -0.0027015782, -0.0582741648, 0.0468984954, -0.0744437501, 0.0669773221, -0.0179685373, -0.0656447262, 0.0542627685, -0.0540651456, 0.0464067981, -0.0015826742, -0.0279635210, 0.0124441693, 0.0728673562, 0.0681901276, 0.0512092523, 0.0836367086, 0.0517637059, -0.0009090058, -0.0622954294, 0.0777233988, -0.0978995040, -0.0682422370, 0.0061785583, -0.0446042791, 0.0187897868, 0.0260355864, -0.0096857212, 0.0711140409, -0.0603873990, -0.0402521938, -0.0822719783, 0.0482570194, -0.0209465921, -0.0741009116, -0.0171693005, -0.0072260844, -0.0833277851, -0.0442716517, 0.0238213651, -0.0183908660, -0.0122265872, -0.0571444817, -0.0572649240, -0.0373925269, 0.0603184551, -0.0857547745, 0.0361065194, -0.0574674979, -0.0209538359, -0.0493009724, -0.0170133747, 0.0416749194, -0.1024928093, -0.0607358590, 0.0481549762, 0.0492473319, -0.0603684112, -0.0722068474, -0.0339099541, 0.0836725384, 0.0630563125, 0.0779818147, -0.0129362298, 0.0324100554, -0.0283857509, 0.0532795005, 0.0010764759, 0.0603832677, 0.0293095466, 0.0259261038, -0.0704094023, 0.0721016154, -0.0027213925, 0.0522676632, 0.0162030235, 0.0381122939, -0.0163234472, -0.0728392377, 0.0373352207, 0.0601254851, 0.0099492827, 0.0126079824, 0.0064846394, -0.0870295241, -0.0770297423, -0.0592070743, -0.0472805873, -0.0246104244, 0.0139628006, 0.0228581689, -0.1065612212, -0.0353650451, -0.0300025325, 0.0401266515, -0.0110602994, -0.0118875569, -0.0170314685, -0.0917605534, -0.0293569583, -0.0823590830, 0.0033463500, 0.0330972448, -0.0775166079, 0.0013255907, -0.0087445946, 0.0162820853, -0.0667051673, 0.0074397475, 0.0680312365, -0.0321231857, 0.0554381907, -0.0508237965, 0.0794895813, -0.0102124577, -0.0643446147, -0.0344867967, -0.0520380735, 0.0394272618, -0.0474392995, 0.0150293950, 0.0698218569, 0.0013021715, -0.0205323510, -0.0663479492, -0.0077332542, 0.0158760864, -0.0116925035, -0.0769323334, 0.0601297952, -0.0571599342, 0.0450367853, -0.0564950854, -0.0427051187, 0.0259999596, -0.0235333908, -0.0553339683, -0.0196653660, 0.0774309039, -0.0570445657, -0.0412441790, 0.0243549552, 0.0725095496, -0.0203409642, -0.0060989424, 0.0778219774, -0.0205952879, 0.0533449203, -0.0077368552, 0.0631243214, -0.0157449245, -0.0666971579, -0.0356764868, -0.0123494361, -0.0813696310, 0.0433784463, 0.0530371889, -0.0137807205, -0.0250999257, -0.0696808398, -0.0135672679, 0.0147071565, -0.0338918157, -0.0492300205, -0.0054042488, -0.0395161249, 0.0010769508, 0.0047648652, 0.0485483408, -0.0268759392, 0.0266680494, -0.1127332821, -0.0084343990, 0.0812148601, 0.0422540903, -0.0349537730, -0.0363367721, 0.0181100983, 0.0615243874, 0.0186589472, 0.0700408518, -0.0416902304, 0.0768160373, -0.0661069527, 0.0270286817, 0.0557750575, -0.0129041225, -0.0182216708, 0.0686345026, -0.0077716247, -0.0305254851, -0.0840720832, -0.0910947472, 0.0672812983, 0.0324180871, -0.0421982482, -0.0934736580, -0.0749348998, -0.0454102196, 0.0917904973, 0.0025698107, -0.0994740129, 0.0373132341, 0.0262673255, 0.0330598913, 0.0905084535, -0.0415888019, 0.0644354820, -0.0057419436, 0.0113311131, 0.0007271702, 0.0414411798, 0.0067453384, 0.0299149081, -0.0419214331, 0.0099520627, 0.0144414678, -0.0132055292, -0.0051227114, -0.0360363424, 0.0335023291, 0.0193327218, -0.0097888913, 0.0056299437, 0.0357142575, -0.0236408357, -0.0396599956, -0.0305826515, -0.0699295178, 0.0467682034, -0.0624370240, 0.0447824374, -0.0436826609, -0.0421356596, -0.0823965371, -0.0382667482, 0.0889015272, -0.0492175892, 0.0001127783, 0.0467149988, 0.0568350442, -0.0216404740, 0.0413643792, -0.0662181452, -0.0311529990, -0.0749137625, -0.0602411851, -0.0445316285, -0.0057470459, -0.0333359838, 0.0660459101, -0.0955947489, 0.0933080465, 0.0355719812, -0.0656141341, 0.0231799632, 0.0221970193, -0.0469983742, -0.1207157820, 0.0536945499, -0.0967698693, -0.0021496876, 0.0299066529, 0.0803326443, 0.0067534163, -0.0689059049, -0.1086366847, 0.0066691898, 0.0776667073, 0.1087580696, -0.0036202897, 0.0650000572, 0.0314424410, 0.0038029952, -0.0112260068, 0.0166359525, 0.0456148013, -0.0756378025, -0.0895499215, -0.0621938854, 0.0207786709, -0.0528873466, -0.1081990302, 0.0143538993, 0.0760021210, -0.0895618200, -0.0132596893, 0.0074498011, -0.0668674856, 0.0272932537, -0.0902904719, -0.0250882655, -0.0794325173, -0.0504635312, 0.0496622846, -0.0176788718, -0.0103055844, -0.0819051787, 0.0166716985, -0.1077907905, 0.0276116002, 0.0515850633, -0.0811157748, 0.0152705638, 0.0153765632, 0.1197332218, 0.0096020913, -0.0531476364, -0.0750041008, -0.0188584477, 0.0312622115, -0.0909182429, -0.0725561604, 0.0236969311, 0.0260707978, 0.0131755564, -0.0555353947, -0.0316503048, -0.0685992390, 0.0461237356, 0.0120556289, 0.0556277074, 0.0483466573, 0.0571167655, -0.0163774751, -0.0438506044, -0.0432991870, -0.0603906214, -0.0400154069, -0.0057746763, 0.0468212217, -0.0270246305, 0.1045008153, -0.0066916929, -0.0469098538, 0.0544505529, 0.0512496121, -0.0514600836, 0.0573404096, 0.0224475767, 0.0306738466, 0.0216617286, -0.0123703582, 0.0325298794, -0.0614136904, 0.0783738047, -0.0944040567, -0.0827748477, -0.0212627444, -0.1002453864, 0.0578896403, 0.0699114129, 0.0280256364, 0.0545460284, -0.0929437429, 0.0698103756, 0.0111347800, -0.0666217208, -0.0142271947, 0.0282700472, -0.0006011687, 0.0156563539, 0.0088952454, -0.0305886418, -0.0193086602, 0.0564558133, -0.0599574409, -0.0157480743, -0.0719887316, 0.0675044879, 0.0867849886, -0.0130649423, 0.0395118222, -0.0161960330, -0.0128654735, 0.0478899479, 0.0504422672, 0.0454267487, -0.0635340437, 0.0443874747, 0.0625447556, 0.0131801190, 0.0257036276, -0.0072165099, -0.0538122952, -0.0427868553, -0.0436731204, 0.0697380677, 0.0398203507, 0.0299634002, 0.0083002057, 0.0519366860, 0.0505391434, -0.0386411063, 0.0453572907, 0.0494631641, -0.0484384224, 0.0037492660, 0.0609103590, 0.0281108767, -0.0031307836, 0.1118706018, 0.0574788935, -0.0221695621, -0.0035253428, -0.0720027313, -0.0497809649, -0.0600270592, 0.0063489294, 0.0052118720, -0.0123636946, -0.0657479689, -0.0632209778, 0.0297299325, -0.0311765634, -0.0132779013, -0.0325349867, 0.0426343307, 0.0021448520, 0.0592404194, -0.0185639989, 0.0309072491, -0.0720737725, 0.0771203563, -0.0572363324, 0.0350613147, 0.0283424538, -0.0557439663, 0.0460562818, -0.0257369038, 0.0407245532, 0.0443453304, 0.0418798737, 0.0690133795, -0.0512812026, -0.0641903952, 0.0784230456, -0.0749015883, 0.0465230420, -0.0413060635, -0.0387784466, 0.0388438031, -0.0449236520, -0.0528028943, -0.0477901101, 0.0879580900, -0.0499877110, -0.0223701913, -0.0255633984, 0.0521426685, -0.0398848876, -0.0491143689, 0.0226349086, 0.0434167683, 0.0441548079, 0.0506510548, -0.0783945322, 0.0591913722, -0.0157666318, -0.0082099084, 0.0726961046, 0.0351568796, 0.0070864493, -0.0816980302, -0.0626933724, -0.0787596256, -0.0632544979, 0.0023710544, -0.0538707562, 0.0191978179, 0.0702495500, 0.0485387221, 0.0488675423, -0.0723309964, 0.0310499053, -0.0127723813, 0.0686204135, -0.0830796435, 0.0575336553, 0.0446984284, -0.0417388342, 0.0263192859, 0.0370489098, 0.0026953728, 0.0690049455, 0.0468925089, -0.0547348186, 0.0039561614, 0.0801726058, 0.0592009015, -0.0752297267, 0.0298845880, -0.0147491740, -0.0629867017, -0.0724105313, 0.0670240894, -0.0691563115, -0.0670812130, -0.0630219728, -0.0032225733, 0.0836102441, 0.0652702749, 0.0496611595, -0.0204229094, 0.0448612981, -0.0248073600, 0.0542807430, 0.0585378110, -0.0309073720, -0.0368339643, -0.0155023681, 0.0749957785, 0.0549370497, 0.0212912466, 0.0055488911, 0.0541292801, 0.0181011688, 0.0052696550, 0.0014619826, -0.0362545140, 0.0376058146, 0.0620477758, 0.0623005964, 0.0256989710, 0.0426617041, 0.0234913025, 0.0187673718, -0.0410882719, -0.0059239222, -0.0333452336, 0.0309987701, -0.0550979711, 0.0257792063, 0.0323111489, -0.0147621948, -0.0167045668, 0.0683286488, -0.0604258105, 0.0738815218, -0.0132776676, -0.0182342902, 0.0141432527, 0.0169971213, 0.0038930653, -0.0331598558, 0.0140739335, -0.0359393060, -0.0109963156, 0.0156294182, 0.0181237906, 0.0587539226, 0.0665177032, 0.0025592048, 0.0658816323, -0.0259049404, -0.0638976470, -0.0153734144, -0.0737535581, -0.0587749109, 0.0333286710, -0.0625010803, 0.0521738194, 0.0043532490, 0.0231717620, -0.0095159179, -0.0113313459, 0.0168815237, -0.0708739534, 0.0618705675, -0.0224404112, 0.0495052487, 0.0360398404, 0.0005248751, -0.0679909810, -0.0023809702, -0.0211751089, 0.0242853910, 0.0339440554, 0.0442365110, 0.0186111275, 0.0553608313, 0.0267960951, -0.0741802901, 0.0191012993, 0.0374377780, -0.0047429912, 0.0021589107, -0.0562915802, 0.0081707463, 0.0652416125, -0.0782148167, 0.0275541991, -0.0646706447, -0.0336281210, 0.0777478367, -0.0398144908, 0.0411118269, -0.0571241304, 0.0343113355, -0.0363083184, 0.0468260087, -0.0219628848, -0.0085045109, -0.0290820953, -0.0002493394, -0.0734388381, -0.0618844964, 0.0105287135, -0.0308124553, -0.0381317362, -0.0924329460, -0.0961732268, 0.0036006565, -0.0728436112, 0.0760141090, -0.0450332798, -0.0316724256, -0.0886931047, -0.0403107107, -0.0627665296, -0.0431165136, 0.0075694146, -0.0737903863, -0.0061838469, -0.0143008586, 0.0399186909, 0.0180181209, -0.0262318682, 0.0695830137, 0.0107360668, -0.0572648458, -0.0698152781, 0.0179883651, 0.0227708835, 0.0199077148, 0.0488059744, 0.0526704974, -0.0227647703, -0.0701093748, 0.0614020415, -0.0616102703, -0.0386091731, -0.0615474842, 0.0384560078, 0.0409293622, 0.0041025318, 0.0556936823, -0.0078761056, -0.0582027398, -0.0919493064, 0.0041737505, -0.0926788449, 0.0607570224, 0.0233400315, 0.0468490310, 0.0176414140, -0.0099505335, 0.0238746945, -0.0465852171, -0.0555295348, -0.0014957084, -0.0067684371, 0.0036420724, -0.0962546542, 0.0469044670, 0.0891414583, 0.0568757318, -0.0203209333, 0.0477913208, 0.0197024923, -0.0109756552, -0.0853690878, 0.0335958898, 0.0801294968, 0.0312898010, 0.0129796788, -0.0629625171, 0.0154150492, -0.0683499426, -0.0292181857, -0.0542257577, -0.0302851480, 0.0357822105, -0.1138441786, -0.0356454328, 0.0857152268, -0.0516738892, -0.0567561463, -0.0425464436, 0.0218766481, -0.0101755261, -0.0508563854, -0.0711905658, -0.0531860143, -0.0156061323, -0.0734487623, -0.0473756716, 0.0331793129, -0.0692933053, -0.0113415904, -0.0184702687, -0.0406778492, -0.0602925830, 0.0009426651, -0.0482069775, 0.0343806967, -0.0673664138, 0.0144926682, -0.0896932781, 0.0080917096, 0.0794205740, -0.0285070874, -0.0270124599, 0.0338184796, 0.0229339898, -0.1081880629, -0.0390668921, 0.0962824225, -0.0048095086, 0.0261621214, -0.0616999157, 0.0007903433, -0.0477745906, 0.0055062911, 0.0313013121, 0.0403438881, -0.0259760879, -0.0144503992, 0.0066228309, -0.0699529573, -0.0919642150, -0.0981783047, -0.0304379333, -0.1003657877, -0.0304814000, -0.0513926931, -0.0604487397, 0.0622711405, -0.0290450957, 0.0575020052, 0.0343496390, 0.0021875703, -0.0350885801, 0.0667320266, 0.0789530948, -0.0482295863, -0.0363326892, 0.0302628260, 0.0367372222, -0.0588633157, 0.0442987233, 0.0511175878, -0.0035209204, 0.0731263012, 0.0621570125, 0.0343420617, 0.0360959768, 0.0105382875, -0.0140719544, -0.0631226450, 0.0929890573, -0.0115088951, 0.0023673673, 0.0393866710, 0.1020854041, -0.0710998625, -0.0388723612, -0.0266650189, 0.0283734649, 0.0208685398, 0.0206938591, -0.0381708667, -0.0153147746, 0.0006753323, 0.0167918000, 0.0438184254, -0.0448718257, -0.0510626025, -0.0043067015, 0.0490706041, 0.0006807843, -0.0081192469, -0.0567068607, 0.0583495721, 0.0263812747, 0.0782656893, -0.0271047708, 0.0359754972, -0.0140053164, -0.0605068281, 0.0161325466, -0.1148466840, 0.0267173517, -0.0716957003, -0.0026796428, -0.0599923730, 0.1133581623, 0.0043347250, -0.0052738111, -0.0620168895, -0.0846866444, 0.0540044568, 0.0111422511, -0.0580966920, 0.0096113766, -0.0148218730, -0.0051346705, 0.0703140274, -0.0104377987, -0.0974494815, -0.0417601429, -0.0102263214, -0.0059395125, 0.0746481940, -0.0006503967, -0.0144485831, 0.0009595768, -0.0307608563, -0.0118586505, 0.0227185339, -0.0417164154, 0.0187559500, -0.0424337797, 0.0206372775, -0.0463166013, 0.0463280641, -0.0709904730, -0.0907646641, -0.0379243903, -0.0831823945, -0.0833554491, -0.0365736708, 0.0041416115, -0.0127103496, 0.0422392748, -0.0232938081, -0.0912292376, -0.1006160378, -0.0196504202, 0.0064945514, 0.0531547628, -0.0036993602, 0.0467108116, -0.0472536385, 0.0985257924, -0.0109512974, 0.0005604580, 0.0673537999, 0.0669916719, 0.0764065087, -0.0387472585, -0.0764706880, -0.0006855432, 0.0146931745, 0.0088278353, -0.0628590882, -0.0624756664, -0.0455084071, 0.0120135378, -0.0000936008, 0.0148531469, 0.0345511064, 0.0167151447, 0.0389937609, -0.0349526815, -0.0581930913, -0.0107426438, 0.0103933122, 0.0266411081, -0.0833195373, -0.0903268307, 0.0176583976, -0.0274618771, -0.0484657958, -0.0157901067, 0.0012675143, 0.0576657131, 0.0262156650, 0.0763296410, -0.0371663831, -0.0140924305, -0.0343729891, 0.0545881018, 0.0270768702, 0.0690021515, -0.0921572596, 0.0078782476, 0.0179511942, -0.0488030650, 0.0386648513, 0.0524945632, -0.0482039377, -0.0301500205, 0.0376662798, 0.0147905666, 0.0407055356, -0.0297720749, -0.0617655180, 0.0337183177, -0.0272927601, -0.0058312034, 0.0324277468, -0.0623107925, 0.0586450882, 0.0570727736, -0.0196232591, -0.0654460266, -0.0645862520, 0.0984132141, -0.0486988798, 0.0342402384, 0.0239896197, 0.0427154712, -0.0079582939, -0.0152586522, 0.0590553693, 0.0370614417, 0.0357161909, -0.0163599625, -0.0841414854, -0.0261544641, 0.0490318350, -0.0827377066, -0.0641633570, -0.0417318679, 0.0290025156, -0.0671425164, -0.0609037019, -0.0387477502, -0.0415611416, -0.0463362075, -0.0449749380, -0.0312868133, -0.1006879881, -0.0351863205, -0.0604865327, 0.0735907629, 0.0550300553, -0.0230722334, -0.0936291814, 0.0002283133, -0.0066798590, 0.0682804361, 0.0910368487, 0.0552471839, -0.0454624481, 0.0796143338, 0.0137667982, 0.0448722579, -0.0389950462, 0.0044309353, -0.0714053139, -0.0594788752, 0.0453564562, -0.0330829173, 0.0416651927, -0.0726520568, -0.0744283944, -0.0110003874, -0.0715488940, 0.0214097593, 0.0110933930, -0.0754238665, -0.0168508235, 0.0454881750, -0.0211071726, 0.0345429890, 0.0474937595, 0.0282333363, -0.0370639525, 0.0626360402, 0.0025337616, -0.0117771737, -0.0008703433, -0.0726713166, -0.0389344767, -0.0743542165, -0.0163695235, -0.0091962786, -0.0078922724, -0.0009306408, 0.0120673822, 0.0518583320, -0.0400307812, -0.0065404032, -0.0609502718, 0.0097989719, -0.0245059319, 0.0111292284, -0.0790412948, -0.0101958821, -0.0039144410, -0.0098684784, -0.0000072229, -0.0753233209, 0.0242302641, -0.0502405390, -0.0642932653, 0.0862993449, 0.0606226139, -0.0352565646, 0.0685606450, 0.0232750103, -0.0629304647, -0.0013637593, 0.0252296925, 0.0301069040, -0.0233646631, 0.0832169652, 0.0504148863, 0.0041913488, -0.0852472335, 0.0307887681, -0.0702581257, 0.0680127442, 0.0241849255, 0.0066168969, 0.0768897086, 0.0558422804, -0.0787896141, -0.0627406538, -0.0193995312, -0.0606399663, -0.0593495853, -0.0512141697, 0.0371262468, 0.0178494304, -0.0157439113, 0.0094698779, 0.0240083188, 0.0573260672, -0.0575957820, 0.0462956913, 0.0358134620, 0.0239916481, 0.0503342450, -0.0179173052, 0.0500316173, -0.0473408736, -0.0624319389, -0.0586727262, -0.0321814157, -0.0304409005, 0.0395747647, -0.0429507755, -0.0422371477, -0.0219908524, -0.0225980524, 0.0580008551, -0.0611247495, -0.0873506293, -0.0809133723, -0.0082339980, 0.0308941510, -0.0097314520, 0.0042720870, -0.0056957570, 0.0197890773, 0.0147771994, -0.0318396091, -0.0489056371, -0.0393269472, 0.0185133461, 0.0787998959, -0.0045215371, -0.0341901369, -0.0900165960, 0.0436056182, 0.0222689230, 0.0130832642, 0.0319868736, -0.0493595488, 0.0719084591, 0.0057807514, -0.0015668173, -0.0014611002, 0.0164100900, 0.0056079901, -0.0527405292, 0.0550406426, 0.0092950268, -0.0596604757, 0.0507635660, 0.0579290204, -0.0276611615, 0.0079570832, -0.0596869774, 0.0039452896, -0.0571731329, -0.0265461653, 0.0173046440, -0.0641533658, -0.0860213935, -0.0826669410, 0.0459839590, -0.0703027993, 0.0810502917, -0.0911350921, -0.0438157022, 0.0250138659, 0.0322079733, 0.0318636857, 0.0656727478, 0.0187564623, -0.0261151977, -0.0723380968, 0.0751778260, -0.0477855764, -0.0332927071, 0.0046328977, 0.0016342838, 0.0462232530, -0.0299373064, 0.0456415638, -0.0613949820, 0.0586410351, -0.0395926163, -0.0332316607, -0.0517633073, -0.0429325104, 0.0152267274, -0.0384841487, -0.0021461749, 0.0684137270, -0.0686185658, -0.0845910758, 0.0491271056, -0.0676692352, 0.0367914885, -0.0709390268, -0.0848170668, 0.0452717356, 0.0231217630, 0.0052643330, 0.0112774773, 0.0431530587, 0.0685207099, -0.0418927856, 0.0058998987, -0.0474730954, 0.0817704424, -0.0766106248, -0.0481107682, 0.0763313398, -0.0316401049, 0.0381133668, -0.0839021653, 0.0626024902, -0.0125803668, -0.0495424345, 0.0352872200, 0.0469262749, -0.0819129348, -0.0620766357, -0.0808218271, 0.0164978839, -0.0032915401, -0.0821286663, -0.0357772224, 0.0252854917, 0.0370657593, -0.0370506160, 0.0514458120, 0.0480790325, 0.0900914297, -0.0289422311, -0.0415300056, 0.0627994388, -0.0532721728, -0.0047063516, 0.0619992316, 0.0583405755, 0.0236331243, -0.0403482094, 0.0022209578, 0.0174331348, 0.0689987242, 0.0344120674, -0.0156193897, -0.0594291836, 0.0805814043, -0.0095944293, -0.0476074740, 0.0245736465, -0.0295022614, -0.0504551306, -0.0488295294, -0.0446009710, -0.0419167243, 0.0124893337, 0.0452979282, -0.0575273409, 0.0896980613, -0.0867136866, -0.0748725832, 0.0114914458, 0.0939325988, -0.0059364429, 0.0614526048, 0.0587025099, -0.0652161241, -0.0467219427, 0.0696689859, -0.0821927413, 0.0129870465, 0.0002145436, 0.0067353551, 0.0255580433, 0.0776270181, 0.0163733065, 0.0102454098, -0.0204195380, -0.0291877110, 0.0306229480, 0.0869664103, 0.0532837287, -0.0831764117, 0.0661887154, -0.0706333369, 0.0023457338, -0.0703196526, -0.0043602767, 0.0116293784, -0.0303970519, -0.0543685704, -0.0414234400, -0.0055609136, 0.0546650104, -0.0391971432, 0.0676871687, -0.0710312501, 0.0076891035, -0.0484057330, -0.0380225554, 0.0727039725, 0.0093093487, -0.0021777162, 0.0366172716, -0.0518213622, 0.0005966786, 0.0267253928, -0.0337638184, -0.0082667395, -0.0729946643, -0.0615679473, -0.0039009096, 0.0145641239, -0.0903985202, -0.0728859380, 0.0559061393, 0.0181187559, -0.0896643475, -0.0378422029, -0.0243337024, 0.0331510417, 0.0762289539, 0.0681572631, -0.0763615072, 0.0249261297, 0.0058373678, 0.0706048235, -0.0618911423, 0.0270587429, -0.0347682610, 0.0318800919, 0.0489113145, 0.0912455842, -0.0662646443, -0.0391840711, 0.0665552691, -0.0583445542, 0.0695852414, 0.0714779422, 0.0200598873, -0.0850552097, -0.0570728965, -0.0492706969, -0.0590497144, 0.0062792795, -0.0052977339, 0.0769901648, 0.0420102961, -0.0722949579, 0.0268197004, -0.0773406625, 0.0036886916, -0.0431974605, -0.0888932273, -0.0063803475, -0.0696120262, -0.0267774425, -0.0127634173, -0.0307013839, -0.0091698477, 0.0505630635, -0.0654206052, 0.0314860046, -0.0586679354, -0.0724305511, 0.0343879052, -0.0685102791, 0.0095924521, 0.0049810079, -0.0474860035, -0.0495815501, -0.0047945934, 0.0393037573, 0.0693402439, -0.0208106302, -0.0657064691, -0.0113583049, -0.0524013527, 0.0452287942, 0.0577074699, 0.0195080042, 0.0188152045, -0.0071937884, -0.0541009605, -0.0802011266, 0.0135449544, -0.0349894166, 0.0394273736, 0.0295110624, -0.0441931151, 0.0507952645, -0.0571897253, -0.0099387765, -0.0288435072, 0.0704672709, -0.0204757191, 0.0598354116, -0.0436909199, 0.0193863045, -0.0174488183, -0.0516770147, -0.0547639728, -0.0441760719, 0.0773479268, -0.0190091226, -0.0067491117, 0.0582437553, 0.0153275924, 0.0835102201, 0.0185614806, 0.0222557783, 0.0248286072, -0.0181118548, -0.0739160478, -0.0132891526, -0.0081879590, 0.0732415542, -0.0596495867, -0.0479967482, 0.0567657650, -0.0072230892, -0.0059116143, 0.0316805020, 0.0400933772, 0.0586833321, -0.0014558912, -0.0268568918, 0.0111531662, -0.0544868894, 0.0265574288, -0.0679419562, -0.0439501293, -0.0719784200, -0.0747994557, 0.0613853633, 0.0624848455, 0.0164280701, 0.0166998953, 0.0219107587, -0.0102984542, -0.0580008030, 0.0230975132, -0.0078077135, -0.0287555289, -0.0511940867, -0.0381352454, 0.0359509103, -0.0611828528, 0.0747546330, 0.0400630608, 0.0818064660, -0.0313923247, 0.0442689210, -0.0001274715, 0.0174249131, 0.0430818163, 0.0690652356, -0.0189163238, 0.0317906998, 0.0551142953, -0.0153455166, 0.0704658851, -0.0302906986, 0.0098973457, -0.0689914525, 0.0215749722, -0.0179495309, 0.0188687649, -0.0655818582, 0.0282997955, 0.0302860886, 0.0097645000, 0.0271643288, 0.0199208688, 0.0395107530, 0.0465074182, 0.0225013923, -0.0613830797, 0.0288509466, -0.0531740040, 0.0064444561, 0.0083938939, 0.0525021516, 0.0456619114, -0.0022888163, -0.0297316145, 0.0098227123, -0.0317592211, -0.0456259176, -0.0372763984, -0.0643021166, -0.0735235065, -0.0405893549, 0.0481744893, -0.0684372783, -0.0451527610, 0.0534216650, -0.0356053375, 0.0506961122, -0.0409682281, -0.0540315025, 0.0389564708, 0.0702043548, -0.0777816847, -0.0388415009, -0.0853341818, -0.0668174773, 0.0364249796, 0.0378189869, 0.0317964628, 0.0071567912, -0.0061984048, 0.0393471904, -0.0210446771, 0.0438912436, 0.0268037319, -0.0034402160, 0.0465792120, 0.0064668483, 0.0930528119, -0.0367352143, 0.0587767437, 0.0935953036, -0.0179205146, -0.0296149403, -0.0484584607, 0.0740995705, -0.0166212693, 0.0715653449, 0.0441713408, -0.0690918863, -0.0106084719, -0.0686505288, 0.0464511402, 0.0640815720, -0.0532371476, -0.0582893938, -0.0114960456, -0.0347520821, -0.0463398583, 0.0220925603, 0.0106073795, -0.0440952927, 0.0561707728, 0.0005920340, -0.0637550354, 0.0811117366, 0.0416333713, -0.0861103535, 0.0086619416, 0.0032324565, 0.0296976604, -0.0468506590, -0.0548041202, -0.0401376411, 0.0243710484, -0.0347970091, -0.0764105022, -0.0287293047, 0.0304683503, 0.0502174534, 0.0199065767, -0.0448783860, 0.0164534599, -0.0126173692, -0.0980108082, 0.0994131044, 0.0196731202, 0.0804359391, -0.0176580101, -0.0104012871, 0.0492745824, -0.0083438018, -0.0152411005, -0.0289829895, -0.0663966537, -0.0650952458, 0.0324901231, -0.0428996496, 0.0158161093, -0.0543183349, -0.0205299947, 0.0898135975, 0.0065732962, -0.0240064450, -0.0186650977, -0.0277537275, -0.0426189043, -0.0244303253, -0.0192435589, 0.0186719932, 0.0110820187, -0.0640449822, -0.0137539273, 0.0523900129, 0.0544908084, -0.0086698793, 0.0464915484, 0.0178610887, -0.0801922232, 0.0157832410, -0.0055749975, -0.0972672403, 0.0503566377, 0.0358410254, -0.0368650556, 0.0497867018, -0.1042295769, -0.0182733834, -0.0056667263, 0.0974029452, 0.0109521002, 0.0294793975, -0.0409971066, 0.0235328861, 0.0811866224, 0.0503251702, 0.0466304012, -0.0490473285, 0.0110936388, -0.0429517291, 0.0529649928, -0.0584923178, -0.0539209023, 0.0102837328, -0.1046794876, 0.0667252317, -0.0228831545, -0.0180915520, 0.0355024897, -0.0499404855, 0.0648569018, 0.0781421512, 0.0337094143, -0.0388227515, -0.0615046397, -0.0707609355, -0.0354694203, 0.0630102232, -0.0151432576, 0.0349367633, -0.0655834079, -0.0858635083, 0.0116324257, -0.0219069794, 0.0715776905, 0.0128564853, 0.0600242168, -0.0485411398, 0.0011617196, 0.0530709215, -0.0355741903, 0.0477792136, -0.0371509604, -0.0090951715, -0.0030632494, 0.0466402397, 0.0052110315, -0.0473064892, -0.0228562318, 0.0472646914, -0.0280468743, -0.0352193303, -0.0536313653, 0.0495145507, -0.0730427727, 0.0302425083, -0.0256328806, -0.0258361492, -0.0494671054, 0.0018202161, 0.0254960265, 0.0019983745, -0.0065014674, 0.0524008162, 0.0709433481, -0.0453556888, 0.0695350841, -0.0532354899, -0.0728271306, -0.0480776131, 0.0409616232, -0.0184202250, -0.0018551069, 0.0225207731, -0.0533592515, -0.0169582069, 0.0644600764, 0.0157280266, 0.0543365739, 0.0058279824, 0.0120352721, -0.0356902555, -0.0482273623, -0.0978273079, -0.0291515626, 0.0014828357, -0.0652580708, 0.0945013016, -0.0793051869, -0.0327222906, 0.0033564561, -0.0500922501, 0.0326690078, 0.0250083357, -0.0283440053, 0.0266558770, 0.0738342926, -0.0356017277, 0.0028842683, -0.0706173405, -0.0583735779, 0.0504041538, 0.0439169481, -0.0907155275, -0.0367814302, -0.0559459962, 0.0537114106, 0.0547083244, 0.0552301854, -0.0134104928, 0.0932597443, -0.0798055455, -0.0046980111, 0.1024141908, 0.0984635651, -0.0159417540, -0.0732705668, 0.0668093562, -0.0169117730, 0.0187865254, 0.0535186119, 0.0381369516, -0.0602474548, 0.0252819229, -0.0106366277, 0.0389447436, 0.0615517348, -0.0201563947, -0.0433105156, 0.0415803343, -0.0569182970, 0.0023188589, 0.0140009532, -0.0324489847, 0.0288698748, 0.0818474218, 0.0132151507, 0.0855716690, 0.0164626502, 0.0528021827, -0.0315176323, 0.0725076422, -0.0600932874, -0.0676270351, -0.0896004662, -0.0687996000, 0.0787779093, 0.0361814424, 0.0802841857, -0.0601883940, 0.0945461988, -0.0716767535, 0.0190326367, 0.0485056378, 0.0301650167, 0.0637458712, 0.0382265970, 0.0683970675, -0.0986778215, 0.0141414944, 0.0917951763, -0.0021295547, 0.0035054281, 0.0336536206, 0.0118173966, 0.0081399456, -0.0468887910, 0.0526744984, 0.0005776303, 0.0550740995, 0.0116641428, -0.0608846918, 0.0294646081, -0.0526281223, 0.0665863603, 0.0444514491, -0.0543252379, -0.0238894336, 0.0083649457, 0.0224792045, -0.0111738807, 0.0561294481, -0.0022290077, -0.0477588698, 0.0256273337, 0.0288520623, -0.0748601034, -0.0177901536, -0.0585179105, -0.0461513847, -0.0712199658, -0.0480030328, 0.0080158217, -0.0384586453, 0.0670168102, 0.0312199146, -0.0137299821, -0.0359517187, 0.0234063547, -0.0134166954, -0.0600653850, -0.0676492155, -0.0249640867, 0.0669652000, -0.0472307578, -0.0529062375, -0.0045820638, -0.0891425461, -0.0793443769, -0.0317289978, -0.0437730849, -0.0568807162, -0.0147907650, -0.0012386945, -0.0249026567, 0.0348612592, -0.0608980209, 0.0012779846, -0.0236030985, -0.0078384373, 0.0110469302, -0.0463115349, -0.0048563373, -0.0126616703, -0.0504719317, -0.0617080517, 0.0953937545, -0.0148067800, -0.0443128683, -0.0819528848, -0.0466092750, 0.0194482505, -0.0095848218, 0.0610658899, 0.0436401181, -0.0293377042, 0.0938845128, -0.0379118286, 0.0578999184, -0.0380559862, -0.0455012769, -0.0484586209, 0.0764796883, 0.0196841471, -0.0540769026, -0.0491413176, 0.0124835614, 0.0486562550, -0.0052981074, 0.1007696241, 0.0287723821, -0.0433748476, 0.0360055342, -0.0830587074, -0.0607995726, 0.0113778422, -0.0159702580, 0.0641044378, -0.0579580963, 0.0160811078, 0.0274490919, 0.0610225573, -0.0164026506, -0.0289263800, -0.0670944303, -0.0815951154, 0.0353067182, 0.0518825762, 0.0614119880, -0.0301344581, 0.0927894413, 0.0490728766, 0.0677672550, 0.0576621369, 0.0510567538, 0.0322970860, 0.1111788452, 0.0300770327, 0.0370617546, 0.0695543364, -0.1104866937, -0.0490024500, 0.0611909851, 0.0654458553, 0.0268949475, 0.0453630611, 0.0471379831, -0.0391861424, 0.0006651192, 0.0522920527, 0.1118975282, 0.0535982475, -0.0879671872, -0.0458874963, -0.0463896468, -0.0531369746, 0.0043237978, -0.0826118365, 0.0070457393, -0.0507794246, 0.1015916243, -0.0159288645, 0.1069037691, -0.0960872099, 0.0038545500, -0.0551093817, -0.0176333208, 0.0624745265, -0.0571125560, 0.0229176022, 0.0774224997, 0.0263312794, 0.0159720983, -0.0211506654, -0.0021089050, -0.0816156492, -0.0450826325, -0.0803013295, 0.0442667715, -0.0072176098, 0.0184472464, -0.0627542883, 0.0236349124, 0.0433261879, 0.0579868332, -0.0522495657, -0.0750734508, -0.0456852838, 0.0563134402, 0.0283463411, -0.0393666252, -0.0319826677, 0.0309460238, -0.0401328392, -0.0360719003, -0.0875781849, -0.0804826543, -0.0591136441, 0.0158089343, 0.0582806654, 0.0239121858, -0.0561666638, -0.0069054388, 0.0590415373, 0.0475688800, -0.0419470742, -0.0123383589, -0.0452613942, 0.0680493712, -0.0139945401, -0.0183607824, -0.0314353295, 0.0144078899, 0.0105882725, -0.0273897238, 0.0451627523, 0.0380153582, -0.0093054529, -0.0712017640, 0.0117177777, -0.0314191096, 0.0411017351, 0.0140226437, -0.0390943140, -0.0459289178, -0.0109622516, 0.0664155483, -0.0111021483, -0.0779559910, 0.0693297088, 0.0535983779, -0.0591537245, 0.0134014878, -0.0776092410, 0.1171093360, -0.0249425154, -0.0831324533, -0.0414273180, -0.0373610668, 0.0453044176, 0.0346585549, 0.0114322444, 0.0247975942, 0.0260812528, -0.0106843011, 0.0859057084, 0.0187474377, -0.0398536325, -0.0542917214, 0.0945425183, -0.0621157102, 0.0716699809, 0.0197758563, -0.0504541248, 0.0417347066, -0.0176593903, 0.0099184532, -0.0023381570, 0.0415656008, 0.0161241982, 0.0790681615, 0.0542591661, 0.0993274227, -0.0561278500, -0.0109174093, 0.0623992607, -0.0390413739, -0.0329556614, -0.0155481081, -0.0248021502, -0.0177384578, 0.0170966778, -0.0221382622, -0.0073487647, -0.0773808360, -0.0921764672, -0.0548989475, -0.0220924430, -0.0322106034, 0.0194574986, -0.0116091361, 0.0413222909, 0.0023604031, -0.0120474529, -0.0756038353, 0.0532118902, -0.0288274325, -0.0766557008, -0.0198932420, 0.0607844666, -0.0106166415, -0.0094422679, 0.0536779836, 0.0984984636, 0.0189585704, 0.0252252184, 0.0543856286, -0.0719352290, -0.0268980078, 0.0971167460, -0.0618387610, 0.0409359783, 0.0757856295, -0.0358870514, 0.0515979826, 0.0573287755, -0.0769277662, -0.0901130214, 0.0580121204, 0.0492555834, 0.0560408682, -0.0138670709, 0.0008062365, -0.0098748067, -0.0661335364, 0.0366303772, 0.0118804239, 0.0200337172, -0.0434482917, -0.0027965335, 0.1095598415, -0.0044447696, 0.0654492602, 0.0626131147, -0.0562936850, 0.0547439605, 0.0143630905, -0.0444122255, 0.0319375433, 0.0062356745, 0.0893530250, -0.0085501224, 0.0646480396, -0.0182928164, 0.0559046827, -0.0069845789, -0.0160964001, 0.0444600210, 0.0720591173, -0.0026587027, 0.0127834380, 0.0155463554, -0.0590865240, -0.0769679323, -0.0534765050, 0.0013569216, 0.0129371732, -0.0486094840, -0.0498102047, 0.0297942702, -0.0601659194, 0.0222214051, 0.1039921641, -0.0533081479, 0.0656908900, 0.0197285581, -0.0132030221, -0.0273150094, -0.0317515954, -0.0547461063, -0.0341952033, -0.0322848335, 0.0677378178, -0.0618502647, 0.0480948985, 0.0000224272, 0.0816086978, 0.0266385619, -0.0442006513, -0.0209828466, 0.0150396982, -0.0060812188, -0.0615015663, 0.0260562394, 0.0461806804, 0.0606685765, 0.0141576100, 0.0642667636, -0.0690044910, -0.0686211735, -0.0417186916, 0.0324288681, 0.0218126830, -0.0075197113, -0.0435562767, 0.0429743528, -0.0758856013, -0.0744751096, -0.0765425488, 0.0247304235, 0.0579903536, -0.0725146160, -0.0394093506, -0.0574479736, -0.0487782545, -0.0543033108, -0.0440769456, 0.0542789288, -0.0056773014, 0.0233265813, 0.0835465714, -0.0202003270, -0.0247061215, 0.0576881990, -0.0309215579, -0.0717288926, 0.0394528061, 0.0194144174, 0.0117735267, -0.0165092498, 0.0639966279, 0.0561800897, 0.0143663529, -0.0128318137, -0.0599854365, -0.0695896149, -0.0400719047, -0.0150588760, -0.0160976928, 0.0307731386, -0.0329634920, 0.0649144799, -0.0058083725, -0.0721891075, 0.0651019588, 0.0840527639, 0.0353681706, 0.0450279266, -0.0896431506, 0.0594385676, 0.0428896025, 0.0669657141, 0.0446053296, 0.0322138406, 0.0182009637, 0.0471779816, -0.0017263871, 0.0282487683, 0.0484628342, 0.0517700538, 0.0505295508, 0.0899876952, 0.0655936748, -0.0088323290, 0.0618432313, 0.0326977037, -0.0736754462, 0.0105872592, -0.0432277210, -0.0587309040, 0.0326816477, 0.0314891413, 0.0587867834, -0.0287808366, 0.0561513826, -0.0180218369, 0.0485578887, -0.0784847438, 0.0608472526, -0.0128041450, -0.0539176837, 0.0324393734, 0.0593910068, 0.0207241680, 0.0289415177, -0.0244519077, -0.0514473468, 0.0703939274, -0.0429469869, -0.0120438188, -0.0967321470, 0.0781239495, 0.0433191210, 0.0848283023, 0.0969007760, -0.0015193135, 0.0888969600, -0.0591848753, -0.0038028713, -0.0225951299, -0.0293429382, -0.0557177141, -0.0175680052, 0.0648999214, 0.0410818569, -0.0500632487, -0.0683216751, -0.0675127655, 0.0780321285, 0.0137169091, 0.0349910669, -0.0108578326, 0.0074602147, -0.0237894673, 0.0360041037, 0.0365348272, -0.0195229035, -0.0390750691, -0.0703652576, -0.0245447718, 0.0517877266, 0.0345915556, -0.0285793412, 0.0563498363, -0.0230493061, -0.0382136256, -0.0037658068, 0.0460442714, 0.0800721124, 0.0033948019, -0.0171235166, -0.0265542399, -0.0764530674, 0.0305182151, 0.0464749597, -0.0679758266, 0.0096425209, 0.0251867510, 0.0622450672, -0.0274896491, -0.0430008993, -0.0031137348, 0.0265781954, 0.0117044654, 0.0439528413, 0.0101071559, 0.0169622935, -0.0296748132, 0.0736069754, -0.0759839490, 0.0166406315, -0.0902287439, -0.0520489365, 0.0611370020, 0.0696023852, 0.0587380975, 0.0423035696, -0.0333315544, -0.0796393454, -0.0709313899, -0.0366606452, -0.0669608861, -0.0591100827, 0.0253385864, -0.0225873552, 0.0861246586, 0.0951694921, -0.0794633403, -0.0396320075, -0.0041734963, -0.0009022577, 0.0144430930, 0.0531789884, -0.0539179556, -0.0041213953, 0.0023868924, 0.0719550475, -0.0616066530, -0.0497610979, -0.0684548691, 0.0265333280, 0.0582160763, -0.0192974061, -0.0707959607, 0.0281201769, -0.0641663373, 0.0365998931, 0.0045413533, -0.0200731121, 0.0741992891, 0.0889256746, 0.0766286254, 0.0590626895, 0.0803623050, 0.0624292083, 0.0334120058, -0.0594220087, 0.0704601705, 0.0410677679, -0.0008249950, 0.0362745076, 0.0139546646, -0.0606409647, -0.0348535404, -0.0604747869, -0.0499013737, -0.0157553684, 0.0212301500, -0.0565950163, -0.0269591045, 0.0623068884, -0.0119732618, -0.0413822904, 0.0481758565, 0.0248893425, -0.0780121610, 0.0559038743, -0.0621733442, -0.0556192547, -0.0143932207, 0.0262372885, -0.0568940341, 0.0282877740, 0.0070531662, -0.0766596273, 0.0516133793, -0.0388941430, -0.0093319211, 0.0132115996, -0.0064753038, -0.0232584737, -0.0760748908, 0.0436877534, 0.0624979846, 0.0812701210, 0.0672437176, 0.0087631661, -0.0647023693, 0.0587175414, 0.0639169142, -0.0808084831, 0.0080553880, -0.0107231317, 0.0345120728, -0.0328909308, -0.0078570433, 0.0108572422, -0.0604376309, -0.0174026769, -0.0123991733, -0.0163380634, -0.0222328175, -0.0236523561, -0.0083547123, -0.0148055283, -0.0420565568, -0.0447772257, 0.0143347103, -0.0328935944, -0.0735389590, 0.0224287808, -0.0068394653, -0.0064922157, -0.0429831371, -0.0385014527, -0.0272105932, 0.0316831768, -0.0615472607, -0.0438997671, -0.0959459171, 0.0024566622, -0.0107650692, 0.0497264117, -0.0782155171, -0.0516845584, 0.0473429821, -0.0591671616, -0.0331481025, 0.0597612783, 0.0758941099, 0.0396647826, 0.0018125152, -0.0399990156, 0.0332968086, 0.0840823799, 0.0435001701, 0.0490170531, 0.0589218847, -0.0535461418, -0.0456738435, -0.0303657763, 0.0474283248, 0.0445256084, 0.0498313121, -0.0152128926, 0.0474688150, 0.0002048950, -0.0851225704, 0.0638142005, 0.0293111056, 0.0615691878, 0.0276654959, -0.0542192347, -0.0408492908, 0.0480169095, 0.0404853597, 0.0061256066, -0.0653999597, -0.0554352850, 0.0503220782, -0.0635470822, 0.0456242003, -0.0317792669, 0.0740684420, 0.0588590652, 0.0797398984, -0.0243003089, -0.0419116914, -0.0375407301, 0.0465336703, -0.0373427644, 0.0778880715, -0.0267314408, 0.0342632383, 0.0712192059, -0.0583834648, 0.0287844390, 0.0878820345, -0.0247356538, 0.0457333215, -0.0705157146, 0.0159995072, 0.0129312510, 0.0289369617, 0.0205962788, -0.0522364154, -0.0439000987, 0.0356116071, 0.0438741967, 0.0329470336, 0.0750144944, 0.0476058424, -0.0453486070, -0.0062970989, -0.0020721636, -0.0693972632, -0.0175853055, -0.0802764744, -0.0417158455, 0.0251911413, 0.0268349182, -0.0179798361, -0.0246939529, 0.0289611705, -0.0677967742, 0.0321123302, -0.0754692703, -0.0073269540, -0.0490896739, 0.0700610429, -0.0924518555, 0.0338791162, -0.0700514019, 0.0268760230, -0.0077055618, -0.0302514452, 0.0558239929, -0.0411115512, -0.0111043090, 0.0195181780, 0.0321628861, 0.0410543941, -0.0240267832, 0.0559514724, -0.0430221595, -0.0615574084, 0.0643083900, -0.0355010554, -0.0475065634, 0.0257911999, -0.0811719969, -0.0708694756, -0.0443325229, -0.0536850840, 0.0152244745, 0.0544154234, -0.0405420251, -0.0773846433, 0.0830517486, 0.0143570704, 0.0676739067, -0.0308581330, 0.0545578077, 0.0456824303, -0.0315232202, -0.0402758047, -0.0837241113, -0.0342825353, -0.0303306282, -0.0393857211, 0.0110667786, -0.0367997028, 0.0002160138, -0.0305519812, -0.0513216630, 0.0348356441, -0.0707514659, -0.0303317904, -0.0531582497, 0.0223326627, 0.0699832141, 0.0516652912, 0.0030342918, 0.0263474043, -0.0591127239, 0.0356370620, 0.0249346327, 0.0547487140, -0.0436673835, -0.0687619671, -0.0595222078, -0.0270091817, -0.0661410987, 0.0646397769, 0.0185003616, 0.0234840475, -0.0852350444, -0.0020354181, -0.0048261601, 0.0110127740, -0.0492980219, -0.0478935987, 0.0397429094, -0.0116658211, -0.0003282055, -0.0341759324, 0.0218892451, -0.0717537478, 0.0105357999, 0.0697687790, -0.0272465590, 0.0454916731, -0.0849872082, -0.0362237841, -0.0487595759, -0.0191702638, 0.0526398756, -0.0669408366, 0.0341306999, 0.0452645943, 0.0567914434, -0.0074957148, -0.0705297515, -0.0678739473, 0.0201286282, -0.0328431726, -0.0447371416, 0.0639454052, 0.0124082202, -0.0002198129, 0.0469424874, -0.0137069188, -0.0172912478, -0.0791598707, 0.0489652902, -0.0750351623, -0.0827179104, -0.0398445316, 0.0105954027, -0.0571118928, 0.0653745085, 0.0865897909, -0.0858777761, 0.0526173599, 0.0111743622, -0.0489583202, -0.0374785475, 0.0106462091, 0.0075182933, -0.0182372164, 0.0145777324, 0.0841166228, 0.0428822860, -0.0404032543, 0.0464876816, -0.0790315121, -0.0887312591, 0.0449750572, 0.1025650799, 0.0338739567, -0.0088511622, 0.0168130975, -0.0527410507, -0.0920442641, -0.0579954870, -0.0282795019, 0.0942184776, -0.0714206472, -0.0362776965, -0.0571491756, -0.0284263790, -0.0232711490, -0.0173730906, -0.0203709286, -0.0461259671, 0.0471083373, 0.0277502518, 0.0321255513, 0.0659423098, -0.0487239249, 0.0731073618, 0.0602875426, 0.0524751469, -0.0030393701, -0.0350397341, 0.0456456915, -0.0685290545, 0.0698620528, 0.0380232111, 0.0639079437, -0.0052755149, -0.0996626392, -0.0791423395, -0.0249323659, 0.0321910195, -0.0439001359, -0.0384141654, -0.0065505831, 0.0078327861, 0.0540550239, -0.0685789660, -0.0014086465, -0.0624905713, 0.0317489468, 0.0167634599, 0.0802745223, 0.0390525125, -0.0270210728, 0.0404879414, -0.0340861492, -0.0128708566, 0.0514489897, 0.0859210938, -0.0609723814, 0.0564310588, 0.0964019075, 0.0744263530, 0.0595785864, -0.0925103873, -0.0239552073, -0.0970759466, -0.0702123567, 0.0817710459, -0.0328957774, 0.0314520225, -0.0233030561, -0.0974675491, 0.0355109684, 0.0405156016, 0.0552602224, -0.0007252482, 0.0069684903, 0.0531249531, -0.0906801149, -0.0875319317, 0.0061628805, 0.0587878637, 0.0222416762, -0.0517790578, 0.0253922176, 0.0489084832, -0.0427493788, -0.0093240272, 0.0068192356, -0.0449254885, -0.0557500198, 0.0446521901, 0.0581328459, -0.0750365779, -0.0882242769, -0.0742641538, 0.0628999397, -0.0494157374, 0.0253400560, -0.0206247605, -0.0374888517, -0.0736111253, 0.0951890647, 0.0411205627, -0.1009159982, 0.0414768159, -0.0291262437, 0.0014749231, -0.0950946659, 0.0093444679, -0.0852914527, -0.0202450696, 0.0186054856, 0.0195435863, 0.0270633176, -0.0328968503, 0.0377493352, -0.0840585455, 0.0060339221, 0.0812637284, -0.0174151100, 0.1018322036, 0.0644940808, 0.0264669284, 0.0891046971, -0.0546471700, -0.0096322754, -0.0509906448, 0.0313616693, -0.0604284927, -0.0167181939, 0.0457915999, -0.0070276116, -0.0140370484, 0.0712808892, -0.0723433048, -0.0704522729, 0.0047665616, -0.0748270601, -0.0273367800, 0.0178007837, 0.0456457101, 0.0123525914, -0.0806878954, -0.0943968445, 0.0021457619, -0.0530219935, -0.0135084260, 0.0096819019, 0.0211617760, 0.0029072496, 0.0047962312, -0.0269380510, 0.0470222831, 0.0556442030, 0.0898701847, 0.0284650419, -0.0728311241, 0.0157674663, 0.0369389020, -0.0728208721, -0.0727231503, -0.0167605113, -0.0708540156, -0.0816725343, 0.0108334022, -0.0830789134, 0.0440932214, -0.0517522879, 0.0816195086, 0.0797347650, -0.0808978304, 0.0520787574, -0.0123886270, 0.0853949711, 0.0336186811, -0.0589014962, -0.0116739105, -0.0106471861, -0.0369268321, 0.0851765797, -0.0456286594, 0.0295228343, 0.0463943668, -0.0658237338, 0.0458430797, 0.0574975535, -0.0625326782, -0.0195880756, 0.0485171080, 0.0774601400, 0.0769693553, -0.0494964644, 0.0266221687, 0.0340548083, 0.0195581075, 0.0486763641, 0.0246906672, 0.0336215608, 0.0460042246, 0.0809351429, 0.0664080232, -0.0059289779, -0.0648154020, -0.0404478051, -0.0133676669, 0.0795326307, -0.0446269102, 0.0257551987, -0.0627715141, 0.0509559475, -0.0727426410, -0.0333881341, 0.0656672567, 0.0491167828, -0.0713300556, -0.0030798633, 0.0296842102, 0.0716855824, 0.0189341027, 0.0697208494, -0.0709248707, 0.0282587893, -0.0418328568, 0.0741127208, -0.0506034307, 0.0714931488, 0.0471844263, 0.0082066925, 0.0918953568, 0.0841777399, 0.0627882630, -0.0834209844, 0.0768068433, -0.0698331594, 0.0788758621, 0.0619908497, -0.0565374158, 0.0423039012, -0.0620510876, -0.0749453232, 0.0590654425, -0.0579322167, -0.0842936635, -0.0359927863, 0.0821408555, 0.0139102349, -0.0658396780, -0.0347670503, 0.0381114557, 0.0527548827, -0.0370824784, 0.0720496699, 0.0447151773, -0.0178000219, -0.0742203742, 0.0464514494, -0.0835698172, -0.0344794989, -0.0280102678, 0.0089473352, -0.0337415263, -0.0149999065, -0.0526577495, 0.0641002581, -0.0836181119, -0.0133479163, -0.0769456476, 0.0246203858, 0.0088583259, 0.1016558334, -0.0254035238, -0.0024102100, 0.0009716140, -0.0128560457, 0.0604077019, 0.0284698736, 0.0155311832, 0.0285173245, -0.0686665624, 0.0655730888, 0.0337342098, -0.0458196029, -0.0584896691, -0.0074083563, -0.0022767901, 0.0821904838, 0.0833051801, -0.0142493341, 0.0473094508, 0.0227086470, -0.0101717412, 0.1016926691, -0.0323706567, -0.0319760740, 0.0335504077, -0.0069813938, 0.0082496237, 0.0864753276, 0.0060884641, 0.0152049894, 0.0815276578, 0.0811628476, 0.0704023913, 0.0376075208, 0.0717244744, -0.0731024146, -0.0024969999, 0.0768238679, 0.0688958317, -0.1021702811, -0.0267973002, 0.0777218938, 0.0664310604, 0.0466117747, 0.0098319305, -0.0153723862, -0.0244106576, -0.0331749134, 0.0011683995, -0.0714065284, 0.0220337380, 0.0153590403, 0.0478989817, -0.0127652697, 0.0333727635, -0.0124274446, 0.0350843966, 0.0413427427, -0.0739213452, -0.0560776033, -0.0079377536, -0.0562153719, 0.0021686542, -0.0052293953, 0.0615627989, 0.0365769081, -0.0535589010, -0.0295107476, -0.0735575110, 0.0298414156, 0.0359965116, -0.0182327926, -0.0013288078, 0.0088427439, 0.0593671165, -0.0863833055, 0.0193917304, 0.0312148482, 0.0234039109, 0.0435659550, -0.0352727771, -0.0159427114, 0.0251035783, 0.0380801782, 0.0087876860, -0.0346194468, 0.0046049356, 0.0471438579, -0.0038764072, -0.0637576804, -0.0155235194, -0.0553027876, 0.0289422292, 0.0400906391, 0.0356469750, -0.0428048410, 0.0775542185, 0.0513414592, 0.0218700469, -0.0209663454, -0.0497644171, 0.0693663135, -0.0537473895, -0.0055755973, 0.0488572121, -0.0327573754, 0.0429941416, 0.0215846710, 0.0043036779, -0.0736893117, -0.0340112485, -0.0467722751, 0.0984355807, 0.0475289300, -0.0266701691, 0.0564666279, -0.0741099268, 0.0586708039, 0.0349930674, -0.0916041359, 0.0152840950, 0.0585470237, -0.0626805127, 0.0441164225, 0.0279433858, 0.0060427361, 0.0849789008, -0.0500687435, 0.0421992876, 0.0045062816, 0.0108038699, -0.0526025593, -0.0509440266, -0.0072816713, 0.0324897394, 0.0093087833, 0.0518136397, 0.0376354679, 0.0532702841, 0.0686438382, -0.0687485933, 0.0335815959, -0.0373005494, 0.0159503873, -0.0615579411, -0.0644504800, -0.0172245726, 0.0553981885, -0.0656969398, 0.0007263005, 0.0971549451, 0.0196508430, 0.0369386524, -0.0661316663, 0.0637476817, 0.0526160970, 0.0016638743, 0.0575525351, 0.0435285605, 0.0284774136, -0.0106014246, 0.0573351681, -0.0492818244, -0.0071422267, -0.0398585312, 0.0979699641, -0.0386372507, 0.0418297611, -0.0385523662, 0.0514218025, 0.0144998003, 0.0476478040, 0.0307008736, -0.0806976780, 0.0637620464, 0.0735182986, 0.0129883550, 0.0784150064, -0.0310806520, -0.0856402740, -0.0759674832, 0.0150996763, 0.0390041955, -0.0805299878, 0.0552866124, -0.0821902677, -0.0144513790, -0.0582102984, 0.0724512115, 0.0655609220, 0.0851261243, 0.0256341789, 0.0200985614, -0.0487301089, -0.0785300955, 0.0169567652, -0.0511292219, -0.0094714127, 0.0020401767, 0.0132737262, -0.0689325780, -0.0226645805, -0.0803648680, 0.0014898867, 0.0480292812, -0.0714864954, 0.0509876348, 0.0321343318, -0.0651434734, 0.0427482016, 0.0052996641, -0.0139943333, 0.0735561773, -0.0000565153, -0.0749570429, -0.0454906039, -0.0047066002, -0.0416150540, -0.0022142546, -0.0648030937, -0.0663818121, -0.0472158641, 0.0733391792, 0.0770369470, 0.0301634036, -0.0272932723, 0.0064806254, -0.0274600815, 0.0011917583, -0.0112506738, -0.0590909086, -0.0603775010, -0.0451587886, 0.0843412057, 0.0662909374, 0.0387444161, 0.0047348160, 0.0499217510, -0.0619066432, 0.0259171855, 0.0297697298, 0.0028780294, -0.0227867365, 0.0369907469, 0.0025968330, -0.0482512526, -0.0442576036, -0.0602243617, -0.0344937034, -0.0721519887, 0.0938032791, 0.0326304846, 0.0395783335, -0.0381864123, 0.0386328362, -0.0503151491, 0.0651891902, 0.0107884901, -0.0321303457, -0.0366052985, -0.0223585088, 0.0230601002, 0.0547456890, -0.0805408582, 0.0357795991, -0.0735903904, 0.0255321302, -0.0542655177, 0.0015518883, -0.0614298768, -0.0249058176, 0.0518301502, -0.0093564652, 0.0417605825, -0.0108396951, 0.0575923920, -0.0450787358, -0.0722789317, 0.0242299978, 0.0099429283, -0.0221513491, 0.0689468905, 0.0585044436, 0.0364496373, 0.0364718623, 0.0103746168, -0.0528588220, 0.0066028642, 0.0244644098, -0.0453004651, 0.0399787351, -0.0006657326, -0.0039325035, 0.0128721455, -0.0152088394, -0.0332934707, -0.0492597148, -0.0412504189, -0.0128163369, 0.0248381142, -0.0440213978, -0.0133303916, -0.0742150918, 0.0293470025, 0.0424658991, -0.0055447645, 0.0487000085, 0.0249716397, -0.0477656797, -0.0020753858, 0.0423743501, -0.0935042202, -0.0580712147, 0.0453002453, 0.0439299792, 0.0597181246, -0.0405316800, -0.0419200584, -0.0727423504, -0.0383965857, -0.0107179498, -0.0676574782, -0.0698992908, -0.0034358792, -0.0241605099, -0.0691714808, 0.0673091635, 0.0614055507, -0.0322282352, -0.0578076765, 0.0202458594, 0.0651295185, -0.0016611614, 0.0294656120, -0.0165368635, -0.0233618338, -0.0019826919, -0.0363044851, -0.0219704919, 0.0790550113, -0.0632007048, 0.0100487508, 0.0179544482, -0.0746215582, 0.0871750489, -0.0549193285, -0.0373745114, -0.0612935051, -0.0609189533, 0.0143993469, 0.0749671385, 0.0913791806, 0.0940436646, -0.0147936717, -0.0081689656, -0.0271500945, 0.0463846289, 0.0082766460, 0.0175128467, -0.0022210253, -0.0466463491, -0.0913511515, -0.0751524493, -0.0410537086, -0.0298381411, -0.0160469655, -0.0648761168, -0.0471412465, -0.0177697688, 0.0339978337, 0.0678643063, 0.0129590537, -0.0149767883, 0.0020310581, 0.0924147516, -0.0813256353, -0.0071105640, 0.0115910554, 0.0370809920, -0.0108049372, -0.0691085979, 0.0611861944, -0.0644383058, 0.0023496407, 0.0639851093, 0.0800760761, -0.0763988495, 0.0264587551, 0.0039186287, -0.0209865700, 0.0261392444, -0.0223324150, -0.0101868883, 0.0645386428, -0.0433170870, -0.0238802806, 0.0038013591, -0.0485493876, -0.0312747657, 0.0376967303, -0.0398725718, 0.0129834646, -0.0184693448, -0.0640737265, -0.0301552471, -0.0122188665, -0.0132497428, -0.0447473228, 0.0963923633, 0.0521104895, 0.0136029022, 0.0490884110, -0.0355060957, 0.0821820050, -0.0101668295, 0.0558115244, 0.0860709101, -0.0593279675, 0.0085337060, 0.0667928681, -0.0385202765, -0.0097333388, 0.0664997175, 0.0454821214, -0.0749512762, 0.0424656607, 0.0066925907, 0.0077618426, -0.0684148446, -0.0036307371, 0.0353616700, -0.0087115876, 0.0077146371, 0.0394950882, 0.0865862966, 0.0609998479, -0.0376169719, 0.0284509957, 0.1050155014, -0.0382635556, 0.0693734214, 0.0395188518, 0.0669018179, -0.0422601923, -0.0592395887, 0.0892714113, -0.0187976845, -0.0546426922, 0.0107407449, -0.0146002853, -0.0968982428, -0.0532380156, -0.0396519192, -0.0393101424, 0.0901685730, -0.0459612496, -0.0754151642, 0.0050355340, 0.0316518396, -0.0519412830, 0.0153810810, 0.0189535506, 0.0494985543, 0.0338850878, -0.0232974943, 0.0862271935, -0.0470333211, -0.0087175854, -0.0350209139, -0.0445069410, 0.1060323119, 0.0725928918, 0.0721406713, -0.0126191797, 0.0174072534, 0.0018888846, -0.0858426541, 0.0182001982, 0.0502808020, 0.0375471376, -0.0729545131, 0.0412313044, -0.0844376087, 0.0567797534, -0.0463205241, -0.0340710059, 0.0089259343, 0.0886880606, 0.0236810725, 0.0255914610, -0.0592061691, -0.0028422528, -0.0282327477, 0.0302001629, 0.0675339997, 0.0210486855, -0.0772766694, 0.0309360009, 0.0159293525, 0.0113775423, 0.0272383690, -0.0186717939, -0.0355270691, 0.0205045007, -0.0207409989, 0.0260209236, 0.0699681640, 0.0523346774, -0.0716990903, -0.0460035764, 0.0010484185, 0.0646518543, -0.0125665823, 0.0543276630, -0.0744899362, 0.0564616211, 0.0321519040, -0.0746841356, 0.0606191568, -0.0372084267, -0.0070086936, -0.0347094499, 0.0080982670, -0.0135987913, -0.0001847230, -0.0158774219, -0.0461481325, -0.0778147131, -0.0278862715, -0.0251795035, -0.0013441114, -0.0059407656, -0.0872699097, 0.0451667383, -0.0140876705, -0.0184005983, 0.0357304215, -0.0621570125, -0.0848864838, 0.0243756454, -0.0576443635, -0.0282281023, 0.0693686903, -0.0621728525, -0.0621323436, 0.0481703281, 0.0506664813, -0.0779593512, -0.0432032719, -0.0400677808, 0.0357038788, -0.0350994542, 0.0616080761, 0.0613077022, 0.0239270125, 0.0483787507, -0.0157792307, 0.0091386307, -0.0163521934, -0.0711208358, 0.0560233518, 0.0862371176, 0.0796322450, -0.0260318257, 0.0383395180, 0.0501816645, -0.0717041418, 0.0406587645, 0.0303935576, 0.0347474925, 0.0629605502, 0.0293740183, 0.0129309529, 0.0416246764, -0.0338892043, -0.0754818916, -0.0053578089, -0.0149051985, 0.0258010458, -0.0148899239, -0.0103556449, -0.0970558301, 0.0420959853, -0.0033499228, -0.0354545861, 0.0048122923, -0.0011680190, -0.0405581035, 0.0752719864, 0.0008091486, -0.0268206112, 0.0490131304, -0.1104983389, -0.0213527419, -0.0702547505, -0.0400273018, 0.0155349849, 0.0163498018, -0.0942570567, -0.0240380429, -0.0049104625, 0.0797930211, -0.1025711596, 0.0115168830, 0.0772143081, -0.0281955190, 0.0548233464, -0.0258151237, 0.0030544039, -0.0834297240, 0.0361912958, 0.0971344337, -0.0519613214, -0.0010198096, 0.0529709794, 0.0752938390, 0.0142326066, -0.0824655518, 0.0652035400, -0.0083841998, 0.1001268029, 0.0692823902, -0.0384669304, 0.0089787059, 0.0285277888, 0.0698629990, 0.0197296366, -0.0024219588, 0.0217900202, -0.1045552418, -0.1036598608, 0.0742936507, -0.0782287568, 0.0768809393, -0.0832603127, -0.0040259599, -0.0000028363, -0.0354740508, 0.0514088720, -0.0633492544, -0.0526753478, -0.0885063559, -0.0010205444, 0.0075544990, 0.0080472203, 0.0389961638, -0.0951371416, 0.0827811658, 0.0265070386, -0.0090848850, -0.0199109111, -0.0477393903, -0.0116726262, -0.0162209161, -0.0533357114, -0.0880478993, -0.0988466367, -0.0048467061, -0.0567331873, 0.0676153451, 0.0066766702, 0.0049867281, -0.0550515167, -0.0115724374, -0.0092212083, -0.0137736052, -0.0919829011, 0.0305039175, -0.0034085042, -0.0208993219, 0.0546474643, -0.0894962326, 0.0334606208, 0.0475505516, 0.0768961534, 0.0249451865, -0.0788938999, 0.0274037868, -0.0418740474, -0.0445303731, -0.0324470028, -0.0629923716, -0.0506741777, -0.0419329628, 0.0077501973, 0.0865710452, -0.0085242158, -0.0506563485, -0.0635071769, -0.0091826171, -0.0637279376, -0.0748539343, -0.0135606471, -0.0478590354, -0.0525356121, 0.0085552633, 0.0061845472, 0.0412027538, -0.0860617757, 0.0244141221, -0.0002514536, -0.0194452778, -0.0775670707, -0.0336511731, -0.0210972894, -0.0265995227, 0.0844356343, 0.0589128397, -0.0501730368, -0.0534411408, -0.0618333481, 0.1072375849, -0.0153985657, -0.0082962411, -0.0475980826, -0.0246069133, -0.0280684847, 0.1096539870, -0.0087558124, 0.0101822065, 0.0052972683, -0.0397441536, -0.0145607442, -0.0500210077, 0.0342512019, -0.0746904388, -0.1069114804, 0.0864934847, 0.0615035594, -0.0134685300, -0.0293503236, -0.0963819325, 0.0680730864, -0.0619836301, 0.0159526765, 0.0179550834, 0.0411378331, 0.0134705175, -0.0361303836, 0.0875313580, -0.0616443008, -0.0451717749, 0.0106200250, -0.0404099748, -0.0450008027, 0.0058945580, -0.0071820198, -0.0913590491, 0.0544133410, 0.0096265133, -0.0050331638, 0.0538903773, -0.0713843629, -0.0479692817, -0.0650836974, -0.0680907294, 0.0720565096, -0.0883466974, -0.0823233500, -0.0931874886, 0.0637129173, 0.0028408284, -0.0395262353, 0.0857512727, -0.0457506105, -0.0231545866, 0.0182262473, -0.0069406312, 0.0561267063, -0.0387450531, 0.0006047871, -0.0191265065, -0.0296635460, 0.0687676594, -0.0607520640, -0.0166405458, -0.0902374089, -0.0845996216, -0.0850074142, -0.0779664516, -0.0316257067, -0.0202351753, 0.0507510193, 0.0764600784, 0.0097538857, 0.0559482537, 0.0414592996, 0.0367499590, 0.0669775978, -0.0442978963, 0.0065902015, 0.0548615232, 0.0800505579, 0.0029873985, -0.0562316552, -0.0368112586, -0.0658589825, 0.0138664022, -0.0274406299, 0.0208500605, 0.0578357615, 0.0237158015, 0.0219653435, 0.0415808596, 0.0416855998, -0.0571895167, 0.0568731278, 0.0268839374, -0.0725005046, -0.0310087595, -0.0713778362, -0.0563108623, -0.0295650456, -0.0164972115, 0.0075412719, 0.0764947459, -0.0116601037, 0.0040472685, -0.0278747752, -0.0744999126, -0.0278303623, -0.0024068847, 0.0487366542, -0.0521021374, -0.0137970075, -0.0318648852, 0.0354811288, -0.0232189279, 0.0001743434, 0.0683393776, -0.0746684447, -0.0002862909, 0.0191877950, -0.0212388970, -0.0193376057, 0.0366414860, 0.0572406948, -0.0363438204, 0.0266596898, 0.0516427159, 0.0571275726, 0.0088413525, 0.0259469971, 0.0112260897, -0.0290516112, -0.0242611244, 0.0317044072, -0.0771255717, -0.0560343266, -0.0663822591, 0.0636162981, -0.0586593151, 0.0074054431, 0.0028467407, 0.0013867205, -0.0834557787, -0.0704708546, -0.0069348598, 0.0222530961, 0.0534474105, 0.0020667152, -0.0488247871, -0.0630223900, 0.0019865029, 0.0107506290, -0.0268019624, 0.0651117936, -0.0776035041, -0.0435329303, 0.0473506190, 0.0795955658, -0.0806044266, -0.0350774601, 0.0140345786, 0.0000537868, -0.0418734811, -0.0061010798, -0.0531179868, -0.0551929362, 0.0241303779, -0.0259953104, 0.0151447719, 0.0343796462, 0.0177680776, -0.0201743226, -0.0525088757, -0.0685475320, -0.0180291608, 0.0470879376, -0.0607761480, -0.0010371803, 0.0189807024, 0.0299766492, -0.0095399804, 0.0353520848, 0.0323040150, 0.0322951190, 0.0053459327, 0.0299633630, -0.0059233387, 0.0312679186, -0.0699707791, -0.0354818031, 0.0124240918, 0.0528249666, 0.0459835567, 0.0184739418, -0.0181642603, -0.0548453033, -0.0614270568, 0.0707395673, 0.0374554507, -0.0547266267, 0.0011259353, -0.0000546022, -0.0172222685, 0.0273880046, -0.0653526038, -0.0416262597, -0.0508879051, -0.0450391993, -0.0442654751, -0.0353246890, 0.0234310869, 0.0602538511, 0.0699844435, 0.0596081801, -0.0065105641, -0.0407678634, 0.0205163378, 0.0179130416, -0.0262122806, -0.0641550943, 0.0152086848, 0.0097338567, -0.0451986454, 0.0072831013, -0.0003541686, -0.0496661551, 0.0711567104, 0.0340626352, 0.0022945695, -0.0534856021, -0.0665818080, -0.0581208654, 0.0319338292, -0.0463903248, 0.0628207251, 0.0663051903, 0.0047774059, -0.0120052770, 0.0172579400, -0.0527853929, -0.0188310370, 0.1070272624, -0.0389348119, 0.0427400395, -0.0436190702, -0.0235210340, 0.0724473596, 0.0242810026, -0.0350474901, 0.0407411195, 0.0329968967, 0.0773600936, -0.0080766939, 0.0573792122, -0.0727112889, -0.0408858769, -0.0407330692, -0.0639617816, -0.0440469906, -0.0983567536, 0.0488375016, -0.0003832012, -0.0634456724, 0.0924832746, 0.0921951979, 0.0674366727, 0.0932170972, -0.0818715394, 0.0690252930, -0.0010082754, -0.0820551738, 0.0679246932, -0.0375514142, -0.0544692613, 0.0540059991, 0.0090994174, 0.0195908919, -0.0269606132, -0.0025894532, 0.0926552415, -0.0675335228, -0.0959287435, 0.0146878650, 0.0524443351, 0.0834300816, 0.0325350389, -0.0859291106, 0.0524883531, -0.0204774644, 0.0011495322, 0.0748564601, 0.0584201068, -0.0946899801, -0.0257707294, 0.0368002839, -0.0284995176, -0.0462779403, -0.0327713266, 0.0922797844, 0.0422047041, -0.0370866843, -0.0676461533, -0.0177423861, 0.0221011266, 0.0822249278, 0.0949754640, 0.0636567473, 0.0097199967, 0.0847141966, -0.0156984832, 0.0548631065, -0.0559309013, -0.0557472929, 0.0319881104, 0.0508685969, 0.0086874329, 0.0532972105, -0.0149822580, -0.0521170385, -0.0409779884, 0.0549173914, -0.0602770261, 0.0578266047, -0.0486671664, 0.0483971275, 0.0506979525, 0.0398594067, 0.0076533062, 0.0109263016, -0.0251163300, -0.0292022359, 0.0290387496, 0.0176035706, -0.0478587933, -0.0780526251, -0.0148026692, 0.0052655493, -0.0007676775, -0.0532733239, -0.0748511478, 0.0737503543, -0.0102638118, -0.0580609851, -0.0191386715, -0.0580931641, 0.0588928461, 0.0171115119, 0.0288243741, 0.0675345883, -0.0180566385, 0.0791814104, -0.0517199077, 0.0072930525, 0.0433577523, 0.0666215271, 0.0568084605, -0.0653581247, 0.0015020641, 0.0541846082, 0.0395155028, 0.0448365323, 0.0356661081, 0.0438756794, -0.0183406044, 0.0771755949, -0.0688051581, -0.0419177413, 0.0358543545, 0.0096113365, 0.0006168803, -0.0550683551, 0.0689997897, 0.0334748738, -0.0820963532, -0.0154253598, 0.0354691483, -0.0233448446, 0.0209760591, -0.0600681864, -0.0253821574, -0.0224146862, -0.0446706004, -0.0218512230, -0.0613467358, -0.0712172389, 0.0773817673, 0.0729394928, 0.0055497903, -0.0409369543, -0.0736997724, -0.0645344257, -0.0764594004, -0.0014004164, -0.0536033325, 0.0199340601, -0.0502700880, -0.0172285102, 0.0042729382, -0.0827207863, -0.0313683860, 0.0041376706, -0.0900699273, 0.0456979126, -0.0742437243, 0.0563135408, -0.0397274382, 0.0179930143, 0.0491227135, 0.0033335423, -0.0314448401, 0.0379957631, 0.0395065807, -0.0659742579, -0.0195312593, -0.0249433145, -0.0173772275, 0.0194171090, -0.0507865027, -0.0850898996, -0.0319589972, 0.0653622225, 0.0467026904, 0.0346449651, 0.0797914639, -0.0361400172, -0.0716279745, -0.0969543383, -0.0824937522, -0.0787145048, -0.0255690627, -0.0462060645, -0.0262039397, -0.0402732454, -0.0446994267, 0.0682074949, 0.0429794714, -0.0355876163, 0.0568460412, 0.0141149359, -0.0027145704, 0.0133693470, -0.0198495667, 0.0827585980, -0.0217128154, 0.0647497103, 0.0348747373, 0.0250725094, -0.0343781561, -0.0326267257, 0.0501724817, -0.0609211624, -0.0496436767, 0.0542967021, 0.0613184236, -0.0088126352, -0.0582702383, 0.0038856620, -0.0510056205, -0.0607189834, 0.0579023585, 0.0136562660, -0.0961595029, -0.0395290926, -0.0305005852, -0.0232959203, 0.0408172347, -0.0566980429, 0.0585027896, -0.0648071542, 0.0492939502, -0.0215948019, 0.0374135561, -0.0200387128, 0.0479574166, 0.0021081290, 0.0507428870, 0.0589504167, 0.0070949136, -0.0244131684, 0.0884883925, -0.0573603436, -0.0274215005, 0.0856812596, -0.0198323335, -0.0572010316, -0.0461418889, 0.0806466490, 0.0127384458, -0.0140445549, -0.0149639621, -0.0547508076, 0.0785766318, -0.0617094301, -0.0879365802, 0.0853170305, -0.0586547554, -0.0283537544, 0.0186021961, -0.0653700382, 0.0402118713, -0.0140577266, -0.0333859026, -0.0039739064, -0.0159075279, -0.0249807648, -0.0471792854, 0.0546579212, -0.0585096814, 0.0640330613, 0.0542648211, 0.0869856551, 0.0591870770, -0.0234884825, 0.0702082068, -0.0163800437, 0.0304276757, 0.0326101780, 0.0634625033, 0.0280107483, -0.0079618283, 0.0316921063, 0.0003597159, -0.0204831921, 0.0142964171, -0.0641136542, -0.0043716244, 0.0492466912, -0.0728381947, -0.0118924342, 0.0250426419, -0.0037360033, 0.0302024651, -0.0896470770, 0.0437155180, -0.0628219470, -0.0491721034, -0.0103790127, 0.0038410819, -0.0161187034, -0.0152992215, -0.0814841837, -0.0642358884, 0.0146985436, 0.0856015086, 0.0604168400, 0.0807330534, -0.0106671592, -0.0730950609, -0.0436271876, -0.0161973666, -0.0175859984, -0.0547723882, 0.0667308569, -0.0945859179, -0.0507372506, 0.0109949782, 0.0142576173, 0.0245092567, -0.0157026611, 0.0428315848, -0.1001047194, -0.0994531438, 0.0461388491, -0.0585290343, 0.0263550188, 0.0838521495, -0.0676147938, -0.0379313529, 0.0484041981, 0.0850205049, 0.0634331331, 0.0239478461, -0.0816185847, -0.0575967729, 0.0378218777, -0.0350085720, 0.0340786539, -0.0233486947, -0.0336187407, -0.0390167348, 0.0283725094, 0.0642390475, -0.0424077399, 0.0046084779, 0.0305028800, 0.0378372334, 0.0126346657, -0.0496408641, -0.0162583534, 0.0093235876, -0.0382349230, -0.0401426069, -0.0833251700, 0.0192971118, 0.0352969728, -0.0236185659, -0.0816847533, 0.0629734546, -0.0868109465, -0.0534712076, 0.0331628509, 0.0607509390, -0.0384248644, -0.0123729920, 0.0396806858, -0.0753561929, 0.0636662468, -0.0236896351, 0.0481170043, 0.0625294298, 0.0732032210, -0.0293856189, 0.0860974938, -0.0839343816, -0.0638560429, -0.0082695391, -0.0130352275, -0.0549927168, 0.0351782441, -0.0154737951, -0.0186913535, -0.0043217060, -0.0154372053, 0.0226589274, 0.0084861498, -0.0201830231, 0.0679842457, -0.0689874291, -0.0052436641, 0.0234121084, -0.0182126369, 0.0247418359, 0.0052608396, 0.0407978483, 0.0219253357, 0.0578468740, 0.0549913235, 0.0527383909, 0.0388776474, -0.0891495720, 0.0595195666, 0.0464949906, 0.0082447119, -0.0209337939, 0.0533369146, 0.0149939563, -0.0271394197, 0.0442282110, -0.0735776722, 0.0294472668, 0.0687676072, 0.0563537702, 0.0222175345, -0.0383473486, -0.0412330106, 0.0895391628, 0.0743002892, 0.0425334983, -0.0195834693, 0.0453119688, 0.0655491501, 0.0373946987, -0.0091473144, -0.0525233448, -0.0310735870, 0.0636227280, 0.0093119945, -0.0198278818, 0.0894565359, 0.0438488312, -0.0248717368, -0.0729801431, -0.0261808019, -0.0714320019, -0.0787233263, -0.0171229988, 0.0391100645, -0.0090513974, 0.0451481789, 0.0078774309, -0.0466264300, 0.0348458588, -0.0431528091, 0.0652539581, 0.0465949103, 0.0436009578, -0.0148204304, -0.0261278637, 0.0694489330, 0.0797242299, -0.0331049599, 0.0214245878, 0.1064880714, 0.0268280264, -0.0198671985, 0.0322987065, -0.0024691739, 0.0012280482, 0.0252051651, 0.0522862077, 0.0571436360, 0.0057977499, 0.0025513347, -0.0805493146, 0.0069742799, -0.0107358731, 0.0594808422, 0.0182967056, -0.0705543682, -0.0201279726, -0.0358193032, 0.0402289405, 0.0228532813, 0.0102898823, -0.0070424392, -0.0120178713, 0.1058996022, 0.0960507840, -0.0761774555, 0.0492909737, -0.0802018121, -0.0749286562, 0.0718502253, -0.1042610705, 0.1192672774, -0.0405613631, -0.0179040302, 0.0733803436, -0.0804104358, -0.0080822743, -0.0018262897, 0.0471804887, -0.0103365956, 0.1201748773, -0.0282823127, 0.0281318594, 0.0566266179, -0.0380990766, 0.0419877470, -0.0109984474, -0.0116954995, 0.0737284273, 0.0089624012, 0.0783797652, 0.0720999092, -0.0242268555, -0.0214004815, 0.0459003076, 0.1244133040, -0.0344251208, -0.0902248472, -0.0460577011, 0.0248784907, 0.0011769815, 0.0952814147, 0.0515408777, 0.0595612451, 0.0059949472, 0.0276328754, 0.0842851400, -0.0130014997, -0.0742813721, 0.0130999191, -0.0605374388, -0.0223626159, 0.0876859948, -0.0879474878, -0.0307854973, -0.0202937108, -0.0317369327, -0.0466983691, 0.0372072160, -0.1173562855, 0.0867617279, 0.0801042765, -0.0110257743, -0.0228489023, 0.0070587993, -0.0436244011, 0.0076566595, 0.0164052099, 0.0027304625, 0.0001945495, 0.0796259642, 0.0475572273, 0.0562526323, 0.0282088872, 0.0174081437, 0.0954772905, -0.0616930872, 0.0562805869, 0.1103543639, -0.0722423494, 0.0045977924, -0.0660028681, 0.0667390749, 0.0309527256, 0.0415209047, 0.0193907563, -0.0007592565, 0.0844977051, 0.0096076010, 0.0462201424, 0.0182106867, 0.0342464447, 0.0628707111, -0.0009188345, 0.0183269083, 0.0467637107, -0.0205145609, 0.0269100424, 0.0624937639, 0.0059248693, 0.0396803617, 0.0349879079, -0.0333532393, -0.0729024336, 0.0162088759, 0.0616239235, -0.0248188134, 0.1045895442, -0.0301872790, -0.0547145866, 0.0451837517, -0.0262534339, -0.0451991260, -0.0975142866, 0.0164604597, 0.1077763066, 0.0723430738, -0.0355013907, 0.0031540922, -0.0721346512, -0.0186098926, 0.0522542894, -0.0264479239, -0.0385737121, 0.0641262457, -0.0423478037, -0.0289055612, 0.0097244000, 0.0176483765, -0.0880473554, -0.0146176973, -0.0260443296, 0.0098950099, -0.0693023801, 0.0823023990, -0.0237867795, 0.0202469639, 0.0845707133, -0.0319573916, 0.0598559007, -0.0436795689, -0.0391635038, -0.0090558045, -0.0326137207, -0.0309571363, -0.0167142563, -0.0184051916, 0.0990227908, -0.0022615404, -0.0182919353, 0.0461205654, -0.0326571874, -0.1000543907, 0.0308148731, 0.0145695284, -0.0876113698, -0.0661197752, -0.0365193449, 0.0214432236, 0.0271373633, 0.0729867741, -0.0997293144, -0.0621473640, 0.0963800475, 0.0956176519, -0.1025093272, 0.0884931684, 0.0408158749, 0.0073182378, 0.0064776093, -0.0425226428, 0.0411331542, -0.0406660512, 0.0849624425, 0.0846805498, 0.0419341512, 0.0442365631, -0.0917170718, 0.0241924226, 0.0079519441, 0.0918865949, -0.0769342780, -0.0817197487, -0.0000161888, -0.0486316346, -0.0105534587, -0.0493484922, 0.0226944629, 0.0383555256, -0.0183938071, 0.0223244689, -0.0456157848, -0.0369491093, 0.0518636666, -0.0320179574, 0.0041120793, -0.0423605144, 0.0604305528, 0.0337003395, -0.0304147899, 0.0044033192, -0.0494846925, -0.0371323787, 0.0657792166, 0.0675140396, 0.0391161852, -0.0308697615, -0.0308917481, -0.0145966811, 0.0829113424, -0.0699155256, -0.0038422407, -0.0078938352, 0.0478024445, -0.0315893963, -0.0053032455, 0.0523028895, -0.0710908324, 0.0246633422, 0.0171383824, -0.0692758933, 0.0501338467, -0.0801718980, -0.0648671687, 0.0448951833, 0.0103199435, -0.0725195408, -0.0912343860, -0.0526547283, 0.0727714598, -0.0184555445, -0.0120234322, -0.0150963347, -0.0614847466, -0.0567777380, -0.0870552659, 0.0601840988, 0.0085385414, -0.0910669342, -0.0179704148, 0.0340210758, 0.0837445706, 0.0459686592, -0.0835238546, -0.0059720431, -0.0588941686, 0.0785908699, 0.0300494526, -0.0382594205, -0.0647361577, 0.0793828890, -0.0672536790, -0.0478296131, -0.0047779595, -0.0859096274, -0.0193799362, 0.0675155222, 0.0384447090, 0.0111852707, -0.0559979565, -0.0541160516, 0.0110375900, -0.0673961118, -0.0460751615, -0.0823653638, -0.0301441811, -0.0277998168, -0.0493979082, -0.0013503277, 0.0091759181, -0.0368126929, -0.0014346843, -0.0027595267, 0.0757675767, 0.0614537969, -0.0235062540, 0.0109268865, -0.0700798556, -0.0499289297, 0.0324917287, -0.0130348671, -0.0318939425, 0.0506415479, 0.0859211385, -0.0053325840, 0.0029495526, 0.0665687472, -0.0315577053, -0.0830674097, 0.0258747395, -0.0345472023, -0.0103519121, -0.0132012116, -0.0252589043, 0.0685277358, 0.0162142552, 0.0799342766, -0.0150196133, -0.0434904806, -0.1046503186, 0.0467277430, 0.0394706056, -0.0751862898, -0.0778042227, 0.0612818636, 0.0450859517, 0.0206381734, 0.0115015507, -0.0408207551, -0.0225371737, 0.0709000602, -0.0444664061, 0.0470122918, 0.0780760720, 0.0881014541, 0.0522232018, -0.0130444579, -0.0544877946, -0.0156844407, -0.0082533490, 0.0755800977, 0.0709883943, 0.0138824545, 0.0393009409, -0.0201277696, 0.0117857028, 0.0315403938, -0.0511452705, -0.0750045776, -0.0925032124, 0.0257289037, -0.0155792804, 0.0642528161, -0.0409882478, -0.0788472071, -0.0454213321, 0.0715786889, -0.0606391467, -0.0535998009, -0.0141266966, -0.0628160015, 0.0275725368, 0.0856809244, 0.0457636043, 0.0185783710, -0.0341158584, 0.0407800525, -0.0315385982, 0.0055514537, -0.0401714295, -0.0036998990, -0.0239150915, -0.0009037248, 0.0052249483, -0.0423835889, 0.0510875992, -0.0117073394, 0.0053002187, -0.0458068699, -0.0768935904, -0.0858394280, -0.0707423612, -0.0301543679, 0.0064920252, -0.0916610733, -0.0657538697, -0.0114900582, -0.0851972625, 0.0617489219, 0.0600205697, 0.0113452645, -0.0702965781, 0.0175606068, 0.0116090011, 0.0401373357, -0.0512006991, -0.0614377409, -0.0237425901, 0.0739347041, -0.0441199578, -0.0821453929, -0.0267292056, -0.0700016022, -0.0453660153, -0.0938667729, 0.0713532194, -0.0099751614, -0.0864676833, -0.0092325481, 0.0817229003, -0.0925932899, 0.0443694443, 0.0574618801, -0.0613287427, 0.0311773364, -0.0292891599, 0.0586835444, 0.0214841273, -0.0166992620, -0.0610820018, -0.0551693961, 0.0531962775, -0.0463807210, -0.1037700623, -0.1124562100, 0.0659140870, 0.0991939381, 0.0189490933, 0.0279462729, -0.0455673710, -0.0228542276, 0.1031838879, -0.0609871894, -0.0886137933, -0.0772252753, 0.0203116424, 0.0178628899, 0.0803778097, -0.0695574880, 0.0421982259, -0.1068564057, 0.0305397231, 0.0109871365, 0.0495716110, -0.0048874984, 0.0211564507, 0.0118378680, -0.0492052548, -0.0014276193, -0.0685398579, -0.0086356821, -0.0095589990, 0.0182332825, 0.0730640516, 0.0008758115, 0.0042263358, 0.0109475693, 0.0068245116, 0.0090712346, -0.0320398770, -0.0036985911, 0.0768541023, -0.0261625778, -0.0319288485, 0.0513236746, -0.0562097132, -0.0875276998, 0.0280299373, -0.0161067490, 0.0706931502, -0.0074462774, 0.0144187743, -0.0028617047, 0.1094730943, 0.0365636088, -0.0361101851, -0.0272312611, -0.0343902074, 0.0493859537, 0.0176469181, 0.0502422825, -0.0348450206, -0.0281106103, -0.0789631382, -0.0262202378, 0.0356500670, 0.0435075909, -0.0670706704, -0.0885365680, 0.0051447977, 0.0397512652, -0.0561329201, 0.0371791385, 0.0672605783, 0.0420771427, 0.0184200909, -0.0264829639, 0.0502834655, -0.0817141011, -0.0409205779, -0.0573448874, -0.0601343177, -0.0517039970, 0.0124536632, 0.0228453726, -0.0395274162, -0.0736284927, 0.0159062110, -0.0327116512, -0.0180538669, -0.0759179667, 0.0472282432, 0.0682061687, -0.0701012462, -0.0411089137, 0.0779875070, 0.0255557988, -0.0428011008, 0.0321152136, -0.0399808437, -0.0399137028, 0.0371136367, -0.0521501601, -0.0531297103, 0.0086950194, 0.0966321155, 0.0023493243, -0.0575979650, -0.0176964775, 0.0290526208, -0.0441309325, 0.0525965989, 0.0203272924, -0.0509207584, 0.0597617514, -0.0213281307, -0.0504649766, 0.0344138257, -0.0033336151, -0.0013397699, 0.0588700399, 0.0603647903, 0.0390572213, -0.0541205853, -0.0150595801, -0.0321446881, 0.0622795224, 0.0450068526, 0.0805295482, -0.0729940608, -0.0628661513, -0.0028652328, 0.0536365099, -0.0203266051, 0.0041709170, -0.0012095489, 0.0051297620, 0.0580880940, -0.0270131025, 0.0383002050, 0.0653376430, 0.0139160389, -0.0839410275, 0.0004002978, -0.0905703679, -0.0847821310, 0.0034799785, 0.0019152100, 0.0628270805, 0.0176337063, -0.0747723579, 0.0601363406, -0.0270566978, -0.0660019740, 0.0114764925, -0.0702550858, 0.0362626798, 0.0374361649, -0.0859943405, -0.0216217674, 0.0915631950, 0.0635600686, 0.0486142077, 0.0080901533, 0.0656773448, -0.0305592883, -0.0382551178, -0.0707802624, 0.0612120442, -0.0068105296, 0.0319528282, 0.0711075813, -0.0209241994, -0.0390019603, -0.0725653693, 0.0332864486, -0.0488571860, -0.0526399203, 0.0523887910, -0.0697094947, -0.0329729244, -0.0717527866, -0.0475198440, 0.0737876967, -0.0401167832, -0.0391281806, -0.0760056004, -0.0652822629, 0.0298290886, -0.0124528762, -0.0178829134, -0.0301457383, 0.0067521897, 0.0609461293, -0.0055082659, 0.0553935692, 0.0467362888, 0.0685907900, 0.0304850787, -0.0150905345, -0.0706377998, 0.0821657032, -0.0716906935, 0.0735010207, 0.0512862876, -0.0282292459, 0.0399047285, 0.0727552921, 0.0734649524, -0.0490175486, -0.0364816710, -0.0277043171, -0.0721792504, -0.0072705424, 0.0388303623, -0.0428439640, -0.0259009469, 0.0622974522, -0.0719437078, -0.0095609752, -0.0046252091, -0.0256041717, -0.0588089563, -0.0367175378, 0.0429453477, 0.0231951401, -0.0970379263, 0.0374170430, -0.0960950553, 0.0808527395, 0.0203982163, -0.0328066982, 0.0618495345, -0.0086912587, -0.0457854345, 0.0072793602, 0.0710156783, -0.0340701640, 0.0238833521, -0.0272768084, 0.0054579889, 0.0398498140, -0.0580823533, 0.0362628922, -0.0386873372, 0.0083186151, -0.0803057030, -0.0033131263, -0.0240683947, -0.0263425596, -0.0609991774, 0.0520690121, 0.0130586466, -0.0493032597, -0.0203303602, -0.0095584448, -0.0729292631, -0.0433222875, 0.0528134890, -0.0425162688, -0.0748749524, 0.0866912529, 0.0609541200, -0.0662899390, -0.0181281809, -0.0170856416, 0.0639909953, 0.0374947079, 0.0495057367, 0.0370491035, -0.0083827116, -0.0673430189, -0.0094384514, -0.0159817934, -0.0307213049, 0.0702752471, 0.0101963561, 0.0281072017, 0.0069009080, 0.0080582565, -0.0741592422, -0.0437072963, -0.0685582012, -0.0044463184, 0.0806053802, 0.0690385550, 0.0086784558, -0.0012955754, 0.0066010542, -0.0637868568, -0.0514549315, -0.0548907444, -0.0680242106, 0.0615829192, 0.0091711124, 0.0643125772, 0.0605327375, 0.0659152865, -0.0123301623, 0.0236765742, 0.0210648030, 0.0268012565, -0.0429763608, -0.0019373178, 0.0455052741, -0.0728348866, 0.0269535240, 0.0239744019, -0.0157613344, 0.0544434972, -0.0147954673, 0.0314101800, -0.0634862110, 0.0487904139, -0.0484316833, 0.0616792105, -0.0083566913, 0.0605374239, -0.0891440362, -0.0065548471, -0.0501343273, 0.0353902839, -0.0474834628, -0.0652063861, -0.0647107810, 0.0335898064, -0.0572402477, 0.0549537055, 0.0534905791, -0.0215292685, -0.0259755719, 0.0622203164, -0.0175853595, -0.0090783024, -0.0296428259, -0.0653786659, -0.0080223912, 0.0875791237, -0.0130130742, 0.0141750518, -0.0635211840, 0.0710361153, -0.0230538882, -0.0391382873, -0.0048444858, 0.0761060491, 0.0479684025, -0.0856944621, -0.0004925414, 0.0380441584, -0.0037146839, 0.0271331370, 0.0791702569, 0.0371317267, -0.0206032209, -0.0030191741, 0.0104128588, -0.0006592808, 0.0373949893, 0.0752181336, -0.0690887347, 0.0815917328, -0.0353718549, 0.0677129775, 0.0191811249, 0.0896917209, -0.0466507748, 0.0480767488, 0.0210586004, 0.0172580872, -0.0703358501, -0.0478271693, -0.0023728455, 0.0684550628, 0.0549324192, -0.0312138107, -0.0140530821, 0.0733861774, 0.0403992534, 0.0194389429, -0.0873738155, -0.0430364013, -0.0357163101, -0.0312916562, -0.0490520932, 0.0768406838, 0.0168324672, -0.0916551128, 0.0523600169, 0.0652686581, 0.0871820450, -0.0682880953, 0.0170814637, -0.0156976636, 0.0488556549, -0.0634915084, -0.0220482107, 0.0685589015, 0.0131680286, 0.0057068197, -0.0334519781, -0.0299372952, -0.0557362922, -0.0075588156, -0.0796048716, 0.0251111966, -0.0105385864, -0.0489575230, -0.0204805471, -0.0303728636, -0.0071048606, -0.0387008041, 0.0568947792, 0.0682195127, 0.0061658844, -0.0813391283, 0.0769842640, 0.0464168563, 0.0630689561, -0.0886952281, -0.0670766011, 0.0837880298, 0.0766233057, 0.0059016910, -0.0339895077, -0.0756007135, 0.0087312851, -0.0357738882, -0.0685981438, -0.0580975376, 0.0207344647, 0.0038547665, 0.0391676277, 0.0654826611, -0.0229410827, 0.0072265626, -0.0214243568, 0.0278086755, -0.0284230597, -0.0707232654, 0.0091863004, 0.0523307137, -0.0695745498, 0.0329091176, 0.0368372388, 0.0484542325, 0.0451198295, -0.0310850572, 0.0333509147, 0.0990264863, 0.0215017833, 0.0475950167, -0.0843513981, 0.0858751088, 0.0655794442, -0.0015268291, 0.0436213948, -0.0810547173, -0.0476037376, 0.0432740897, 0.0277557559, -0.0069222585, 0.0023628243, 0.0571148805, -0.0131549779, 0.0068931910, 0.0508682914, -0.0252531376, -0.0513528846, 0.0849052295, 0.0212990865, -0.0323942602, 0.0205668155, 0.0531063713, -0.0040261182, -0.0720582902, 0.0189951081, -0.1081027612, -0.0018977660, 0.0641189665, 0.0528695025, -0.0088535314, -0.0242812373, 0.0435814261, -0.0222450513, -0.0324775390, -0.0137629025, 0.0663048550, 0.0880792141, 0.0889865980, 0.0097617283, 0.0725459084, -0.0487464853, 0.0631960407, -0.0945820138, 0.0347925536, 0.0202508364, 0.0124012316, -0.0274697710, 0.0509931333, -0.0943552628, 0.0096637951, -0.1217733696, -0.0331782661, -0.0156325605, -0.0410492346, 0.0249634758, -0.0151345683, 0.0459950231, -0.0219442453, -0.0003003044, -0.0654285252, -0.0213060621, 0.0505235009, 0.0579038858, -0.0780457780, -0.0619597100, 0.0415092781, 0.0243223552, 0.0439461879, 0.0547569543, -0.0289478246, -0.0153684402, 0.0247602332, 0.0192614924, -0.0597687438, -0.0764036477, 0.0188811850, -0.0134047195, 0.0522113033, -0.0351696797, -0.0942642465, -0.1176044568, 0.0031356392, -0.0865395367, 0.0926205516, 0.0505881682, 0.0036695933, 0.0804501101, -0.0159975421, 0.0030522342, -0.0383803435, 0.0263266042, -0.0041823299, 0.0237930305, 0.0308573041, -0.0196695011, 0.0164894853, 0.0244258326, 0.0910817608, 0.0555222034, -0.0688492805, 0.0087446216, -0.0569364242, -0.0065338258, 0.0415270925, 0.0014974240, -0.0234670211, -0.0867729187, -0.0702029318, -0.0726063475, 0.0048151626, 0.0193359256, -0.1071949825, 0.0373254977, 0.0790143609, -0.1149925813, 0.0295452904, -0.0327599905, 0.0061150473, -0.0590090007, -0.1115864366, -0.0927265808, -0.1053888798, -0.0286820214, -0.0124580981, 0.0377254970, 0.0787991211, -0.0898061097, -0.1224432960, -0.1133958921, 0.0881057680, 0.0632842854, -0.0379036851, 0.0430065952, -0.0319705531, 0.0185223948, -0.0154648377, 0.0465711839, 0.0660187155, -0.0093088420, -0.0613515452, -0.0109523917, -0.0387371704, 0.0711318851, 0.0155922519, 0.0180212278, -0.0283327140, -0.0873610452, 0.0347013138, -0.0024698325, -0.0644081086, -0.0727663636, -0.0537949316, 0.0506536365, -0.0101598846, -0.1141094416, -0.0842781812, 0.0031825188, 0.0127263553, -0.0510897115, 0.0167794023, 0.0224950872, 0.0354200229, 0.0050634700, 0.0760402307, -0.0340747908, 0.0303168632, 0.0486435927, 0.1117090955, 0.0284276363, -0.0701846704, -0.0466739275, -0.0194770452, 0.0111056445, -0.0588322133, -0.0434265994, 0.0284155589, -0.0490388013, 0.0287102014, -0.0141456909, 0.0837021917, -0.0068632672, 0.0375344194, -0.0198492594, -0.0729171112, 0.0686125457, -0.0326795429, -0.0128088715, -0.0273981579, -0.0058588483, -0.0629122630, 0.0615252294, -0.0456469506, -0.0480638631, 0.0282880645, 0.0457508788, 0.0469079353, -0.0441950783, -0.0704856515, 0.0025793661, -0.0031488913, -0.0310702641, 0.0709098056, 0.0248293113, 0.0474021696, 0.0463765636, 0.0179845691, -0.0667020828, 0.0332981013, -0.0320024565, 0.0148756877, 0.0157108959, 0.0628452003, 0.0314009674, -0.0581566654, 0.0062249992, -0.0496587157, -0.0136042824, 0.0767227635, -0.0106685637, -0.0421051607, 0.0658760518, -0.0368347019, 0.0438765213, -0.0045722774, 0.0460973606, 0.0035514284, -0.0853097588, 0.0759652779, 0.0234312192, -0.0150663052, 0.0629820973, -0.0091730496, 0.0552661456, -0.0311223585, 0.0216031168, -0.0387958512, -0.0176352151, -0.0481337868, -0.0223071277, -0.0004688260, -0.0479198769, 0.0019537502, 0.0069862949, 0.0212674830, -0.0565288775, 0.0367535576, -0.0749269202, -0.0477294400, -0.0576360449, 0.0356356315, -0.0505310036, 0.0118524162, -0.0248048510, -0.0153286783, 0.0217652749, -0.0057672081, -0.0475818105, 0.0132826082, -0.0879387483, -0.0177974235, -0.0712715089, 0.0839486569, -0.0341227502, 0.0059956815, 0.0828839913, -0.0322456807, 0.0383647978, -0.0309664700, 0.0605087578, -0.0077741691, -0.0880684927, 0.0272402950, -0.0634153783, 0.0714483857, -0.0227894969, -0.0256615020, -0.0212744568, 0.0226257555, -0.0683984905, -0.0052373814, 0.0158147458, -0.0168880187, 0.0840209126, 0.0043438962, -0.0107597932, 0.0147757325, -0.0383587778, 0.0182220675, -0.0422077216, 0.0314563066, -0.0192783400, -0.0236990917, 0.0150028430, 0.0160393100, -0.0351985730, 0.0030787471, -0.0187316220, 0.0112203788, -0.0238419138, 0.0314108841, 0.0249689054, 0.0619269311, -0.0307483058, -0.0686394200, -0.0292033814, -0.0781597868, 0.0819030702, -0.0563286990, 0.0323692001, 0.0476447530, -0.0567148365, -0.0336659774, -0.0441012084, 0.0340925120, -0.0084027424, -0.0150510119, -0.0554725341, 0.0626152456, 0.0897808298, -0.0152378464, -0.0155674564, 0.0429979376, -0.0243612416, -0.0759086385, -0.0308203846, -0.0418695733, -0.0782317743, 0.0698462874, 0.0539712980, 0.0746074095, 0.0283321515, 0.0582988746, 0.0695106462, -0.0300848447, -0.0128630754, 0.0139886858, -0.0372202359, -0.0354611501, -0.0329806246, 0.0199490674, 0.0813584924, -0.0555742420, 0.0439768024, 0.0307745878, 0.0871296301, -0.0322119892, -0.0706910491, 0.0456124172, 0.0532728285, 0.0549873561, -0.0295342710, -0.0657329187, -0.0512035526, 0.0296863150, -0.0207294133, -0.0531536266, -0.0157714002, -0.0648088902, -0.0170501731, -0.0084396070, 0.0242383629, -0.0021158168, 0.0402280316, 0.0794950798, -0.0447591990, -0.0437648073, -0.0694482550, 0.0691131875, 0.0202189777, 0.0342881270, 0.0853205696, -0.0683254153, 0.0867863148, -0.0142459860, 0.0108573753, 0.0224734005, 0.0221114550, 0.0086724805, -0.0741555840, 0.0745562166, 0.0133961728, -0.0906539857, 0.0026989593, -0.0377533510, 0.0008982457, 0.0681290701, 0.0051275534, -0.0631243289, -0.0339468457, -0.0599411875, 0.0520396493, 0.0675618872, -0.0074598249, -0.0725593865, -0.0147890886, 0.0317935683, 0.0660431981, -0.0674920455, 0.0269105546, -0.0267716348, 0.0642146617, 0.0412741341, 0.0799550936, 0.0007966885, 0.0247895904, -0.0626196638, -0.0721284375, 0.0533865802, 0.0590197071, -0.0726250261, -0.0642365888, -0.0103721917, -0.0263731014, 0.0708580464, -0.0563376546, 0.0309623256, 0.0204811245, 0.0039108200, -0.0912493616, -0.0587081313, -0.0842261463, 0.0537954196, -0.0643920377, 0.0153737525, -0.0359924510, 0.0642857552, 0.0248620957, 0.0847387537, 0.0257795248, -0.0471373126, 0.0700205863, 0.0587776937, 0.0518164858, -0.0499470457, -0.0705625117, -0.0004523741, -0.0168847069, -0.0646970421, -0.0131479902, 0.0227111150, -0.0078532584, 0.0786830038, -0.0028983674, 0.0262067523, -0.0335405506, -0.0168681573, 0.0111255227, 0.0613507703, 0.0374593511, 0.0709496811, -0.0358859114, 0.0439738594, -0.0564074665, -0.0504587926, -0.0778030679, -0.0567511730, -0.0648133084, -0.0378470235, 0.0347484611, -0.0118904486, 0.0013097267, -0.0306097455, 0.0405219160, 0.0499402247, 0.0496293046, 0.0772968978, 0.0795096382, 0.0219687894, -0.0410206169, -0.0563853011, 0.0443247333, -0.0136212474, -0.0192823634, 0.0615309663, -0.0150793381, 0.0153539088, 0.0249373484, 0.0043247058, -0.0533443876, 0.0697845891, -0.0335288532, -0.0005784023, -0.0477042422, 0.0070494469, -0.0693714470, 0.0344188139, 0.0341891795, -0.0163133368, 0.0222216900, 0.0271547884, 0.0387938693, -0.0143350912, 0.0670919269, 0.0424747095, -0.0760631859, -0.0158522446, -0.0307572410, 0.0231744014, 0.0175016858, 0.0217575394, 0.0587059148, -0.0488001071, 0.0838391110, -0.0189293046, 0.0270914026, 0.0670433119, 0.0363251530, -0.0242772102, -0.0763149858, -0.0283434093, -0.0135662947, -0.0640632734, -0.0233054236, 0.0747990087, 0.0030183822, 0.0097073680, -0.0601262003, 0.0083359368, 0.0980352238, 0.0455281287, 0.0447847247, 0.0556740984, 0.0063404520, 0.0493370853, 0.0853422135, 0.0401355959, 0.0001315990, -0.0538165160, -0.0552863404, 0.0810384005, -0.0279869605, 0.0904619172, -0.0643923432, 0.0688581094, 0.0216976423, -0.0637342557, -0.0487936921, -0.0333838612, -0.0931356773, 0.0139373653, 0.0585962981, -0.0131699387, 0.0285959058, 0.0606097281, -0.0747921616, -0.0212730709, 0.0645941719, 0.0231576283, -0.0114271399, -0.0973925442, 0.0787966996, 0.0299864281, -0.0767929927, 0.0382585861, -0.0056880638, -0.0830406472, 0.0787604749, 0.0744310841, -0.0053949282, -0.0309128296, -0.0112676313, 0.0586590581, -0.0975271389, 0.0503461473, -0.0829555318, 0.0417976864, -0.0560589246, -0.0806822777, -0.0198238138, -0.0856607109, -0.0844048262, -0.0513375476, 0.0090444442, -0.0520894304, -0.0405072421, -0.0901500359, -0.0417838618, 0.1066799089, 0.0272097792, -0.0139508434, -0.0568995476, -0.0101536978, 0.0303989984, 0.0699646622, -0.0585855432, 0.0102708163, -0.0573512278, -0.0524824634, -0.0276630446, 0.0283060782, 0.0803372785, -0.0583656169, -0.0347973146, 0.1021965742, -0.0783991665, 0.0237248316, -0.0521907099, -0.0468076915, 0.0237957127, -0.0991348848, 0.0199200772, -0.0561883859, 0.0164176561, 0.0493163988, 0.0036338323, 0.0611521006, 0.0683077574, -0.0978342816, 0.0433951244, -0.0099113779, -0.0337379798, -0.0225817449, 0.0310653131, 0.0506911390, 0.0021794192, 0.0533597767, 0.0736187175, -0.0313803107, -0.0973303169, -0.0113944290, 0.0395873785, 0.0578858890, -0.0041138148, -0.0423763953, -0.0413317755, 0.0805960149, 0.0380931646, 0.0382855237, 0.0302954298, 0.0072602257, -0.0797199532, 0.0019461085, -0.0392986462, -0.0349265113, -0.0972734168, -0.0848474577, -0.0056224163, 0.0155967753, 0.0418244973, -0.0792566910, 0.0123374388, -0.0326597206, -0.0302675739, 0.0186945908, -0.0293581858, 0.0871663839, 0.0198399890, -0.0164862443, -0.0176686142, 0.0008492371, -0.0860875994, 0.0044068904, 0.0660635903, 0.0775718391, 0.0231117141, -0.0054154899, -0.0592011139, 0.0511022843, -0.0142847197, -0.0648684055, -0.0220276397, -0.0901543200, 0.0547523238, -0.0321791209, 0.0716021731, 0.0249095690, -0.0037469270, -0.0176769532, 0.0391762517, 0.0647171438, -0.0121271955, -0.0750759095, 0.0315107182, 0.0530121736, -0.0561266430, -0.0206526481, -0.0224783141, 0.0122236228, 0.0458019227, -0.0166406557, -0.0767588243, -0.0351713039, -0.0993429124, -0.0188161116, -0.0637185797, -0.0560336486, 0.0169789568, -0.0182439163, 0.0258341264, -0.0429245234, 0.0192651358, 0.0690086782, -0.0419726893, -0.0113852005, 0.0456450731, 0.0039720964, -0.0815573037, -0.0068472265, -0.0235740989, 0.0277801864, -0.0302258134, -0.0520843081, -0.0474845991, -0.0212528557, -0.0407872349, 0.1108899489, 0.0011338990, 0.0330811143, 0.0472474769, -0.0445465259, -0.0206635688, 0.0256919563, -0.0648011789, -0.0592066571, 0.0131084835, -0.0662292838, -0.0923146382, -0.0140514262, 0.0073068463, -0.0576300211, 0.0201983526, -0.0095488168, -0.0359781347, 0.0466788858, 0.0209759846, 0.0339867286, 0.0204988066, -0.0661297068, 0.0551353693, 0.0328155868, -0.0951799005, -0.0222914629, 0.0273981839, -0.0076988321, 0.0914636254, -0.0933996513, -0.0307440292, -0.0034654257, 0.0626965389, -0.0215364378, 0.0102334293, -0.0028966605, -0.0332418196, -0.0377581790, -0.0699579269, 0.0517389402, -0.1026954427, 0.0487202071, 0.0722397938, 0.0479099341, 0.0809325129, 0.0525519848, -0.0811761171, 0.0525827259, -0.0264017805, -0.0111354245, -0.0788193941, 0.0567527711, -0.0369115882, -0.0004156853, 0.0379790775, -0.0230878703, -0.0029454327, -0.0215271637, -0.0099334260, 0.0046625570, 0.0402767844, -0.0789645016, -0.0337939113, 0.0624423847, 0.0547794215, -0.0485582016, 0.0389086716, -0.0485082120, 0.0063432790, 0.0176376868, -0.0862951279, 0.0737378597, -0.0010496402, -0.0501467735, 0.0570202544, -0.0244748425, 0.0797074586, -0.0599791110, 0.0028034011, 0.0509979501, 0.0766395405, -0.0403874442, 0.0111656673, -0.0623773709, -0.0758425966, 0.0349365398, 0.0139173288, -0.0383388214, 0.0689792037, -0.0386177786, 0.0561379641, -0.0825783387, 0.0576366708, 0.0542590246, -0.0550032146, 0.0446115397, 0.0276092645, 0.0902855471, -0.0553489365, -0.0447459780, -0.0163524020, -0.0417108051, -0.0527527034, 0.0907847434, -0.0554216355, 0.0397225916, 0.0647572875, -0.0484054014, -0.0512147620, 0.0412683859, 0.0710563213, 0.0121219112, -0.0491636135, -0.0514373258, -0.0082010990, 0.0242497567, -0.0695441663, 0.0660068020, 0.0456827097, 0.0767661557, 0.0130685465, 0.0736081600, 0.0139805414, -0.0071171960, 0.0087882373, -0.0125184078, 0.0067055104, -0.0461746007, 0.0305249933, -0.0478777550, -0.0935176164, 0.0612092465, 0.0582703911, -0.0674106330, 0.0102520706, 0.0167708378, 0.0269840769, -0.0512636080, 0.0085467314, 0.0727385432, -0.0215224531, -0.0183143280, 0.0653311163, -0.0366780050, 0.0943733454, -0.0809673741, 0.0914581791, -0.0459431447, -0.0083336532, -0.0311100073, 0.0223091934, -0.0216575377, 0.0378565639, -0.0083775949, -0.0461853743, -0.0843203068, -0.0230783951, -0.0468263328, -0.0598774515, -0.0253171995, 0.0640384555, -0.0589904301, -0.0069330274, -0.0374490619, 0.0278928392, -0.0380865149, -0.0669818223, 0.0370232239, -0.0407516286, -0.0339463949, 0.0404182561, -0.0498803295, -0.0308141261, 0.0604263321, -0.0664862171, -0.0785330981, 0.0345787220, 0.0630791783, -0.0231084786, -0.0268866867, 0.0583741553, -0.0252396017, 0.0776845142, -0.0512824096, 0.0324046686, -0.0189637803, 0.0798373595, -0.0328317359, -0.0468311533, 0.0319389291, -0.0253248382, 0.0082344515, 0.0362658873, -0.0655123964, 0.0587102734, -0.0657929331, -0.0699208602, -0.0450700708, -0.0206990633, 0.0722268298, 0.0651276931, 0.0355544984, 0.0188265163, -0.0785296336, -0.0380223691, 0.0205886867, -0.0078002471, 0.0405852534, 0.0746806785, -0.0646591559, -0.0808850750, 0.0976335332, 0.0502480604, 0.0284293257, 0.0080908621, 0.0749198720, 0.0167528987, 0.0439821929, -0.0187205430, 0.0098648835, 0.0813821033, 0.1099354625, 0.0493765026, 0.0010171052, -0.0365406647, -0.0740597323, 0.0129048191, 0.0254868735, 0.0167420302, -0.1081743464, -0.0467960909, -0.0297744423, 0.0325553901, 0.0454542674, -0.0235218648, -0.0476496853, 0.0382873528, 0.0235575773, -0.0464675389, -0.0322252586, -0.0240418408, 0.0308214724, -0.0491755158, 0.0817497298, 0.0324838310, 0.0871366784, 0.0737084970, 0.0882009044, 0.0384404622, -0.0418388173, -0.0521929301, 0.0647700205, 0.0063186875, 0.0592601746, -0.0131484419, -0.0205692146, 0.0127553092, -0.0070880363, 0.0531110652, -0.0385624543, -0.1055293232, -0.0420771129, -0.0437203683, 0.0230760891, 0.0238054208, -0.0635230541, -0.0574939325, -0.0545276068, 0.0380626842, 0.0604951456, 0.0827583373, -0.0967977270, -0.0403355323, 0.0537216552, 0.0587301850, 0.0034162565, -0.0236753300, -0.0205869097, -0.0419983454, 0.0639342368, -0.0240269694, 0.0552131720, 0.0077326228, -0.0474487469, 0.0335767008, -0.0139808357, 0.0130605185, 0.0280111972, -0.0162262991, -0.0005527294, 0.0023065794, 0.0274937321, -0.0737425312, -0.0002331439, 0.0757019967, -0.0027710160, -0.0008075967, 0.0470700376, 0.0014580879, 0.0578914061, 0.0347034559, 0.0547198914, 0.0768138096, -0.0907327384, 0.0486964807, -0.0340654589, 0.0929130986, 0.0561847985, -0.0127720581, 0.0690376237, -0.0334037207, -0.0441635363, -0.0479417145, 0.0905189514, 0.0048339409, -0.0705475211, 0.0871757492, 0.0003353306, -0.0457840897, -0.0859296322, -0.0839863420, -0.0083300695, 0.0164439920, -0.0770457089, -0.0945888162, 0.0073107891, 0.0316104740, -0.0238336585, 0.0521246567, -0.0469470695, -0.0182132479, 0.0464178286, 0.0216921736, 0.0506928302, 0.0295701474, 0.0377032198, -0.0583065525, 0.0395467468, -0.0068618720, 0.0113747129, 0.0387769938, -0.0516753234, -0.0035231055, 0.0947180092, 0.0598404258, -0.0362394527, -0.0278250445, -0.0478099994, 0.0660797432, 0.0623192973, -0.0366108268, -0.0920916647, -0.0393954776, 0.0543024763, 0.0509320647, -0.0692758858, 0.0319354460, -0.0731496066, 0.0620121770, 0.0441887602, 0.0299551785, 0.0114050964, -0.0208794530, -0.0644795671, 0.0228714552, 0.0496764407, 0.0384710133, -0.0540029705, 0.0245614517, -0.0258081891, -0.0185501780, 0.0300516840, 0.0154606542, 0.1020179912, -0.0297693145, 0.0944045857, 0.0234351456, -0.0503182486, 0.0280859862, 0.0144623425, 0.0338888466, 0.0645343438, -0.0092034033, -0.0450913161, -0.0397459865, -0.0702481717, -0.0501696020, 0.0262947418, -0.0049742623, -0.1012981758, -0.0369398631, -0.0002760869, 0.0772223473, 0.0259037130, 0.0006584207, -0.0565505363, 0.0490509048, 0.0179378502, 0.0976986438, -0.0935397223, 0.0489739142, 0.0089312904, -0.0577710047, 0.0601971038, 0.0117167654, -0.0379774943, -0.0061540129, 0.0936877951, -0.0597560219, 0.0835956633, -0.0662240610, 0.0148921888, 0.0699187815, 0.0945326164, -0.0460716225, 0.0170465410, 0.0077679725, -0.0678658113, 0.0192947071, -0.0425456353, 0.0414416827, 0.0495711043, 0.0464928932, 0.0020585940, -0.0048995041, -0.0656056851, -0.0702143610, 0.0178109892, -0.0854911283, 0.0084467893, -0.0356816538, 0.0287035480, -0.0253881291, 0.0749494210, -0.0673270375, -0.0647252351, 0.0609111264, 0.0073864795, -0.0624037161, -0.0341004767, -0.0229162481, 0.0107604349, -0.0105781313, -0.0049904576, 0.0313082486, 0.0413711295, 0.0223503448, -0.0702409595, 0.0234521870, 0.0203404594, 0.0245253630, -0.0010126431, -0.0853088647, -0.0121258460, 0.0266271532, -0.0206239223, 0.0129998270, 0.0029127896, -0.0174065083, 0.0912282169, 0.0466412790, 0.0312521644, -0.0609143898, -0.0309859756, -0.0562747531, 0.0436693430, -0.0886314809, -0.0098257698, -0.0268943869, 0.0225077737, -0.0751625821, 0.0379673839, -0.0466855355, -0.0091822073, -0.0214596931, 0.0474232994, 0.0342721902, 0.0564511493, -0.0105873598, -0.0175424814, 0.0089208437, 0.0177315902, 0.0007551264, -0.0446242988, 0.0600797161, -0.0797433630, -0.0536915734, 0.0019866184, 0.0869266242, -0.0195516292, -0.0628525242, 0.0622120537, 0.0387642980, 0.0710906461, -0.0274620410, -0.0188718382, 0.0453414097, -0.0044317464, 0.0398266576, 0.0664489716, 0.0703622103, 0.0233516283, -0.0142679717, 0.0394382961, 0.1007351503, 0.0403124355, 0.0454131588, 0.0586300939, -0.0251850747, 0.0630117506, -0.0645886660, 0.0404945575, -0.0029725055, 0.0416236967, -0.0763186663, 0.0761850998, -0.0507184602, 0.0006868161, -0.0573440418, -0.0078917760, 0.0263696313, -0.0405631922, 0.0451629460, -0.0593423769, 0.0390258022, 0.0091324151, 0.0511301383, 0.0771705210, 0.0460673384, -0.0561488383, 0.0435142107, -0.0718507245, 0.0186236612, 0.0305372346, 0.0734242126, 0.0118844388, 0.0788137391, -0.0329868160, 0.0272348206, 0.0737545043, -0.0405875817, 0.0100522069, -0.0255034529, -0.0296777952, 0.0343541689, -0.0404328406, 0.0065252571, 0.0280265380, 0.0243404489, 0.0322835222, 0.0521320589, 0.0802812353, -0.0580714270, -0.0318009667, -0.0710901693, -0.0143013913, 0.0811830238, -0.0306209289, 0.0194979217, -0.0753358379, 0.0815030113, 0.0912297741, -0.0213395525, -0.0319172665, 0.0428193286, 0.0496647470, 0.0394858681, 0.0581532493, -0.0130395051, 0.0579427108, 0.0304813404, 0.0014044598, 0.0314242430, -0.0479228497, -0.0541625470, -0.0787626654, -0.0103144990, 0.0370811895, -0.0187016949, -0.0231166799, 0.0593887083, -0.0178678334, 0.0755674019, 0.0618259311, 0.0668371990, 0.0276373234, 0.0133151561, -0.0896689370, 0.0553748086, 0.0701156780, -0.0604701079, -0.0886577219, 0.0364314169, 0.0643671975, 0.0512470193, 0.0344549119, 0.0549041368, 0.0594721921, 0.0207041707, 0.0470290743, 0.0948377922, 0.0427864939, 0.0123991286, -0.0283511672, -0.0730985776, -0.0239448398, -0.0062551359, -0.0822826028, 0.0364479460, 0.0072605489, -0.0662767366, 0.0855837762, -0.0906389654, -0.0602773651, 0.0772158131, 0.0098928250, -0.0058402908, -0.0547825582, -0.0193389356, 0.0507150628, 0.0530502535, -0.0331163630, -0.0178826880, -0.0409898050, 0.0166599974, 0.0755429268, 0.0312771611, 0.0835342631, -0.0712951198, -0.0148360319, -0.0056149918, 0.0496469997, -0.0546758696, 0.0282729790, 0.0245560035, -0.0212783441, 0.0489263274, 0.0228890758, -0.0062880795, -0.0935139805, -0.0768190920, -0.0087834187, 0.0167028084, 0.0084955189, -0.0397910364, -0.0344962999, 0.0025791209, -0.0221812427, -0.0589694418, 0.0053053275, 0.0042176875, 0.0000570877, -0.0192209184, -0.0371077359, -0.0475823283, 0.0271275863, -0.0149482526, -0.0524540208, -0.0580552220, 0.0594269410, 0.0724483207, -0.0468478426, 0.0310317967, -0.0628243089, -0.0329975076, -0.0239282697, 0.0717251524, 0.0762401149, -0.0573498420, -0.0722411349, 0.0142004760, -0.0512817949, 0.0555850863, -0.0224105511, -0.0692117289, -0.0426068045, -0.0317334272, 0.0339294188, -0.0469198227, 0.0061439662, -0.0740889832, 0.0045597279, 0.0298181213, -0.0677897260, 0.0640726760, -0.0576600805, 0.0021577717, -0.0679983348, -0.0198850539, -0.0672530979, -0.0595107973, 0.0788907707, 0.0714701787, 0.0761637092, 0.0756932050, 0.0664686635, 0.0741883814, -0.0320668630, 0.0115728648, -0.0281108748, 0.0888980329, 0.0110576907, 0.0202386659, -0.0618975274, -0.0696454272, -0.0220781248, 0.0003738207, 0.0486187525, 0.0275607333, -0.0701877624, 0.0916274264, -0.0058704689, 0.0640417561, 0.0832381248, -0.0319901370, 0.0719055012, 0.0490965657, -0.0516186766, -0.0357068926, -0.0322278924, 0.0609921739, -0.0301901698, -0.0037375260, -0.0410433300, -0.0670313016, -0.0189872347, -0.0001792176, 0.0512009822, 0.0683701932, -0.0165874455, 0.0488322936, 0.0717131346, 0.0373858996, -0.0771463141, -0.0435844772, -0.0425553583, 0.0405821279, 0.0346743241, 0.0355894044, -0.0265056584, -0.0086808437, 0.0760670379, -0.0033892789, -0.0184221305, 0.0557591803, -0.0196018219, -0.0424694084, 0.0427557938, -0.0248399563, 0.0829483122, -0.0358062387, -0.0172530301, -0.0461965464, 0.0061271694, 0.0340461880, -0.0409221426, 0.0096957367, -0.0920131058, -0.0803560689, -0.0816919282, -0.0465999655, 0.0697473809, 0.0551036447, 0.0593903512, 0.0791927576, -0.0812565535, 0.0105670169, 0.0823028013, 0.0294122975, 0.0568940938, 0.0446214974, 0.0246428363, -0.0671414137, 0.0094043845, 0.0810089260, 0.0585157908, 0.0342859179, -0.0148871439, 0.0159337521, 0.0161135383, 0.0477145985, -0.0661555901, -0.0559813268, 0.0716967285, 0.0793299377, 0.0446035713, -0.0360360667, -0.0767069012, 0.0165500939, -0.0298180431, -0.0158386249, -0.0257574264, -0.0534771718, -0.0170596410, -0.0364275128, 0.0573073067, 0.0047079213, 0.0617098510, 0.0434878021, 0.0129849371, 0.0487224050, -0.0011737884, -0.0093228715, 0.0417210199, -0.0452258177, -0.0323965438, -0.0185837708, -0.0603979751, -0.0824783817, -0.0360879190, 0.0329216495, -0.0505022146, -0.0062617827, 0.0706107393, -0.0527942143, 0.0464346297, 0.0497880578, -0.0406769998, 0.0028047322, -0.0210987218, 0.0710981041, 0.0293173939, 0.0784483477, -0.0693333298, -0.0067395195, -0.0471001826, 0.0078799697, 0.0434194691, -0.0192647241, 0.0310587063, 0.0119020054, 0.0686374232, 0.0749677345, 0.0061167595, 0.0803225636, -0.0583086126, -0.0084689008, 0.0770676136, 0.0163948648, 0.0466701835, -0.0732369199, 0.0278015453, 0.0553505085, 0.0214104559, -0.0178100094, -0.0610811003, 0.0531062298, 0.0904571488, -0.0918049142, -0.0522807911, 0.0121616675, -0.0657254085, 0.0315376297, -0.0254516881, 0.0142650222, 0.0094817979, 0.0560536347, 0.0443432294, 0.0529437587, 0.0464584753, -0.0404291227, -0.0530662909, 0.0407694206, -0.0033816537, -0.0592659041, -0.0363700539, -0.0173168443, -0.0164248850, 0.0541285574, -0.0056592212, 0.0029903399, -0.0331541710, -0.0505193993, 0.0510904081, -0.0489105061, 0.0804050192, 0.0850403383, -0.0110582532, -0.0542854182, 0.0232187118, 0.0607698597, 0.0246068668, 0.0282274839, -0.0104653034, -0.0446590893, 0.0695562437, -0.0611592382, 0.0429876968, -0.0888595730, 0.0281529780, -0.0405622795, 0.0332650542, -0.0490635782, -0.0617397614, -0.0352154411, 0.0588780791, 0.0057265516, 0.0069457493, 0.0597859249, -0.0445424765, 0.0726163536, -0.0079340274, 0.0517521165, -0.0363047421, -0.0099679623, -0.0423882268, -0.0181016140, -0.0579705164, 0.0033127940, 0.0361469127, -0.0720460042, 0.0545881353, -0.0546762012, 0.0277761240, -0.0536464751, -0.0197759755, 0.0685325265, -0.0113233216, 0.0430648141, 0.0591527745, 0.0504046157, -0.0632677153, 0.0529597923, -0.0544148460, 0.0841295198, 0.0352349095, -0.0248009712, 0.0731973723, 0.0102873119, -0.0280225333, -0.0347246304, -0.0469414182, -0.0347027443, 0.0832660869, -0.0771426782, 0.0075470265, -0.0357357301, 0.0863665342, 0.0321520977, -0.0891982615, 0.0392839909, 0.0639979243, 0.0363163948, 0.0296687596, 0.0437736288, -0.0241241641, -0.0222982485, 0.0254923962, -0.0521206148, -0.0631962866, 0.0692689121, 0.0167734828, -0.0084337937, 0.0288748853, 0.0594615266, -0.0496465191, 0.1025488749, 0.0290928259, -0.0642264038, -0.0675143972, -0.0813557580, 0.0969780162, 0.0478579551, -0.0908485651, 0.0860455260, 0.0384438895, -0.0353603289, 0.0436110646, -0.0369978249, 0.0279483255, 0.0376402512, -0.0293079950, -0.0389594398, -0.0158886816, -0.0682581067, 0.0233721882, -0.0401610993, 0.0417545512, 0.0370368659, 0.0142419580, 0.0136343930, 0.0047609005, 0.0333507732, 0.0021828879, 0.0811225697, -0.0508703701, -0.0119536808, 0.0315750688, 0.0701830015, -0.0032845757, -0.0447807014, 0.0068132533, -0.0089744879, 0.0067106909, -0.0172720309, -0.0735089332, -0.0279390179, -0.0604835860, 0.0298172086, -0.0252764840, -0.0441254638, 0.0653323308, 0.0299310200, -0.0784463435, 0.0151804946, 0.0290224850, 0.0879732445, -0.0837490261, 0.0557821058, 0.0150984470, -0.0449738801, 0.0542210937, 0.0147793787, 0.0081363730, 0.0579238907, 0.0784540176, 0.0228911247, -0.0722051337, -0.0732279047, 0.0042659026, -0.0712992027, -0.0452375859, -0.0619345643, -0.0305296853, 0.0238433070, 0.0116115436, 0.0196880270, -0.0159520768, 0.0027941582, 0.0416962728, -0.0724337623, 0.0537122674, 0.0893626437, 0.0756897330, 0.0356656499, 0.0586895533, 0.0208215397, -0.0666898265, -0.0654062033, 0.0419024415, -0.0513953380, 0.0307202712, 0.0365405828, 0.0444516018, -0.0120725399, -0.0603246242, -0.0531564578, -0.0434579849, 0.0128450897, 0.0406601578, -0.0160607118, 0.0375354402, 0.0532210246, 0.0578887351, 0.0646163151, 0.0678767785, -0.0775744617, -0.0002098800, 0.0024842736, -0.0369208641, -0.0437377021, -0.0303637590, 0.0551276132, -0.0420938171, 0.0419466347, 0.0628821924, -0.0788568780, -0.0519816913, -0.0439981222, -0.0297330804, 0.0003451752, -0.0369170159, 0.0000789360, 0.0565673709, -0.0226509925, 0.0306814089, 0.0012125076, 0.1012161300, -0.0157325286, -0.0205391962, 0.0384593569, 0.0000189449, 0.0100612929, -0.0568729900, -0.0256596096, 0.0775330588, 0.0694167316, -0.0668158308, -0.0303785410, -0.0056766584, -0.0124860611, 0.0068400516, 0.0445197970, -0.0232747272, 0.0431646183, 0.0426748767, 0.0888417810, 0.0419780649, 0.0341707170, 0.0063924901, 0.0351997353, -0.0000769753, 0.0710294917, 0.0810670033, -0.0141524393, 0.0207727049, 0.0315782204, -0.0128454119, -0.0530344136, 0.0474953763, 0.0206534397, 0.0649734288, -0.0295450203, 0.0249635912, -0.0389880277, -0.0773014426, 0.0628274232, -0.0675912350, 0.0540694818, 0.0051846518, 0.0663477927, -0.0614167638, -0.0597107634, -0.0196074005, 0.0559291542, -0.0663214028, -0.0093095647, -0.0232308656, -0.0083390614, 0.0617812909, -0.0369913094, 0.0324978568, 0.0865442902, 0.0739589781, -0.0420650095, 0.0271109007, 0.0680402741, 0.0204755161, 0.0100619337, -0.0563159771, 0.0752683952, -0.0064297710, -0.0477357134, -0.0152679365, 0.0276628938, 0.0219773687, 0.0860925540, 0.0468703322, 0.0146688279, -0.0025959567, -0.0624678172, 0.0318011269, 0.0411847308, -0.0653045774, -0.0719874427, 0.0140904412, 0.0241979733, -0.0804853290, -0.0405844711, -0.0633212775, -0.0686136037, -0.0753942356, -0.0114314631, 0.0142140714, 0.0392675288, -0.0345776677, 0.0166839659, 0.0607131384, -0.0348420180, -0.0204983726, -0.0113900350, 0.0126402229, -0.0304585826, 0.0404976122, 0.0581949279, 0.0801984966, -0.0584457032, 0.0411759913, -0.0128770629, -0.0358972065, 0.0599065199, 0.0498181432, 0.0262224525, 0.0253293347, 0.0620442778, 0.0756263882, -0.0448636077, 0.0620629787, -0.0389804468, 0.0683960840, -0.0635042638, -0.0735090002, 0.0062884139, -0.0417041816, -0.0435914882, 0.0664273351, -0.0080266660, 0.0489501730, -0.0526119508, 0.0574160591, -0.0404303931, 0.0498950481, 0.0135865584, 0.0664765313, -0.0189303327, 0.0317829549, 0.0134462444, 0.0515570156, 0.0587055422, -0.0499198586, -0.0015492266, 0.0695943832, 0.0846139193, -0.0472311750, -0.0298742503, -0.0299692787, -0.0530301481, -0.0603472218, 0.0715435296, 0.0218917131, -0.0035423771, 0.0099608731, -0.0725967512, -0.0374672376, -0.0197715722, 0.0478481427, -0.0685427487, 0.0181355588, -0.0602570921, -0.0737469047, -0.0317998491, -0.0249808636, 0.0399113484, 0.0383413769, 0.0242961850, -0.0316264108, -0.0560667738, 0.0817855895, 0.0110750441, -0.0289831795, -0.0007898483, -0.0659639835, -0.0258130375, -0.0079371203, 0.0368738659, -0.0165944342, 0.0071060071, -0.0122753764, 0.0745492205, 0.0040053721, -0.0833178610, -0.0404956602, 0.0373057574, -0.0555416159, -0.0779568553, -0.0360176414, 0.0869584531, 0.0792085901, 0.0032416540, 0.0119217001, -0.0241159759, -0.0010409770, -0.0380882099, -0.0718071684, -0.0366992019, -0.0234111175, -0.0259972699, 0.0589955859, -0.0001739760, -0.0070897676, 0.0530297011, -0.0143842828, -0.0225915574, 0.0024117278, -0.0799304843, -0.0570918061, 0.0851539150, -0.0451506339, 0.0217461418, -0.0295474567, 0.0414792672, 0.0586002655, -0.0013730353, -0.0620750114, 0.0486846305, 0.0506685153, 0.0606372505, -0.0205595903, 0.0265057068, 0.0718757138, -0.0158511326, 0.0459494442, -0.0660938174, -0.0421981961, -0.0118960124, -0.0143059837, -0.0632011592, -0.0258841030, 0.0408776775, -0.0499169864, -0.0659075007, -0.0426237434, 0.0143245524, -0.0569664352, 0.0021132855, 0.0445557423, -0.0892009437, -0.0813646689, -0.0313785188, -0.0490019247, -0.0474773049, 0.0677064434, 0.0335159898, 0.0230339058, -0.0118638873, 0.0747793019, -0.0718147680, 0.0361104012, -0.0046505444, -0.0507363454, 0.0755019784, 0.0528314300, 0.0168782324, -0.0217039902, -0.0306164417, -0.0123446565, 0.0808553100, 0.0402929373, -0.0554893725, -0.0440827049, -0.0294158738, 0.0259655379, -0.0325448290, -0.0285637435, -0.0302378554, 0.0827417001, -0.0097470125, -0.0247003138, -0.0984855443, -0.0169296172, -0.0221176930, 0.0618998259, 0.0952025205, -0.0685011297, 0.0567881130, 0.0129477102, 0.0226934869, 0.0036609673, -0.0422724262, -0.0831174329, -0.0483670942, 0.0098212203, -0.0508100353, 0.0608155429, 0.0805922523, -0.0403522030, -0.0417399891, 0.0471515171, -0.0000790378, 0.0541589111, -0.0359220952, -0.0225377977, 0.0077696634, 0.0505010560, 0.0068809395, -0.0415384509, 0.0755123347, 0.0808872730, 0.0560603291, 0.0467741676, 0.0155551685, -0.0596349351, -0.0440951586, -0.0008532713, 0.0676670074, 0.0557836890, -0.0441546254, -0.0394976437, -0.0120112821, -0.0448590256, -0.0706721544, -0.0171777029, -0.0521034226, -0.0834203213, -0.0338664129, 0.0359239429, 0.1066552997, -0.0835418105, -0.0323739648, 0.0893520862, -0.0310453400, 0.0002579044, 0.0641739294, 0.0914789364, 0.0323778279, -0.0193119273, 0.0298794154, -0.0386417955, -0.0816266984, 0.0577145591, 0.0142959487, 0.0515409075, -0.0056461333, -0.0646958575, -0.0545371547, 0.0177216567, 0.0053401506, 0.0372436903, 0.0707117170, 0.0415683798, -0.0577891357, -0.0127351740, 0.0025374256, -0.0629258826, -0.0225263536, 0.0727700368, 0.0312935822, 0.0164387096, -0.0374795459, -0.0788275450, -0.0341514014, -0.0359038413, 0.0267054886, -0.0411381051, 0.0698034763, 0.0303086210, 0.0570221394, 0.0123656830, -0.0716884360, 0.0169651415, 0.0654025078, 0.0706648454, -0.0125616156, 0.0606423579, 0.0256165061, -0.0354502648, 0.0282534286, -0.0079858713, 0.0526705198, 0.0668710247, 0.0595835038, -0.0974919498, 0.0454326756, 0.0103313979, -0.0896766707, -0.0724218041, 0.0296016019, -0.0146297831, 0.0548595078, 0.0136540020, -0.0431216806, -0.0673758686, -0.0123214107, 0.0975754634, -0.0512256771, -0.0909062251, 0.0238884762, 0.0078936536, 0.0337737165, 0.0675328225, -0.0568176769, -0.0085109947, -0.0340287536, -0.0409072414, 0.0022344135, 0.0627140403, -0.0809103027, -0.0855012909, 0.0154207358, 0.0611364134, -0.0736977905, -0.0781135634, 0.0715580806, -0.0138406437, -0.0035364463, -0.0586500540, 0.0496336222, 0.0600719638, 0.0716364756, -0.0698176250, 0.0601652190, 0.0819634050, 0.0173362680, -0.0171893798, 0.0185292903, -0.0004044863, -0.0347588472, 0.0526368581, -0.0268804003, -0.0472119115, -0.0489885062, 0.0087543856, -0.0501315966, -0.0291498750, -0.0168647785, 0.0640802830, 0.0127972020, 0.0327669270, 0.0491595529, 0.0439012907, 0.0551329292, 0.0810925737, 0.0138376225, -0.0653423741, -0.0801450312, -0.0522758439, -0.0628565997, 0.0743158981, -0.0455955639, 0.0100830356, -0.0037450804, -0.0548624098, -0.0163476784, -0.0208123624, 0.0610332750, 0.0642500669, -0.0033090783, 0.0270634517, 0.0433992296, -0.0309788715, 0.0484915003, -0.0394819677, 0.0701735318, 0.0309066921, -0.0586952865, -0.0885474831, -0.0328319855, -0.0685299858, 0.0198244676, 0.0507825240, -0.0564762838, 0.0504100211, 0.0502879843, -0.0106275901, -0.0035495297, 0.0110247703, 0.0759865791, 0.0585860386, 0.0299015772, 0.0787632167, -0.0128230359, 0.0592876524, -0.0500672646, 0.0289305467, 0.0360926948, -0.0283155739, -0.0086521413, 0.0484808572, 0.0097664427, -0.0259483457, 0.0086114015, 0.0411679968, -0.0791824684, -0.0500480644, 0.0269258749, -0.0555846468, -0.0246284995, -0.0333704501, 0.0591523834, 0.0722156167, -0.0547319688, -0.0179460794, -0.0390310101, -0.0084974794, 0.0779318139, -0.0573560037, 0.0734513327, -0.0133502679, -0.0300658438, 0.0579524748, 0.0735197589, -0.0174917765, -0.0283855330, 0.0474990644, 0.0896564499, 0.0397966020, 0.0720830634, -0.0095601724, 0.0099851768, 0.0500193089, -0.0084129293, 0.0384957455, 0.0612907968, 0.0436478481, -0.0398878045, 0.0135920038, 0.0648399144, -0.0774205029, -0.0089705391, 0.0424468592, -0.0011090470, -0.0095792813, 0.0545944981, -0.0057434137, -0.0190557633, 0.0473551378, -0.0648553073, 0.0100708744, 0.0482773259, 0.0125183892, -0.0411291234, -0.0001510068, 0.0044807382, -0.0906020552, 0.0327807516, 0.0634538084, 0.0629997849, -0.0254868809, -0.0168612525, -0.0291565526, 0.0691714138, 0.0100602955, -0.0735972002, -0.0585354008, 0.0244523231, -0.0486154445, -0.0480210744, -0.0196450930, 0.0309222694, -0.0180263668, 0.0166051500, -0.0615334548, -0.0774031654, 0.0280372649, 0.0035359850, 0.0648265928, -0.0684625059, -0.0339470878, 0.0373894460, -0.0713624135, -0.0543676876, 0.0989333391, 0.0418744422, -0.0285116844, -0.0331432708, 0.0992199630, -0.0508502722, -0.0516350083, 0.0612228028, -0.0369182751, 0.0570191294, 0.0537816249, 0.0075271600, 0.0146505143, -0.0674901977, -0.0257658493, -0.0529108122, 0.0724018142, -0.0235125944, -0.0685540214, 0.0178897846, 0.0431835055, -0.0062664906, 0.0467925631, -0.0146787986, -0.0125865089, -0.1008744761, 0.0298981424, 0.0282738563, -0.0631864518, 0.0170412660, -0.0033034519, -0.0737985671, -0.0208270792, 0.0105991196, 0.0607899241, -0.0582841039, 0.0288070217, 0.0678693652, 0.0511621200, -0.0776333287, 0.0331027135, -0.0714523718, 0.0645016357, 0.0265902374, 0.0425719731, -0.0589984246, -0.0123718465, -0.0720042288, 0.0660365671, 0.0486691222, -0.0344407521, 0.0651143044, -0.0521800108, -0.0458885767, -0.0441606194, -0.0512822270, 0.0683757737, 0.0607144721, 0.0578014664, 0.0304964073, 0.0546640828, -0.0583391525, 0.0512186289, -0.0161871351, 0.0607896335, -0.0378272235, -0.0114090843, -0.0754788294, 0.0721912086, 0.0248526707, -0.0017016596, 0.0049242876, 0.0717123225, 0.0376049355, 0.0548162013, 0.0479180403, 0.0491150841, 0.0811774954, -0.0424325764, -0.0783213526, -0.0459738560, 0.0513754785, -0.0077928854, -0.0163949858, 0.0314311422, 0.0161296427, 0.0232040025, 0.0073102382, 0.0477481149, 0.0006202707, 0.0140251331, -0.0772512257, 0.0424616523, 0.0345436186, -0.0786212459, -0.0896600783, 0.0913332030, -0.0380131640, 0.0307039190, -0.0306137204, 0.0961641222, -0.0275959838, 0.0940361917, 0.0438216962, -0.0563471988, -0.0590114556, 0.0302718915, -0.0290325209, 0.0137616582, 0.0476794429, 0.0493073836, 0.0006853152, -0.0049192971, 0.0206387099, 0.0392883793, 0.0685123205, -0.0232080333, -0.0520386882, -0.0959668979, -0.0056808074, 0.0713832974, -0.0434989929, -0.0499803461, 0.0534569174, 0.0656113327, 0.0221495759, -0.0085472781, 0.0349793248, -0.0618945882, -0.0325811468, -0.0363345258, 0.0507973656, 0.0200529341, 0.0770957693, -0.0082498714, 0.0498968847, -0.0534400381, 0.0026587429, -0.0575183854, -0.0708708316, -0.0411906689, -0.0094961310, -0.0493303165, -0.0844624639, -0.0704910457, -0.0686711296, -0.0159416553, -0.0474513508, 0.0117773451, 0.0122877471, 0.0263734385, -0.0303438287, -0.0707261264, 0.0315480269, -0.0709037185, 0.0503882132, -0.0373611413, -0.0753266066, -0.0356949866, -0.0309012216, -0.0161261279, -0.0669667721, -0.0955541581, 0.0680533126, -0.0360568874, 0.0351067260, 0.0423248820, -0.0598763153, -0.0455586277, -0.0271666590, -0.0797265917, -0.0412195809, -0.0475287586, -0.0785207897, -0.0354267247, -0.0729056671, 0.0737843364, 0.0286718607, -0.0533152185, 0.0747798681, 0.0628098175, 0.0639783144, 0.0015167377, 0.0300312508, -0.0563448146, 0.0068976791, 0.0675004944, 0.0136088151, -0.0334021896, -0.0383873582, -0.0224518571, 0.0338830315, -0.0217918698, -0.0803744718, -0.0239686016, -0.0140874134, -0.0790876746, 0.0099701071, -0.0407425612, -0.0125925383, 0.0418247208, -0.0458852872, -0.0199458301, 0.0128900660, -0.0260712262, -0.0516886897, 0.0304543134, -0.0553993322, -0.0426233932, -0.0747905001, 0.0304365903, -0.0882871076, 0.0061809099, -0.0678882971, 0.0505286828, 0.0733826011, 0.0061193514, 0.0482373908, -0.0204250701, 0.0204970594, -0.0064128162, 0.0480414554, 0.0511573181, -0.0741126463, 0.0392207727, 0.0417502336, -0.0296086203, 0.0021633238, -0.0623390265, -0.0416789614, 0.0477778912, 0.0733737871, 0.0149331233, -0.0245346185, -0.0779419020, 0.0496067889, -0.0274038762, 0.0603774115, 0.0247308556, -0.0781195089, 0.0212671235, -0.0532382093, -0.0018424762, -0.0011614744, -0.0632765889, -0.0549776219, 0.0260188971, 0.0887036920, 0.0518929437, 0.0555955656, 0.0371423811, -0.0004756852, 0.0483363122, -0.0582390390, -0.0136396065, 0.0707802922, 0.0339365564, 0.0679869577, 0.0711113662, 0.0312746465, 0.0198665224, 0.0309414212, -0.0437618494, 0.0779595599, -0.0444291271, 0.0384093113, 0.0307277851, -0.0007624181, -0.0462638438, -0.0660547093, 0.0295186192, 0.0402696244, -0.0690470710, -0.0532679856, -0.0665741488, -0.0337254480, 0.0465673096, -0.0427073240, -0.0201948434, 0.0195763670, -0.0167338215, 0.0383478925, -0.0866434351, 0.0166938063, 0.0718708783, -0.0148042710, 0.0296193343, 0.0144043332, 0.0416906774, -0.0575609654, 0.0720336437, -0.0565896854, 0.0920153409, 0.0491379611, 0.0657983571, 0.0586958602, 0.0493731052, -0.0634603277, 0.0160466563, -0.0142413238, -0.0177368056, -0.0798413977, -0.0640362650, -0.0481961109, 0.0398632623, -0.0835529491, -0.0037740832, 0.0196155887, -0.0086616613, -0.0251125954, 0.0313940533, -0.0269853156, 0.0426696204, -0.0238171518, -0.0300117675, -0.0473367758, 0.0176968239, -0.0003875690, -0.0290457737, -0.0061656195, 0.0170294531, -0.0380276665, 0.0008697996, -0.0661922768, -0.0043552872, -0.0213710796, 0.0070160739, -0.0360951424, -0.0080159549, 0.0083591286, -0.0031617633, -0.0726076141, 0.0745180547, 0.0121348128, -0.0703061670, 0.0644631907, -0.0109787211, 0.0691791326, -0.0823011249, 0.0222818311, 0.0279488638, -0.0670573488, -0.0254240185, -0.0468148477, -0.0449683703, 0.0263870880, -0.0762160048, -0.0583313741, 0.0459448658, 0.0004757175, -0.0418035239, 0.0322742984, 0.0689365268, -0.0255012233, -0.0182241276, -0.0818080604, -0.0211536419, -0.0191852469, -0.0541142374, -0.0040354352, -0.0303021204, -0.0531937890, 0.0591937453, -0.1064640954, 0.0819839761, -0.0213212427, -0.0278395619, 0.0594267026, 0.0058704000, -0.0272767246, 0.0026722597, 0.0025804159, -0.0493035577, 0.0285902508, -0.0035152682, -0.0157955363, 0.0681831688, 0.0492085069, 0.0517423339, -0.0552009940, -0.0818979368, -0.0078424877, -0.0371910706, -0.0272037443, -0.0238702185, 0.0423242189, -0.0601723902, -0.0916565061, -0.0123248147, -0.0698235780, -0.0376139767, 0.0351885222, -0.0172494221, 0.0622729771, 0.0823166072, -0.0782233477, -0.0583840422, 0.0641269535, 0.0305522028, -0.0697824210, -0.0647628829, 0.0151367616, 0.0435109995, 0.0521788262, 0.0333411507, -0.0020422135, -0.0164789297, -0.0725509301, -0.0394756384, -0.0077846400, 0.0770757198, 0.0416530296, -0.0195375383, -0.0474520698, -0.0663434714, 0.0344163775, 0.0492129810, 0.0525273420, -0.0232667662, 0.0022774118, 0.0473895930, 0.0246520415, -0.0645225868, 0.0067168153, 0.0223209485, 0.0088094231, -0.0561851822, 0.0312312692, -0.0898470432, 0.0549985357, 0.0704510435, -0.0384119041, 0.0008546400, -0.0487639867, 0.0466630794, -0.0293931570, -0.0079050884, -0.0008759820, 0.0077103069, -0.0727696940, -0.0430654809, 0.0409402736, -0.0040182411, -0.0028549812, -0.0408103429, 0.0430579334, -0.0194057450, 0.0038401252, 0.0162488613, -0.0307449792, -0.0316712596, 0.0233335420, 0.0741419196, 0.0173196327, -0.0094875628, 0.0398523919, 0.0624152087, -0.0012600994, -0.0497873761, -0.1013024971, 0.0231727883, 0.0998787880, -0.0216378644, -0.0672931373, -0.0534501225, -0.0476834662, -0.0630735010, -0.0641021729, 0.0090462817, 0.0021308879, -0.0283667147, -0.0505199991, -0.0447241478, -0.0341491587, -0.0656437874, -0.0593544021, 0.0081390720, -0.0644753128, -0.0576435588, 0.0546866059, -0.0474737473, -0.0059807394, 0.0398704447, -0.0416637510, -0.0468901731, -0.0445111133, 0.0629836246, -0.0791192800, -0.0039383140, 0.0687172338, -0.0480779223, -0.0779779255, 0.0479328893, 0.0136962384, -0.0010446673, 0.0415403545, 0.0519864783, -0.0488425940, -0.0002902262, -0.0086415512, -0.0244841855, 0.0214363970, 0.0937280953, -0.0581395105, 0.0711246952, -0.0506184436, 0.0007904033, -0.0315570049, 0.0019649169, -0.0411059260, 0.0612385161, 0.0426779613, -0.0349481367, 0.0146343885, 0.0131933773, -0.0281379893, 0.0015540856, -0.0502011180, 0.0386492349, 0.0764377415, 0.0764836743, 0.0623337142, 0.0814060345, -0.0151979346, -0.0443092585, -0.0101654632, 0.0431728624, 0.0908227265, -0.0609372072, 0.0760226771, 0.0770460740, 0.0280290954, -0.0362052135, 0.0547481701, 0.0237065256, 0.0018283611, 0.0147557156, 0.0369637012, 0.0376726165, -0.0789850578, 0.0606700182, -0.0500558838, 0.0890113637, -0.0226659440, 0.0074036382, -0.0814461112, -0.0251781270, -0.0375806689, 0.0104445629, -0.0272019114, -0.0882407725, -0.0124205304, 0.0373668373, -0.0035888210, 0.0357565656, 0.0453308336, -0.0369546749, 0.0331097580, 0.0534284897, -0.0572246872, 0.0006675698, -0.0008281931, -0.0136224953, 0.0912278965, 0.0355149917, -0.0297365244, 0.0490967147, 0.0009189856, -0.0621339791, 0.0580312870, -0.0523394831, 0.0302710850, 0.0044657644, -0.0170773212, 0.0929573700, -0.0096197324, -0.1018240303, -0.0395152569, 0.0440483019, -0.0561360531, -0.0144163873, 0.0138741927, -0.0034937225, -0.0385250524, -0.0204929728, -0.0095248017, 0.0187571477, -0.0141641414, 0.0009185770, -0.0349607021, -0.0476411059, 0.0625743344, 0.0487804562, -0.0509433784, -0.0372659564, 0.0088866986, -0.0649400651, -0.0454922467, 0.0626393557, 0.0929493979, 0.0624018908, 0.0022861424, -0.0136870984, 0.0653893352, -0.0378024690, 0.0170898978, 0.0070815836, 0.0299686734, -0.0013884905, -0.0657392666, -0.0365229659, 0.0347050428, 0.0038953780, -0.0389371663, 0.0430400744, -0.0375717953, -0.0187904220, -0.0596337095, -0.0364499986, 0.0208943784, -0.0782856643, 0.0524037108, 0.0596681722, 0.0254576802, -0.0420366786, -0.0253051706, -0.0436363593, -0.0544123203, -0.0334103443, 0.0260830764, 0.0878723264, 0.0051377225, -0.0625956208, 0.0257085506, -0.0693044290, -0.0019557541, -0.1010919586, -0.0286094602, 0.0563900881, 0.0860573426, -0.0796838328, -0.0078575751, -0.0180625170, -0.0341007449, 0.0349405482, 0.0528875329, -0.0435001403, -0.0019603120, 0.0055329809, -0.0507565364, -0.0153112467, 0.0794605091, 0.0382667817, 0.0649487972, 0.0761753321, 0.0320078619, -0.1088834479, 0.0603169017, 0.0527841002, 0.0471636653, 0.0319048129, -0.0876017883, 0.1101504564, 0.0051700198, 0.0269380361, -0.0230415557, 0.0344497524, -0.0475818552, -0.0398916192, 0.0899721906, 0.0049055680, -0.0348725617, -0.0431302972, 0.0055583804, -0.0626070276, 0.0267617498, -0.0632426515, -0.0475814156, 0.0127531718, 0.0202126503, 0.0705482587, 0.0177147146, 0.0310852211, 0.0748974159, 0.0678605437, -0.0466782823, -0.0338253751, 0.0593657084, -0.0966750607, 0.0136261182, 0.0691725463, 0.0993926600, 0.0125131141, -0.0519876294, 0.0461836942, 0.0974723548, 0.0061186049, 0.0044662119, -0.0678984821, 0.0019984313, -0.0656565130, 0.0252515636, 0.0970866010, 0.0042794575, -0.0325865559, -0.0075410078, 0.0736828223, -0.0161718037, -0.0100009488, -0.0254570749, -0.0227834340, -0.0551770329, 0.0649079382, 0.0785996988, 0.0205689296, 0.0832108930, 0.0366359577, -0.0076979431, 0.0623018518, -0.0192302503, -0.0509394668, 0.0556812510, -0.0780591890, 0.0864653662, 0.0682070628, 0.0021570846, -0.0076478207, 0.0345116258, -0.0554073229, 0.1039037928, -0.0281262510, -0.0491538420, 0.0076945969, 0.0261309166, 0.0017971434, 0.0996596441, -0.0741993561, -0.0667690560, 0.0174582750, 0.0307840612, 0.0746283531, -0.0540328324, -0.1132471785, 0.0136165330, 0.0143942954, 0.1164261326, -0.0420078225, 0.0287784431, -0.0505615994, -0.0102636470, 0.0456319079, 0.0685038194, -0.0281066224, 0.0995747969, 0.0576413572, 0.0553386398, 0.0539890192, 0.0859781802, 0.0118815368, 0.0518112853, 0.0626564100, 0.0250178911, 0.0586364828, 0.0240056720, -0.0543193556, -0.0494643599, -0.0521568954, -0.0222394411, 0.0018480415, 0.0131766200, 0.0409277380, 0.0181726292, 0.0278741345, 0.0102302078, -0.0609671324, 0.0711917132, 0.0142023228, -0.0445511267, 0.0119817657, 0.0913134813, -0.0428088047, 0.0363950729, 0.0840808377, -0.0374400951, -0.0491635054, 0.0311648343, 0.0027638350, 0.0341238901, 0.0322093517, -0.0164594371, -0.0148832370, -0.0681582466, 0.0594562478, 0.0769847333, -0.0005621079, -0.0710064173, 0.0085410848, -0.0422544368, -0.0211979095, 0.0882815421, -0.0278117731, -0.0749361217, -0.0905942395, 0.0555132031, 0.0093131848, -0.0856560618, -0.0194426533, -0.0045934794, 0.0401486047, 0.0725878328, 0.0011582321, -0.0248903371, -0.0518421493, -0.0288534854, 0.0730937049, -0.0075482046, -0.0380149633, -0.0517210662, 0.0231657047, 0.0505832173, 0.0145345405, 0.0594457351, 0.0345229171, 0.0245734397, -0.0443078578, -0.0356699899, -0.0431157574, 0.0478419550, -0.0802842900, -0.0226820875, -0.0460254103, -0.0486011952, -0.0754005983, -0.0332952961, -0.0142252482, -0.0324923731, -0.0331424922, 0.0491678454, 0.0571499616, -0.0802323297, -0.0169900022, 0.0825548172, 0.0171503164, 0.0859474838, 0.0436921120, 0.0024697969, 0.0843998194, -0.0056022238, 0.0327980742, 0.0832083523, -0.0645076558, 0.0874359161, 0.0710888579, 0.0051382435, 0.0833956227, 0.0583135746, 0.0226797052, 0.0933707356, 0.0016852713, -0.0558722466, 0.0239526834, 0.0201941449, 0.0800053701, -0.0428818539, -0.0477403961, 0.0312088616, 0.0051065744, -0.0289821457, 0.0027287882, -0.0289895497, -0.0843308643, -0.0444635376, 0.0185663030, -0.0356134363, 0.0579659604, -0.0738411844, 0.0090793958, -0.0563251525, -0.0460748188, -0.0564524308, 0.0253327843, -0.0003888054, -0.0167080965, 0.0414381102, -0.0511413440, -0.0206963420, -0.0394512080, -0.0272354241, -0.0409894809, 0.0906055793, 0.0835960507, -0.0810043439, -0.0943342820, 0.0596274287, 0.0251920205, 0.0853513926, -0.0013140666, -0.0550784133, 0.0503451303, 0.0024801530, -0.0265229624, -0.0459047258, -0.0089700734, -0.0200207438, 0.0047818050, -0.0227482226, -0.0029210306, -0.0223306026, -0.0113513162, -0.0307192653, -0.0312975906, 0.0385597982, 0.0453611314, -0.0526926965, 0.0214039646, 0.0358165763, 0.0602792241, 0.0140406359, 0.0248798653, 0.0344963074, -0.0533659793, 0.0110264858, 0.0832786635, -0.0547413230, -0.0592929050, 0.0437581465, 0.1079248935, 0.0717638582, -0.1150822341, 0.0378625579, 0.0199666712, -0.0794727877, 0.0949195400, -0.0038374064, -0.0876111165, -0.0544277243, -0.0428042263, 0.0436293930, 0.0901663229, 0.0291224942, 0.0361240320, -0.0580896996, -0.0320334472, 0.0485673770, -0.0037393421, 0.0354146995, 0.0100739505, 0.0334017836, 0.0998504981, -0.0707808509, 0.0455643497, -0.0538544767, 0.0890560448, 0.1048463136, 0.0876665637, -0.0493339263, -0.0520747900, -0.0046923603, 0.0608712956, 0.0773333460, 0.0000169920, -0.0639644191, 0.0324015766, -0.1157265604, 0.0417427756, -0.0033611609, -0.0828664526, -0.0121571142, -0.0390600115, 0.1041490063, -0.0407209620, 0.0740480423, 0.0465761945, 0.0229808614, 0.0676466897, -0.0373369381, 0.0505138412, 0.0531368069, -0.0864740312, -0.0247858241, -0.0093507534, -0.0797706395, 0.0781976283, -0.0066061690, 0.0147408051, 0.0534494035, 0.0616291761, -0.0628664792, -0.0023400947, -0.0250955820, -0.0429066420, 0.0718395039, -0.1190553904, 0.0415509231, 0.0302723292, -0.0535239987, 0.0263269432, 0.0576276481, 0.0130831972, -0.0504700206, -0.0538556091, 0.1163657233, -0.0403858684, 0.0178376343, -0.0590756088, -0.0157957245, 0.0715023950, 0.0806026310, -0.0911874697, 0.0326967537, 0.0836926624, 0.0035952281, 0.0119643649, -0.0629883632, 0.0694586560, -0.0151899578, -0.0589873567, 0.0447396226, -0.0209977310, -0.0609069020, -0.0523785949, -0.0621553212, -0.0468899868, 0.0932910144, 0.0474226102, 0.0182117168, -0.0517612845, 0.0195068531, 0.0574866720, -0.0681716129, 0.0043998701, -0.0528583676, -0.0252560806, 0.0238469169, 0.0059197964, 0.0714033842, 0.0152828656, 0.0482964776, 0.0132306209, 0.0758104473, 0.0239841901, 0.0166715644, 0.0042415918, -0.0578701533, -0.0710617900, -0.0678737983, 0.0036045150, 0.0260936767, -0.0411748551, -0.0242938679, -0.0375434905, -0.0150705054, -0.0349168889, 0.0539968945, 0.0744728222, 0.0364163220, -0.0286393352, -0.0628558546, 0.0431123972, -0.0492586344, -0.0323803872, 0.0467073731, 0.0717988163, 0.0686544999, -0.0305929016, 0.0704635233, 0.0030960215, 0.0093438625, -0.0686186627, 0.0650300533, 0.0689355880, 0.0640082061, 0.0660021901, -0.0593839400, 0.0565467477, 0.0847852901, -0.0304194037, 0.0625898913, -0.0141341025, -0.0658523366, -0.0283179972, 0.0442178845, -0.0473166481, -0.0554337539, 0.0841699466, -0.0294448603, -0.0150345974, -0.0165654160, -0.0650701597, 0.0039172904, -0.0401047617, -0.0620027147, -0.0870335400, -0.0609410144, 0.0828197151, 0.0514948368, 0.0561205782, -0.0831119195, 0.0690496713, 0.0527931601, -0.0673577860, 0.0333920866, 0.0356261022, 0.0022821713, -0.0763016194, -0.0237420965, -0.0523738600, -0.0165229160, -0.0630884469, 0.0504939668, 0.0795914754, -0.0415813997, 0.0323164277, 0.0741652101, 0.0741308406, -0.0313817896, 0.0434684977, -0.0480513945, -0.0666949302, -0.0225601122, -0.0092496909, -0.0376821645, 0.0324304923, 0.0110576879, 0.0680391043, 0.0312452074, 0.0238798689, 0.0015128745, -0.0137375602, 0.0497630648, 0.0014120553, 0.0152020836, -0.0146535309, -0.0569180772, 0.0313499495, -0.0230681375, -0.0701739267, -0.0141371069, 0.0319676921, -0.0841038525, 0.0569724105, 0.0379442275, -0.0677607805, -0.0697952956, 0.0266301706, -0.0088557787, 0.0600930601, 0.0004566366, -0.0242734365, -0.0190129708, 0.0768551677, -0.0209603235, -0.0639850348, 0.0686690807, -0.0957306847, -0.0786239877, -0.0274509415, 0.0422632918, 0.0477674119, 0.0082833087, -0.0450659506, 0.0020901284, -0.0207358859, -0.0736523792, 0.0732918307, 0.0323803350, 0.0341730155, -0.0524216257, 0.0499918722, 0.0720288679, 0.0054795034, -0.0404955857, 0.0572014712, -0.0229199380, -0.0544211566, -0.0199749507, 0.0415659212, 0.0427812152, -0.0457281917, 0.0242980886, -0.0719312578, 0.0464663580, -0.0309913605, -0.0403484255, 0.0195255186, -0.0855097547, 0.0000970511, -0.0349423476, 0.0026427659, -0.0440660976, -0.0869830996, -0.0533346869, -0.0470358431, -0.0552757420, -0.0320466869, 0.0866460055, 0.0067596170, -0.0785493180, -0.0163850039, 0.0109548597, -0.0881599262, -0.0661749467, -0.0108512910, 0.0170513801, 0.0821576938, -0.0437757336, 0.0840232447, -0.0504416488, 0.0388020426, -0.0111536076, -0.0003480162, 0.0063534202, -0.0512733459, 0.0413021594, 0.0473251976, 0.0396444574, 0.0596269965, 0.0619070679, -0.0069900313, 0.0481343605, -0.0422831960, -0.0727176219, -0.0109112430, -0.0767745376, -0.0134250103, -0.0290696900, 0.0241691787, 0.0035002902, -0.0772036314, -0.0549390242, 0.0536114872, 0.0017894257, -0.0174340829, 0.0897489190, -0.0495530516, -0.0202480890, 0.0131633477, -0.0150361415, 0.0533150658, -0.0175580401, 0.0569607094, -0.0142667089, 0.0087743290, -0.0439768285, 0.0624291375, 0.0929469913, 0.0837951526, -0.0381118767, -0.0713703111, -0.0035767418, -0.0807985589, -0.0843850449, -0.0674419105, -0.0180699397, -0.0905490071, 0.0290253907, -0.0380251557, -0.0351795405, -0.0385460965, -0.0620294735, -0.0532330945, -0.0151552698, -0.0402539149, -0.0446650200, -0.0774049461, -0.0668281391, 0.0692708418, -0.0111930612, 0.0880327746, -0.0230935737, 0.0733852834, 0.0156438407, 0.0811632723, 0.0781226978, 0.0099236146, -0.0229970627, -0.0020474866, 0.0252824854, -0.0304929242, 0.1048517972, -0.0880629048, -0.0813222229, -0.0491277874, -0.0901434422, -0.0330529697, -0.0221556257, -0.0913853720, 0.0784713551, 0.0189513955, 0.0473659858, 0.0706102178, 0.0815626681, -0.0401288569, -0.0111672869, 0.0408801809, 0.0377816781, -0.0232666023, 0.0010726909, -0.0724681690, -0.0772825927, -0.0391953625, 0.0577352382, -0.0577486455, 0.0564605482, 0.0145065188, 0.0028156764, -0.0779522657, 0.0394276679, 0.0298125129, 0.0386235863, -0.0549521670, 0.0737605691, -0.0805324018, 0.0301970150, -0.0262951534, -0.0280608963, -0.0114737228, -0.0507260151, -0.0337120369, 0.0621066391, 0.0173963923, -0.0049864049, -0.0271455944, 0.0620619543, 0.0094378917, -0.0040313359, -0.0255162846, 0.0453122295, -0.0080768820, -0.0158804096, 0.0537812375, -0.0452349298, 0.0842271671, -0.0438614152, -0.0085774902, 0.0179382209, 0.0267306902, -0.0492489748, -0.0451829024, -0.0912370756, -0.0514805615, -0.0777198151, -0.0003887904, -0.0370373353, 0.0163194891, -0.0214553289, -0.0804490000, 0.0594854169, 0.0716458410, -0.0072225239, -0.0147303985, -0.0740639418, -0.0047515118, 0.0000821008, 0.0465743467, 0.0662328675, 0.0336015411, -0.0772908553, -0.0292684995, -0.0745197535, 0.0455877036, -0.0087364689, 0.0170266926, -0.0582437627, -0.0042719604, 0.0121736666, -0.0465695299, 0.0578445010, 0.0689341649, -0.0710119084, -0.0854460001, -0.0751754344, 0.0850924775, -0.0091883428, -0.0295321681, -0.0849405229, 0.0492652021, 0.0751995370, -0.0251834095, -0.0711103454, 0.0083140228, 0.0576945394, 0.0357356593, -0.0191620197, 0.0026487522, -0.0133375432, -0.0751237720, 0.0569204576, -0.0009406956, 0.0692134649, -0.0802379027, -0.0784744769, -0.0318550989, 0.0376245454, 0.0040595117, 0.0636226386, -0.0677353442, -0.0118245371, -0.0305266809, -0.0102205668, -0.0585589334, -0.0713193119, 0.0609914362, -0.0239297282, 0.0771933720, -0.0423861183, -0.0097172344, 0.0174443163, -0.0651396364, -0.0067757135, -0.0886181369, 0.0307452623, -0.0679759607, 0.0222764425, 0.0024594958, 0.0121084731, -0.0420975573, 0.0037603739, 0.0367380716, 0.0491652600, -0.0640968904, 0.0689066947, -0.0588904917, 0.0307101645, 0.0946048796, -0.0205966830, -0.0208791364, 0.0479713790, 0.0716622099, 0.0841647089, 0.0570504367, 0.0615286715, -0.0712146536, -0.0965736955, 0.0855619833, -0.0020113429, -0.0630498007, -0.0491134860, -0.0072901072, 0.0467885286, 0.0610218979, -0.0558530018, 0.0340882726, 0.0301982909, 0.0194549523, -0.0454920046, -0.0087110316, -0.0788023993, 0.0318133533, -0.0990396664, -0.0633023754, 0.0816751346, 0.0334318578, 0.0351076312, 0.0046665175, -0.0844477564, 0.0407390185, 0.0281932261, -0.0563090555, 0.0440135486, -0.0391671546, -0.0650504008, 0.0195407905, -0.0818996802, 0.0540460870, 0.0050898260, 0.0564906336, 0.0512214303, 0.0962283388, -0.0131352032, 0.0295202993, -0.0104896501, 0.0069877454, -0.0466183834, -0.0473754443, 0.0868198052, -0.0816502199, 0.0222721063, -0.0567165352, -0.0701531544, 0.0156380069, -0.1049960628, 0.0269977674, 0.0574196875, 0.0315796733, -0.0512741394, 0.0025854555, 0.0124066696, 0.0657773912, 0.0536423884, 0.0122740725, -0.0343887545, 0.0541265421, -0.0162548088, 0.0165725350, -0.0132417604, -0.0823579431, 0.0434652008, -0.0025219098, -0.0492605828, -0.0197208673, 0.0668401644, -0.0858188868, -0.0912343413, 0.0675031692, 0.0673481524, -0.0257123876, 0.0662869066, -0.0751360729, -0.0350259915, 0.0406580642, -0.0240919534, 0.0494669490, -0.0780378282, 0.0566207059, -0.0657166839, -0.0038783893, -0.0001844553, 0.0121883908, -0.0724453926, 0.0767817125, -0.0941926762, 0.0606509373, -0.0010428523, -0.0374038182, 0.0153506892, 0.0178057197, -0.0696512684, -0.0871998817, 0.0433016792, 0.0064003845, 0.0833158940, -0.0297021456, 0.0266008992, 0.0482686497, -0.0626919717, -0.0036952642, 0.0939206183, 0.0083636120, 0.0186700597, 0.0177904647, -0.0202708859, 0.0798449740, 0.0016531961, 0.0294019692, 0.0509892143, -0.0461601242, -0.0042699333, -0.0640874356, -0.0430627130, -0.0628931150, -0.0185939278, 0.0934891924, -0.0837174878, -0.0663968474, -0.0301090889, 0.0289575029, -0.0081324093, -0.0441830419, 0.0493012555, 0.0280698556, -0.0376403965, 0.0120402882, -0.0273851622, -0.0345871896, -0.0497419350, -0.0201903488, -0.0743209794, 0.0996519551, 0.0784529597, 0.0714644045, -0.0571694784, 0.0663446411, 0.0755257756, 0.0470867157, -0.0602250211, 0.0292114969, -0.0125838127, -0.0126941623, -0.0581554361, -0.0532007739, -0.0061144233, -0.0607421845, 0.0247219186, 0.0224108081, -0.0833347291, -0.0407465883, -0.0002732426, -0.0716101676, 0.0809392929, -0.1024951637, -0.0901391953, 0.0395514108, -0.0485468619, 0.0335711278, -0.0033602684, -0.0352009796, 0.0677718148, -0.0323192254, -0.0668208450, -0.0393580236, -0.0444544442, 0.0689696893, -0.0144180236, 0.0104477014, 0.0786674991, -0.0265763942, -0.0179194473, -0.0703799203, 0.0271063466, 0.0687845275, -0.0055368738, -0.0605695285, 0.0566807762, -0.0983523503, -0.0566572659, -0.0461547337, 0.0208223127, 0.0123500582, 0.0376347788, -0.0030204696, 0.0328601375, 0.0674499273, 0.0682552531, -0.0337887593, 0.0438671038, 0.0358229317, -0.0388671085, -0.0601908304, 0.0168751553, -0.0730613694, 0.0449813716, 0.0894471034, 0.0190855078, -0.0359231383, 0.0487455763, 0.0641904399, -0.0656405240, -0.0486931205, -0.0546249337, 0.0604781434, 0.0485392138, 0.0682903230, -0.0086258454, 0.0391854048, 0.0196627975, 0.0569089763, -0.0858547240, -0.0313969813, -0.0723335296, 0.0037891953, -0.0299716983, -0.0329458080, -0.0602387786, 0.0333418027, 0.0804086700, 0.0162158553, -0.0239026938, 0.0248092785, 0.0056054108, -0.0360487439, -0.0211134274, -0.0601226464, -0.0759452283, 0.0265614036, 0.0257742479, -0.0232329145, -0.0690726414, -0.0439912677, -0.0211151969, 0.0469079465, -0.0493382849, -0.0727873892, 0.0743578598, 0.0408749506, -0.0387442671, 0.0379677154, -0.0418389291, -0.0420018770, 0.0232264437, 0.0148117607, -0.0200980287, -0.0343767852, -0.0312775858, -0.0582118817, -0.0441569090, 0.0436344482, -0.0330948792, 0.0137492865, 0.0027928939, 0.0239889864, 0.0690525621, 0.0756681934, 0.0456869528, -0.0065307915, -0.0324268229, -0.0501395687, 0.0517369099, 0.0275834799, 0.0108242128, -0.0204841308, 0.0320841186, 0.0485544764, 0.0664413720, -0.0774469152, -0.0547955185, 0.0804315358, -0.0466620103, -0.0049360599, 0.0112753417, 0.0811329186, 0.0564446636, -0.0279434677, -0.0692965314, -0.0400478281, -0.0797845647, -0.0675973669, 0.0072969710, 0.0359813720, 0.0842421055, -0.0726392344, -0.0001709949, -0.0592069216, 0.0393862352, -0.0821703523, -0.0109053189, 0.0464395396, 0.0568977594, -0.0115098814, 0.0547905937, -0.0650489628, 0.0567081720, 0.0625769049, -0.0136232730, 0.0751408488, 0.0719629526, 0.0488684624, 0.0342161134, -0.0418441668, -0.0550357103, 0.0722423047, -0.0078382222, 0.0811435059, -0.0354325064, -0.0330295004, -0.0301031973, 0.0378899314, -0.0864572674, 0.0569966137, -0.0290804300, 0.0438567512, -0.0531135350, 0.0172594525, -0.0735314265, 0.0413980484, -0.0283270422, -0.0158318449, -0.0799915716, 0.0893687308, 0.0177899860, 0.0323869772, 0.0209087543, 0.0784155354, -0.0682423413, -0.0354014151, 0.0727229565, -0.0591403432, 0.0530407466, -0.0112301446, -0.0690822378, 0.0339933373, -0.0730402693, -0.0307425242, 0.0398502126, 0.0581246205, 0.0697273761, 0.0048597832, -0.0106763579, -0.0564115457, 0.0623118356, 0.0694142804, -0.0501282252, -0.0607666001, 0.0371235572, 0.0246267579, 0.0485918149, 0.0118735610, -0.0594093725, 0.0708356872, -0.0292406585, 0.0050967853, 0.0169493742, -0.0271786619, -0.0011591633, 0.0705245733, 0.0298795477, 0.0450995825, 0.0167158432, 0.0387782790, 0.0071790074, -0.0111678513, 0.0233482812, 0.0076287556, 0.0729866400, 0.0733652785, -0.0769855529, 0.0141054261, 0.0890975818, 0.0645773634, -0.0737367719, -0.0582968928, 0.0079579549, -0.0048757861, -0.0213732347, -0.0668803006, 0.0077883210, 0.0860727727, 0.0813000351, -0.0042288988, -0.0580242984, 0.0274782777, 0.0772837922, -0.0476679206, -0.0364861339, -0.0610277988, 0.0009125202, 0.0261123795, -0.0666311309, 0.0482252985, 0.0748779997, -0.0062191025, 0.0663555861, -0.0375466458, 0.0704337358, -0.0488089323, -0.0736081824, 0.0061574336, 0.0422159210, 0.0658626109, 0.0243287254, -0.0748404488, -0.0487458631, 0.0632722527, -0.0026461815, -0.0011863302, -0.0478227101, 0.0772951022, -0.0516466983, -0.0479169041, -0.0434704125, -0.0469106399, 0.0119115403, 0.0398089141, 0.0406607240, 0.0438177809, -0.0203195754, -0.0799591541, -0.0304223001, -0.0269551538, -0.0050555700, -0.0544385239, 0.0565417521, -0.0162298568, 0.0216147490, -0.0716348067, -0.0250954516, -0.0124964900, -0.0392662473, -0.0460209101, -0.0060016550, -0.0410735235, -0.0397758223, -0.0538927428, -0.0360502079, -0.0242181234, -0.0484373942, -0.0233556163, -0.0089736404, 0.0325850770, 0.0701443404, 0.0756255984, 0.0445671678, -0.0720871240, -0.0007344927, -0.0480419993, 0.0819361731, -0.0056703049, 0.0551890023, -0.0967705846, -0.0290928464, -0.0095091406, -0.0657607615, -0.0125615522, 0.0152850859, -0.0668617412, -0.0697838366, 0.0192626156, -0.0050106086, -0.0359072909, -0.0005799240, 0.0071489397, 0.0597132631, 0.0911352560, 0.0453124531, 0.0248767659, -0.0203855634, -0.0336638317, -0.0079392232, -0.0175981522, -0.0567551143, 0.0825204402, 0.0117831631, -0.0164424554, -0.0239640139, 0.0642623752, -0.0196644571, 0.0283653643, 0.0019584228, 0.0824880451, -0.0268147476, -0.0659649000, -0.0511366352, -0.0329714306, -0.0342678986, 0.0291073602, -0.0782765374, -0.0919872373, 0.0002404327, 0.0728676915, 0.0592736937, -0.0648586079, 0.0441190861, 0.0565582812, -0.0755370036, 0.0824932232, -0.0192048773, 0.0472934954, -0.0179443732, -0.0280201863, 0.0420747139, 0.0360228829, 0.0021626598, -0.0096027171, 0.0348049104, 0.0050516310, 0.0138093084, -0.0708891526, -0.0377498753, -0.0581198260, 0.0898746327, -0.0361021683, 0.0230984837, 0.0199418142, -0.0308614541, 0.0766776279, -0.0432536304, -0.0060279309, -0.0837903023, -0.0699119940, 0.0519144982, 0.0860207230, -0.0309356079, 0.0086753974, -0.0767652467, 0.0497479774, 0.0605538599, 0.1085121483, 0.0285252165, -0.0796082616, 0.0100534949, -0.0511056371, -0.0504407622, -0.0550039038, -0.0762682632, -0.0468718596, 0.0177067611, 0.0305628814, 0.0491460972, 0.0661148876, 0.0664869845, -0.0482719243, -0.0232916586, 0.0742685646, -0.0408872291, -0.0509105697, -0.0474583432, -0.0532353185, 0.0064762738, 0.0680260509, -0.0795689821, -0.0595647730, 0.0260797534, -0.0688708797, -0.0405554362, 0.0379161835, -0.0140689220, -0.0489219874, -0.0319852382, -0.0044032582, -0.0069325115, 0.0154932393, 0.0142622981, 0.0192244202, -0.0514766425, 0.0955807120, -0.0184209403, 0.0824710652, -0.0379558913, -0.0220046341, -0.0137724075, 0.0638374835, -0.0510521457, -0.0175855849, 0.1089407280, 0.0590812154, 0.1154218614, -0.0261923354, -0.0205378290, -0.0094678355, -0.0457858555, -0.0774119571, -0.1131578460, 0.0010133813, 0.0139804948, 0.0176291652, 0.0771409646, 0.0084318379, -0.0020165872, -0.0393935852, 0.0205709580, 0.0992716625, 0.0519815721, -0.1075684205, 0.0467436761, 0.0628934950, -0.0683192611, 0.0020092803, 0.0316780843, 0.0614481270, -0.0464496538, 0.0214061588, 0.0384699814, 0.0649554208, -0.0762101412, -0.0986043736, 0.0745479316, 0.0457189307, 0.0527597703, -0.0346375406, 0.0108927842, 0.0126600703, -0.0685111135, 0.0259841587, -0.0930984765, -0.1142563298, 0.0351458639, -0.0064693228, -0.0361696780, 0.0846864209, -0.0018003416, -0.0351476856, 0.0223255269, -0.0064666960, -0.0284921564, -0.0065642674, -0.0335199088, 0.0165632945, -0.0380619653, 0.0967926085, -0.0846793577, -0.0455352925, 0.0308683682, 0.0562346801, -0.0210510958, -0.0168147963, -0.0260109659, -0.0876833349, 0.0180706363, -0.0397965945, 0.0791797340, 0.0371681079, 0.0201318935, -0.0432424508, -0.0129333418, -0.0450527295, 0.0451610908, -0.0511467718, -0.0143036451, 0.0786244124, 0.0888598040, -0.0279311333, 0.0307074096, -0.0416383035, -0.0645936280, -0.0295133162, -0.0140810087, -0.0284953862, 0.0278555844, 0.0804595202, -0.0105762761, 0.0773320422, 0.0264408309, 0.1213866547, 0.0698783621, 0.0786375776, 0.1241147220, -0.0085191187, -0.0528497994, -0.0085802888, -0.0196302291, 0.0776871592, 0.1161005497, -0.1106437370, -0.1176725402, -0.0240381509, -0.0336262584, -0.0634505674, -0.0693064779, -0.0219147354, 0.0041579707, -0.0051585520, -0.0059109284, -0.0293127242, 0.0970270187, 0.0339079984, -0.0267949086, -0.0131064281, -0.0164877065, -0.0576842353, 0.0248150472, 0.0471897386, 0.0538707860, 0.0798934475, -0.0543277189, -0.0166611634, 0.0578922555, -0.0125192180, 0.0598057881, 0.0752677172, 0.0491133332, 0.0203811713, -0.0235172100, 0.0659546927, 0.1021477431, 0.0000861596, -0.1067493781, -0.0502867699, -0.0551433936, -0.0344603434, 0.0328087918, -0.0232906472, 0.0256078746, 0.0704506338, -0.0445686504, 0.0877827033, -0.0217609033, -0.0914982781, -0.0564476550, 0.0525833219, -0.0447457246, -0.0740717724, 0.0564175248, 0.0477990583, -0.0525698066, -0.0536866970, -0.0769163072, 0.1016096175, -0.0283594094, 0.1009496450, 0.0412639976, -0.0290317535, 0.0249734409, -0.0339109078, 0.0909189433, 0.0761404559, 0.0855572596, -0.0208009966, 0.0110179670, -0.0144544244, -0.0130179944, -0.0588927269, -0.0587980375, -0.0261618420, -0.0006009111, 0.0379886515, -0.0000447921, 0.0928832740, 0.0077207284, -0.0451309159, -0.0288943667, 0.0955046713, -0.0087241717, -0.0296824072, 0.0125198355, -0.0215300936, 0.1009763852, -0.0759717152, -0.0078118797, -0.0257278364, -0.0322355404, 0.0270835534, 0.0000503847, -0.0578288212, -0.0846884623, 0.0718634576, -0.0144681716, 0.0144804670, 0.0713998228, 0.0130750434, 0.0672487691, 0.0627094582, -0.0201764368, -0.0507297292, -0.0019171768, -0.0157756656, 0.0301929787, 0.0668210834, 0.0244461335, 0.0766234547, 0.0142155671, 0.0685365051, 0.0094465176, 0.0623971261, 0.0104771433, -0.0784605145, -0.0102988388, 0.0242717620, 0.0620594025, -0.0299390387, 0.0400450043, 0.0583638810, 0.0447736531, -0.0384040996, 0.0835977644, -0.0836888999, 0.0359114744, -0.0136665357, 0.0736700669, 0.0112935649, -0.0455860049, 0.0638753623, -0.0608782917, 0.0403027907, 0.0498233400, -0.0437603630, -0.0859177858, 0.0313277766, 0.0804148391, -0.0701294020, 0.0192827713, 0.0080240965, -0.0058364202, -0.0232429747, -0.0245109405, 0.0819290951, -0.0612711124, 0.0568820871, 0.0494902954, -0.0134502137, -0.0258688107, 0.0737072900, -0.0590201877, 0.0076169195, 0.0008443976, 0.0182513148, 0.0337840877, 0.0307762995, -0.0640916750, 0.0664218143, -0.0585362799, 0.0238471311, -0.0388084836, -0.0336182639, 0.0497623831, -0.0591183528, -0.0863118544, -0.0865974650, -0.0294099208, 0.0484443530, -0.0275506172, -0.0355949327, -0.0409543626, 0.0551642850, -0.0648805872, -0.0755192563, -0.0011559591, -0.0105815390, -0.0423453860, 0.0036396165, -0.0734666809, 0.0070241396, 0.0413876660, -0.0541749783, -0.0727084205, 0.0433710627, -0.0266304631, -0.0443522893, -0.0641492382, 0.0747146234, -0.0235585812, 0.0420807004, -0.0322051421, -0.0076073026, -0.0917499885, -0.0615165532, 0.0957818553, 0.0880359858, 0.0272360798, -0.0762888268, -0.0446841680, 0.0659250915, 0.0399977118, -0.0329668187, -0.0800065473, 0.0325877592, -0.0557533950, 0.0716895387, -0.0724489540, 0.0358931534, -0.0953692421, 0.0270841755, 0.0796278641, 0.0765434876, 0.0283137057, 0.0700917765, 0.0446598642, 0.0419899710, -0.0614057444, 0.0252352022, -0.0217899829, -0.0814259350, -0.0325723253, -0.0331334770, -0.0514788628, -0.0101355463, -0.0400838181, 0.0932431147, -0.0365726389, 0.0654916316, -0.0191492811, -0.0110558681, -0.0025138203, 0.0874069631, 0.0786932856, 0.0602165535, 0.0109032383, 0.0300914645, -0.0282244012, 0.0393155478, -0.0332645476, -0.0135451509, 0.0148830432, 0.0289062317, 0.0866401047, 0.0243719369, 0.0092607308, -0.0779576525, -0.0182627589, -0.0833117664, -0.0726350993, 0.0494028926, -0.0822787359, -0.0912124366, -0.0182927661, 0.0696067512, 0.0844220445, 0.0407438390, -0.0046674656, 0.0168182813, 0.0331227183, 0.0561733469, 0.0842599273, 0.0573465340, -0.0751190260, -0.0112104537, 0.0035516622, -0.0694832131, -0.0199601017, 0.0737604201, 0.0284385588, -0.0234737061, -0.0255727079, 0.0434337072, -0.0388431549, 0.0232619904, -0.0680566207, 0.0311239250, -0.0687557980, -0.0395198315, 0.0605471805, -0.0339784622, 0.0264634900, -0.0344896577, -0.0123595782, 0.0510108694, 0.0349090993, -0.0332837924, -0.0002735507, -0.0696778297, -0.1107421815, 0.0627894923, 0.1088081449, -0.0716883913, 0.0393337905, 0.0840359554, 0.0282002781, 0.0375859849, -0.0535687916, -0.0187339615, 0.0010456896, -0.0043691527, 0.0528954528, -0.0688716099, -0.0725858361, -0.0143617159, -0.0793680251, -0.0138055934, -0.0389547274, -0.0816154107, -0.0742797703, 0.0537839532, 0.0196393970, -0.0753831416, -0.0472482219, 0.0203142650, -0.0021414820, 0.0205926523, 0.0734536275, -0.0572054051, -0.0800064057, -0.0476330444, -0.0434825346, 0.0622818694, 0.0745687038, 0.0392328277, 0.0962155163, -0.0557225645, -0.0185268465, -0.0422151946, 0.0654291064, 0.0586529002, -0.0900890976, -0.0077144508, -0.0165723711, -0.0366265066, -0.0677198693, -0.0972963497, 0.0411610752, -0.0688656792, 0.0239485763, -0.0349163190, 0.0219363347, -0.0144133857, 0.0440189727, 0.0358452536, 0.0654640347, -0.0197485741, -0.0917946324, -0.0304596722, -0.0513955578, -0.0492821895, 0.0883415937, -0.0654555485, -0.0542522371, -0.0230915099, 0.0661683902, 0.0886880159, 0.0782304481, -0.0623649359, 0.0039945897, 0.0176397245, 0.0476516820, 0.0705859959, 0.0022301704, -0.0186471753, 0.0108546633, 0.0103279380, -0.0043060980, 0.0592503659, 0.0099734394, 0.0377469622, 0.0628785864, -0.0234539602, -0.0660072714, 0.0805164054, -0.0554027520, -0.0191324782, 0.0291624758, 0.0875493288, -0.0350332186, 0.0629700795, -0.0569854341, -0.0227119774, -0.0533580445, 0.0681141615, 0.0882349461, -0.0564589277, 0.0403132476, 0.0232458040, 0.0250069145, -0.0338417403, 0.0322421454, -0.0557706319, 0.0658962056, -0.0042238906, 0.0840321705, -0.0348862335, 0.0597078353, -0.0816055015, -0.0068414519, -0.0054817614, 0.0286784582, -0.0466931164, -0.0570696890, -0.0353072248, 0.0516707152, 0.0503693484, -0.0347478092, 0.0389036685, 0.0387600102, -0.0634103864, 0.0187381376, 0.0547399931, 0.0096475752, -0.0734880567, 0.0310078710, -0.0237904359, -0.0138531448, -0.0055352594, 0.0499321781, -0.0357279740, 0.0305070728, -0.0253771488, -0.0367690176, -0.0778106675, -0.0669542998, -0.0003092363, -0.0728551298, -0.0268750414, 0.0221357942, 0.0188895054, -0.0102239503, 0.0832799301, 0.0482571237, 0.0221130289, 0.0026900696, -0.0515504442, -0.0757191479, 0.0289246812, 0.0558440983, -0.0653407648, -0.0168865137, 0.0052310387, 0.0726815537, 0.0648171827, 0.0642184317, -0.0693283826, -0.0522576496, -0.0181265026, -0.0104370490, 0.0538944304, 0.0225780476, -0.0546266139, -0.0472265556, -0.0834470540, 0.0137355700, -0.0871455073, 0.0830281898, 0.0252989586, -0.0130297085, 0.0577766970, 0.0135077639, 0.0260616057, -0.0028689478, 0.0537756830, -0.0088834940, -0.0991271511, 0.0266716350, -0.0301693249, 0.0280643180, 0.0415369011, -0.0368905924, -0.0409032963, 0.0805402249, 0.1017630026, -0.0398257487, 0.0238204058, -0.0022589669, -0.0656758249, 0.0560345314, -0.0392751507, 0.0855038315, 0.0055358927, -0.0976062492, -0.0546851233, 0.0363564268, 0.0531466380, 0.0125764394, -0.0798138455, 0.0084068887, 0.0062171044, 0.0438344665, -0.0332512334, 0.0400167108, -0.0770566836, -0.0031607847, 0.0426879674, -0.0314013846, -0.0307497848, -0.0055117984, 0.0617093593, 0.0309080742, -0.0244879778, 0.0402331837, 0.0007276320, 0.0603940077, 0.0008506908, -0.0098049492, -0.0088641392, 0.0629870296, -0.0491738394, -0.0925671011, 0.0768230408, -0.0577972457, -0.0510455631, 0.0375618711, -0.0158169419, 0.0055530425, -0.0696704239, 0.0368929282, -0.1041311845, 0.0143295554, -0.0410078317, 0.0038414011, 0.0432080887, 0.0288144853, 0.0725275204, -0.0076616998, 0.0947809964, -0.0211732965, 0.0796234310, 0.0448591225, 0.0390951447, 0.0075664963, 0.0257238504, 0.0339777954, 0.0886116028, 0.0822208300, -0.0650020689, -0.0288332608, 0.0584056564, 0.0100437719, 0.0352281518, -0.0778590739, 0.0856751725, 0.0008108139, 0.0703035519, -0.0768454522, 0.0638389066, 0.0170648731, 0.0619407706, -0.0827519968, -0.0820818692, 0.0171490256, 0.0261289626, -0.0036032074, 0.0481478684, -0.0746207237, -0.0308917742, 0.0924943313, -0.0439163335, 0.0597339533, -0.0567036904, -0.0510877892, 0.0688699931, -0.0729654357, 0.0912721083, 0.0184917897, 0.1026164070, 0.0185229219, -0.0619657449, 0.0876261145, -0.0399034843, -0.0085564982, 0.0245207660, -0.0403074473, -0.0199479926, -0.0527680628, -0.0135726454, -0.0691434294, -0.0652962402, 0.0216269251, -0.0119738299, 0.0451189764, -0.0595125295, 0.0650588796, -0.0726253018, 0.0571238250, 0.0136955287, -0.0815499723, 0.0730276108, 0.0301185083, -0.0527859442, 0.0376192033, 0.0273689497, 0.0838558599, -0.0416403711, 0.0485484079, 0.0289988723, 0.0100819431, 0.0350841582, 0.0818639025, 0.0349629149, 0.0539046861, -0.0583190508, -0.0298734289, -0.0818952098, -0.0612315983, -0.0269243959, -0.0494149961, -0.0760981813, -0.0355013385, -0.0631510988, 0.0386963412, 0.0287979376, 0.0568701625, -0.0702525973, 0.0531722456, -0.0600987300, -0.0521994196, -0.0037139545, -0.0539793856, 0.0337880515, 0.0601080135, 0.0546252765, 0.0621283911, 0.0466500483, -0.0569351390, -0.0190856755, -0.0655817762, 0.0012808450, -0.0305761117, 0.0827324018, -0.0472353548, 0.0456160195, 0.0059926505, -0.0760768503, 0.0062030703, -0.0020141581, 0.0179169942, -0.0583282039, -0.0003621657, -0.0403729975, 0.0419106223, 0.0968710557, -0.0036061809, 0.0714071542, -0.0058218543, 0.0102822585, -0.0402801745, 0.0252346247, 0.0536148809, 0.0659435093, 0.0495945178, -0.0687640309, 0.0449486077, 0.0590885729, -0.0430943444, -0.0477877632, 0.0190260485, -0.0648607835, -0.0124121644, -0.0686731562, 0.0654541031, 0.0387490131, -0.0746073425, 0.0305834375, 0.0541758016, 0.0001950819, -0.0344399586, 0.0452851504, 0.0205635112, -0.0458498411, 0.0592914671, -0.0535414405, -0.0365310498, -0.0623117350, 0.0581800081, 0.0041096453, 0.0447178409, 0.0600314662, 0.0540523753, 0.0475329868, 0.0523748659, -0.0521083735, 0.0429397747, -0.0075600003, 0.0399777927, 0.0721000805, 0.0956274346, 0.0452130996, -0.0648856908, 0.0271348488, 0.0284475647, 0.0089496188, 0.0296604335, -0.0516404882, -0.0709759966, 0.0701745078, 0.0227682833, 0.0024184545, -0.0500743538, -0.0352260470, -0.0292642098, -0.0568730496, 0.0221217554, -0.0089309178, 0.0201501288, 0.0097090183, -0.0116135068, 0.0520183444, -0.0156363584, 0.0052519413, -0.0089829480, -0.0142467031, 0.0199935623, 0.0266304910, -0.0494087227, -0.0808634385, -0.0406094417, -0.0534634143, 0.0112595316, 0.0024935699, 0.0769744366, 0.0324484818, 0.0602100343, 0.0136726042, -0.0008815824, 0.0028353345, 0.0795602575, 0.0847073048, -0.0028438673, 0.0130858468, 0.0732439384, -0.0006724438, 0.0500587858, 0.0040618787, -0.0189013761, 0.0086363545, -0.0236970857, 0.0222409833, 0.0551348031, -0.0572429113, -0.0012943866, 0.0512975343, 0.0305262525, -0.0269513559, -0.0506494679, -0.0860864520, -0.0714548454, -0.0187253859, -0.0747091025, 0.0644454658, -0.0345471166, 0.0025776185, -0.0592006482, -0.0316423140, 0.0182282887, -0.0578728579, -0.0307136048, 0.0865704343, -0.0689017102, -0.0258478075, 0.0042811702, -0.0142704081, -0.0754220039, -0.0895171165, -0.0597727038, -0.0377187543, 0.0576911308, -0.0384556092, -0.0390701815, 0.0432493277, -0.0088374289, -0.0261222143, -0.0723847821, -0.0799171925, 0.0355783962, -0.0600641891, 0.0793157443, -0.0092218025, 0.0620799363, 0.0459636711, -0.0419662856, 0.0267672278, 0.0053894660, -0.0854705572, 0.0059924424, -0.0154989734, 0.0333766527, 0.0453134514, -0.0269371290, -0.0101736020, -0.0773194507, 0.0307268128, 0.0414712653, -0.0160111170, 0.0802111849, 0.0021483954, -0.0547232106, 0.0292217415, 0.0176240262, 0.0278345179, 0.0143143423, 0.0451230742, 0.0747488514, 0.0205584932, -0.0285090804, -0.0133759445, 0.0831007138, -0.0351088308, -0.0388602167, 0.0091623301, 0.0652888194, 0.0363662131, 0.0370492823, -0.0739078224, 0.0606847629, 0.0739058554, 0.0281235799, 0.0483543165, -0.0660838932, -0.0558260791, -0.0707421303, 0.0030950292, 0.0717728287, 0.0092188055, 0.0047042482, -0.0113557344, -0.0569112189, -0.0385085568, 0.0111862076, 0.0242994539, 0.0503150523, -0.0341227315, 0.0141374469, -0.0048336503, -0.0393759273, -0.0431075878, 0.0114780413, 0.0008321262, 0.0306505430, 0.0545458794, 0.0352118351, -0.0264595021, -0.0289692208, 0.0133273844, -0.0750575513, 0.0572348982, 0.0265625268, 0.0690576136, 0.0459892750, -0.0889072716, -0.0114331935, 0.0251410026, -0.0506570786, -0.0213212948, 0.0005745194, -0.0710337758, -0.0229963548, 0.0555087030, 0.0618839078, 0.0527970903, -0.0439678505, 0.0683553144, 0.0738377050, 0.0111827552, 0.0119258659, 0.0408885740, -0.0661681145, -0.0045963186, 0.0747324750, -0.0374535024, -0.0332880355, 0.0866296440, 0.0924514160, 0.0119376909, -0.0008495342, 0.0255066194, -0.0562000833, 0.0490924083, -0.0662876740, -0.0798156708, -0.0173023157, 0.0602978803, -0.0272814445, -0.0295482371, -0.0793552175, -0.0526433289, -0.0700869709, -0.0402776152, 0.0681935698, 0.0361508094, 0.0630735457, -0.0606785081, -0.0295516700, 0.0554783754, -0.0612681210, -0.0955370963, 0.0121572455, -0.0584632717, -0.0889631957, -0.0496083871, 0.0034188384, -0.0211116914, -0.0123301335, 0.0410579629, -0.0375903994, 0.0352759287, -0.0672461540, 0.0080827903, 0.0442961343, 0.0308075380, 0.0785994977, -0.0212969016, -0.0543029234, -0.0569710396, -0.0503489897, 0.0173508022, 0.0438663699, -0.0405695438, -0.0548831038, -0.0264827795, -0.0021903319, 0.0000661735, -0.0260795932, 0.0598119013, -0.0176286232, -0.0115826055, -0.0379009135, -0.0185215119, -0.0029050277, 0.0337801091, 0.0479145050, -0.0784306675, -0.0789675638, 0.0486890748, 0.0291173682, -0.0452787839, 0.0773506910, 0.0663329065, -0.0866905823, 0.0338384695, -0.0316024236, 0.0135071594, -0.0715365037, 0.0013398869, -0.0133407880, -0.0055352412, 0.0279098116, 0.0314110965, 0.0712027550, -0.0213047322, -0.0767555535, 0.0470865406, 0.0020623778, -0.0547963381, 0.0680369884, 0.0668177828, 0.0423993170, 0.0536664687, 0.0506507792, -0.0594374239, 0.0067370613, 0.0128416931, 0.0286568254, 0.0524184816, -0.0146913249, -0.0734787211, 0.0642344952, -0.0033353101, -0.0328250974, -0.0034395112, 0.0269780569, 0.0526672043, -0.0185296088, -0.0132622644, -0.0212834459, 0.0721149221, 0.0814857706, -0.0235777665, -0.0542075261, 0.0170827545, -0.0878868699, -0.0572107881, -0.0797886029, 0.0008850654, 0.0366895646, 0.0025958049, 0.0558852665, 0.0536346249, -0.0056977612, -0.0423407853, 0.0575939752, 0.0418149345, -0.0582268797, -0.0933520421, -0.0639592111, -0.0617074557, 0.0634695515, 0.0460041240, 0.0373337865, -0.0535580888, 0.0200675037, -0.0411225036, 0.1026068851, 0.0302845407, -0.0610370599, 0.0866662636, -0.0488517694, -0.0716594011, -0.0598067604, 0.0459110104, 0.0397997387, 0.0653879717, -0.0764425322, 0.0603843778, -0.0521750525, 0.0444793366, -0.0545573086, -0.0061648171, 0.0690852925, 0.0421232767, -0.0312901214, -0.0714031979, 0.0383940525, -0.0424566828, 0.0535800382, -0.0095570581, 0.0285186581, -0.0029977481, 0.0726990551, -0.0640336499, -0.0152081195, 0.0498061292, 0.0559149832, 0.0666486099, 0.0156010985, 0.0407860391, -0.0344594419, 0.0253186040, -0.0357086323, -0.0376041979, -0.0241311118, 0.0500234775, 0.0663476810, 0.0265360009, 0.0040421220, -0.0233529024, -0.0673035532, 0.0167896654, 0.0245731249, -0.0194046665, 0.0633556321, 0.0039634025, -0.0286978018, 0.0095099686, 0.0886673704, 0.0595467910, -0.0517895073, 0.0054847291, -0.0664382502, -0.0159347206, 0.0232648980, -0.0727514103, -0.0539763644, -0.0536035597, -0.0378068201, -0.0477518775, 0.0387859270, 0.0613992922, -0.0447247401, 0.0631999373, 0.0741013810, 0.0296686199, -0.0311350916, -0.0024735921, 0.0771929398, -0.0575098097, -0.0983044356, 0.0524999388, 0.0176360440, -0.0166151822, -0.0088923508, 0.0606757104, 0.0621922500, -0.0631945431, 0.0903862789, 0.0773498341, 0.0668156371, 0.0366281569, 0.0454675928, -0.0119868945, -0.0777935013, -0.0030153843, -0.0889545456, 0.0388569236, 0.0442178212, 0.0168398600, -0.0346194804, 0.0098265084, 0.0589026697, -0.0525456630, -0.0583160520, 0.0518102869, -0.0078093926, 0.0614960119, 0.0803987235, -0.0659973100, 0.0246743318, 0.0559269562, -0.0113257449, -0.0618955530, 0.0374492556, 0.0834506080, -0.0159066040, 0.0759657472, -0.0065476666, -0.0821471587, 0.0217958223, -0.0308013186, 0.0006255250, -0.0929100662, -0.0230035167, -0.0116286045, 0.0222071074, -0.0227646828, 0.0097602857, 0.0414961055, -0.0345821157, 0.0591969602, 0.0171932857, -0.0490090437, -0.0500199273, 0.0185430292, -0.0540227517, -0.0279084668, -0.0331333652, 0.0539207831, 0.0586039685, -0.0036864071, -0.0236705840, 0.0053105843, 0.0336495787, -0.0517763197, -0.0026602554, 0.0528737977, 0.0614058971, -0.0487448089, -0.0897815749, 0.0129160825, 0.0390667729, 0.0349344239, 0.0333447196, -0.0120184002, -0.0060131610, 0.0334052481, -0.0880017057, -0.0390014090, -0.0069037690, -0.0785963759, 0.0020124847, 0.0399651714, -0.0343644023, 0.0572314821, -0.0470702499, 0.0045298762, 0.0272929706, 0.0023053430, -0.0490926467, -0.0507606529, 0.0744754598, -0.0031444614, -0.0609115139, -0.0299510118, 0.0574622974, 0.0000959609, 0.0179111119, -0.0053941510, 0.0448071286, 0.0327292979, -0.0377518311, -0.0382612124, 0.0419570841, 0.0365546718, 0.1015295237, -0.1059899405, -0.0268750545, -0.0651492923, -0.0780300200, 0.0643322468, -0.1080020145, -0.0982465297, -0.0519524664, 0.0497559346, -0.0425048806, 0.0607143342, 0.0078702215, -0.0046460340, 0.0318009853, -0.0452008620, -0.0357387885, -0.0624253713, 0.0802280158, -0.0417030081, 0.0609242246, 0.0085655255, 0.0181848612, 0.0685650557, 0.0693876222, 0.0726786926, 0.0642899871, 0.0552929975, -0.0736999437, 0.0164863486, -0.0377117619, -0.0114469137, 0.0248934831, -0.0126141952, 0.0266989172, 0.0602716021, -0.1015447378, 0.0748032853, -0.0718871802, -0.0370671451, -0.0377062336, 0.0397173464, 0.0743137524, 0.0070822947, -0.0124790361, -0.0881515145, 0.0182933435, 0.0230192896, 0.0383500904, -0.0480690971, -0.0796694309, -0.0246870499, -0.0297045615, 0.0012430248, -0.0767830983, -0.0713743940, -0.0715806335, -0.0247669928, -0.0255680829, 0.0273407195, -0.0589500517, 0.0754437968, 0.0682954416, -0.0307072047, -0.0013208804, 0.0583689101, 0.0527281016, -0.0724772587, -0.0297266375, -0.0787808597, -0.0352678522, 0.0771829188, 0.0551711470, -0.0067291865, 0.0602331981, -0.0013509332, -0.0032029278, -0.0805090889, -0.0375954285, -0.0872791260, 0.0721260756, -0.0382228941, -0.0614013746, -0.0347057171, -0.0023291905, -0.0244519543, 0.0838632211, 0.0026714734, -0.0034969449, -0.0010347990, -0.0835315436, 0.0318769254, -0.0445442200, -0.0331664234, 0.0537884794, 0.0065407353, -0.0737486482, -0.0538684241, -0.0782686397, -0.0363850035, -0.0601351447, 0.0397999175, -0.0606828965, 0.0054622185, -0.0398108065, 0.0035114749, -0.0506541505, -0.0310928728, -0.0191725791, 0.0313108042, -0.0132596456, 0.0516730323, -0.0600803718, 0.0815090463, 0.0111803031, 0.0970676839, -0.0318777412, -0.0667052791, 0.0085146930, 0.0682404935, -0.0658035204, 0.0779677108, -0.0616376884, 0.0629700497, -0.0139586702, -0.0458785519, -0.0131360786, 0.0320706330, -0.0473128632, 0.0290979724, 0.0780448988, -0.0431449749, -0.0745266601, 0.0411491841, 0.0754195005, 0.0192480311, 0.0115430402, 0.0370249376, 0.0437765010, -0.0655653030, -0.0470371209, -0.0165554602, -0.0421603620, -0.0327062458, -0.0329044499, -0.0469587408, 0.0228438899, 0.0719435737, 0.0626464635, 0.0303976443, 0.0136015657, -0.0638683289, -0.0524963401, 0.0482411236, -0.0696949214, 0.0397950299, 0.0580955483, 0.0184846167, -0.0239974912, -0.0735001937, -0.0446569026, 0.0396904312, 0.0036635823, -0.0824821442, 0.0294709485, 0.0361105092, 0.0562909767, 0.0662452206, -0.0420935526, 0.0832902491, -0.0226175878, 0.0762687251, 0.0835012197, 0.0651908070, 0.0390616246, -0.0324158557, -0.0511937514, 0.0717299432, -0.0770357996, -0.0377131067, 0.0010858248, -0.0357522219, -0.0741662905, -0.0199204218, -0.0146210808, 0.0412274413, 0.0153159928, -0.0075792084, -0.0785330832, -0.0286881253, -0.0563853011, 0.0447184183, 0.0073330249, -0.0614438020, 0.0814544186, -0.0324595645, 0.0371910185, 0.0729362443, -0.0477050133, -0.0519354008, 0.0039048665, -0.0615302324, -0.0275234971, -0.0059781298, 0.0761413947, -0.0429997928, 0.0059656538, 0.0542503931, -0.0369753726, -0.0251946319, -0.0627352223, 0.0716535524, 0.0102690337, 0.0389837921, -0.0861199945, -0.0254774950, 0.0778835341, -0.0846356824, 0.0221076533, -0.0583494641, 0.0032856329, -0.0024859188, 0.0433377028, 0.0663330033, -0.0083153136, -0.0228043217, -0.0818796381, -0.0781117454, -0.0353296809, 0.0058380878, -0.0131889172, 0.0841430202, 0.0141307171, -0.0647771582, -0.0825336874, 0.0453348197, -0.0380337536, 0.0437183566, -0.0033887073, -0.0081786802, 0.0388105065, -0.0830480084, 0.0599580258, -0.0476081446, 0.0531671047, 0.0227231663, 0.0458480343, -0.0528804474, 0.0028763947, -0.0651575178, 0.0178324115, 0.0647592768, -0.0349801816, -0.0498680286, 0.0824884325, -0.0037421710, -0.0270579811, -0.0270447079, -0.0613877662, 0.0345805883, -0.0196612030, -0.0229133889, 0.0550041981, -0.0155650079, -0.0140992645, 0.0645752624, -0.0714294091, 0.0704206601, -0.0454937443, 0.0446818806, -0.0776122361, 0.0311370529, -0.0695349947, 0.0746592209, -0.0388599262, 0.0907517523, 0.0759585723, -0.0600102544, -0.0173476841, -0.0691164210, 0.0481716283, -0.0540973246, 0.0729091838, 0.0227107704, -0.1012026370, 0.0525047295, 0.0809647292, 0.0272213127, -0.0233775768, -0.0486020781, 0.0126112308, 0.0295594390, 0.0075740954, 0.0323609151, -0.0364171825, -0.0457520150, 0.0439833254, 0.0324798040, -0.0515967011, 0.0511257127, 0.0739625916, 0.0810598359, -0.0268223565, 0.0619881414, 0.0325389989, -0.0814444199, -0.0083921347, 0.1070124954, -0.0635829344, -0.0703055337, -0.0875153393, 0.0678477138, 0.0709935203, 0.0799668729, 0.0328301601, 0.0462868400, -0.0388497375, 0.0059810318, -0.0299218893, 0.0271920338, -0.0171883907, -0.0700241476, -0.0827936828, 0.0468121208, -0.0492148846, -0.0367177390, 0.0117660984, 0.0446199924, 0.0289996024, 0.0126695335, 0.0689025298, -0.0014998937, 0.1037607044, -0.0256465897, 0.0067707882, 0.0613382645, 0.0593143404, -0.0121461600, -0.1009328440, 0.0221016463, 0.0254346281, 0.0467642024, -0.0006845177, -0.0170138478, -0.0105868075, 0.0355963781, 0.0537445284, -0.0587950535, -0.0748464465, 0.0500037186, 0.0584685132, -0.0966582298, -0.0222993009, -0.0217935983, -0.0630400851, 0.0622312091, 0.0210055336, -0.0269113649, 0.0779328868, -0.0034172782, 0.0252865646, -0.0073587466, 0.0019859890, 0.0343167745, 0.0136547862, 0.0653270856, -0.0498051122, -0.0470918752, -0.0815038756, 0.0518200248, -0.0082731759, -0.0136049716, 0.0444494002, -0.0035975932, 0.0015030948, -0.0530733652, 0.0154047813, 0.0489335321, 0.0022204896, -0.0846171156, 0.0185493659, -0.0029079532, 0.0508812442, 0.0231505260, -0.0222020224, -0.0357654467, 0.0112629998, -0.0523184277, -0.0078083980, 0.0681213662, 0.0208397359, 0.0725201294, 0.0143265091, -0.0601895452, -0.0414978638, 0.0650482178, -0.0760860518, 0.0073969313, -0.0711268336, 0.0338073038, 0.0106307631, 0.0536913164, 0.0678759813, 0.0423405096, -0.0180737395, -0.0911597833, -0.0861005709, 0.0156982224, -0.0542220660, 0.0170202274, -0.0195071306, -0.0636968985, 0.0276969336, 0.0314477906, 0.0800099596, 0.0492719561, 0.0572622865, 0.0657975599, 0.0548718423, 0.0564134680, 0.0150871295, -0.0649563670, 0.0505976565, 0.0433560833, -0.0668146387, 0.0030711119, -0.0032714058, 0.0305223707, -0.0179952700, 0.0201141872, 0.0270615686, -0.0102067022, -0.0597110428, 0.0769294724, -0.0003840528, -0.0525953658, -0.0780150220, -0.0537787266, -0.0136258062, -0.0544610620, -0.0324539654, -0.0714135543, 0.0349592045, 0.0096109156, -0.0780789107, 0.0759805441, -0.0591572709, -0.0656555071, 0.0573012866, -0.0279577821, -0.0778620616, 0.0105692111, -0.0710052177, 0.0625553653, -0.0304809306, 0.0693629161, -0.0073826457, 0.0094284900, 0.0625223890, 0.0153955072, -0.0114946188, -0.0241548736, -0.0170129500, -0.0101187443, 0.0375382192, -0.0245578457, 0.0581002757, 0.0091257524, 0.0780714899, 0.0349020362, -0.0546150170, 0.0197038781, 0.0347444117, -0.0644267425, 0.0589190274, 0.0621328764, 0.0518110096, 0.0493995026, -0.0220125206, -0.0005910953, 0.0021076130, 0.0580223650, -0.0791810006, 0.0339507796, 0.0266027916, -0.0209633466, -0.0791424811, 0.0571126565, -0.0197862461, 0.0499196649, 0.0476471409, 0.0499111563, 0.0509187467, 0.0283526406, -0.0667103156, -0.0781360269, 0.0858996809, 0.0279676355, 0.0462307446, 0.0513444170, 0.0120129371, -0.0334918313, -0.0904699266, 0.0232213158, -0.0560167916, -0.0031193604, 0.0708869696, -0.0068664984, -0.0172388516, -0.0634412840, 0.0562253706, 0.0090743182, 0.0841007084, -0.0866568163, -0.0870306268, -0.0137901129, -0.0068799080, 0.0010272473, -0.0202382933, 0.0691660792, 0.0561679713, 0.0772663429, 0.0054929238, -0.0570472144, 0.0293973666, -0.0848748758, -0.0863563865, -0.0157537367, 0.0060257153, -0.0728176013, -0.0276956894, -0.0228908285, 0.0583105199, -0.0262067989, 0.0165678561, 0.0047308020, 0.0699403286, -0.0569532141, -0.0748950094, 0.0433490984, -0.0572761074, -0.0902972370, 0.1043188423, 0.0112683810, 0.0577574968, 0.0373530760, -0.0075151292, -0.0811155215, 0.0134767788, 0.0340151712, 0.0329081193, 0.0751928091, 0.0528341122, 0.0171659160, 0.0003602252, 0.0112272408, -0.0591899529, 0.0360379331, 0.0434163734, -0.0017482564, -0.0619231798, -0.0819983184, 0.0694932863, -0.0184254292, 0.0160626434, -0.0336877890, -0.0259541832, -0.0077705164, 0.0409847982, -0.0124255065, 0.0352136977, -0.0608184077, -0.0796616226, -0.0767935142, 0.0008185727, -0.0564933196, 0.0920066983, -0.0590044931, -0.0376079753, 0.0338507369, 0.0422007591, 0.0829253867, 0.0064689605, -0.0238608867, 0.0536320806, 0.0770051330, 0.0568629913, 0.0483322069, -0.0393722095, 0.0399625450, -0.0418119431, 0.0018550354, 0.0391282924, 0.0215802435, -0.0243784897, 0.0012378664, -0.0562114380, 0.0281216633, 0.0208331291, 0.0311285537, 0.0731892735, 0.0542716496, -0.0159687679, -0.0151755093, 0.0501952358, -0.0846994594, 0.0485231988, 0.0699696764, -0.0298503209, -0.0702375248, -0.0133419912, 0.0450648554, -0.0367400311, 0.0497312285, -0.0375137962, 0.0560436398, 0.0738385320, -0.0021330088, -0.0350004211, 0.0569189750, -0.0130383773, 0.0204349421, -0.0488454290, -0.0145099862, 0.0931053609, 0.0128780967, -0.0393353291, 0.0279561039, 0.0204678755, -0.0635084957, -0.0530597903, -0.0477579795, 0.0360141769, 0.0768138915, -0.0396354981, 0.0524641871, -0.0242465101, -0.0147352880, 0.0028475998, 0.0782575160, 0.0552940927, -0.0292493533, 0.0315252990, -0.0483172387, -0.0910097361, -0.0073245447, -0.0530454852, -0.0157465581, -0.0624455772, -0.0181972980, 0.0484408252, 0.0047564278, -0.0081300242, -0.0610159747, -0.0642909333, -0.0092257783, 0.0099252230, -0.1054107174, -0.0334821343, 0.0749696419, 0.0079963710, -0.0268082544, 0.0816105306, 0.0263974592, 0.0398256332, 0.0224163122, 0.0709261671, 0.0047279494, -0.0232333951, -0.0199414976, 0.0706117973, 0.0934433565, 0.0652305558, -0.0646948814, -0.0605338998, -0.0240374226, 0.0044158702, -0.0640196726, -0.0332998931, -0.0687666610, -0.0050027291, -0.0725978687, 0.0841866732, 0.0752910227, -0.0006947283, -0.0480240174, -0.0018246395, 0.0462584533, 0.0977205113, -0.0955805704, 0.0606985986, 0.0190768111, 0.0389015190, 0.0862931013, -0.0024912073, 0.0927669182, 0.0539392233, -0.0315501392, 0.1103618816, 0.0230379626, 0.0575794056, -0.0310729705, 0.0535769016, 0.0983424261, -0.0515694097, -0.0780236050, -0.1048411578, -0.0916018486, -0.0415277630, 0.0836961269, 0.0386400856, -0.0494459644, -0.0081557203, -0.0758418068, 0.0077771959, 0.0157761630, 0.0090449341, -0.0125709064, -0.0507080257, 0.0996047556, -0.0332372114, 0.0250086300, -0.0273602009, 0.0143183218, 0.0050420286, -0.0321355797, 0.0593444556, -0.0297943782, 0.0039362125, 0.0080674095, 0.0629169047, 0.0704622045, -0.0470169671, -0.0193105321, 0.0539623424, -0.0587437488, 0.0714267641, 0.0209064484, -0.0731466487, 0.0198875125, 0.0077966973, -0.0035304935, -0.0303785950, -0.0705934167, -0.0628517494, -0.0490059294, 0.0478915535, -0.0553789958, 0.0798195750, 0.0699307248, -0.0301069133, 0.0264345836, 0.0276292078, -0.0330927968, 0.0089290924, 0.0351691991, -0.0154762054, 0.0380030759, 0.0309704933, 0.0606805533, 0.0039757472, 0.0435500517, 0.0551414751, 0.0699376911, 0.0294486042, 0.0092352387, -0.0473459363, 0.0747307017, 0.0332767963, -0.1026581451, -0.0524274930, -0.0782840699, -0.0365071744, -0.0411676913, 0.0367020071, 0.0192256458, -0.0580393411, -0.0665520802, 0.0414157026, -0.0464239120, 0.0724972188, 0.0683740303, 0.0021366915, 0.1095934957, 0.0974330530, 0.0033475964, 0.1023747325, 0.0496019199, -0.0154272011, -0.0382464342, 0.0156091629, 0.0105870692, 0.0019867322, 0.0216012225, 0.1120672300, -0.0083348313, 0.0685520470, -0.0341974534, -0.0123212542, 0.1077963188, 0.0894911960, -0.1042599604, 0.0091466941, -0.0438673459, 0.0177546702, -0.0641599000, -0.0494445860, -0.0187988319, -0.0194560084, 0.0548413992, 0.0386427939, 0.0096348636, 0.0284293853, -0.0348193869, 0.0466931947, 0.0718466789, 0.1021205336, 0.0473513715, 0.0998219252, -0.0140929045, 0.0691304579, -0.0031035764, 0.0008875299, 0.0043142987, -0.0269648060, -0.0349714756, 0.0952351913, -0.0635141358, 0.0719214827, 0.0528359413, 0.0728504732, -0.0372661315, -0.0140469456, -0.0957513899, 0.0338506550, 0.0447585918, -0.0125873806, -0.0465503372, -0.0881821364, -0.0015698115, -0.0680754259, 0.0599255115, 0.0651579574, -0.0286336560, 0.0291434862, -0.0378443375, -0.0626341626, 0.0797986984, 0.0438109860, -0.0832116604, -0.0413379408, 0.0789558217, 0.0363392197, 0.0584372953, -0.0095839025, -0.0086789951, -0.0407800488, -0.0043611410, 0.0220124517, -0.0473864749, -0.0172256883, -0.0562090836, 0.0253077857, -0.0480036996, 0.0068364013, -0.0668221265, -0.0789361447, 0.0737080872, -0.0083133103, 0.0470042303, -0.0767743737, -0.0268697962, 0.0595473982, -0.0251234807, 0.0427006036, 0.0979674160, 0.0898935869, -0.0836661234, 0.0692444146, 0.0973159373, 0.0161054246, -0.0357822292, -0.0237318948, -0.0603088066, -0.0419665985, -0.0066544246, 0.0077280221, 0.0856466442, 0.0701344460, 0.0505854748, 0.0121064307, -0.0711648837, 0.0060251830, 0.0322797857, -0.0676441267, -0.0391781479, 0.1061871350, -0.0494026095, -0.0107360343, -0.0305566303, -0.0065722619, -0.0202063378, -0.0820401907, -0.0434246697, -0.0502690189, -0.0131221851, 0.0754716694, 0.0823066160, 0.0869204104, 0.0167613402, -0.0740762129, -0.0196883120, 0.0238949526, 0.0689689443, 0.0714183673, 0.0123354085, 0.0224314407, -0.0470985956, -0.0159346089, -0.0296618138, -0.0535146669, 0.0283132419, -0.0701599866, 0.0489623994, -0.0075761480, -0.0524467826, -0.1011361703, -0.0613564365, -0.0552225076, -0.0071691349, -0.0631955564, 0.0314622521, -0.0285016038, -0.0063150642, -0.0116840480, -0.0494363979, 0.0009415899, 0.0381001271, 0.0600910820, -0.0238722656, 0.0485667549, -0.0747265145, 0.0617786534, -0.0588475280, 0.0192869566, -0.0020630686, 0.0616900213, -0.0382803194, 0.0714279041, 0.0017987243, 0.0286016185, -0.0364928469, 0.0483663492, -0.0748742148, 0.0526179336, 0.0415145122, -0.0590559542, -0.0130485278, 0.0466802157, 0.0436247215, 0.0161948763, 0.0540578514, 0.0578385033, 0.0442526974, 0.0363912210, 0.0123134665, 0.0493445247, 0.0227328539, 0.0372760035, -0.0431649797, -0.0394442864, -0.0832232162, -0.0820356905, -0.0103119733, -0.0158646107, 0.0186235886, 0.0511280447, 0.0936105624, -0.0517712459, -0.0143689038, -0.0169422496, -0.0048556053, 0.0360379666, 0.0176929925, 0.0320417285, -0.0036995241, 0.0501217060, -0.0441334546, -0.0676376224, 0.0559660532, -0.0474023446, 0.0459726267, -0.0896509737, 0.0904098153, -0.0512325838, -0.0326012000, 0.0574558415, -0.0370730199, -0.0536527000, 0.0248782001, -0.0606346205, 0.0317732468, 0.0175704062, 0.0724942982, 0.0605838262, 0.0188452937, 0.0144870728, 0.0208570566, 0.0078007313, 0.0901707858, -0.0460026264, 0.0270095821, 0.0177017469, 0.0013038232, 0.0471563749, 0.0189624503, -0.0651985109, -0.0739500150, -0.0062060826, 0.0798607022, -0.0829240158, -0.0091964006, 0.0188188311, 0.0498642474, -0.0895345137, 0.0266405400, -0.0273810364, 0.0720614567, -0.0102007417, 0.0536263585, 0.0509295687, -0.0516128987, -0.0207209140, -0.0129570113, 0.0211060215, 0.0635089353, 0.0786023065, 0.0455697700, 0.0522931516, -0.0604000464, -0.0393501930, -0.0401986800, 0.0647381842, -0.0294908378, -0.0216905456, 0.0659973547, -0.0571069792, 0.0144828372, 0.0100806616, 0.0208727140, -0.0621027499, 0.0169820208, -0.0328198969, -0.0314401016, -0.0186006669, 0.0339858383, -0.0401868820, -0.0715331137, -0.0539183803, -0.0354553945, 0.0463727415, -0.0386433415, -0.0102449562, 0.0262066461, 0.0082751336, -0.0364821069, -0.0693815723, 0.0544741005, 0.0693038255, -0.0257452130, -0.0521233305, -0.0418645814, -0.0858445615, -0.0720824823, 0.0077894893, 0.0840104446, -0.0098889181, 0.0733950958, 0.0475215018, 0.0728808343, 0.0749405026, -0.0762295499, 0.0000888525, -0.0299709328, -0.0566772446, -0.0783370733, -0.0472867265, -0.0555028990, -0.0857670903, 0.0662034899, -0.0477495268, -0.0658594817, 0.0515628271, 0.0626051277, -0.0259267222, -0.0678815171, 0.0180300195, -0.0185096879, -0.0105183003, -0.0463789403, -0.0741439611, 0.0403234512, 0.0067239804, 0.0086189443, -0.0081022196, 0.0482783616, -0.0241724104, -0.0735402107, 0.0258233249, 0.0439493693, -0.0852992088, 0.0693937615, -0.0664023533, -0.0447978042, 0.0003418110, -0.0622309484, 0.0201056767, -0.0390614234, 0.0806718618, -0.0314092711, 0.0855237469, -0.0011211097, -0.0790177733, 0.0792332739, 0.0685335621, 0.0268371496, 0.0430528857, -0.0460015386, 0.0720211864, 0.0101352623, 0.0816296190, -0.0459300242, 0.0395151488, -0.0577448606, -0.0119320080, 0.0058333580, -0.0032890225, -0.0879947916, -0.0498617999, -0.0348542370, 0.0607718714, -0.0769085586, -0.0880092084, 0.0224816352, 0.0455057286, -0.0064949617, -0.0113484692, 0.0451882370, -0.0754343122, 0.0492792726, 0.0840345994, -0.0448956303, 0.0832912028, 0.0159147475, 0.0353047438, 0.0879393592, 0.0499191098, 0.0343774408, 0.0553175583, 0.0749783069, 0.0614039749, -0.0138545204, -0.0139958998, -0.0251029879, 0.0441437624, 0.0168204773, -0.0762577280, 0.0206166059, -0.0190591048, 0.0209151637, 0.0202846900, -0.0770964622, 0.0632861257, 0.0681227520, -0.0165360421, 0.0235742424, -0.0146722356, 0.0394033119, 0.0491826124, -0.0603533499, 0.0387093574, -0.0817423612, -0.0525029898, 0.0769828334, -0.0372258909, 0.0570164882, -0.0410862193, 0.0159788243, 0.0431994349, 0.0857690945, 0.0650186092, -0.0068652816, -0.0182607751, 0.0863307044, 0.0330364257, -0.0094994716, 0.0465056971, 0.0884548649, -0.0075662490, -0.0571241155, -0.0179593656, -0.0017157021, -0.0355069675, -0.0232978854, 0.0647826716, -0.0183600821, 0.0928755775, 0.0142097641, 0.0453472063, 0.0219612326, 0.0411436334, 0.0695033893, -0.0272681322, 0.0654199347, 0.0225682184, -0.0410956219, -0.0142503511, -0.0629119426, -0.0772697181, 0.0333641246, -0.0505018719, 0.0696750879, 0.0345520079, -0.0217873175, 0.0028201370, 0.0604742281, -0.0220700316, 0.0724371523, -0.0405159034, 0.0913204998, -0.0279093180, 0.0027476815, 0.0745180994, -0.0284483843, -0.0592596866, 0.0136803063, -0.0007585233, -0.0637357831, -0.0174920112, -0.0592975579, 0.0401944816, -0.0328933373, 0.0550018437, 0.0401095711, 0.0195926484, -0.0468835123, -0.0522057265, -0.0456233174, 0.0698693767, 0.0551317632, -0.0416117348, -0.0435378179, -0.0276800208, 0.0201271456, -0.0191895738, -0.0471403413, 0.0842720121, 0.0362714045, 0.0190290995, -0.0120259458, 0.0310610309, -0.0839023367, -0.0704290047, -0.0380554385, -0.0476778373, -0.0681822151, 0.0657179877, 0.0721982047, -0.0407684036, -0.0430497937, -0.0201345477, 0.0086395349, 0.0120272720, 0.0627417043, -0.0447478890, -0.0792459026, -0.0398506187, 0.0552287176, -0.0556048937, 0.0853629410, 0.0576547720, 0.0226770695, 0.0186821371, -0.0448265001, 0.0320209153, 0.0815007538, 0.0553618632, -0.0098273130, 0.0505165681, 0.0469424054, 0.0742390156, -0.0099383621, 0.0353012234, -0.0165431909, 0.0066125770, -0.0185875241, 0.0471366756, 0.0240225475, 0.0629025996, -0.0123290047, 0.0273259636, -0.0611574389, 0.0724863857, 0.0137486234, -0.0155834956, 0.0492748581, -0.0315890387, 0.0592590682, 0.0531416498, -0.0002761606, 0.0480193794, -0.0756939501, 0.0568796620, 0.0385500751, 0.0032205025, 0.0732652768, -0.0642868057, -0.0505981669, -0.0199223012, -0.0476662442, -0.0655340552, -0.0374146290, -0.0769927055, -0.0396025553, -0.0893512666, -0.0655895025, 0.0337778702, 0.0275363177, -0.0521515831, -0.0528777279, -0.0173565596, 0.0011908745, -0.0992017463, -0.0820631385, -0.0130872261, -0.0652305260, 0.0609718636, -0.0727638453, 0.0722289756, -0.0577469170, -0.0069038365, -0.0296968818, -0.0016029170, 0.0427898988, -0.0868493095, -0.0234991312, -0.0757069811, -0.0430535004, 0.0036256828, -0.0885889754, 0.0350506231, 0.0582861826, -0.0273313839, 0.0476120859, -0.0327632055, -0.0016522810, 0.0695590600, -0.0327494591, -0.0509297661, 0.0282135904, -0.0731418207, 0.0852664709, 0.0750309825, 0.0729387105, 0.0180556849, 0.0077582463, 0.0612686388, -0.0794275030, -0.0018547997, -0.0360322036, -0.0607558228, -0.0074297776, -0.0625765622, 0.0019682983, 0.0072713052, -0.0378751494, 0.0407961383, -0.0370917805, 0.0234589223, 0.0331263728, -0.0494677462, -0.0744800568, 0.0154942153, -0.0101694316, -0.0807834417, -0.0397411622, -0.0032640996, -0.0286548082, 0.0194149241, -0.0359357633, 0.0598040149, 0.0006317490, 0.0476090312, 0.0826665387, -0.0959945098, -0.0574383661, 0.0089765824, -0.0520668291, -0.0360258222, -0.1053501815, 0.0222287085, 0.0207180604, -0.0311600864, -0.0799094588, 0.0415951870, 0.0783965364, -0.0728191137, 0.0469891056, -0.0314990841, 0.0488046557, -0.0299282223, -0.0538120605, 0.0435814373, -0.0297160540, -0.0206878912, 0.1041230783, -0.0687695369, 0.0382264033, -0.0291927867, -0.0959461927, 0.0586211160, 0.0243820939, -0.0529507175, 0.0240064040, -0.0034142393, 0.0702001750, -0.0024366244, -0.0051568132, -0.0645439476, 0.0432021841, 0.0362364762, -0.0609504879, -0.1018032283, 0.0107587446, -0.0443931967, -0.0542172268, -0.0208254810, 0.0408979915, 0.0463585928, 0.0598801039, -0.0352682211, 0.0906958878, -0.0404074229, -0.0641048402, 0.0358021855, -0.0822880119, -0.0548310988, -0.0279544499, 0.0615104362, -0.0097140977, -0.0744026452, -0.0960794687, -0.0197388958, 0.0667049959, 0.0828534439, 0.0295336340, 0.0335803032, 0.0874571651, -0.0909260511, -0.0487058498, -0.0093480097, 0.0167365056, -0.0370929949, 0.0365751274, -0.0572659709, -0.0383475162, 0.0521071069, 0.0423026681, -0.0351095200, -0.0453617685, -0.0085674487, 0.0142867155, 0.0671107247, 0.0053629116, -0.0010817408, 0.0801722035, 0.0924687907, -0.0843690038, 0.0729140118, 0.0242079012, -0.0187348295, -0.0271293726, -0.0717849955, 0.0089280363, -0.0176798292, -0.0245511737, 0.0182327535, 0.0629380718, 0.0598101243, 0.0325374492, 0.0537065230, 0.0297946390, 0.0130238747, 0.0661664829, -0.0382802524, -0.0423182026, -0.0731873736, 0.0270062983, -0.0935514644, 0.0063611874, 0.0389265977, -0.0460132360, -0.0388496444, -0.0335419104, -0.0110012162, 0.0051314128, -0.0658450872, -0.0544451959, 0.0481343456, -0.0242548194, 0.0407828726, -0.0600389913, -0.0345356762, 0.0672411174, 0.0265962314, -0.0267701261, -0.0284867473, -0.0751454681, 0.0733893663, -0.0639443249, -0.0579203218, -0.0709073916, -0.0285608936, -0.0325986184, 0.0536095165, 0.0012878439, -0.0469645262, 0.0697756633, -0.0037560172, 0.0392554030, -0.0110980868, 0.0692301318, 0.0168842655, 0.0541217513, 0.0621713698, -0.0647671744, -0.0358644649, -0.0027468514, -0.0070552300, -0.0551859587, -0.0143770361, -0.0848660842, 0.0663734898, -0.0073019951, 0.0705645010, -0.0285635144, -0.0055434597, 0.0082598273, -0.0363200493, 0.0151773077, -0.0030684320, -0.0789214149, -0.0305528548, 0.0840110034, 0.0181370638, -0.0520878173, -0.0063741240, -0.0399590619, -0.0762237683, -0.0302192699, -0.0080154967, 0.0656524301, -0.0900412574, -0.0178965162, 0.0755638704, -0.0135655059, -0.0285075791, -0.0397988148, 0.0436952561, 0.0291959569, 0.0846977085, -0.0851427391, 0.0885410011, -0.0507189184, 0.0193978567, 0.0134804863, -0.0116877696, 0.0397768803, 0.0140420757, 0.0772822872, -0.0398166329, -0.0832859650, 0.0869557038, -0.0680736899, -0.0689675137, 0.1021272913, 0.0114112822, -0.0727224946, -0.0061430312, 0.0673904344, 0.0336712040, 0.0151775414, 0.0592433996, 0.0405749567, 0.0380234644, -0.0262465794, 0.0063111051, -0.0565508567, -0.0015880605, -0.0979593918, -0.0218529161, 0.0955072716, -0.0201997813, 0.0477914102, 0.0781610981, 0.0849124044, 0.0905696973, 0.0621970184, -0.0248360876, -0.0190518182, 0.0209660791, -0.0821397305, 0.0184621122, -0.0338772573, 0.0824679285, -0.0633594915, -0.0091388887, -0.0089083184, 0.0338452794, -0.0116635012, -0.0564492717, -0.0954678506, -0.0344620012, -0.1048700139, 0.0317385755, -0.0905734301, -0.0408174135, 0.0567247197, 0.0462481715, 0.0687666237, -0.0817804039, 0.0330718122, 0.0369153768, -0.0440238900, 0.0558789335, 0.0378360823, 0.0461706370, 0.0478807092, 0.0288636517, 0.0470810346, 0.0327252708, 0.0236759800, -0.0494982898, -0.0314630158, -0.0352708772, -0.0112329219, 0.0271946304, -0.0769381002, -0.0532768294, 0.0295586754, 0.0238785427, -0.0425754078, -0.0417588353, 0.0257293507, 0.0308656879, 0.0226466563, -0.0382700823, 0.0016905637, -0.0189478006, -0.0638470948, -0.0590756834, 0.0493492633, 0.0482478738, -0.0133633604, 0.0320043415, 0.0871424600, 0.0473225489, -0.0717702210, 0.0666980892, -0.0243554804, 0.0107934829, 0.1060087010, 0.0018059554, 0.0286253840, 0.0353285335, -0.0895460397, 0.0088636726, 0.0767017826, 0.0401749350, -0.0183327068, -0.0474345684, 0.0674092472, -0.0750341862, 0.0336212628, -0.0615306012, -0.0361285843, -0.0566044711, -0.1086891964, 0.0372499041, -0.0635371283, -0.0340176895, 0.0330517441, 0.0767181814, -0.0494605079, 0.0063270754, 0.0360889845, -0.0834809318, 0.0592179485, 0.0316013992, 0.0505547002, 0.0271570254, -0.0376138166, 0.0676662251, 0.0219188016, -0.0912392959, -0.0359758176, 0.0290886592, -0.0213009380, 0.0588212945, 0.0671216026, 0.0636267215, -0.0629688576, -0.0497269258, 0.0562099256, -0.0331437029, -0.0306173656, -0.0438106246, -0.1083567515, -0.0261937361, -0.0516502298, 0.0692355707, -0.0014560848, -0.0391905643, -0.0576586686, 0.0327519774, -0.0130802635, -0.0903753787, -0.0946838185, -0.0791429281, 0.1171937510, 0.0909341946, -0.0017132534, -0.0506243557, 0.0619384497, 0.0648797080, 0.0914990082, 0.0566956922, -0.0691044554, 0.0121418461, 0.0483796038, 0.0541743338, 0.0839772075, 0.0817686617, 0.0358821563, -0.0940922424, 0.0598740913, -0.0091905966, 0.0716880262, 0.0382588208, -0.1096796244, -0.0521409772, -0.0941044241, -0.0104707805, -0.0061889933, -0.0947999880, 0.0619949251, -0.0311496463, -0.0107014449, -0.0126631856, 0.0472811647, -0.0373265631, 0.0101419389, -0.0148542114, 0.0630560145, -0.0422051996, 0.0787678957, 0.0124150431, 0.1149468869, 0.0375951752, -0.0870300159, -0.0754353851, -0.0760927573, 0.0427598208, -0.0020594290, 0.0360477120, -0.0660366416, -0.0910419896, -0.0759145990, 0.0625894442, -0.0153776119, 0.0366459079, -0.0475721322, 0.0630247593, -0.0358167812, -0.0103125526, 0.0715260729, -0.0449195206, 0.0110449074, -0.0291263964, 0.0623648129, 0.0524529889, 0.0071828892, -0.0550145991, 0.0068383720, 0.0008146664, 0.0611977689, -0.0394471996, -0.0261925198, 0.0335375257, 0.0064263740, -0.0608501658, 0.0766839460, -0.0776518807, -0.0782804787, -0.0318161063, 0.0721324459, -0.0324857906, 0.0122407284, 0.0876659676, -0.0559426583, 0.0294244215, 0.0558729209, 0.0465815663, -0.0587104671, 0.0293094646, 0.0375447050, 0.0612124093, -0.0372340865, -0.0201864149, -0.0720465556, 0.0811506808, -0.0314635523, 0.0098843025, -0.0428961441, 0.0285196025, 0.0303005558, 0.0735113025, -0.0387677066, -0.0512140021, -0.0463462584, 0.0475673750, 0.0200103726, -0.0030316857, 0.0094329789, -0.0450993255, 0.0081820041, 0.0293432251, -0.0969818905, 0.0651839599, -0.0321439840, -0.0542167798, 0.0073671481, -0.0322064050, 0.0852366984, -0.0750391036, 0.0173766948, -0.0054721953, -0.0115237115, -0.0029256647, -0.0764255896, -0.0167733263, 0.0672644004, 0.0558310486, 0.0606553517, -0.0673326403, -0.0460256040, 0.0754631609, -0.0661343411, -0.0787874833, 0.0661530718, 0.0405311175, 0.0063538514, -0.0152102429, 0.0163836963, -0.0586073250, -0.0262098890, 0.0732278302, 0.0284126271, 0.0337146148, -0.0920264944, -0.0255674422, 0.0264516789, -0.0764380991, -0.0628358498, -0.0750705004, -0.0223939400, -0.0335303769, -0.0467895865, -0.0266389363, -0.0069459327, 0.0562701002, 0.0754453689, 0.0675408915, -0.0676740780, 0.0234998316, 0.0642162338, 0.0417890251, 0.0602454320, -0.0432356000, -0.0359195434, -0.0083956672, 0.0778137967, 0.0168394968, 0.0707384124, -0.0008636031, -0.0044481116, 0.0723189414, 0.0349472091, -0.0346412510, -0.0631662458, 0.0175665896, 0.0574028492, 0.0166783966, -0.0019031202, 0.0731404796, 0.0396550223, -0.0422668718, 0.0778292716, 0.0186676644, -0.0773658901, 0.0409370549, -0.0578248613, -0.0647145882, 0.0842531994, 0.0796780735, -0.0779545307, 0.0170184448, 0.0252250247, 0.0512327962, 0.0652050748, 0.0222561546, -0.0190083012, -0.0418958776, -0.0696974769, 0.0539463349, 0.0547402836, 0.0050569475, -0.0671415776, 0.0124650728, -0.0263494533, -0.0463171676, -0.0177268330, 0.0875145942, 0.0031049028, -0.0907799080, 0.0784120485, 0.0548892319, -0.0165657662, 0.0820726380, -0.0868784860, 0.1019484103, -0.0033921590, 0.0289809126, 0.0245854445, -0.0359657742, -0.0726368576, 0.0475414135, 0.0102564571, 0.0616454929, 0.0475005619, -0.0334129483, -0.0598270297, 0.0212674197, 0.0311420262, -0.0661586076, 0.0241925251, 0.0240720138, -0.0460392125, 0.0140289571, 0.0140371369, 0.0545358211, 0.0767183974, 0.0441648699, 0.0582681708, -0.0544590913, -0.0033489945, 0.0323007442, 0.0277443975, -0.0179083087, -0.0914743394, -0.0543042086, 0.0388956070, -0.0438783057, 0.0326935276, 0.0549733266, 0.0694044009, 0.0246151965, 0.0624339618, -0.0267212633, -0.0727810040, 0.0177284814, -0.0899072289, -0.0373627208, 0.0073020183, -0.0037673430, 0.0623295158, -0.0053080767, -0.0544840172, -0.0273721032, -0.0331676230, 0.0134540303, 0.0193111449, 0.0396562926, -0.0488885827, -0.0565712191, 0.0000692425, 0.1028228700, -0.0020418770, -0.0562314428, -0.0009301233, -0.0079882098, -0.0247738175, -0.0276905019, -0.0265044924, -0.0545221381, -0.0459261276, -0.0091982596, -0.0159636717, -0.0018609673, -0.0665647238, -0.0675367862, 0.0545028895, -0.0113426186, 0.0331397317, -0.0277699735, 0.0829090253, 0.0404845066, 0.0198367164, -0.0627101064, -0.0034923409, 0.0004280301, 0.0290671140, -0.0800355300, -0.0614431649, 0.0783810690, 0.0274308305, 0.0879450664, 0.0229055695, 0.0475941375, 0.0079893619, 0.0072636842, 0.0072515928, 0.0662301257, 0.0025137980, -0.0466688834, 0.0757478252, -0.0370620415, 0.0851388723, -0.0316024646, 0.0072899172, -0.0405681729, -0.0134896189, -0.0139439907, -0.0511409901, 0.0060317088, 0.0059286598, 0.0125830173, -0.0567612834, 0.0694734231, -0.0572327599, -0.0664768443, -0.0148150725, -0.0556221753, 0.0528451316, -0.0412276201, -0.0939048976, 0.0577022620, -0.0457365178, 0.0026792414, 0.0006827803, 0.0184320807, -0.0425129682, 0.0526631214, 0.0747038126, -0.0427703895, 0.0111672608, -0.0141271539, -0.0592268780, -0.0036971157, 0.0628825352, -0.0338246487, -0.0072595114, -0.0786148757, -0.0525071099, -0.0732292756, -0.0007757045, 0.0147595508, -0.0324404277, 0.0537878983, 0.0154654784, 0.0610908419, 0.0023489182, 0.1028244123, -0.0399206802, -0.0343785435, 0.0367097780, -0.0576032735, 0.0383320451, 0.0411625206, -0.0023286790, -0.0260929000, 0.0060468763, -0.1018005088, -0.0159568172, -0.0563180409, 0.0039826888, -0.0917393714, 0.0717873722, -0.0457015075, 0.0390865654, 0.0184248127, -0.0317621306, 0.0767363235, 0.0583578311, -0.0452146083, -0.0492899641, 0.0485149696, -0.0594464652, -0.0597395599, 0.0795456022, -0.0787632689, 0.0260774419, 0.0588172898, -0.0148265697, 0.0712705031, 0.0748270452, -0.0548072457, 0.0741327778, -0.0289407913, 0.0131108519, -0.0740627944, 0.0221258104, 0.0396159440, -0.0059254053, 0.0561472401, 0.0870191976, 0.0273663625, -0.0005192622, -0.0524003096, -0.0241132062, -0.0583955795, -0.0050063897, 0.0649353042, -0.0786414295, -0.0320493653, 0.0285810586, 0.0282139983, 0.0164787099, -0.0038012238, -0.0741759986, -0.0715513825, 0.0577774458, 0.0698542818, -0.0773134604, 0.0676444843, 0.0342687331, 0.0597629584, -0.0044434015, 0.0528010391, 0.0441668965, -0.0611292310, -0.0176872965, -0.0325318575, -0.0211515334, 0.0093355477, -0.0130806128, 0.0293028988, 0.0356209576, -0.0303704664, 0.0423955098, 0.0247114822, 0.0275868606, -0.0802267492, 0.0175232794, -0.0478093810, 0.0559842326, -0.0314095914, -0.0837546214, -0.0539222173, 0.0522215106, 0.0622847266, 0.0710395277, 0.0049135033, 0.0192843080, -0.1075938791, 0.0405151732, -0.0405222625, 0.0059351642, -0.0185346119, 0.0433077924, -0.0636847913, 0.0517639108, -0.0296501648, -0.0759598985, 0.0181067865, 0.0375339910, 0.0603008009, 0.0586423017, -0.0232826620, -0.0529903881, 0.0598978549, 0.0556246527, -0.0807647929, 0.0679242536, -0.0866735801, 0.0211671237, -0.0642433986, 0.0265876800, 0.0050727376, 0.0027686700, 0.0337681323, 0.0578258298, -0.0261707976, -0.0289680809, 0.0224403497, 0.0135823768, 0.0231303591, -0.0605117641, 0.0496178195, -0.0331765264, -0.0144074084, 0.0541278459, 0.0552700721, -0.0750215501, 0.0269401409, 0.0043332451, -0.0213240292, -0.0323762409, 0.0440363660, -0.0169700552, -0.0729854628, -0.0187213700, -0.0339601822, 0.0437432639, 0.0691790357, 0.0849704519, 0.0284398794, -0.0182722788, 0.0099279452, 0.0731785372, 0.0156132625, 0.0562899671, -0.0852541327, -0.0866124406, -0.0427951366, -0.0074947192, -0.0353463143, -0.0094971815, -0.0963253230, 0.0661790520, 0.0356554389, 0.0756846592, -0.0387950279, 0.0296557732, 0.0878746733, -0.0482897200, 0.0577592142, -0.0537770167, 0.0488013998, 0.0569379739, -0.0006045674, 0.0496466160, 0.0454666354, 0.0632032081, 0.0192125663, -0.0472934134, -0.0749640614, 0.0686134025, -0.0771579221, 0.0430804156, -0.0577324629, 0.0156767871, -0.0182990655, -0.0126187205, -0.0710088685, 0.0509730875, -0.0700952932, -0.0188430436, 0.0957151279, -0.0621979758, -0.0170637406, -0.0133401472, 0.0149225658, -0.0451036543, 0.0704515800, -0.0064636939, -0.0145267919, -0.0519149154, 0.0814107731, 0.0524984226, 0.0461739153, -0.0677853748, -0.0668721721, -0.0793778598, -0.0108909430, 0.0618844256, 0.0436060913, -0.0470703021, 0.0160740167, 0.0533266962, -0.0365580171, -0.0825603157, -0.0723666474, 0.0489345528, 0.0286688544, -0.0166704450, 0.0317181684, -0.0113626011, -0.0687217638, -0.0708704814, -0.0590331256, -0.0291955676, -0.0317569487, -0.0682398453, 0.0623034611, -0.0027533914, -0.0647773445, 0.0641815811, 0.0150051052, 0.0282414220, 0.0644927695, 0.0240344107, -0.0756770670, 0.0753314197, 0.0523147434, 0.0162613131, -0.0281251390, -0.0511917770, 0.0441018343, 0.0393359065, -0.0488192514, 0.0888464898, -0.0290704705, -0.0574642494, 0.0340213366, 0.0691491887, 0.0266892537, 0.0449023843, -0.0892569870, -0.0839560479, -0.0439435355, 0.0025692300, -0.0045763915, 0.0098366058, 0.0226399302, 0.0572956987, -0.0217050146, 0.0610118732, 0.0051168087, 0.0712469295, -0.0113845244, -0.0421980619, -0.0297739711, -0.0574566163, -0.0662616789, 0.0273419339, -0.0498103537, 0.0102325678, -0.0085198591, 0.0550080836, 0.0662302300, -0.0690519512, -0.0872276425, 0.0299007054, 0.0442419276, -0.0022765086, -0.0271261670, 0.0100990627, -0.0825067312, 0.0261583943, -0.0604428500, -0.0794714689, 0.0545968488, -0.0550108142, -0.0692183971, 0.0222447161, -0.0620357469, 0.0139537007, -0.0343520828, -0.0575343892, 0.0290484130, -0.0225686375, 0.0792228729, -0.0172068607, -0.0295722168, -0.0657852069, -0.0066195009, 0.0526535623, -0.0569381937, 0.0237524584, -0.0234557223, -0.0644359887, -0.0624560826, 0.0668174848, 0.0282766987, -0.0141202379, 0.0558074452, 0.0552220307, -0.0097320089, 0.0518950522, -0.0322994106, -0.0674831644, -0.0545680113, -0.0524139181, -0.0487247296, -0.0635187104, -0.0417896658, 0.0865790471, 0.0734998807, -0.0430224389, 0.0630963296, 0.0593569987, -0.0493947268, 0.0695411414, -0.0683642626, 0.0636028126, -0.0333100557, -0.0484921709, -0.0751702189, 0.0761398450, 0.0664523840, 0.0625952706, 0.0642866716, 0.0586092733, -0.0002459195, -0.0581052750, -0.0200821478, 0.0147494534, 0.0793830603, -0.0106006041, -0.0142423091, -0.0740109384, 0.0492625087, -0.0447212681, -0.0423215181, -0.0084442776, 0.0654949248, 0.0565809384, -0.0714436918, -0.0009289957, -0.0127312979, 0.0095001897, 0.0312654227, -0.0171720609, -0.0517471209, -0.0182949901, -0.0464131869, -0.0793866813, 0.0529397465, 0.0755592957, -0.0231717825, 0.0501732044, 0.0447279699, 0.0124215297, 0.0592385307, 0.0700230449, -0.0212413110, 0.0649532303, -0.0044611259, -0.0747701600, 0.0335136764, 0.0480184108, -0.0643068925, -0.0180824231, -0.0580858923, 0.0578251742, -0.0592138208, -0.0227742828, -0.0271514934, -0.0646864027, 0.0825726166, 0.0454774238, -0.0702688396, 0.0019667808, 0.0065256609, 0.0538897663, 0.0109267076, -0.0630277023, 0.0471707135, -0.0814724341, 0.0605389923, 0.0293217823, 0.0505455099, 0.0865027830, 0.0251696371, 0.0231841467, 0.0576391742, -0.0068762973, 0.0665184408, 0.0275680069, -0.0131834261, -0.0108844973, 0.0139676314, -0.0499274731, -0.0269123893, 0.0820559636, -0.0722194612, -0.0602971651, -0.0735528916, -0.0363113210, 0.0552539863, -0.0477639511, -0.0643351153, 0.0441365018, 0.0029409959, -0.0318527073, 0.0463902391, -0.0569735058, 0.0700800717, 0.0045668879, -0.0044978927, 0.0200203061, -0.0558309704, 0.0262927003, -0.0096768728, -0.0146559635, -0.0210650899, -0.0320261568, 0.0174543224, 0.0344183482, 0.0072812531, 0.0141877737, 0.0801547468, 0.0184621345, -0.0781127512, -0.0667245686, 0.0575521067, -0.0244828183, -0.0412849933, -0.0664105490, -0.0139415376, -0.0087829605, -0.0665587038, 0.0438339710, 0.0248576906, 0.0642024353, 0.0545933917, -0.0139532946, 0.0760124400, -0.0322638452, 0.0374830887, -0.0620016754, -0.0538004637, 0.0631100312, -0.0262749866, 0.0465062521, 0.0476691052, -0.0794093236, -0.0409093574, 0.0263915434, 0.0891262367, -0.0505441763, -0.0456254669, 0.0353634655, 0.0389760807, 0.0071974052, -0.0076998090, 0.0174836181, -0.0220075026, 0.0094168214, -0.0325070955, 0.0502893589, 0.0481263623, 0.0181863606, 0.0187720433, 0.0315937027, 0.0930627510, -0.0432211384, 0.0472705700, -0.0124078263, -0.0212863591, 0.0322406627, 0.0070203124, 0.0475796126, 0.0453408882, 0.0122669302, 0.0532646142, 0.0287794285, 0.0328865461, 0.0166467410, -0.0658494905, 0.0227690935, 0.0598488115, 0.0392377339, -0.0272362307, -0.0624912865, -0.0400023572, -0.0168937873, -0.0327382050, -0.0255593397, -0.0023771408, -0.0114442166, -0.0054522040, -0.0868913457, -0.0716608539, -0.0108614247, -0.0716272295, 0.0182655901, -0.0230236426, 0.0267317593, 0.0458393469, 0.0392084718, -0.0346886516, -0.0058320034, 0.0464859642, -0.0208379701, 0.0835848972, -0.0527305864, 0.0277377535, 0.0254557077, 0.0423687398, -0.0382577255, -0.0787567273, -0.0135292849, -0.0629622117, -0.0802660957, 0.0326542780, -0.0114710564, -0.0848913714, 0.0307349022, 0.0726660714, 0.0489066951, -0.0532911159, 0.0055983067, -0.0492536649, -0.0769999847, 0.0668891743, -0.0454217009, -0.0744000748, -0.0541347079, 0.0625601411, 0.0120097212, -0.0842778683, 0.0433849320, 0.0054971171, 0.0873729661, -0.0417379327, -0.0123906946, -0.0179319140, -0.0289956573, 0.0017520818, 0.0575247332, 0.0620706342, -0.0511977486, 0.0184868313, 0.0591314770, -0.0929868892, -0.0758681521, 0.0605857261, -0.0750367120, 0.0075168656, 0.0967769176, 0.0339349583, -0.0662376061, -0.0853967145, -0.0074709170, 0.0769241676, 0.0261241030, -0.0691641644, -0.0580064766, -0.0341755413, 0.0337286629, 0.0603861995, 0.0381691791, 0.0355818644, -0.0677640885, -0.0774061009, 0.0213875789, 0.0363327451, -0.0687371567, -0.0563391298, 0.0518671833, 0.0213239808, -0.0166500490, 0.0340599380, 0.0227060318, 0.0034536254, 0.0010665794, 0.0147767728, -0.0387192518, -0.0728711486, -0.0597811900, -0.0917185843, 0.0586410947, -0.0516589023, -0.0435353070, 0.0702567175, 0.0077124597, 0.0342875719, -0.0925385505, -0.0146799535, 0.0095527014, 0.0183630101, -0.0132910786, -0.0800287202, -0.0004204047, 0.0419109687, -0.0747559071, -0.0832720771, 0.0564205199, 0.0274118409, -0.0173210707, 0.0749171376, -0.0806773379, -0.0479418412, 0.0526961386, -0.0846812502, -0.0019728709, -0.0845533013, 0.0322261490, -0.0453870557, -0.0565362163, 0.0546502396, -0.0456689969, 0.0318970196, 0.0014766061, -0.0668891147, 0.0745851696, -0.0611203089, 0.0267643947, 0.0745680481, 0.0737700760, -0.0703812763, -0.0156166404, -0.0835750625, -0.0618369207, -0.0356637165, 0.0647287220, 0.0133657791, -0.0827324092, 0.0553917140, 0.0748528317, -0.0129276533, -0.0508087240, -0.0719521865, -0.0262011401, 0.0105536869, 0.0155544169, -0.0056335158, -0.0092305215, 0.0172108822, -0.0106927156, -0.0342369601, 0.0151811419, 0.0272360742, -0.0719844550, -0.0600241646, 0.0551053770, -0.0914856046, 0.0416018367, 0.0206027869, 0.0500183627, -0.0086862287, -0.0201307330, -0.0383945480, -0.0006056793, 0.0623984598, -0.0897249430, 0.0141781066, 0.0495461337, 0.0713549927, -0.0476784408, -0.0454296917, -0.0098650232, -0.0550147183, -0.0960732251, -0.0594181567, -0.0357196108, 0.0337739475, -0.0492114611, 0.0623308308, 0.0625226051, -0.0669390783, 0.0701182112, -0.0717794001, -0.0649360344, 0.0444276817, 0.0742784962, 0.0006688011, -0.0127884801, 0.0030346802, -0.0132330293, 0.0773087665, -0.0212270170, -0.0875281990, 0.0213381983, -0.0755146667, -0.0028496727, 0.0007458845, 0.0797135532, 0.0248605516, -0.0601245835, 0.0259191766, 0.0495057888, 0.0052554710, -0.0423416197, 0.0016691305, -0.0004509851, 0.0898897797, 0.0815256760, 0.0072993534, -0.0270237625, -0.0315872654, -0.0853627324, 0.0231930278, 0.0710025430, 0.0049766004, -0.0077688806, -0.0753761083, -0.0458170921, 0.0631542876, -0.0210924149, -0.0342178419, 0.0477664582, 0.0345002040, 0.0263424143, -0.0118296919, 0.0496356115, 0.0172958896, -0.0850733817, -0.0062425192, -0.0200654771, -0.0799572319, -0.0231622625, 0.0596269146, -0.0355134793, 0.0078536281, 0.0570182167, -0.0114564821, -0.0491237231, -0.0472753532, -0.0249937698, -0.0727899596, -0.0308538601, 0.0567167774, 0.0374775976, 0.0560323000, 0.0302512627, -0.0048745968, -0.0381755456, -0.0914833620, 0.0655644983, 0.0658214688, 0.0290628206, -0.0203814711, -0.0374786071, -0.0040821331, -0.0403231569, -0.0626232401, -0.0000160825, -0.0081942845, 0.0823919252, 0.0120624760, 0.0188394599, -0.0410622172, 0.0606450588, 0.0015266231, 0.0672916621, -0.0140213175, 0.0617624745, -0.0786116645, -0.0633968189, -0.0611395501, 0.0891989097, -0.0205932036, -0.0186828040, 0.0405641422, 0.0782201588, -0.0490980111, 0.0772202834, 0.0384847820, 0.0289145000, 0.0855820850, -0.0283640232, 0.0526166819, 0.0645340011, 0.0722915009, 0.0445156842, 0.0087211216, 0.0469316356, -0.0569802262, -0.0024969338, -0.0843171626, 0.0596522093, -0.0409025252, 0.0025221813, -0.0199977569, -0.0173799489, 0.0469459482, 0.0061595398, 0.0201790053, -0.0678452179, -0.0314228274, -0.0094581470, 0.0037558698, 0.0462987125, 0.0320802331, -0.0288766455, 0.0016522484, -0.0335275717, -0.0649946034, 0.0165168252, 0.0719108582, -0.0506102480, -0.0603205934, 0.0003607184, 0.0222465042, -0.0769682676, 0.0590037666, 0.0435366593, 0.0054902141, -0.0192556623, 0.0683153868, 0.0183085147, 0.0052401717, 0.0442355797, -0.0495012254, 0.0036959373, 0.0506288335, -0.0742941871, -0.0154666761, 0.0264657345, 0.0696717277, 0.0115516661, -0.0331619531, -0.0529437996, -0.0376487523, -0.0319849476, -0.0709138587, 0.0393402986, -0.0801373497, 0.0312651917, 0.0169877037, 0.0774670094, 0.0677208304, -0.0378575549, -0.0633785874, 0.0533785149, 0.0528913923, 0.0025686766, 0.0781098157, 0.0438011251, 0.0879064426, 0.0667575896, 0.0563244112, -0.0296055600, 0.0287707206, -0.0546847880, -0.0126571050, -0.0216114260, -0.0855029374, 0.0605536327, -0.0541401431, 0.0103683872, 0.0489487946, 0.0571373329, 0.0066877082, -0.0088982712, -0.0335480534, -0.0122765908, 0.0287243929, -0.0298910420, -0.0290159937, -0.0049086907, -0.0674232543, -0.0688782483, 0.0079355985, -0.0375247188, -0.0606532358, -0.0777014345, 0.0281813331, 0.0198181551, -0.0606598631, -0.0694532394, 0.0978973135, -0.0037800132, -0.0396016687, 0.0443348363, 0.0784529969, -0.0105702979, -0.0147826839, 0.0072664702, -0.0498067886, -0.0044762022, -0.0026620226, 0.0675265789, -0.0142272748, -0.0780292079, 0.0592427664, 0.0055429712, -0.0235184468, 0.0674328208, 0.0035902145, -0.0235327017, 0.0106500173, 0.0274208821, -0.0465792343, -0.0800920501, 0.0491821207, 0.0524408631, -0.0353497639, 0.0853449106, 0.0348105505, -0.0136332372, 0.0384037495, -0.0152407037, -0.0464237034, 0.0664523691, -0.0000104975, 0.0562484674, 0.0652225837, 0.0811764672, 0.0018653778, -0.0685266256, 0.0310942214, -0.0043880516, 0.0420865156, 0.0142560946, 0.0716216490, 0.0657988936, -0.0264032967, -0.0490812510, -0.0919679776, 0.0499853007, 0.0466444418, -0.0610871501, 0.0748050362, 0.0191777535, -0.0740726292, 0.0744745061, 0.0509887859, 0.0736475065, 0.0157247614, 0.0017190389, 0.0775826275, 0.0788760483, 0.0545895658, 0.0191254430, -0.0032409681, 0.0337826461, 0.0519319847, -0.0194271766, 0.0476870760, -0.0095167719, 0.0397152454, -0.0598503016, 0.0026210798, -0.0074344482, 0.0084715569, 0.0392754264, -0.0778650343, 0.0443692431, 0.0377509110, -0.0701462254, -0.0379211418, 0.0444935746, 0.0241180733, -0.0599186793, 0.0068407138, -0.0364560224, 0.0287119504, 0.0807683244, 0.0593508519, 0.0384453684, -0.0428084955, -0.0289226100, -0.0791397616, -0.0506027155, 0.0595508814, 0.0049184733, -0.0942890495, 0.0357980765, 0.0333301052, 0.0059323004, -0.0269501284, 0.0474746004, -0.0041106804, 0.0499870814, 0.0265151821, 0.0472292304, 0.0058685131, -0.0283365753, -0.0662858710, -0.0230177883, 0.0075722924, -0.0735646412, -0.0465293303, -0.0678272769, -0.0460804403, 0.0748089999, 0.0252776425, -0.0153449476, 0.0499308519, 0.0632184073, 0.0537151210, 0.0272167157, 0.0672574863, 0.0694240630, -0.0389772616, -0.0520012341, -0.0514616705, 0.0035329363, -0.0440768637, -0.0503006577, -0.0263407715, 0.0785216764, 0.0614156872, 0.0644715428, 0.0153907528, 0.0187967271, -0.0278325845, -0.0325688943, 0.0017434339, -0.0657869205, -0.0237859432, -0.0720575452, -0.0002364838, 0.0485507511, 0.0843876153, -0.0274609607, -0.0713395476, 0.0801694766, -0.0165909845, 0.0514042564, -0.0621766672, -0.0003252842, 0.0527321286, 0.0570537969, 0.0002773889, 0.0764052942, 0.0426025093, -0.0423859768, -0.0570560172, -0.0203962810, -0.0510186516, 0.0751324594, -0.0436342359, -0.0761936083, 0.0526787527, 0.0212999079, -0.0772845447, 0.0370926671, -0.0322647393, -0.0036167537, 0.0099120643, 0.0103661558, 0.0724579915, 0.0614812821, 0.0794214383, -0.0105515551, -0.0343751125, 0.0114052482, 0.0801646560, 0.0360972472, -0.0269328486, 0.0517243035, 0.0028461628, 0.0714407042, -0.0627282336, 0.0431831665, 0.0797272921, -0.0529412143, 0.0177055821, 0.0727794841, 0.0536697134, -0.0658346862, -0.0447714515, 0.0439965613, 0.0353057235, -0.0055800937, -0.0631168857, -0.0831752941, 0.0299655348, 0.0329791494, 0.0668165982, -0.0767957792, -0.0370661877, -0.0050401832, -0.0464298651, 0.0190709401, -0.0269392543, 0.0141392574, 0.0280796904, -0.0024139532, -0.0116778892, -0.0059098806, 0.0577215478, -0.0064639836, -0.0268290266, -0.0174692012, 0.0827310011, -0.0045473641, -0.0640099645, 0.0536143892, -0.0219309498, -0.0759996995, 0.0448512249, 0.0602305159, 0.0073513840, -0.0358903371, 0.0375246219, 0.0558200106, -0.0442935191, 0.0161833279, -0.0530050173, -0.0580707006, 0.0487652272, 0.0132613666, 0.0046544378, -0.0523238890, -0.0750631765, -0.0327079035, 0.0542418212, -0.0448850840, -0.0240218453, -0.0312271100, -0.0692374185, 0.0602554232, -0.0266846921, 0.0259951875, 0.0260925386, 0.0583866946, 0.0565162115, 0.0479631424, 0.0720279515, -0.0592070781, 0.0218752362, 0.0498005003, 0.0783672482, 0.0604244024, -0.0040194206, -0.0092229424, 0.0011689662, 0.0771408305, 0.0630034506, 0.0200731810, -0.0216752272, 0.0421347581, 0.0032597391, -0.0693253949, -0.0185551532, 0.0444519818, 0.0668655187, 0.0253327955, 0.0366792344, -0.0801133513, -0.0636903793, 0.0176386051, 0.0689568967, 0.0185668003, -0.0014509639, 0.0271742810, -0.0635961816, 0.0656749681, -0.0521934666, 0.0263052918, 0.0441462025, 0.0556327514, -0.0162329059, 0.0227994006, -0.0019316117, 0.0365577713, -0.0778627694, 0.0498003885, 0.0005895452, 0.0005744269, -0.0690653697, 0.0486469939, 0.0318264402, 0.0287622195, -0.0289303809, 0.0503711216, 0.0473158211, -0.0787971169, -0.0468537435, -0.0769990981, -0.0026228609, -0.0592385381, -0.0181177557, -0.0776562020, 0.0784145296, 0.0784540772, 0.0681066960, 0.0695652217, 0.0711510032, -0.0418695360, 0.0103459070, -0.0367894545, -0.0680339783, 0.0193744991, 0.0434157513, -0.0153727112, -0.0084048128, 0.0091651967, 0.0243447889, 0.0703012943, -0.0185007546, 0.0233969875, 0.0598548390, 0.0190621745, 0.0250370651, -0.0383401178, 0.0266879834, 0.0585272051, 0.0552631281, -0.0176303089, -0.0012206561, -0.0820663646, 0.0601271205, -0.0049512452, 0.0039620269, 0.0147949094, 0.0105482033, 0.0107667642, 0.0023602864, -0.0333747454, -0.0542920083, 0.0449868515, -0.0331276618, -0.0700579286, 0.0444937125, -0.0354750305, 0.0513418876, -0.0307204910, 0.0744415075, -0.0198737327, 0.0015412731, -0.0545072407, -0.0565538816, 0.0177702773, 0.0066379644, -0.0680968612, 0.0809137151, 0.0025242923, 0.0087104617, -0.0307609066, 0.0510201417, -0.0041565686, -0.0322048552, -0.0679387972, 0.0559328720, -0.0293203499, -0.0270655416, -0.0624350570, 0.0445556566, 0.0414223000, 0.0214838814, -0.0400490984, 0.0052792481, 0.0387027934, -0.0643431097, 0.0054402952, -0.0368533134, -0.0215357766, 0.0557755567, 0.0731137246, -0.0243102778, -0.0157286767, 0.0788502395, 0.0633942112, -0.0576116480, 0.0448725969, -0.0692112520, 0.0778652877, 0.0115999226, 0.0823815241, -0.0593908876, 0.0487520359, 0.0035796498, 0.0517504774, 0.0825575888, -0.0055733081, -0.0575680509, 0.0515863076, -0.0824166387, 0.0596114509, -0.0626272336, -0.0054229693, -0.0412001833, -0.0082660932, 0.0568822809, 0.0654448569, -0.0401654504, -0.0572902746, -0.0296673123, -0.0272569936, 0.0801845044, 0.0432221480, 0.0001682741, 0.0016652662, 0.0316497944, -0.0772214904, 0.0556813031, -0.0668489859, -0.0366982669, 0.0145260273, -0.0777810439, 0.0752822459, -0.0155000826, 0.0392507948, -0.0098451003, 0.0757576749, -0.0588552840, -0.0580644906, -0.0813362896, -0.0669930056, 0.0646548271, 0.0190985333, 0.0024859353, 0.0816204026, -0.0092008254, 0.0032858159, -0.0498632155, 0.0499155335, -0.0762731805, -0.0192769393, 0.0232974179, -0.0374373607, 0.0572284311, 0.0327428952, 0.0856406540, -0.0496782996, 0.0761485249, 0.0713557005, -0.0127915777, -0.0565068126, 0.0613960810, -0.0719654039, 0.0381695367, 0.0454388410, 0.0327759422, 0.0039324486, 0.0806162134, 0.0088193193, -0.0260854531, 0.0660223365, -0.0164972525, 0.0720847100, 0.0078051011, -0.0405589417, -0.0394085906, 0.0098646125, -0.0283175390, 0.0625628531, 0.0094125308, 0.0561723262, -0.0496879108, 0.0084192650, 0.0617586672, 0.0616124868, 0.0968163460, 0.0136371348, -0.0068001593, -0.0618515648, 0.0826398656, 0.0264142435, -0.0681899264, -0.0710243657, -0.0172032490, -0.0487439670, -0.0162764061, -0.0300363116, -0.0631972104, -0.0735460147, 0.0937456712, 0.0587201975, 0.0465219580, -0.0534990877, 0.0676737577, 0.0169844180, -0.0730233490, 0.0731774494, -0.0649346411, 0.0032721017, 0.0287620742, -0.0631609857, 0.0715417936, 0.0393597819, 0.0436059460, -0.0744299889, 0.0183568709, 0.0243538450, 0.0220575053, -0.0144962817, -0.0116256643, 0.0895850807, 0.0509180576, -0.0569574907, -0.0222909842, -0.0573728606, 0.0442320891, 0.0343737751, 0.0458653197, -0.0309787747, -0.0522801280, 0.0139989909, 0.0892542899, 0.0241777562, -0.0050256150, 0.0518990457, 0.0044589555, -0.0493704639, -0.0564988405, 0.0349056944, 0.0029921979, 0.0661306679, 0.0102541037, -0.0504299551, -0.0598799735, 0.0041166553, 0.0149416812, 0.0161386449, -0.0529332310, -0.0514009856, -0.0376148820, 0.0012457746, 0.0903787017, 0.0145850852, 0.0507487133, 0.0279069655, -0.0627615526, 0.0458906293, 0.0233120061, -0.0558121428, 0.0324827097, -0.0560279749, -0.0014155760, -0.0856103450, -0.0019289041, 0.0355497561, 0.0173267797, -0.0229051579, -0.0530206524, 0.0756342635, 0.0187773239, 0.1021234095, -0.0302030221, -0.0067912331, 0.0430240557, -0.0427098721, 0.0807113275, 0.0889611244, 0.0793471485, 0.0101403706, -0.0181721821, 0.0164037757, -0.0154811163, 0.0122563792, 0.0479179211, -0.0428994112, -0.0177102927, 0.0419837572, 0.0755200908, -0.0810226053, -0.0590033866, 0.0710889027, 0.0559898503, 0.0573463142, 0.0409031324, -0.0485159270, -0.0572874919, -0.0410855152, 0.0400786325, -0.0245709885, 0.0149357384, -0.0706728771, 0.0872765332, 0.0427027829, 0.0627407804, -0.0609700866, -0.0051720669, -0.0819444135, -0.0636150688, 0.0091094477, -0.0655148551, 0.0715367272, -0.0039776303, -0.0260123648, -0.0211912990, -0.0622137450, -0.0214373339, -0.0427507572, 0.0121124778, -0.0277801342, -0.0526076667, 0.0068771080, -0.0133596892, -0.0445642434, 0.0486854278, 0.0401999168, 0.0072315470, 0.0599119924, -0.0137196342, 0.0486593656, -0.0293195881, -0.0281927828, 0.0008299963, 0.0780134946, 0.0892486647, 0.0565755181, -0.0226508155, 0.0033503338, -0.0771710724, -0.0652569309, -0.0512719490, -0.0604223981, -0.0328296386, 0.0714362189, 0.0144920005, -0.0753106698, -0.0408967212, -0.0032121609, 0.0876108333, 0.0771164373, -0.0204442721, -0.0435802229, -0.0439958051, -0.0771290660, 0.0305022225, 0.0110924616, -0.0381449200, 0.0248578619, -0.0691054463, -0.0694079474, 0.0342329890, 0.0604467429, 0.0381189995, -0.0797617808, 0.0730933249, -0.0479656383, -0.0326917656, 0.1047542840, 0.0180620570, 0.0591346286, -0.0433047041, -0.0600620732, 0.0337409973, 0.0478203557, 0.0645712018, -0.0652925149, 0.0150776338, -0.0602017939, -0.0635908246, 0.0893747509, -0.0112868370, -0.0433179848, -0.0151471822, 0.0399107635, -0.0479911081, 0.0060408977, 0.0058579380, -0.0109573612, -0.0533328205, -0.0357238948, -0.0771717057, 0.0216846280, 0.0710151568, 0.0227934532, 0.0143591156, -0.0648743957, 0.0746282861, 0.0422480442, 0.0840670615, -0.0061000935, 0.0088645974, 0.0140106659, -0.0592659488, 0.0413248278, 0.0309151933, 0.0188436117, 0.0063765445, 0.0232473835, -0.0278317481, 0.0466590822, -0.0603714101, 0.0928802639, -0.0185629185, -0.0766233653, 0.0482911430, 0.0569840185, 0.0123639386, -0.0677131936, -0.0043077883, -0.0802686736, 0.0321931988, 0.0277136639, 0.0227974933, 0.0273648463, -0.0129862987, 0.0002574574, -0.0114820655, 0.0962633863, 0.0828808695, -0.0534403920, 0.0056820144, 0.0426494516, -0.0342750289, -0.0027994264, -0.0791557282, -0.0288757235, -0.0388986096, 0.0045028133, -0.0974966958, -0.0257950351, -0.0519617423, -0.0346482620, 0.0624044836, 0.0445828773, -0.0245420188, -0.0211313665, 0.0441409573, 0.0848092437, 0.0164045189, 0.0773315951, 0.0448071323, -0.0760491937, -0.0184681844, 0.0373800211, 0.0026949178, -0.0333926342, -0.0082552647, 0.0275879856, -0.0233135149, 0.0810716376, 0.0656724274, 0.0470332913, -0.0730846301, 0.0295756776, 0.0532471500, -0.0135190804, 0.0338064060, -0.0795631111, -0.0094845891, -0.0191044956, 0.0787397102, -0.0015072599, -0.0315755196, 0.0755331814, -0.0915902406, 0.0435746871, 0.0491596609, -0.0024793847, -0.0272993725, -0.0715911835, 0.0894316882, -0.0047092927, -0.0063902335, -0.0760833472, 0.0097325891, 0.0667572320, 0.0859556645, -0.0438301116, -0.0170641337, 0.0253359228, -0.0027419145, 0.0125890905, -0.0303950701, -0.0470183417, 0.0974532813, -0.0152844461, -0.0589668676, 0.0182232913, -0.0439032763, -0.0457721241, -0.0640821904, -0.0606467351, 0.0661492348, -0.0641143620, 0.0476511568, -0.0190056078, -0.0038784305, 0.0998401940, 0.0159094706, 0.0225052647, 0.0031162540, -0.0729199648, 0.0485294759, -0.0978551358, -0.0093291765, 0.0618506223, -0.0117363138, 0.0725283101, 0.0066893897, 0.0917083472, -0.0849351063, 0.0617300197, -0.0858503953, 0.0023116570, -0.0626066774, 0.0278998446, -0.0045942133, 0.0667960346, 0.0974459872, 0.0211263988, 0.0627450868, 0.0666199848, -0.0044197896, -0.0009778676, -0.0849227086, 0.0703903139, 0.0279231668, -0.0692703351, 0.0330041647, -0.0027138658, 0.0639268905, -0.0255186204, 0.0428242125, -0.0758639127, -0.0255660787, 0.0652132258, 0.0041479655, -0.0394719541, 0.0726215392, 0.0424608663, 0.0097513003, 0.0653611347, -0.0446196087, -0.0493679233, 0.0355287232, 0.0191331711, -0.0442770757, 0.0457523838, 0.0172512718, -0.0281213708, 0.0789421126, -0.0119377691, 0.0122081889, -0.0354921073, -0.0519595817, 0.0275018718, -0.0451972894, -0.0355015472, 0.0745350420, 0.0219754167, 0.0284251831, -0.0348700285, 0.0323225483, 0.1023001671, -0.0349115878, -0.0207619462, 0.0439069867, -0.0642381608, -0.0367025919, 0.0557053871, 0.0609377474, -0.0372845195, -0.0628664121, -0.0206499305, 0.0692392886, 0.0463183969, 0.0385015979, -0.0043093720, -0.0870217308, 0.0106026046, 0.0422151871, 0.0375127792, -0.0261897221, 0.0596404895, 0.0261604600, -0.0209441241, -0.0622192547, -0.0076448871, 0.0795878321, 0.0020093825, 0.0275831893, -0.0504488200, 0.0358861275, 0.0156712700, -0.0223174598, 0.0627106354, 0.0394667126, 0.0304112546, -0.0776398405, 0.0429027267, 0.0477804393, 0.0694660768, -0.0461335517, -0.0268168412, -0.0835129172, -0.0362383090, 0.0452825949, -0.0063543925, 0.0379250348, -0.0233743954, 0.0118076364, -0.0319932401, 0.0387025662, -0.0716938376, -0.0289029758, -0.0074150627, -0.0067305076, -0.0262725987, -0.0499358326, 0.0502468832, -0.0395985655, -0.0654020607, 0.0080991685, -0.0188183989, -0.0307111908, -0.0455950163, 0.0112839658, -0.0078603253, -0.0047278218, -0.0389421135, 0.0754245371, -0.0770934522, -0.0128608793, 0.0355796255, -0.0520561822, 0.0616516583, -0.0210799892, -0.0253492482, 0.0210404359, -0.0227638967, 0.0044423700, -0.0587092638, 0.0081022698, -0.0261068661, -0.0278851632, -0.0440018848, -0.0282098111, -0.0482828766, -0.0239623580, 0.0371252485, 0.0511276573, -0.0636946559, -0.0820165798, -0.0406665951, -0.0809905007, 0.0521642454, -0.0787685141, -0.0490534157, -0.0288570318, -0.0065938733, 0.0531521775, -0.0435828939, 0.0664190203, -0.0825797319, -0.0067161787, 0.0416357629, 0.0551738441, -0.0192507096, 0.0233103912, -0.0022997740, -0.0530218706, 0.0244276077, -0.0145191578, 0.0698871017, 0.0145930015, 0.0491240285, 0.0232432261, -0.0327550471, 0.0031009305, 0.0293091293, -0.0497057512, -0.0095196497, -0.0485190041, 0.0346348621, 0.0451928973, 0.0792220384, 0.0379285887, 0.0499812104, -0.0293881819, 0.0196660012, -0.0341998041, -0.0375073664, 0.0393618010, -0.0237581693, 0.0183324702, -0.0756699815, -0.0698182583, -0.0239839572, 0.0048765317, -0.0187110379, -0.0049690399, 0.0012034497, 0.0081034321, 0.0462263934, -0.0643687621, 0.0250091832, -0.0566245690, 0.0068544699, 0.0181138068, 0.0060172658, -0.0499985181, -0.0075112972, -0.0101237753, -0.0126410294, 0.0410487950, -0.0226977896, -0.0040845457, -0.0147750741, 0.0007802949, -0.0264848191, -0.0735734478, -0.0234277695, -0.0661938787, 0.0700454339, 0.0209543761, 0.0033367686, -0.0117712524, 0.0185319521, -0.0392667763, 0.0104001574, -0.0905338228, 0.0335162915, 0.0118337553, 0.0291549135, 0.0239692591, -0.0550610982, -0.0832303315, 0.0490333438, -0.0587150790, -0.0637793392, 0.0411040969, 0.0669581741, 0.0819828585, -0.0698706135, -0.0624138080, 0.0165438112, -0.0294072255, -0.0733245537, -0.0684797019, 0.0295857713, -0.0045130667, 0.0383771993, -0.0531288423, -0.0466671139, 0.0440434366, 0.0423850492, 0.0407488458, -0.0494442396, 0.0324629210, 0.0418530628, -0.0057911915, -0.0332775339, -0.0839467123, 0.0240239501, -0.0066793216, 0.0235450659, -0.0182194635, 0.0308385976, -0.0184139460, -0.0596896708, -0.0409505218, 0.0256895106, -0.0626500621, 0.0915804878, 0.0082397796, 0.0965399966, 0.0722154751, 0.0241833013, 0.0111455088, 0.0042588781, -0.0044293767, -0.0074509564, 0.0200644191, 0.0675475448, 0.0029904027, -0.0471836962, 0.0071481038, -0.0728093237, -0.0112134740, 0.0667884275, -0.0628123283, -0.0075459485, -0.0725430623, -0.0022304703, 0.0280693807, 0.0756996050, 0.0208269451, 0.0759448782, 0.0208952110, -0.0318265483, -0.0673548132, 0.0971665382, -0.0067901956, -0.0406962223, 0.0605579279, 0.0537478626, -0.0408392623, 0.0189095177, -0.0038558571, -0.0258327071, -0.0108648492, 0.0706767961, 0.0680988654, 0.0133012626, 0.0005086382, 0.0549955219, 0.0431997329, -0.0187744852, 0.0420520306, -0.0801274702, -0.0397032760, -0.0282829255, -0.0328087285, 0.0568043441, -0.0461028405, -0.0571282692, -0.0070052152, -0.0026237322, 0.0301928353, 0.0606466793, -0.0379187316, -0.0066789002, 0.0550711006, 0.0753152966, 0.0239279531, -0.0027231546, -0.0473485924, 0.0022598593, -0.0440944023, 0.0485291556, -0.0459186584, -0.0053500081, -0.0106075760, 0.0423056036, -0.0049852575, 0.0557114482, -0.0130265504, 0.0525641665, 0.0510875918, -0.0724405423, 0.0507387482, -0.0337753966, 0.0913331211, -0.0498934202, 0.0677354261, -0.0406197086, -0.0543013178, 0.0210307743, -0.0139230117, 0.0006565441, -0.0029057260, -0.0269595031, 0.0341390297, 0.0268165264, -0.0828205124, -0.0194224026, 0.0857958272, 0.0017361568, -0.0323880538, -0.0647669137, -0.0379374288, 0.0146586457, -0.0223397072, 0.0660420209, -0.0347656608, -0.0878131613, -0.0712387338, 0.0063154171, -0.0269195251, -0.0659377724, 0.0421049558, -0.0069309319, -0.0654067174, -0.0896672606, -0.0108783580, 0.0066801603, -0.0451991111, 0.0469379127, 0.0043059024, -0.0234568845, 0.0493519679, 0.0207391009, -0.0376435071, 0.0625422373, -0.0360014848, -0.0802672356, -0.0313091800, -0.0403740779, -0.0321231708, 0.0502888188, 0.0334547609, 0.0533220731, 0.0231789630, 0.0793509632, -0.0977269709, 0.0491339825, 0.0611927435, -0.0303090606, -0.0094485348, 0.0328295529, -0.0155012254, -0.0001406076, -0.0067205476, -0.0097168880, -0.0353090391, -0.0616495162, 0.0226718131, -0.0416538790, 0.0874556750, 0.0476338044, -0.0642562285, 0.0787373483, -0.0303315762, 0.0015163713, -0.0098026823, 0.0448837839, 0.0696091726, 0.0891466290, -0.0134302108, 0.0343093239, -0.0492645390, 0.0053463914, -0.0393542573, 0.0618496798, 0.0700303540, -0.0092442576, -0.0679768920, -0.0449323878, 0.0026877564, -0.0177049153, -0.0062418832, -0.0052683116, 0.0318314657, -0.0705909356, -0.0383461937, 0.0030595264, 0.0154525079, 0.0293786842, 0.0126393670, -0.0416748859, -0.0201922432, -0.0384202115, 0.0860262215, -0.0442650430, 0.0188817140, -0.0294215512, -0.0665964037, 0.0751460195, -0.0494973734, -0.0598609820, -0.0171714835, -0.0043155029, -0.0358897336, 0.0276059229, 0.0397856832, 0.0177596323, -0.0046857018, 0.0775080621, -0.0480794683, 0.0020595796, 0.0288080238, 0.0636401996, -0.0862059817, -0.0019669000, 0.0194386207, 0.0312876627, 0.0650197640, -0.0037376841, -0.0392670222, 0.0530226752, -0.0494733006, -0.0108626746, -0.0102371722, 0.0123326154, 0.0678250566, -0.0195369553, -0.0829901025, 0.0334026366, 0.0504382662, -0.0717896298, 0.0334936790, 0.0591436923, -0.0236172155, 0.0392461531, -0.0467591956, 0.0613297261, -0.0146044930, 0.0381364301, 0.0632754490, -0.0789777189, -0.0822206512, -0.0316643193, -0.0580015518, 0.0085755764, -0.0766720250, 0.0706986487, 0.0335979536, 0.0588587783, 0.0550453551, 0.0300168060, -0.0714820474, -0.0622127913, -0.1121979877, 0.0167686548, -0.0176448599, 0.0353365839, 0.0659966171, 0.0622461177, 0.0550205298, 0.0556624494, -0.0473994724, 0.0623275191, -0.0507273190, -0.0231773593, -0.0854298398, 0.0469600111, 0.0495028868, -0.0005300361, 0.0652581006, 0.0390119366, 0.0309427381, 0.0809552968, -0.0460811369, 0.0377712063, -0.0533316545, -0.0304729547, -0.0310986266, 0.0267353542, -0.0457218103, 0.0290606618, -0.0213653259, 0.0338045508, 0.0622835569, 0.0179180503, 0.0535762198, 0.0243379474, -0.0164747294, 0.0392438062, 0.0169235542, 0.0324850306, 0.0499016978, -0.0067880498, 0.0953911915, 0.0673620179, -0.0539337546, -0.0402535610, -0.0590779297, 0.0538536385, -0.0224788710, 0.0560927168, 0.0228207521, -0.0502732843, -0.0812583193, -0.0597030818, 0.0634540617, -0.0413015559, -0.0233654957, -0.0792609602, 0.0262936316, 0.0508437306, 0.0736570507, -0.0018262202, -0.0816814303, 0.0450965650, -0.0366271436, 0.0205001589, -0.0065162820, 0.0774898753, 0.0304747522, -0.0501569249, -0.0248009376, 0.0452683605, -0.0641896278, 0.0326408073, 0.0764374137, 0.0168217514, 0.0174225103, 0.0836897194, 0.0058077606, 0.0092445537, 0.0338214114, -0.0391747095, 0.0473308936, -0.0542441905, -0.0487499312, -0.0561164543, -0.0022672517, -0.0304284152, 0.0539981723, -0.0246984698, -0.0366638936, 0.0613714792, -0.0524406508, -0.0630878136, 0.0149580678, 0.0402307697, -0.0454678759, -0.0236890391, -0.0008781314, 0.0533292182, 0.0583757758, 0.0032964798, 0.0765276328, 0.0755121261, -0.0586053804, -0.0175990015, 0.0641353279, -0.0751261115, 0.0292617939, -0.0584130064, 0.0484790094, -0.0339848921, 0.0141502237, 0.0207433272, -0.0293574762, 0.0558181554, -0.0110328505, -0.0206686426, -0.0490959510, -0.0420373194, -0.0016366012, -0.0373821668, -0.0922740772, -0.0625263304, 0.0003140532, 0.0624604672, 0.0636521876, -0.0198302306, 0.0588616692, -0.0402579606, -0.0549937189, 0.0238809343, -0.0917273238, 0.0344540365, 0.0475221276, 0.0383920558, -0.0550214872, 0.0611893125, -0.0504178703, 0.0694827810, 0.0518841855, 0.0207362957, -0.0327854976, -0.0489581525, -0.0694701895, 0.0239442494, -0.0318278521, -0.0469562374, 0.0272020604, -0.0045649931, 0.0857822448, -0.0512517393, -0.0114298146, -0.0819704607, 0.0680874139, 0.0109920362, 0.0206403192, 0.0186690129, 0.0368400887, -0.0656729713, -0.0378145985, -0.1107061729, -0.0311228950, 0.0785690546, 0.0589718632, -0.0571771860, 0.0449239947, -0.0744284987, 0.0342232808, -0.0542280935, 0.0160497129, 0.0181435030, 0.0063304016, -0.0223371051, -0.0346778966, -0.0314304233, -0.0260843374, 0.0012686034, -0.0545906201, -0.0960987881, 0.0302695893, -0.0499307774, 0.0372082517, 0.0245321691, 0.0734470338, 0.0241113715, 0.0559589192, -0.0672487915, -0.0731572285, -0.0039617103, -0.0735225677, -0.0387075692, -0.0348132439, 0.0570191592, -0.0526569486, -0.0097272759, 0.0675143003, 0.0401701890, -0.0135892536, 0.0639480576, 0.0519832782, -0.0468815006, 0.0374919996, 0.0300372764, 0.0557626747, 0.0198989827, -0.0341636278, 0.0548445210, 0.0235458072, 0.0418210216, -0.0609537736, -0.0614228733, 0.0198225379, 0.0318826288, -0.0443021655, 0.0072566816, 0.0128665585, 0.0716484264, 0.0499305017, -0.0563214608, 0.0319313742, -0.0535703301, 0.0522544086, -0.0846875608, 0.0318138525, 0.0679269210, -0.0839378014, 0.0303647444, 0.0731529668, 0.0727444440, -0.0740018785, 0.0334663428, -0.0303158239, 0.0107041160, 0.0114988685, 0.0554307662, -0.0603475496, 0.0315894522, -0.0169135164, -0.0087271668, -0.0279394556, -0.0256815925, 0.0122605637, -0.0158212390, -0.0911267847, -0.0641650409, -0.0439758524, -0.0586941801, 0.0124718277, -0.0089184968, 0.0360599346, 0.0143942265, -0.0398305580, 0.0876225755, 0.0569520071, -0.0699851811, 0.0071265954, -0.0037496043, -0.0368075110, -0.0252658650, 0.0681304410, 0.0357358083, -0.0820154026, 0.0654037520, 0.0627732500, -0.0016004193, -0.0023686998, 0.0301043615, -0.0427791700, -0.0153946681, -0.0715062693, -0.0474890396, 0.0158064719, 0.0079058651, 0.0044831494, -0.1097689345, 0.0234592035, -0.0933375433, -0.0230752118, -0.0052540083, 0.0590135753, 0.0470802300, 0.0657169968, 0.0427962765, 0.0807343572, -0.0555987917, 0.0879427791, 0.0299911685, 0.0932997242, -0.0393342972, 0.0197567083, -0.0620672666, -0.0893726796, 0.0115829846, 0.0312221758, -0.0159262940, -0.0530843437, 0.0342559740, 0.0414486304, 0.0476705022, 0.0310349446, -0.0063527250, 0.0301828086, -0.0652911142, -0.1028839350, -0.0258644894, -0.0822463334, -0.0166746434, -0.0089496486, 0.0586395264, 0.0494068302, 0.0735055059, 0.0890966952, 0.0085472828, -0.0682260394, -0.0163330678, 0.0082503576, 0.0621723197, -0.0399872027, -0.0153603749, -0.0731391311, 0.0640726835, -0.0863260329, 0.0361684412, -0.0545373261, -0.0191933569, 0.0333967432, -0.0206691734, -0.0432096943, -0.0776054263, 0.0711148754, 0.0159862302, 0.0694316253, 0.0329580195, -0.0201590043, 0.0368469954, -0.0584059805, -0.0547208935, -0.0963588431, -0.0026606100, -0.0606292933, -0.0886275023, -0.0394190885, -0.0765710324, 0.0681040213, -0.0161258262, -0.0263644699, 0.0125982296, 0.0231932048, 0.0158282537, -0.0479655825, -0.0764031336, -0.0214318018, -0.0099008912, 0.0217065271, 0.0394092947, 0.0065482901, 0.0059597893, -0.0258645657, 0.0256597605, -0.0071970117, 0.0098867035, -0.0222642832, 0.0330721587, -0.0355539955, 0.0269121453, -0.0243733674, -0.0544711463, 0.0626827925, -0.0208231974, -0.0707045868, 0.0276291668, -0.0097010992, -0.0329052657, -0.0395318717, 0.0424619988, 0.0183394141, 0.0368492045, -0.0806095898, 0.0739009082, 0.0234460440, -0.0573222414, 0.0065905494, 0.0521530584, -0.0495202392, -0.0840173513, 0.0064431606, -0.0395692661, 0.0021942612, 0.0825893357, 0.0501650274, -0.0696384236, -0.0316623300, -0.0126851732, 0.0643228292, 0.0634147599, 0.0598122403, 0.0736572295, 0.0720791072, -0.0124509297, 0.0460531749, 0.0127105489, 0.0306596532, -0.0658916831, -0.0138617354, 0.0303004887, -0.0308921654, 0.0342613794, -0.0480118655, -0.0325540192, -0.0448201299, 0.0797159448, 0.0048400774, 0.0358955115, 0.0058882846, 0.0131068574, -0.0411314927, 0.0318012349, 0.0789199099, 0.0593023226, -0.0455149487, 0.0394366197, -0.0644538179, -0.0772719160, 0.0646101311, -0.0567555837, 0.0012815980, -0.0169070717, -0.0497470498, -0.0682105869, 0.0333084613, -0.0643358082, 0.0060393387, 0.0732576773, -0.0110161975, -0.0113342563, -0.0492770523, 0.0639547855, -0.0375177003, -0.0294169448, 0.0516326688, -0.0239062402, -0.0557156615, 0.0645158067, -0.0051165400, 0.0581083111, -0.0143755842, -0.0954210684, 0.0814737156, 0.0768708363, 0.0740092695, -0.0025609192, -0.0478010811, 0.0694369823, -0.0207876470, 0.0390877463, 0.0827800259, 0.0286864154, 0.0151782595, -0.0040356456, -0.0442794412, 0.0859052911, -0.0316866003, -0.0862522349, -0.0176685732, -0.0502815694, -0.0770265460, -0.0514964536, -0.0574596897, -0.0193498358, 0.0695015043, -0.0566278137, -0.0157665685, 0.0608809777, -0.0733567253, 0.0234446861, -0.0485439524, 0.0010856192, -0.0305169765, -0.0851368755, -0.0237485729, -0.0460701399, -0.0631791502, 0.0126269776, 0.0156482793, -0.0183931645, -0.0737684146, -0.0474921465, 0.0337563977, -0.0258280262, -0.0564568155, -0.0217061713, 0.0274405368, -0.0670884103, 0.0799809992, 0.0588711686, -0.0579959489, -0.0441642813, 0.0162013508, -0.0346573852, 0.0334064402, -0.0923200697, -0.0484558232, 0.0592447147, 0.0431190021, -0.0154512180, -0.0284641534, -0.0505140945, 0.0186817180, 0.0478516333, 0.1002793983, -0.0064312955, 0.0745015219, 0.0407414921, -0.0263144057, -0.0600983165, 0.0086087259, -0.0587824322, -0.0334945433, -0.0707290322, 0.0791632459, -0.0096090259, -0.0668036863, -0.0286496561, -0.0744884014, -0.0336015746, 0.0144289620, 0.0236797519, -0.0598010458, 0.0050809919, -0.0742030069, 0.0792920887, 0.0105340434, 0.0681749433, -0.0860009193, -0.0560387485, -0.0149674360, 0.0853906199, -0.0497928672, -0.0017638146, -0.0303323697, -0.0185849629, 0.0401982926, 0.0144272121, -0.0010127710, -0.0460169613, -0.0081675816, 0.0301870219, 0.0083055114, 0.0249072593, 0.0334846862, -0.0223281886, 0.0398553386, 0.0306783486, 0.0081364950, -0.0595999435, -0.0247594099, 0.0490335301, 0.0651995689, -0.0529953279, 0.0275677592, -0.0307279173, -0.0198334455, 0.0278474018, 0.0720162466, -0.0749620795, 0.0272212010, -0.0196583327, -0.0613313019, 0.0631264821, -0.0571009368, 0.0445018746, 0.0758929998, 0.0828304961, -0.0179573298, 0.0468468331, 0.0392079689, 0.0387769714, -0.0742734298, 0.0723798573, 0.0141760558, -0.0637898296, 0.0643202662, 0.0332180075, 0.0945173278, -0.0334728360, 0.0712104663, 0.0492030047, 0.0001037892, -0.0477370694, -0.0649632215, -0.0980795398, -0.0830593407, 0.0674624518, -0.0488384329, -0.0853279307, 0.0325656943, -0.0858368576, 0.0200312808, 0.0095540108, 0.0161666609, -0.0552967899, 0.0369836539, -0.0314430632, -0.0116786705, 0.0514321104, 0.0573437288, -0.0743698701, 0.0045202416, 0.0238087773, 0.0021364659, -0.0074185096, -0.0273461584, -0.0298325736, 0.0617466234, -0.0271254983, -0.0426212363, 0.0813516155, 0.0443906151, -0.0611829311, -0.0038274857, -0.0236880109, -0.0055958801, -0.0774601102, 0.0210130066, -0.0533941016, -0.0173750259, 0.0674635619, -0.0116978595, 0.0478071682, -0.0426651500, 0.0226817597, 0.0605084747, -0.0320841596, 0.0486827530, 0.0348590612, 0.0669000968, -0.0414136983, 0.0027708260, 0.0601381473, 0.0546214581, -0.0552329719, -0.0479676537, 0.0198139623, -0.0524774343, 0.0681350380, -0.0190231539, 0.0658840537, 0.0178949777, 0.0192622878, 0.0719313771, -0.0387783162, -0.0339233764, 0.0107763689, -0.0407672748, 0.0105970884, 0.0698097646, -0.0499131456, 0.0669499189, -0.0082594091, 0.0413451977, 0.0455209054, -0.0539080277, 0.0525376797, 0.0859076008, -0.0473805368, 0.0694300383, 0.0147410510, 0.0888548568, 0.0384728722, -0.0144518353, 0.0476470813, -0.0914997309, 0.0378347449, 0.0334488824, -0.0025356924, -0.0106558939, -0.0913987085, -0.0907017887, -0.0202096961, 0.0176140182, 0.0346606858, -0.0263943858, 0.0840248987, -0.0436942838, -0.0307741743, -0.0530125611, -0.0454446971, 0.0831245780, 0.0515985265, 0.0704476908, 0.0188861210, 0.0015210024, 0.0920108184, -0.0291609429, -0.0276389327, -0.0383704342, -0.0462432578, -0.0478691794, 0.0557056367, -0.0566173531, -0.0649660006, -0.1041568369, -0.0131368190, 0.0204046723, -0.0469443724, -0.0487173274, 0.0616540760, 0.0726002380, -0.0130795781, -0.0017694305, 0.0231584068, -0.0337778367, -0.0740490258, -0.0856510028, 0.0381803513, 0.0778254345, -0.0205508545, 0.0556270368, 0.0537128411, -0.0032599564, -0.0824172869, -0.0613803193, 0.0036024910, 0.0126293041, -0.0466743149, -0.0068230373, -0.0004549063, -0.0233221538, -0.0900765806, -0.0250828527, -0.0205991846, -0.0440365635, 0.0038111643, 0.0376400203, 0.0589430891, -0.0591402873, -0.0745790750, 0.0638352260, 0.0184545666, 0.0768188238, -0.0935389400, -0.0451494232, -0.0252433699, -0.0455720834, -0.0480183549, 0.0577921532, -0.0049389056, 0.0642086491, 0.0381102897, 0.0190445986, 0.1070095822, -0.0357280411, 0.0379775353, 0.0714458227, 0.0384012051, -0.0412181467, 0.0810745806, -0.0505335443, -0.0476600379, -0.0094040968, 0.0676692575, -0.0799519569, 0.0028881102, 0.0302043036, 0.0389565006, -0.0731086358, 0.0533007607, -0.0045097121, -0.0353236347, 0.0793899968, -0.1054421589, 0.0057045924, -0.0194409471, -0.0364648886, 0.0382470116, -0.0395868197, -0.0135521675, 0.0059922445, -0.0258248392, -0.0897490755, -0.0282580126, 0.0059051928, 0.0180248208, 0.0102822939, -0.0405247137, -0.0210444294, 0.0149640329, 0.0571988299, 0.0639331788, -0.0971258804, 0.0323222019, -0.1022772044, 0.0385801196, 0.0154257352, 0.0140691251, 0.0806616917, 0.0069549782, 0.0252331346, 0.0944970772, -0.0888716951, -0.0026863234, 0.0754631162, 0.0470082276, 0.0706473067, -0.0733369812, -0.0154000549, -0.0385210998, -0.0212777182, -0.0414355844, 0.0251417365, 0.0511193313, -0.0461041592, -0.1066472828, -0.0408758335, 0.0150141111, 0.0606657937, -0.0314705223, 0.0070308368, 0.0513457060, 0.0891140625, 0.0968277454, 0.0160703380, 0.0339536630, -0.0408657379, -0.0550067425, -0.0439577252, 0.0218268018, 0.0679190308, -0.0582684055, -0.0070701162, 0.1001798734, -0.0099345762, 0.0529507361, 0.0427376963, 0.0476792865, 0.0713284910, -0.0962286368, 0.0435745157, 0.0090516023, -0.1059000790, 0.0796949565, 0.0599211715, 0.0844100937, 0.0076891319, 0.0517606027, 0.0442564897, 0.0092436252, -0.0007909578, -0.0026154346, 0.0580541939, 0.0192107931, -0.0584126748, 0.0579153597, -0.0210649502, 0.0494893491, -0.1070255190, 0.0350948311, 0.0056509045, 0.0193698741, 0.0658056960, 0.0431368984, -0.0792226568, 0.0078016729, -0.1042767987, 0.0237971023, -0.0693986490, 0.0081275376, -0.0249459911, 0.0236504637, 0.0438984297, 0.0218803473, 0.0018425831, 0.0182754360, -0.0310386606, -0.0281423572, 0.0476406813, -0.0416953415, -0.1133639961, -0.0114937807, 0.0014702507, 0.0080344211, -0.0511472821, 0.0898134187, 0.0395843573, 0.0127722034, 0.0371958911, -0.0210372452, -0.1186358556, -0.0915002525, -0.0529055260, 0.0282499250, -0.0413175747, -0.0814022198, -0.0153347133, -0.0517375693, -0.0619976893, -0.0509736128, -0.0219130348, 0.0503691956, 0.0274109747, 0.0013267914, 0.0044197845, 0.0042300997, -0.0582080111, -0.0468466058, -0.0458507277, -0.0070565110, 0.0695816278, -0.0553012565, 0.0091808606, -0.0015198545, -0.0134122549, -0.0453953855, 0.0820348263, 0.0651594847, 0.0385766737, -0.0068317452, 0.0780543834, -0.0143237514, -0.0863797739, 0.0520008504, -0.0146726370, 0.0762001052, -0.0486199819, 0.0031057044, 0.0316993333, 0.0690704584, -0.0544616170, -0.0528511181, -0.0156020774, -0.0280776136, 0.0667475760, -0.0765189826, -0.0481313244, 0.0122358296, -0.0739533827, -0.0094951363, -0.0347642750, -0.0654295981, 0.0200463757, -0.0828663930, -0.0474903993, 0.0034924916, 0.0598123372, -0.0319878310, 0.0264951661, 0.0579098538, 0.0879433081, 0.0108817304, 0.0833962858, 0.0411523357, -0.0955701694, 0.0562550686, 0.0252067242, 0.0481566675, -0.0624660291, 0.0069968351, -0.0647180155, 0.0326249413, -0.0769937336, -0.0433230773, -0.0714369565, -0.0820118114, -0.0255603511, -0.0234457888, -0.0234914795, -0.0380436704, 0.0102530662, -0.0421759412, -0.0416055359, 0.0394339599, -0.0096027469, 0.0400059335, -0.0390606523, -0.0714966282, -0.0549179092, -0.0566573739, -0.0780095309, -0.0136820115, -0.0381035507, -0.0429566540, 0.0331857875, 0.0569820292, 0.0253540054, -0.0900368914, -0.0500540696, 0.0797556043, 0.0601641573, 0.0497056879, -0.0716533288, 0.0211735517, 0.0520500578, -0.0614376590, -0.0721260905, -0.0361243114, -0.0653969944, 0.0570159443, 0.0028117830, 0.0698998943, -0.0286659487, -0.0149728730, -0.0309681930, 0.0413245931, 0.0091948230, -0.0758868307, 0.0112172076, -0.0751018748, 0.0808705091, 0.0091266148, -0.0644212887, 0.0477687381, 0.0383239910, 0.0094936667, -0.0225691199, -0.0823926106, 0.0415198952, -0.0535481498, 0.0531441905, -0.0084197400, 0.0007805059, -0.0669508055, 0.0063619115, 0.0659488589, -0.0736549199, -0.0751547292, 0.0007080836, -0.0151731307, -0.0510147251, -0.0929040238, -0.0491908528, -0.0710221082, 0.0733252615, 0.0439757667, 0.0241187997, -0.0675364956, 0.0002835392, 0.0417250916, -0.0927053019, -0.0349066630, 0.0576073304, -0.0178453941, 0.0557023026, 0.0867396668, 0.0872488320, 0.0394606665, -0.0047018840, -0.0404212736, 0.0689405575, 0.0046557784, 0.0641613230, 0.0548210964, -0.0149066299, 0.0462438129, -0.0133903194, -0.0229347311, -0.0719880760, 0.0278344490, -0.0818496943, 0.0738899112, -0.0742949322, 0.0716082007, -0.0010797934, 0.0309929214, 0.0671770573, 0.0486511923, 0.0446043611, 0.0002911846, 0.0600128695, 0.0575864278, 0.0537017100, -0.0919409245, -0.0124220392, 0.0522125848, -0.0791454390, 0.0043263789, -0.0638904497, 0.0246881265, 0.0102206301, -0.0118414899, -0.0349811837, 0.0749481544, -0.0060793743, 0.0368646421, 0.0612332858, -0.0170302354, -0.0344279706, 0.0728759989, 0.0811378434, -0.0680941567, -0.0301638599, -0.0241556559, -0.0679577440, 0.0050507141, 0.0136977304, -0.0091182524, 0.0372835957, 0.0126812644, 0.0104862135, -0.0281497017, -0.0586613677, -0.0121621443, -0.0256257486, -0.0560643598, 0.0240316465, 0.0274918862, 0.0074249892, 0.0390551500, -0.0236088187, -0.0122990813, 0.0702675432, -0.0565570183, -0.0745936334, -0.0140576251, -0.0342512801, -0.0509500243, -0.0106045781, 0.0612226911, 0.0194640607, -0.0156541895, -0.0184346940, 0.0289732534, -0.0025031008, -0.0506059080, 0.0714591146, 0.0160063468, -0.0807912350, -0.0248284545, 0.0155210085, -0.0012065634, 0.0084660864, -0.0411199816, 0.0163985323, 0.0126032839, -0.0950212628, 0.0815799460, 0.0122653283, 0.0104195699, 0.0406623520, 0.0423312336, 0.0349806696, 0.0244191233, -0.0770197362, -0.0477700643, -0.0732204169, -0.0052130581, 0.0217402969, 0.0624338426, -0.0039421264, 0.0078622475, 0.0492193773, 0.0782629102, 0.0034683561, 0.0605557412, -0.0063812518, 0.0291186851, 0.0608696043, -0.0383757614, 0.0103095360, -0.0443134345, -0.0594397411, -0.0164030194, 0.0119168051, -0.0195090193, -0.0483414829, -0.0450896621, 0.0755532980, -0.0257985350, 0.0158255734, 0.0478318185, 0.0166322067, -0.0151580293, 0.0323874503, -0.0303381607, -0.0389442146, -0.0560290329, 0.0502562672, -0.0539601482, 0.0724274814, -0.0856995210, 0.0620073713, -0.0298426561, -0.0464153960, -0.0251015238, -0.0607253388, 0.0557257049, 0.0512048863, -0.0199949741, 0.0357816592, 0.0224344581, 0.0690639615, 0.0770303756, -0.0499512814, 0.0508767068, 0.0056268666, -0.0218822453, -0.0465436727, 0.0125984605, 0.0357987210, -0.0652105212, 0.0691615120, 0.0671050772, -0.0781711936, 0.0687070414, -0.0554191098, -0.0702927783, 0.0469434932, -0.0590158589, 0.0127977375, 0.0482136123, -0.0178985093, -0.0853740573, -0.0173172560, -0.0265680086, 0.0212837532, -0.0734185204, -0.0792105347, 0.0688560382, 0.0675318614, -0.0247924142, -0.0394746549, -0.0330713503, 0.0516659431, 0.0267375801, 0.0158336796, 0.0860253647, -0.0595128722, -0.0611384064, 0.0591904558, -0.0803383067, 0.0331639834, -0.0001866770, 0.0442722663, -0.0042615598, 0.0778585151, 0.0135788666, -0.0726086274, 0.0129247904, -0.0391833261, -0.0610152446, -0.0381553285, -0.0632812977, -0.0667700022, 0.0757690668, -0.0335739143, 0.0713911802, 0.0258430950, -0.0646511763, 0.0663174838, -0.0749499872, -0.0051304875, -0.0225404836, 0.0467369631, 0.0294662490, -0.0603317842, 0.0439456254, -0.0674719959, -0.0573809221, -0.0741936192, -0.0728619397, -0.0839016289, 0.0655848756, -0.0287768710, 0.0036828928, -0.0270979423, 0.0545516089, -0.0274774283, -0.0322795846, -0.0358884893, 0.0365993977, -0.0741601437, 0.0472248867, -0.0501004308, 0.0227055568, 0.0077422746, -0.0219092518, -0.0367400385, -0.0530972891, -0.0127934776, 0.0430590548, 0.0318948068, 0.0189092197, 0.0152082713, -0.0882252231, 0.0864529088, 0.0366568603, -0.0220917203, 0.0065917741, -0.0923249424, 0.0667863116, -0.0156758092, 0.0372129381, 0.0396117456, 0.0003366207, 0.0134840738, -0.0444179811, -0.0139530385, -0.0478390940, -0.0531208031, -0.0205959529, -0.0148135852, -0.0517408885, -0.0276745781, 0.0671692491, 0.0602652654, -0.0707892403, -0.0471361578, 0.0638990253, -0.0060881623, -0.0315878056, -0.0668125972, 0.0178758688, -0.0017510155, -0.0414828062, -0.0403507724, -0.0860339403, -0.0278090145, -0.0574673899, -0.0537886731, -0.0470081903, -0.0254026074, -0.0591274984, -0.0634434521, -0.0679273903, 0.0007040548, -0.0239483807, -0.0535653867, -0.0386171602, -0.0694137663, 0.0199179165, 0.0198058579, 0.0732260793, 0.0086536761, 0.0512552820, 0.0584497526, -0.0592115261, -0.0556109585, 0.0322641656, 0.0542190894, 0.0499873795, 0.0357706845, -0.0615253709, 0.0125060258, -0.0239403844, -0.0061811511, 0.0791278854, 0.0634926856, 0.0233312417, -0.0383173116, -0.0036979131, -0.0507288575, -0.0798237398, -0.0061083138, -0.0231155287, -0.0554234274, -0.0461794026, -0.0013656364, -0.0395668820, 0.0458619520, -0.0639018565, 0.0512811281, -0.0079694670, 0.0057793469, -0.0264629982, 0.0231413785, 0.0752044171, -0.0537788197, -0.0625035167, -0.0597115941, -0.0933291391, -0.0251724273, -0.0169826597, 0.0619110540, 0.0039548217, -0.0365137123, 0.0417643972, -0.0791482553, 0.0571722686, 0.0537096336, -0.0505405962, -0.0392123722, -0.0249532275, -0.0929774120, 0.0217472911, -0.0137319090, 0.0676022992, 0.0356668569, 0.0712328404, -0.0414368175, -0.0651657954, 0.0623369552, 0.0032869286, 0.0656705499, 0.0432609469, -0.0552606247, 0.0134876296, -0.0120541332, 0.0713266581, 0.0150072444, -0.0227175485, 0.0290964562, 0.0532376058, 0.0113441795, -0.0114837624, 0.0715191364, 0.0128476257, -0.0763389692, -0.0226245634, -0.0009914552, 0.0427761897, -0.0943033174, -0.0812179744, 0.0195644852, 0.0217101686, -0.0064439015, 0.0344785303, -0.0375267640, -0.0801542997, -0.0459042564, 0.0548690073, -0.0014579679, 0.0149691496, -0.0237869825, -0.0415361002, 0.0317012034, 0.0288550090, -0.0220224243, -0.0383840762, -0.0534031950, -0.0192975886, -0.0165606141, 0.0319526978, 0.0519085452, 0.0424705632, -0.0136761013, 0.0535389259, -0.0194249116, -0.0620615073, -0.0232900083, 0.0587699935, 0.0571213290, 0.0101696523, -0.0350464433, 0.0567499623, 0.0303414222, 0.0637111068, 0.0298216343, 0.0215317532, -0.0873567015, 0.0671401620, 0.0331122316, 0.0431555733, 0.0435225889, -0.0972288921, 0.0467063002, -0.0011183191, 0.0104325870, 0.0644381419, 0.0446664244, 0.0614801981, -0.0678943619, 0.0528425463, 0.0534005091, 0.0301475003, 0.0415636897, 0.0417617485, -0.0794415921, 0.0592029318, -0.0193623379, -0.0000993453, -0.0509434380, 0.0314952321, -0.0138389226, -0.0399710573, -0.0496640317, -0.0113883009, -0.0424580164, -0.0045712031, -0.0716784075, 0.0082510980, -0.0015024259, 0.0635575429, 0.0662532672, -0.0559468269, -0.0816240162, -0.0468169153, -0.0524800532, 0.0384827256, -0.0194878373, -0.0149525423, -0.0468154438, -0.0746560544, 0.0535311140, 0.0522005446, -0.0703430250, 0.0046363459, -0.0406974368, -0.0456909239, 0.0461584553, 0.0138688032, -0.0137814721, 0.0331932455, -0.0182244722, 0.0203701369, -0.0897146016, 0.0518358648, 0.0657040700, -0.0555547550, 0.0187123176, -0.0495216250, -0.0578772128, -0.0750223622, 0.0089887558, 0.0046918308, 0.0889536589, 0.0910549387, 0.0181831475, 0.0230967607, -0.0952201933, -0.0469173864, 0.0863960460, 0.0801791474, 0.0511484779, 0.0625170544, 0.0829130784, -0.0243536457, 0.0125309657, -0.0448215082, -0.0500254296, 0.0203009173, -0.0474960245, 0.0635904670, 0.0420811325, -0.0920407698, -0.0458474085, 0.0149319582, 0.0031791104, -0.0047700186, 0.0041727014, 0.0712493137, -0.0410805382, 0.0677093565, 0.0576426797, 0.0458305329, -0.0318658091, 0.0389953107, 0.0287630167, 0.0361949801, 0.0107681155, 0.0579303354, -0.0028571340, -0.0431251265, -0.0165877342, -0.0741460100, -0.0519320108, -0.0510586463, -0.0540123433, -0.0849714428, 0.0870105177, 0.0111554302, -0.0438935347, 0.0435128510, 0.0092668124, 0.0439830758, 0.0501338951, 0.0893258974, -0.0148218665, 0.0276682060, -0.0194505323, -0.0675837547, 0.0277957655, -0.0363957100, -0.0437432863, 0.0512601472, 0.0248411056, 0.0196565948, 0.0664623603, -0.0450174212, -0.0340903290, 0.0559060127, 0.0472589619, -0.0486256145, 0.0232176017, -0.0814000964, 0.0128737586, -0.0088669872, -0.0021262506, -0.0048227641, -0.0849979818, 0.0520081446, -0.0705211237, 0.0314194039, 0.0570781231, 0.0553749353, 0.0783191398, -0.0046750847, 0.0113355285, -0.0096621094, -0.0640923753, -0.0841433704, -0.0668840036, 0.0754931718, 0.0326627865, -0.0741112456, 0.0869855136, 0.0297134593, 0.0540183000, 0.0728141442, -0.0327453986, -0.0419133231, -0.0325803496, -0.0486653335, 0.0098462403, 0.0474761799, -0.0723693743, -0.0272439830, -0.0262243599, -0.0618929565, -0.0232347436, 0.0109651927, 0.0558593534, 0.0282707456, -0.0496304072, 0.0395881087, 0.0172357336, -0.0646654069, -0.0010636210, 0.0465947874, -0.0625329018, 0.0687391907, 0.0301844068, 0.0194087606, 0.0270446688, -0.0530190356, 0.0336731784, 0.0744825006, -0.0089954454, 0.0784903094, 0.0535647869, 0.0758311450, -0.0519771166, -0.0155634070, -0.0423934720, -0.0031061969, -0.0214957800, -0.0196295399, 0.0702504739, 0.0748161674, 0.0000698200, -0.0270793717, 0.0649500936, -0.0793497637, 0.0720358044, 0.0085569555, 0.0002275560, -0.0305120759, -0.0666500926, 0.0644983351, -0.0155595327, -0.0416477174, 0.0305131748, -0.0123291723, -0.0126091624, 0.0817434937, 0.0016884910, -0.0788629204, 0.0177161451, -0.0115079284, -0.0452795960, 0.0006510318, 0.0608139597, -0.0028931843, 0.0354733542, 0.0493968092, -0.0197968688, 0.0318007246, -0.0801827759, 0.0674313605, 0.0187437814, -0.0327508375, 0.0649436414, 0.0166088082, -0.0631470457, -0.0291330833, -0.0292816199, 0.0299969148, -0.0768323764, -0.0101665985, -0.0713687167, -0.0528454185, -0.0769734234, -0.0661539435, 0.0716453046, -0.0303894486, 0.0610848181, 0.0325325541, 0.0592451058, -0.0031149304, 0.0458985157, -0.0732624382, -0.0122431749, -0.0252090637, 0.0000861729, -0.0807522014, -0.0379359461, -0.0354714841, -0.0312018711, 0.0658416077, -0.0582993068, -0.0531233847, 0.0006517334, 0.0845675617, 0.0158383083, 0.0115582403, 0.0861613303, 0.0302212685, 0.0538410582, -0.0103209149, 0.0328384414, 0.0250737797, -0.0082953218, -0.0062443987, -0.0927751437, 0.0096379807, 0.0144028254, 0.0028240732, 0.0169458911, -0.0731984377, 0.0026600237, 0.0101517262, -0.0214396585, -0.0246380493, 0.0432069004, 0.0682182088, 0.0203854106, 0.0706783384, -0.0313207544, -0.0286867544, 0.0123137217, 0.0387639999, 0.0121913543, 0.0195588339, -0.0282375570, -0.0673176572, 0.0384906530, 0.0468349606, -0.0504409000, 0.0141454218, -0.0473141186, -0.0470768437, -0.0612320006, 0.0673687086, -0.0097394213, 0.0330186225, 0.0282786675, -0.0361570120, -0.0126704974, 0.0556335710, 0.0003985894, 0.0280299913, -0.0679104030, 0.0113104759, -0.0437535346, 0.0260192621, -0.0415370986, -0.0493547581, 0.0198647939, -0.0323748514, -0.0079251388, 0.0608778149, 0.0791819021, 0.0459047444, -0.0819771290, -0.0268194508, -0.0627817512, -0.0661942437, 0.0653048903, -0.0689174011, -0.0017389718, 0.0337445848, -0.0062189079, -0.0576541387, 0.0252936073, 0.0469169356, 0.0317602567, 0.0589251369, -0.0223766360, -0.0313728154, 0.0115232207, -0.0255344212, 0.0164477713, 0.0004776373, -0.0725677833, -0.0555977263, 0.0313342586, 0.0517106205, 0.0492014103, 0.0047563268, -0.0436935723, 0.0040195533, 0.0452901572, -0.0192562975, -0.0015376220, 0.0887503847, 0.0337595828, 0.0393401198, -0.0079486985, 0.0144519731, 0.0500163324, -0.0212577563, 0.0288213529, -0.0494389609, 0.0629655942, 0.0768455490, 0.0468743555, -0.0520873778, 0.0241882596, -0.0465019606, 0.0068984707, -0.0192088652, -0.0593665056, 0.0697409287, -0.0621291883, -0.0910335630, -0.0476747863, 0.0803856626, 0.0318328589, 0.0780815929, -0.0180073213, -0.0371104032, -0.0356820114, 0.0435968935, -0.0230123848, -0.0643272847, -0.0241569784, 0.0338355936, 0.0455126539, 0.0283150170, -0.0437661186, 0.0293799974, -0.0774325654, 0.0421823710, -0.0409708768, 0.0233020633, -0.0099839112, -0.1056345627, 0.0357564986, -0.0273625385, -0.0594134107, -0.0322133116, 0.0138181513, -0.0693966225, 0.0795866996, -0.0166344121, 0.0888103545, -0.0220354870, 0.0747306570, 0.0009945836, 0.0217455942, -0.0643996745, 0.0709971637, -0.0183709990, -0.0586026907, 0.0725313798, 0.0916522145, 0.0714907199, -0.0556988046, 0.0388224684, -0.0443858542, 0.0163597167, 0.0535333827, -0.0743395686, -0.0280261710, 0.0203954093, 0.0680572987, 0.0472981557, -0.0692309886, 0.0107803494, 0.0126132127, 0.0485248156, -0.0270057917, -0.0497641489, 0.0318635106, 0.0778858811, 0.0317323543, -0.0437252894, 0.0344888568, -0.0271583535, 0.0077233072, -0.0675948635, 0.0259863138, 0.0805233940, -0.0193361472, 0.0724544376, 0.0476703271, -0.0533456355, 0.0128596742, 0.0732006282, -0.0189172812, -0.0179184359, -0.0300903320, -0.0680098832, 0.0122387307, -0.0737762973, -0.0068842876, 0.0098377196, -0.0538892075, 0.0534513779, -0.0689584911, -0.0111342277, -0.0189402401, 0.0157068335, 0.0759047717, -0.0200188011, -0.0066222968, 0.0363736525, -0.0548294112, -0.0130482130, 0.0734786168, -0.0821307972, 0.0349491835, -0.0214176644, -0.0296779871, -0.0706553385, 0.0678644851, -0.0539744906, -0.0115100490, -0.0187749900, 0.0297211502, 0.0535193235, -0.0062885727, 0.0339471698, -0.0728320181, 0.0062712831, 0.0026510421, 0.0110155698, -0.0143238874, 0.0539043918, -0.0573644266, -0.0070244917, 0.0265730415, 0.0080896411, 0.0095947720, -0.0822561607, -0.0469741151, -0.0565912500, 0.0966153964, 0.0517262146, -0.0047063222, 0.0427268073, 0.0270045660, -0.0296463594, 0.0584683381, -0.0882203430, 0.0301806554, -0.0447917283, 0.0585363731, 0.0138378842, 0.0206828453, 0.0136256954, -0.0156093016, -0.0355231427, -0.0050096638, 0.0267544687, -0.0413301662, 0.0257438105, -0.0070143375, 0.0130048692, -0.0607895628, -0.0786234960, 0.0849009082, 0.0009160833, -0.0409325510, 0.0467005223, -0.0085167885, 0.0668451637, -0.0035454696, 0.0101580294, -0.0659554079, -0.0540932231, -0.0471436344, 0.0129313553, 0.0513834208, 0.0230469964, -0.0782321170, 0.0413361751, -0.0332591534, -0.0362592749, -0.0150032779, -0.0106092636, 0.0069086133, -0.0598351695, 0.0486443304, 0.0233015176, 0.0881697387, -0.0538844280, 0.0702842772, -0.0523423888, 0.0265263095, -0.0592139848, -0.0047596032, 0.0196972732, -0.0092523051, -0.0180330947, 0.0902384892, 0.0594795085, -0.0842186362, -0.0245451182, -0.0018128605, -0.0767656863, 0.0373628214, 0.0293397587, -0.0673509315, 0.0677936822, -0.0807565004, -0.0046872310, -0.0295424163, 0.0618091561, 0.0520230085, 0.0214534178, 0.0501608066, -0.0202872306, -0.0860176533, 0.0419754535, 0.0265844297, -0.0612336211, 0.0822048187, 0.0795343220, 0.0689052418, 0.0086963437, 0.0388714150, 0.0081897611, 0.0413457491, 0.0551122949, -0.0028545444, 0.0513247810, -0.0784629807, 0.0272990782, 0.0019346240, 0.0710272193, 0.0173138082, 0.0771136284, 0.0389189273, 0.0097814156, -0.0031200659, -0.0195433218, 0.0707161948, 0.0830259621, 0.0498174503, -0.0860006586, 0.0114016598, 0.0031979014, 0.0618651249, 0.0072789364, -0.0069760350, 0.0232513566, 0.0765289515, 0.0359902903, -0.0315504409, 0.0843466744, 0.0358815789, 0.0055462415, -0.0729045644, -0.0358127169, 0.0855646357, 0.0492175929, -0.0444476232, 0.0396648385, 0.0609445572, -0.0187245123, -0.0202014055, 0.0504774302, -0.0414377414, 0.0206467174, -0.0603399612, -0.0305580832, 0.0674920902, -0.0674458742, -0.0752245486, -0.0458879694, 0.0582904145, 0.0205419101, 0.0449081138, -0.0420169607, -0.0505160354, -0.0750351176, 0.0542933531, 0.0462517180, -0.0375175141, 0.0332596935, 0.0763055533, 0.0903144702, -0.0532248989, -0.0833570138, -0.0556218661, 0.0112611949, 0.0399112627, -0.0614399947, -0.0725375414, -0.0631659254, -0.0295981038, 0.0459180996, 0.0699061453, -0.0198569056, 0.0751253292, 0.0444334410, 0.0166833475, 0.0503936149, 0.0894238427, 0.0017343884, 0.0329369195, 0.0209393054, 0.0436562747, -0.0165314991, 0.0606718324, 0.0353177153, -0.0740543827, 0.0016361332, -0.0274514984, -0.0496039800, 0.0341336504, 0.0560569763, -0.0343222991, 0.0482857823, 0.0623334236, -0.0580275729, -0.0547843426, -0.0232655574, 0.0033620938, 0.0453649424, -0.0956084579, -0.0497047715, 0.0537822731, -0.0095664263, 0.0543911457, -0.0457675606, 0.0138786528, 0.0900596604, 0.0742415115, 0.0907952338, 0.0455470085, 0.0329657085, 0.0413803831, -0.0378281623, 0.0881463289, -0.0514187180, 0.0853578523, -0.0299531333, -0.0626291633, 0.0475382917, 0.0240403395, -0.0560931265, 0.0941549763, 0.0615624562, 0.0313876309, 0.0318812728, 0.0959419534, 0.0196667388, 0.0087863170, -0.0310390703, -0.0206457227, 0.0768542513, -0.0800618082, 0.0008650188, -0.0691065192, -0.0790109411, -0.0272060409, -0.0163264703, 0.0406899378, 0.0359180830, 0.0716830045, -0.0689704120, 0.0277487151, 0.0084304102, 0.0655082017, -0.0582399815, 0.0631555691, 0.0077190502, -0.0303674396, 0.0170141496, 0.0257731955, 0.0277870093, 0.0530331694, -0.0707587972, 0.0240812711, 0.0253522731, -0.0654946119, -0.0359145254, -0.0594738834, -0.0366824754, -0.0251973663, -0.0480714589, -0.0545040406, 0.0241024308, 0.0264746323, 0.0630264357, -0.0928902104, -0.0396528207, -0.0175031833, -0.0683277175, 0.0578018278, 0.0230073389, 0.0546074994, -0.0260677971, -0.0714684650, -0.0337204188, 0.0520888455, -0.0537909009, -0.0480349250, -0.0276303627, -0.0603719167, 0.0104908189, 0.0213823803, -0.0071405070, 0.0067991428, -0.0467582494, -0.0131441802, 0.0393174216, -0.0081935618, 0.0206066631, -0.0767736956, 0.0238526575, 0.0436870158, 0.0653630793, -0.0669301897, 0.0030715894, 0.0187559314, -0.0002231258, -0.0142100463, 0.0162447821, 0.0793548748, -0.0006352094, -0.0094040027, -0.0479015149, 0.0383006819, -0.0522903986, -0.0631585866, -0.0060647656, -0.0211078357, -0.0669627413, -0.0091576204, 0.0830745101, -0.0217648763, 0.0109079946, -0.0548587441, -0.0240392536, -0.0296009257, -0.0699538365, 0.0141974716, 0.0028278967, -0.0340183415, 0.0721880570, -0.0159211606, -0.0303318761, 0.0723050684, -0.0862962678, 0.0580785796, -0.0061817183, 0.0700465739, 0.0037763780, -0.0557758249, -0.0682029203, 0.0102512622, 0.0221320689, 0.0475969277, -0.0777184516, -0.0064767026, 0.0319010951, 0.0645181611, 0.0782728195, 0.0148514109, 0.0500353910, 0.0245310459, -0.0121089360, -0.0136425793, 0.0013598583, -0.0670093819, 0.0629704446, -0.0663493574, 0.0032592190, 0.0759368762, -0.0208459310, 0.0271830820, 0.0487126224, -0.0617672466, -0.0298405048, 0.0127542466, 0.0723675936, 0.0183039363, 0.0541506559, 0.0039344886, 0.0485854149, 0.0102947094, 0.0709098056, 0.0668501258, 0.0505993366, 0.0408311523, -0.0101748640, 0.0527020581, 0.0748110786, -0.0341302939, -0.0445380844, -0.0635587350, 0.0284325108, 0.0623042099, 0.0114917932, -0.0563057922, -0.0637613758, 0.0751268864, 0.0370317809, 0.0422355458, 0.0618515387, -0.0713336840, -0.0328279510, 0.0442336276, 0.0213093013, -0.0907549039, -0.0745168626, -0.0512171276, 0.0384538099, 0.0574915446, -0.0358622149, -0.0472644530, -0.0434765741, 0.0072999913, -0.0634109676, -0.0286593456, 0.0097680921, -0.0207207259, -0.0543822534, 0.0327521674, 0.0144111663, 0.0588341802, -0.0390565246, -0.0093826419, 0.0403503291, -0.0261335392, -0.0380950756, 0.0080012297, -0.0675904527, 0.0146132922, 0.0728547275, 0.0380481668, -0.0810734704, 0.0238656905, 0.0812322721, -0.0687189847, -0.0191843659, 0.0242115352, -0.0777604207, 0.0223352704, -0.0501811653, 0.0812716633, -0.0554936267, 0.0793408677, -0.0051074661, 0.0334680639, 0.0598036461, 0.0762258396, -0.0911500528, -0.0838337392, 0.0162235498, 0.0645594075, 0.0852973312, -0.0150352260, 0.0383102186, -0.0907395259, 0.0504844002, 0.0003526471, -0.0217394140, 0.0396632142, -0.0330638140, -0.0392157286, 0.0658277422, -0.0811821148, -0.0770146027, 0.0037831361, -0.0205141399, -0.0696033463, -0.0234303512, -0.0045559402, -0.0682513416, -0.0315305702, 0.0653190613, 0.0285186563, 0.0874423757, -0.0084060347, -0.0154223684, 0.0291632302, 0.0236458108, -0.0502008013, -0.0129710948, -0.0330423564, 0.0006292218, -0.0687111765, -0.0019021891, 0.0146365305, 0.0223927777, 0.0063693793, 0.0212970041, 0.0863075331, -0.0166080091, -0.0323736779, 0.0761905238, -0.0586622246, -0.0603632331, -0.0052698017, 0.0499846376, 0.0422000252, 0.0806847066, 0.0453865789, -0.0681311861, 0.0531839244, -0.0242986958, 0.0949962661, 0.0311240312, 0.0579948127, -0.0408886038, 0.0539453030, 0.0778924301, 0.0667805746, -0.0498096533, -0.0505526587, -0.0117760114, 0.0768713206, -0.0093905060, 0.0738636032, 0.0168118011, 0.0478048809, 0.0299790967, -0.0056581302, 0.0551575497, -0.0227060355, -0.0652855486, 0.0056596491, -0.0462697819, 0.0802837759, 0.0673885494, 0.0711904839, 0.0548142493, 0.0051803743, -0.0698562488, 0.0346867815, -0.0501909740, 0.0461946391, 0.0677920505, 0.0348308533, -0.0121287610, -0.0714717507, -0.0326783918, 0.0641210154, -0.0091037676, -0.0197736807, -0.0200965907, -0.0821047127, 0.0561184287, -0.0534051321, -0.0369567946, 0.0338949412, 0.0224990658, 0.0485825837, -0.0327268392, -0.0052742148, -0.0078544477, 0.0417120121, 0.0223041959, 0.0072068800, -0.0195366219, -0.0463080108, 0.0641899928, -0.0434742719, 0.0812478587, -0.0627341866, -0.0713657811, -0.0528905690, -0.0032814262, 0.0508170202, -0.0643464252, 0.0832098126, 0.0274030380, 0.0725912601, -0.0572930276, -0.0280213729, 0.0136192441, -0.0229901653, 0.0292187873, 0.0001972707, -0.0331249982, 0.0159830209, 0.0326818824, -0.0435952507, 0.0192361008, 0.0308089033, -0.0282101929, 0.0865547135, -0.0499400310, 0.0211981032, 0.0133144446, -0.0204880219, -0.0624303222, 0.0250775814, 0.0317905135, 0.0656950474, -0.0200110022, 0.0730614811, 0.0923155099, -0.0306854490, -0.0256125927, -0.0668787807, 0.0802870393, 0.0412743166, 0.0223492179, 0.0459842496, 0.0593499057, 0.0480964743, 0.0349097475, 0.0246017538, -0.0718388930, -0.0695058480, 0.0511860624, 0.0566508807, -0.0065955394, 0.0638840571, 0.0832179263, -0.0603055358, 0.0455356278, -0.0196839422, -0.0593996570, -0.0407977253, -0.0516092293, 0.0616835244, 0.0256740432, -0.0732978061, -0.0251653586, -0.0627560318, 0.0014110432, 0.0215968397, 0.0615977235, 0.0052428837, 0.0553136989, -0.0464203283, -0.0499674678, 0.0620427616, -0.0817041472, 0.0700400546, 0.0336926691, -0.0588768795, -0.0668506175, -0.0449249409, 0.0198686384, 0.0537099391, -0.0201564729, -0.0210901704, 0.0753036737, -0.0409663357, 0.0558988117, 0.0284127723, 0.0177362971, 0.0494028330, -0.0450993888, -0.0138351647, -0.0307582188, -0.0303090233, 0.0534809679, -0.0300717875, 0.0431149267, -0.0284651350, -0.0458128378, 0.0695755482, -0.0354002006, 0.0018009898, -0.0305644926, -0.0229334328, -0.0309807006, 0.0361839235, 0.0248548277, -0.0833701417, -0.0416392162, -0.0802838728, -0.0438553169, -0.0047649085, -0.0055382485, -0.0227659028, -0.0435571149, -0.0622858405, -0.0563039482, 0.0848700851, -0.0583156161, 0.0664889365, -0.0261953343, -0.0520683080, -0.0290942900, 0.0066397046, -0.0285682734, -0.0204424970, 0.0769869238, -0.0209016409, -0.0043608192, -0.0538416244, 0.0180164147, -0.0394290201, 0.0127847167, 0.0405347794, 0.0346107781, -0.0038374781, 0.0339226276, 0.0474815480, -0.0339477956, -0.0408425219, 0.0802146047, -0.0608117022, 0.0395452529, -0.0182689335, -0.0456602797, -0.0595998652, -0.0269523486, -0.0247669239, -0.0633092746, 0.0470783375, -0.0487504452, 0.0240793508, -0.0316902027, -0.0771036521, 0.0365118086, 0.0776783451, 0.0400589593, 0.0733599290, -0.0665804967, 0.0717373192, 0.0536992140, -0.0706799626, -0.0629851222, -0.0239905473, -0.0136523461, -0.0401932336, 0.0110082161, -0.0031348763, 0.0758828893, 0.0142759392, -0.0753431097, 0.0179626234, 0.0264038220, -0.0178732034, 0.0733984932, -0.0141178574, 0.0225022286, 0.0239826161, -0.0231270064, 0.0870542005, 0.0822025537, -0.0248669926, -0.0583130829, -0.0117091285, -0.0243623350, 0.0239942819, -0.0327883214, -0.0615022331, -0.0600569323, 0.0438477360, -0.0206183549, 0.0071812244, -0.0361828059, -0.0366718732, 0.0800094903, 0.0760435611, -0.0654035732, -0.0499851480, 0.0674946904, 0.0315032415, -0.0213051010, 0.0781283677, -0.0661508963, 0.0410777070, -0.0102415141, -0.0355907194, -0.0073298761, 0.0547774397, -0.0422433428, -0.0535978973, -0.0631711558, 0.0208194647, -0.0024709539, 0.0054916772, -0.0117515577, 0.0318850428, 0.0453269817, 0.0092501435, 0.0406980999, -0.0315388106, 0.0418169722, -0.0087573621, -0.0502316132, -0.0665461943, -0.0418654270, 0.0459631793, -0.0094389906, -0.0269928947, -0.0669206008, -0.0098302774, -0.0118490597, 0.0265996251, 0.0060328646, 0.0455335677, -0.0032172559, -0.0006259240, -0.0862978771, 0.0380095430, 0.0553512983, 0.0289241225, 0.0094386023, 0.0395197608, 0.0623675920, -0.0574537292, -0.0437055118, -0.0094979117, -0.0800478607, 0.0041317316, -0.0418268666, 0.0315125659, 0.0726285279, 0.0551878586, -0.0033811161, -0.0877994150, -0.0371956378, 0.0624881200, 0.0338186137, 0.0185346566, 0.0265395530, 0.0243780836, 0.0024278320, -0.0614862889, 0.0464523062, 0.0100893667, -0.0465287156, -0.0288487598, -0.0507426895, -0.0148276500, 0.0477857403, -0.0841947347, 0.0636358336, 0.0386966988, 0.0314774737, 0.0320092328, -0.0744120255, -0.0682503134, 0.0115007376, -0.0000171186, -0.0334832259, -0.0324949212, 0.0808851942, -0.0770539641, -0.0656872764, -0.0622820035, 0.0314590223, -0.0420346409, -0.0841813460, -0.0470740832, -0.0284811333, 0.0121053346, -0.0441196039, 0.0382822603, -0.0451833010, 0.0210245885, -0.0478675179, -0.0625831783, -0.0289803352, 0.0386193767, -0.0637762770, 0.0086693820, 0.0169416070, -0.0576253794, 0.0312964134, 0.0166475084, -0.0328024551, -0.0378580056, 0.0003537628, -0.0409903750, 0.0824500620, 0.0066139856, 0.0126774563, 0.0614237897, 0.0490650423, -0.0350157954, -0.0262465663, 0.0426827073, -0.0741537139, -0.0007185248, 0.0370718315, -0.0782733932, -0.0051010251, -0.0104795415, -0.0195796527, 0.0516016372, -0.0801557377, -0.0856854618, -0.0202328693, -0.0210154038, 0.0063995691, 0.0932085142, -0.0223361216, 0.0345666222, -0.0623050667, -0.0591523014, -0.0775352269, 0.0370760486, -0.0096764090, -0.0811983570, -0.0136355823, 0.0114832381, 0.0104416907, 0.0429634862, -0.0023016215, -0.0449943393, 0.0914767832, -0.0484567583, -0.0170293227, 0.0485616252, -0.0643831119, -0.0019492748, -0.0485966392, -0.0649648607, 0.0566460453, -0.0401838273, 0.0612545535, -0.0557050332, 0.0531210415, 0.0600009859, -0.0687353462, 0.0607629754, 0.0132530481, -0.0364694670, -0.0842123106, -0.0778691322, -0.0759587511, -0.0396689661, -0.0072171502, -0.0248562638, -0.0364446416, -0.0669797584, -0.0249965936, 0.0272475351, 0.0218130015, -0.0084359311, -0.0250613727, 0.0522458069, -0.0606094152, 0.0840937644, -0.0901920721, 0.0921129286, -0.0322910547, -0.0598226003, 0.0073936600, -0.0785299689, 0.0320242681, -0.0298938770, -0.0321823172, 0.0840626210, -0.0005852118, -0.0233415198, 0.0306256823, -0.0038980721, -0.0646023154, -0.0645778254, -0.0422345102, -0.0628690943, 0.0807559043, -0.0331307761, 0.0313994996, -0.0204767883, 0.0432002619, -0.0416396856, 0.0638888180, -0.0358332954, -0.0231933445, 0.0124647925, -0.0788322687, -0.0039314260, -0.0474189557, 0.0865696594, 0.0491208397, 0.0256233867, -0.0205359142, 0.0248619746, 0.0094894608, -0.0865007713, 0.0574438944, -0.0465246104, 0.0288509596, -0.0186892394, -0.0162806157, 0.0632275939, 0.0498952568, 0.0818121284, 0.0719610751, -0.0191693585, -0.0740429386, -0.0459258333, -0.0006377398, -0.0664028525, -0.0425492600, -0.0504273660, 0.0304940958, 0.0063269804, 0.0332388952, 0.1009422317, 0.0368480086, 0.0806398094, -0.0180810429, 0.0211734790, -0.0099113807, 0.0725374222, -0.0388135538, 0.1044983789, 0.0287030153, -0.0554346591, 0.0959364250, 0.0030056895, -0.0526924245, -0.0640110970, 0.0389576480, -0.0008427895, 0.0028317261, 0.0458071269, 0.0031734011, 0.0590795204, 0.0011570217, 0.0980513915, 0.0028461441, 0.0424544401, 0.0027310206, 0.0579209141, -0.0737945363, 0.0503306761, -0.0078127664, 0.0773913115, 0.0720326826, -0.0459990799, 0.0803503543, 0.0520627238, 0.0243085157, -0.0252303258, 0.0927781090, -0.0225301292, 0.0482459143, 0.0962632373, -0.0484425575, 0.0180144683, 0.0812990293, 0.0567677394, 0.0220396183, 0.0913491026, 0.0154246064, 0.0289287921, -0.0478955135, 0.0371587835, 0.0364103429, 0.0821417943, 0.0017653187, 0.0202257503, -0.0500458963, -0.0981133878, -0.0791742876, -0.0935307965, -0.0401327834, 0.0333182551, -0.0873051211, 0.0337555967, 0.0423896387, 0.0961287618, 0.0246601179, -0.0180457328, -0.0700052977, -0.0827372223, 0.0884435177, 0.0784330741, -0.0495671183, -0.0506131463, -0.0315972976, -0.0854551047, 0.0387407430, -0.0087320125, -0.0397731103, 0.0057309582, -0.0818975121, -0.0773887485, -0.0291967280, 0.0374848694, -0.0164422020, -0.0038633333, 0.0424023308, -0.0077992268, -0.0693821758, 0.0798164681, -0.0114530502, -0.0761094242, 0.0671571046, -0.0145013575, 0.0287222061, -0.0059202597, 0.0278726984, -0.0443383865, 0.0119827511, -0.0872531757, 0.0286550168, 0.0831338689, 0.0604332909, -0.0401750915, -0.0072028963, 0.0547701493, 0.0084997248, -0.0844103843, 0.0537995659, 0.0607412867, 0.0519229807, 0.0228086859, 0.0704815164, -0.0788800344, 0.0387357697, 0.0342591256, -0.0453267172, 0.0327528529, -0.0892631337, -0.0767370239, 0.0687851310, 0.0799969956, 0.0672551394, -0.0538409166, -0.0772095025, 0.0143359071, 0.0296516605, -0.0775218084, -0.0715161115, -0.0235028621, -0.0821254700, -0.0000543307, 0.0104018552, -0.0021532299, 0.0310115796, -0.0150561519, 0.0551225469, 0.0265156589, -0.0732441023, -0.0060809837, -0.0771422088, -0.0133091314, -0.0583872572, -0.0293860678, -0.0298689958, -0.0752860904, 0.0590771697, 0.0263290685, -0.0009309008, 0.0057930090, 0.0596876293, -0.0488653816, -0.0562121011, 0.0205671731, -0.0649519339, -0.0283451192, 0.0091802990, 0.0477710962, -0.0190957766, -0.0402440391, -0.0092572868, 0.0527811162, -0.0056346399, 0.0344067365, 0.0663734823, -0.0534135252, 0.0115621164, 0.0288502630, -0.0247263536, -0.0092491349, 0.0212773494, -0.0519269519, 0.0255754851, 0.0365286544, 0.0753037706, 0.0137895895, 0.0219363254, -0.0722426325, -0.0758154914, -0.0123505956, 0.0125964992, 0.0402259640, -0.0677505955, -0.0628747717, -0.0803739429, -0.0709117875, -0.0024051501, -0.0349697210, -0.0411467068, 0.0244013481, -0.0677594244, 0.0744511560, -0.0543477982, -0.0564997047, 0.0636656731, -0.0054707052, 0.0389237441, -0.0489898585, 0.0049895197, -0.0151751861, 0.0913537964, -0.0454785898, -0.0538690649, 0.0158192627, -0.0834709406, 0.0398762748, -0.0120622721, -0.0792453662, -0.0135003729, 0.0514691919, -0.0034149864, 0.0092929890, -0.0608612150, 0.0104410844, -0.0008981182, -0.0175346751, -0.0268180706, 0.0307833161, 0.0355414487, -0.0205050465, -0.0013093755, 0.0802222118, 0.0103816688, -0.0920937508, 0.0575396232, 0.0367393047, 0.0670655221, -0.0433756858, 0.0081024701, -0.0214466583, 0.0398538746, -0.0097473692, 0.0071958522, 0.0375809334, -0.0868792161, 0.0117761111, -0.0639363527, 0.0453844443, 0.0294809267, -0.0017055558, -0.0382926948, 0.0183167718, -0.0753746182, -0.0030597840, 0.0702642724, -0.0597686693, 0.0311532635, -0.0821539462, 0.0102958037, -0.0096354559, 0.0036703930, -0.0318445452, -0.0387394764, 0.0078138104, 0.0805613324, 0.0158316642, 0.0077075455, -0.0896205679, -0.0744659677, 0.0458688959, 0.0635789931, 0.0908728987, -0.0338911489, -0.0683740303, 0.0410321057, 0.0601101592, -0.0501598828, -0.0519382283, 0.0159460381, 0.0432395786, -0.0206078254, -0.0752613470, 0.0198352765, -0.0831224248, -0.0368923731, -0.0550720990, 0.0339055359, -0.1042317674, -0.0622848421, -0.0739083588, 0.0101258047, 0.0360092409, 0.0071837706, -0.0427781790, 0.0369236805, -0.0052896091, 0.0894279554, -0.0142879868, 0.0110364091, 0.0069751809, -0.0726504698, 0.0577551611, -0.0307438672, -0.0014311885, -0.0552328043, -0.0654926151, -0.0609052703, 0.0251904968, 0.0456024334, -0.0863598809, -0.0638532937, 0.0718033165, -0.0047743181, 0.0391683690, -0.0013341401, 0.0029829242, 0.0485982299, 0.0807683244, 0.0237249937, -0.0566554964, -0.0262022633, -0.0193359442, -0.0493842252, 0.0269958600, 0.0388935357, 0.0306832287, 0.0183722861, 0.0343795381, -0.0054359371, 0.0075843120, 0.0220434107, -0.0187636167, 0.0074233320, -0.0555315241, 0.0746338293, 0.0111802835, 0.0138029605, 0.0051371399, -0.0523762777, -0.0510756895, -0.0193214342, -0.0576272123, 0.0173396897, 0.0636338815, -0.0666412115, 0.0604885630, -0.0143773882, -0.0185361914, -0.0009558242, 0.0205678400, 0.0933583081, 0.0523913726, 0.0218759421, -0.0725098401, -0.0054232958, -0.0387061350, 0.0493688397, 0.0072640548, -0.0045458619, 0.0624224953, 0.0722464025, 0.0132676372, -0.0077046957, -0.0199598651, -0.0415038243, -0.0893771946, 0.0790559724, 0.0365296900, -0.0346927047, 0.0303603783};
# 26 "./parameters.h" 2
# 1 "./weights/b6.h" 1
# 12 "./weights/b6.h"
conv2d_1_bias_t b6[64] = {0.0162795596, 0.0149394656, -0.0081138080, 0.0118851177, 0.0110288551, 0.0160852764, -0.0068138824, -0.0056385417, -0.0004795711, -0.0027741212, -0.0051978151, -0.0033479512, 0.0164922997, 0.0082560685, 0.0106519489, -0.0176809076, 0.0178919714, 0.0092769489, 0.0151794273, 0.0135883596, 0.0197591260, -0.0174493529, -0.0205217246, 0.0123865688, -0.0133412117, -0.0002904572, 0.0159277730, -0.0077928570, -0.0194137357, -0.0165838115, -0.0113904597, 0.0186038762, -0.0097297849, -0.0185658894, 0.0163088553, -0.0182171371, -0.0069226320, -0.0189099815, 0.0085066147, -0.0108877812, -0.0167783573, 0.0053547737, 0.0040516811, 0.0165713336, 0.0044639055, -0.0059555774, -0.0040190765, 0.0078519462, -0.0072535379, 0.0097120665, 0.0097413706, 0.0097821364, -0.0103712594, -0.0096577443, -0.0095716137, 0.0185285136, -0.0112587493, -0.0069131413, 0.0036923464, -0.0127598802, 0.0017787711, -0.0146389436, -0.0194223411, -0.0119497692};
# 27 "./parameters.h" 2
# 1 "./weights/w9.h" 1
# 12 "./weights/w9.h"
conv2d_2_weight_t w9[36864] = {-0.0798497200, 0.0139214508, -0.0517745614, -0.0197887737, 0.0435477011, -0.0190657154, 0.0297852010, -0.0715037435, 0.0122797918, 0.0424427278, 0.0286155324, 0.0291452482, 0.0126246978, -0.0591907278, 0.0383992121, 0.0306060128, -0.0437003486, -0.0217613820, -0.0352261998, -0.0688196495, -0.0382642336, 0.0290914997, 0.0610498674, 0.0045402977, 0.0279801954, 0.0444320962, -0.0148103666, -0.0349479280, 0.0734900236, 0.0315308049, -0.0383998491, 0.0145634310, -0.0661770031, -0.0051646740, -0.0591665395, 0.0577052645, 0.0038062572, -0.0248060338, -0.0003846534, -0.0513760746, -0.0379023477, -0.0123459855, 0.0126619916, -0.0243993718, -0.0759061873, 0.0302544124, -0.0015031960, -0.0161764193, -0.0480467156, 0.0274224915, -0.0506940596, 0.0275647044, 0.0456371754, -0.0393863730, 0.0158101376, 0.0039536981, -0.0610466972, 0.0031595137, 0.0131812925, 0.0036875196, 0.0735571235, 0.0174977947, -0.0115906205, 0.0036979169, 0.0683461428, -0.0755353421, 0.0455790237, 0.0113713015, -0.0298704207, -0.0002563903, 0.0067642764, -0.0533195958, -0.0761642307, -0.0614437535, 0.0195994154, -0.0000749561, 0.0450017080, -0.0387142748, 0.0647146404, 0.0519800037, 0.0752206221, 0.0010330286, 0.0562477820, -0.0499578305, -0.0202870499, -0.0521091670, -0.0491555035, -0.0175329242, 0.0645708144, 0.0253129192, 0.0733381063, 0.0001145107, -0.0487378500, 0.0457284339, -0.0153987380, -0.0118515892, -0.0322943181, -0.0564309135, -0.0567523800, 0.0030102986, -0.0552145690, -0.0367971063, 0.0068136649, 0.0141318999, 0.0226460360, 0.0038531672, 0.0000945243, 0.0017592076, -0.0559422523, -0.0534550436, 0.0037771289, 0.0597486012, -0.0449922718, -0.0067181252, 0.0068427580, 0.0070570940, -0.0718235821, 0.0683286935, 0.0593095124, -0.0483227447, -0.0641198754, 0.0289926305, -0.0020589000, 0.0824319646, 0.0273320395, -0.0502626598, -0.0037385812, 0.0350755006, 0.0843487456, -0.0324961580, 0.0376454554, 0.0571445003, 0.0103282491, 0.0423524193, 0.0041243248, -0.0454688855, 0.0508997999, 0.0221275967, -0.0734021887, 0.0133610293, 0.0400008634, -0.0463000722, 0.0367632508, -0.0192113630, -0.0274394620, 0.0332030952, 0.0702785924, -0.0545208491, 0.0015736561, -0.0899190456, -0.0809943080, -0.0414353758, 0.0557076186, 0.0302234255, 0.0060521238, -0.0184999146, -0.0733137876, -0.0609563142, -0.0304876007, 0.0907704383, -0.0176579524, -0.0649813786, 0.0556612350, 0.0495194495, 0.0662617609, 0.0105728982, 0.0296902210, 0.0403006859, 0.0225694124, -0.0280221142, -0.0122421673, -0.0192844272, -0.0022967262, -0.0672625452, 0.0646177456, -0.0634344965, -0.0367140546, -0.0629682466, 0.0112967724, -0.0504743084, 0.0365497321, -0.0502693765, -0.0783488229, 0.0570933186, 0.0410708711, -0.0270258840, -0.0369746424, -0.0508648343, 0.0497753024, -0.0086824745, -0.0111101260, 0.0370199159, 0.0421654396, -0.0203063004, -0.0472069457, -0.0954848975, -0.0415579155, 0.0538397729, 0.0241677444, -0.0026884866, -0.0399576351, -0.0630812123, -0.0785363242, 0.0108038811, -0.0551714264, -0.0056476947, 0.0715018883, 0.0477835611, 0.0273828655, 0.0435068011, -0.0213143677, 0.0359391831, 0.0238350611, 0.0190419182, 0.0692339018, 0.0335394368, 0.0057006669, -0.0098133991, 0.0312553048, 0.0126255192, -0.0384115949, 0.0053993869, -0.0658394620, -0.0415846258, -0.0481243581, 0.0199975651, 0.0783276036, 0.0544767901, 0.0354209319, 0.0514569283, -0.0606012233, -0.0737278834, 0.0773495212, 0.0484469198, 0.0149352448, 0.0214007832, -0.0161750093, 0.0216854978, -0.0440667495, 0.0448218025, -0.0139368763, -0.0443637334, 0.0058300723, 0.0055343681, -0.0399175659, 0.0405007266, 0.0417759269, -0.0283751916, -0.0256898273, 0.0179900080, 0.0141993770, 0.0162896868, -0.0458036028, 0.0587605648, 0.0180250295, 0.0500098951, 0.0444072708, 0.0004662418, -0.0303453300, 0.0481915586, 0.0449953116, -0.0239930358, -0.0547252446, 0.0208614562, 0.0186424758, 0.0379519872, -0.0346031524, 0.0168039575, -0.0123639964, -0.0057527758, -0.0710567385, -0.0594313815, -0.0604597554, 0.0102322660, -0.0352997705, 0.0684173107, -0.0329723209, -0.0174894612, 0.0106622465, 0.0349571258, 0.0036571820, 0.0046180827, 0.0607511625, -0.0047515016, -0.0491834283, 0.0707596689, 0.0463695489, 0.0024725709, -0.0057307193, -0.0285591558, -0.0256337263, -0.0564807467, 0.0698308274, -0.0413844064, 0.0557050407, -0.0087490361, -0.0281974562, 0.0261334945, -0.0094689531, 0.0358341709, 0.0585153773, 0.0023740965, -0.0172543079, -0.0316059887, 0.0158323124, 0.0518495068, 0.0257823840, 0.0059808041, -0.0655409768, -0.0495184399, 0.0584856607, 0.0755180493, 0.0225699935, -0.0518829860, 0.0330814123, 0.0024332372, -0.0518843420, 0.0375922583, 0.0475875437, 0.0076397704, 0.0805795342, 0.0162115004, -0.0271893088, 0.0176428221, -0.0560232215, 0.0590204187, -0.0590998903, 0.0091320407, -0.0422301032, 0.0184711590, -0.0313181430, -0.0654448420, 0.0054064766, 0.0542352758, 0.0576278791, -0.0044767205, 0.0946433693, 0.0645441860, 0.0424767062, -0.0461637229, 0.1002299041, -0.0454894900, 0.0506577231, 0.0021246627, -0.0775075927, -0.0358324274, -0.0065394677, -0.0611702502, -0.0760128200, -0.0135802040, 0.0173390973, 0.0159024745, 0.0313405283, -0.0380564556, 0.0038654003, -0.0641231313, 0.0572472438, 0.0580514297, 0.0046005799, 0.0154976342, -0.0232023895, -0.0389333405, -0.0367808156, 0.0329760015, 0.0498988479, 0.0183929019, -0.0224011280, 0.0370467827, 0.0846355185, -0.0038356041, 0.0363803990, 0.0231840834, 0.0215584692, -0.0402350202, -0.0361588523, 0.0685707703, -0.0019277612, 0.0112080015, -0.0700144842, -0.0012778277, 0.0095897252, -0.0391702019, 0.0001625819, 0.0521370098, -0.0058579985, 0.0663966984, 0.0170212761, -0.0650078580, -0.0248927008, 0.0682004169, 0.0203337260, -0.0651356727, 0.0637796149, 0.0476748645, 0.0415513478, 0.0431669503, 0.0122093605, 0.0058559822, -0.0203379225, -0.0198237505, 0.0065336805, 0.0666745678, 0.0735784993, 0.0024709026, 0.0034094939, 0.0368241966, -0.0697394684, -0.0458635017, -0.0729476884, -0.0305406675, -0.0519134589, -0.0729038045, 0.0055936705, -0.0222099572, -0.0579283498, 0.0434753597, -0.0648031533, 0.0085697286, -0.0476563275, 0.0025650831, -0.0010463031, -0.0808334649, -0.0406589024, -0.0426838212, -0.0582330860, -0.0177023113, 0.0235246457, 0.0744980350, 0.0586788505, -0.0616278276, 0.0226471554, -0.0027855991, -0.0413560905, 0.0367168449, -0.0610279366, 0.0021338037, 0.0693747327, 0.0499249846, -0.0139415720, -0.0361937471, 0.0341341607, -0.0256638117, 0.0187369529, 0.0067156437, 0.0599136315, -0.0841716230, -0.0501831211, -0.0039671580, -0.0102965394, 0.0466968156, -0.0020804091, 0.0346146896, 0.0761796609, 0.0708927512, -0.0069698882, 0.0291122757, -0.0313216746, -0.0016785506, 0.0280742664, 0.0609617531, 0.0416547544, 0.0377900042, 0.0178395882, -0.0468880720, -0.0329100303, 0.0855832100, 0.0158926491, 0.0504107103, -0.0099447304, -0.0188040938, -0.0782251060, 0.0338631608, -0.0179419015, 0.0555945225, 0.0802213848, 0.0330311246, 0.0510806106, -0.0291795935, 0.0136184143, -0.0418026000, -0.0222257562, -0.0015417022, 0.0789813176, -0.0020327596, 0.0106440848, -0.0827937573, 0.0497904234, -0.0433083400, -0.0788496360, 0.0265440494, 0.0574051291, -0.0349515304, -0.0739441067, -0.0201939233, 0.0177306328, 0.0558124706, 0.0057832170, 0.0397847779, -0.0009705470, 0.0577468611, -0.0129031530, -0.0094220527, -0.0114431167, -0.0262318216, 0.0015480397, 0.0384326801, -0.0352121368, -0.0366167948, 0.0432026945, -0.0469178632, -0.0177678335, 0.0290761851, 0.0833469108, 0.1043813899, 0.0336341001, -0.0198761839, 0.0744316429, 0.0347368084, -0.0132320132, -0.0096007343, -0.0012214533, 0.0347293243, -0.0034660804, -0.0652969554, 0.0041828239, -0.0491196327, -0.0087203290, 0.0198876243, -0.0040385160, 0.0911464766, -0.0312077347, 0.0326195695, 0.0926083475, -0.0892452672, 0.0352865793, 0.0426740274, 0.0051282467, -0.0477193445, 0.0581651889, -0.0676786304, -0.0171196386, -0.0547986105, -0.0078547634, 0.0837543011, 0.0012261361, -0.0799022466, -0.0083849886, 0.0056907246, 0.0145239271, -0.0454194918, 0.0307633150, 0.0446743518, -0.0142139494, -0.0127321081, -0.0311241485, 0.0819484442, -0.0276713558, -0.0092426967, 0.0135417264, 0.0503856577, -0.0269683376, 0.0789690390, 0.0643333122, -0.0266474523, -0.0297724456, -0.0098886164, 0.0377507173, 0.0472397506, -0.0460032262, 0.0692356899, 0.0620885529, 0.0371574461, 0.0074245636, -0.0305697359, 0.0576316454, 0.0156461541, -0.0424057841, 0.0260511637, -0.0060553239, 0.0662806705, -0.0002098637, 0.0350262150, 0.0347987674, -0.0057485849, 0.0700542703, 0.0450273305, 0.0224488787, 0.0430788845, 0.0426132008, 0.0313000567, 0.0491455346, -0.0488020368, -0.0398208685, -0.0332861878, 0.0440785699, -0.0335325673, 0.0784937218, -0.0325655490, -0.0208267272, -0.0338291451, 0.0454958677, -0.0216036532, 0.0056722942, 0.0430203974, -0.0046079527, -0.0616612993, 0.0102124615, 0.0268065520, 0.0580015890, -0.0565199517, 0.0730898008, -0.0937197208, -0.0151355062, 0.0073719686, 0.0902409106, -0.0191827994, -0.0448276773, -0.0525277071, 0.0389692523, 0.0473855324, 0.0095974207, 0.0319268703, -0.0308496282, 0.0338623524, 0.0594733469, -0.0694730952, -0.0628826767, 0.0173676424, -0.0498080105, 0.0216112752, -0.0885647833, 0.0637639239, -0.0602292605, -0.0345906094, -0.0361273587, 0.0180204175, 0.0137876999, -0.0462354310, -0.0673688948, 0.0017948669, 0.0302953161, 0.0416211784, -0.0750740767, -0.0122639602, 0.0508976579, -0.0389392935, 0.0156877059, 0.0275766440, 0.0566324331, 0.0028148834, 0.0628275871, 0.0779684186, -0.0060625956, 0.0236637834, -0.0180075560, -0.0145084355, 0.0701339170, -0.0332773924, 0.0215579849, 0.0636459365, 0.0600185320, 0.0237263814, -0.0152546093, -0.0643153042, -0.0448583439, 0.0399419479, 0.0068846643, -0.0574413575, 0.0274159256, -0.0089067519, 0.0614189878, 0.0123426551, 0.0166721195, 0.0570221059, -0.0461126640, -0.0572051890, -0.0278027803, 0.0763503835, 0.0022357455, 0.0225034077, 0.0729423538, 0.0391225219, -0.0214431752, -0.0043352093, 0.0467590280, -0.0438641682, -0.0249206554, -0.0267308950, -0.0671136677, -0.0670866221, -0.0413085558, 0.0023097643, 0.0658550635, 0.0241585448, 0.0693909675, 0.0454873517, 0.0343296267, -0.0127055272, -0.0130231082, -0.0019613826, 0.0765307695, -0.0486731157, -0.0601588935, -0.0410932414, -0.0304612275, -0.0288269836, 0.0178690907, -0.0458382964, 0.0408398584, -0.0700950176, 0.0194327682, -0.0537525192, -0.0115151247, -0.0567202419, -0.0482692011, 0.0120225782, -0.0767380819, 0.0009076730, 0.0236051492, 0.0444114357, -0.0060447417, 0.0201250818, 0.0322505310, -0.0189211685, 0.0556433946, 0.0554256476, -0.0183948241, 0.0578387827, -0.0635296479, 0.0046980730, -0.0213925391, 0.0457678810, 0.0787745789, 0.0045927605, -0.0019532621, -0.0562839210, -0.0427895002, 0.0285786707, -0.0806031376, 0.0384164602, 0.0294325128, 0.0814824104, -0.0233916547, 0.0326166525, -0.0114150373, -0.0236323755, 0.0296304300, 0.0504055656, 0.0164237693, -0.0298322532, -0.0294065680, 0.0398089737, -0.0260190833, -0.0153733902, -0.0080254665, 0.0601257049, -0.0063632010, 0.0154689401, 0.0127561763, 0.0568598881, 0.0801458061, 0.0212328732, -0.0213849321, -0.0221303925, -0.0632531270, -0.0500533395, 0.0404699594, 0.0131107019, -0.0051055057, 0.0102184666, -0.0504086539, -0.0302221198, 0.0021810834, 0.0580630824, 0.0204875879, 0.0439709052, 0.0610437430, 0.0574836545, -0.0215276051, 0.0494982228, 0.0918904170, -0.0463714711, 0.0517409109, 0.0025382349, 0.0549314618, 0.0602770410, -0.0487532988, -0.0088754781, -0.0330815837, 0.0129903266, 0.0360108241, 0.0183028597, -0.0238164142, -0.0375145972, 0.0562262163, -0.0539064631, -0.0200843960, 0.0097976802, -0.0572026558, -0.0342524908, 0.0489548445, 0.0450295992, -0.0249084290, 0.0116149075, -0.0170315653, -0.0004774108, 0.0994702280, 0.0577054024, -0.0261608884, -0.0517810248, -0.0811396614, -0.0287322588, -0.0384902209, -0.1033392996, -0.0125109833, -0.0298359711, -0.0668114424, -0.0157664251, -0.0655673444, -0.0038127650, -0.0531452335, -0.0034874773, -0.0149567807, 0.0663604885, -0.0914185345, 0.0325271226, 0.0631966963, -0.0565488338, -0.0760288760, -0.0283806697, 0.0634366274, -0.0789001212, -0.0003514118, 0.0261147358, -0.0687536523, 0.0390106589, 0.0184468068, 0.0257126521, 0.0356170163, -0.0266674701, -0.0193486046, -0.0465694517, 0.0420151912, 0.0795634836, -0.0659823492, 0.0741140023, 0.0258800592, -0.0050738011, 0.0303620547, -0.0516425818, -0.0029234083, -0.0525171049, 0.0395726934, -0.0295575690, -0.0368653759, 0.0580812842, 0.0583028868, 0.0818278119, 0.0257720873, -0.0098690251, -0.0101237176, -0.0115822023, 0.0358991958, 0.0038141001, 0.0464711152, -0.0179074761, -0.0195391811, -0.0610021241, 0.0088866306, -0.0104635078, 0.0896599814, 0.0694116130, -0.0181348193, 0.0467154756, -0.0253529139, -0.0545031875, 0.0519343689, 0.0202185605, -0.0853070840, 0.0548565760, 0.0656050891, -0.0086482586, -0.0298528261, -0.0343797430, -0.0433787294, 0.0497616604, -0.0236013066, 0.0041308282, 0.0162883066, 0.0229401644, -0.0271309484, -0.0494508557, 0.0389801785, 0.0794759989, -0.0504089221, -0.0212116372, 0.0301094018, -0.0068106153, 0.0285159759, 0.0044738445, 0.0193426535, -0.0000795423, 0.0393229350, -0.0274958760, 0.0307103582, -0.0710676238, 0.0081494600, 0.0405582972, 0.0295935031, 0.0364726745, 0.0348353423, 0.0480416007, 0.0466012359, 0.0302786008, 0.0376209356, 0.0734226555, -0.0275326762, 0.0205031577, 0.0099948747, 0.0499467216, -0.0143694747, 0.0294345226, 0.0309127923, 0.0171439759, 0.0822478607, 0.0264916662, 0.0044884151, -0.0133478818, 0.0156251900, 0.0004242357, 0.0239502694, 0.0020661540, -0.0044447654, -0.0340538323, -0.0330406353, 0.0608917698, -0.0543464050, -0.0325866900, -0.0558582284, -0.0401075445, 0.0616549663, -0.0412745066, -0.0710858777, 0.0382159688, -0.0585867725, 0.0077287108, -0.0497917421, -0.0160536580, -0.0603003129, 0.0407182984, -0.0257637184, 0.0172665454, -0.0512871668, 0.0289499555, -0.0621239245, -0.0257929564, -0.0449976958, 0.0537367389, -0.0334259681, -0.0517083220, 0.0503851734, 0.0612984896, 0.0354279876, -0.0123375067, -0.0677932575, -0.0467827842, 0.0464915968, 0.0715313405, 0.0259734001, -0.0203956496, -0.0623750836, 0.0202991422, 0.0655841082, 0.0028135462, -0.0208365843, -0.0096356180, 0.0478401594, 0.0274376106, -0.0428208113, -0.0269133672, 0.0505327694, 0.0350727439, -0.0401329696, -0.0129650263, -0.0589569956, 0.0538890399, 0.0648003966, 0.0127875833, -0.0339910351, -0.0646777749, -0.0340212397, 0.0314989686, -0.0108850803, 0.0642419234, -0.0338050053, 0.0680928901, 0.0323599018, -0.0225841124, 0.0744317472, -0.0505773313, 0.0266323015, 0.0196270868, -0.0505311415, 0.0472951382, 0.0511594303, -0.0371228606, -0.0035399001, 0.0949532315, -0.0070224861, -0.0500245169, -0.0205010660, -0.0500299148, -0.0064346222, 0.0332472548, 0.0512094982, -0.0049679126, 0.0373067297, -0.0324417911, 0.0141565176, -0.0705145225, -0.0568230040, -0.0499508344, 0.0571776666, 0.0101601752, 0.0239654779, -0.0727640241, 0.0053051603, -0.0581530556, -0.0069085937, -0.0394827351, 0.0617584661, 0.0461491458, 0.0393643342, 0.0228201803, -0.0248840116, 0.0824764594, 0.0324256942, 0.0271539707, -0.0482084528, -0.0208561346, 0.0138700977, 0.0526923798, -0.0065136012, -0.0496118292, 0.0233696122, -0.0534127206, 0.0686219037, 0.0054016709, -0.0653065518, 0.0241778232, -0.0189805683, 0.0218912065, -0.0107520744, 0.0472019538, 0.0691144541, -0.0706779882, 0.0313765779, 0.0803168267, -0.0027038916, 0.0144586628, 0.0415942296, -0.0315168947, 0.0357356220, -0.0333624594, -0.0146416044, 0.0445742048, -0.0179614779, -0.0040143859, 0.0630948991, -0.0382107608, -0.0025481847, 0.0785224363, 0.0174678843, -0.0137580400, -0.0218010526, -0.0103895301, -0.0173371527, -0.0104501043, 0.0675884113, 0.0149554182, -0.0096183866, -0.0400620401, -0.0357978009, -0.0073970216, -0.0654583871, 0.0647279397, -0.0442990027, -0.0243540760, -0.0794768557, 0.0176187139, -0.0235530287, 0.0321316347, -0.0024258140, 0.0409338772, -0.0595709793, -0.0017174917, 0.0339188352, 0.0408910401, -0.0225073006, 0.0418079495, -0.0627200007, 0.0419207066, 0.0273692552, 0.0538866483, -0.0054571475, 0.0277444050, -0.0086778123, 0.0650357008, 0.0341709144, 0.0056867776, -0.0250150654, -0.0653333068, -0.0642413571, 0.0281174406, 0.0465958826, 0.0139834573, 0.0575377345, 0.0213574190, 0.0678522065, -0.0755378380, -0.0562741943, 0.0044280686, -0.0720538646, 0.0724803060, 0.0789415017, 0.0059467307, 0.0038657049, -0.0266156457, -0.0003196395, -0.0131015489, 0.0164988991, -0.0109955342, -0.0583382659, 0.0522499569, 0.0214660708, 0.0730312616, 0.0256737433, 0.0564771518, 0.0398855209, -0.0156822931, 0.0221304558, -0.0433743261, -0.0153100369, -0.0658113956, 0.0263334177, -0.0706513077, -0.0486991964, 0.0418755710, -0.0130357863, -0.0291589815, -0.0028082407, 0.0322563425, -0.0911341980, -0.0275526792, 0.0495360233, -0.0655291975, -0.0282577202, 0.0553871319, -0.0425420552, -0.0643228292, -0.0439092517, -0.0829447880, 0.0378089286, 0.0495724231, -0.0133040613, -0.0106633808, -0.0413148850, 0.0586701185, -0.0627840534, 0.0266474746, -0.0311110429, 0.0130842011, 0.0112133063, 0.0173881594, -0.0376756489, -0.0519317389, -0.0005632037, 0.0248461701, 0.0035028334, 0.0439806618, 0.0195568744, 0.0074418662, -0.0511623435, 0.0511048324, 0.0461301170, 0.0365503021, 0.0392529741, 0.0244780462, 0.0458867773, 0.0329341441, 0.0382109210, -0.0374383032, 0.0122131910, -0.0056396849, 0.0232925564, -0.0574679039, -0.0809881836, 0.0995711535, 0.0013925283, -0.0710903406, -0.0438961089, -0.0086083198, -0.0278834384, 0.0216702260, 0.0275610555, -0.0031842228, 0.0001060262, -0.0301096886, 0.0712709203, 0.0415562950, 0.0017094763, 0.0749342144, -0.0219856128, 0.0481911525, 0.0697641149, 0.0811959282, -0.0826233551, -0.0162777398, 0.0408907793, 0.0004829499, -0.0598489419, -0.0269714519, 0.0215163436, -0.0023342913, 0.0314046033, -0.0523625277, 0.0401303731, -0.0393205471, -0.0464450046, -0.0368370973, -0.0570654683, 0.0805160925, -0.0077889352, -0.0142580410, 0.0480504297, 0.0643719286, 0.0222872086, 0.0494034775, 0.0418378413, -0.0574871004, 0.0208972227, 0.0363784395, -0.0031402176, 0.0809046328, -0.0274402611, 0.0270768013, -0.0155124357, -0.0810746774, -0.0057679331, 0.0360111520, 0.0510547645, 0.0068678451, 0.0405767709, -0.0222851504, 0.0181720015, -0.0415844806, -0.0207710527, 0.0497651733, 0.0222150721, -0.0059703914, 0.0037180819, 0.0178929456, 0.0041863970, 0.0160537325, 0.0030074122, -0.0506643541, -0.0307931211, 0.0072978004, 0.0281429030, -0.0616692230, -0.0670566559, -0.0358998962, 0.0360649936, 0.0088395365, 0.0003166940, -0.0666911677, 0.0444271341, 0.0483318903, 0.0071727284, 0.0051954058, -0.0328486934, 0.0634776205, 0.0450584255, -0.0077324901, 0.0199846327, -0.0429443531, 0.0410694443, -0.0238650534, 0.0523359179, 0.0239660051, -0.0260281246, 0.0582578070, 0.0436103530, -0.0482848845, 0.0667714179, -0.0344078392, -0.0680779666, 0.0128622847, -0.0444421247, 0.0183303449, -0.0528661087, -0.0244265851, 0.0354657061, -0.0429120697, 0.0086499099, -0.0145392539, -0.0768563673, -0.0056710723, 0.0605013147, 0.0418884978, -0.0296146236, 0.0002297765, -0.0427881964, 0.0010368037, -0.0557569638, -0.0407653488, -0.0025137973, -0.0227335617, -0.0599937402, -0.0712383687, 0.0443885848, -0.0181386042, 0.0262301452, -0.0380648561, -0.0880115554, 0.0131483404, -0.0484452918, 0.0044344650, -0.0840948448, -0.0305426158, 0.0105386116, 0.0471525341, 0.0380935818, 0.0296086650, 0.0571994781, 0.0316035412, -0.0222082399, 0.0837568045, -0.0546165891, 0.0601923428, -0.0309980419, 0.0810148120, -0.0527050197, 0.0559249558, -0.0710184276, 0.0186762549, -0.0410091355, -0.0770470202, 0.0533641465, -0.0668949410, -0.0107211079, 0.0069674971, -0.0030707165, 0.0271893106, 0.0053039994, 0.0445393808, -0.0885625556, 0.0460689738, 0.0389738157, -0.0055501745, -0.0760935470, 0.0430307314, -0.0419595651, 0.0557216629, -0.0960489884, 0.0766333640, -0.0193828773, -0.0131598264, -0.0408104993, -0.0176211875, 0.0083584068, -0.0266413689, 0.0290465187, -0.0126261571, 0.0609670728, -0.0778838769, -0.0320731848, 0.0127854999, 0.0184298102, 0.0955585092, 0.0537933186, 0.0293805115, -0.0778881833, -0.0331030078, 0.0101164347, -0.0400651805, -0.0244039968, -0.0488124266, 0.0366708674, 0.0680138469, -0.0330656692, 0.0332295038, 0.0341628976, -0.0214390252, 0.0574645549, -0.0451454222, -0.0321623497, -0.0308852103, -0.0561890639, 0.0174165145, -0.0581224672, 0.0197200533, -0.0146033466, 0.0690941662, -0.0185387433, 0.0604629144, 0.0422665179, 0.0767000914, 0.0283009335, 0.0312016811, -0.0085778413, -0.0563444272, 0.0224740747, -0.0000713825, -0.0114353662, 0.0483965464, -0.0285787154, -0.0524344072, 0.0180015322, 0.0250166431, -0.0871992409, -0.0146669624, 0.0186020397, -0.0347786434, 0.0416690893, -0.0700825974, -0.0659649968, 0.0210356377, 0.0331802145, -0.0380010046, 0.0497019924, -0.0565236025, 0.0196295157, -0.0345087536, -0.0289799497, 0.0720708370, 0.0156167978, -0.0164475832, 0.0216615275, -0.0666889176, 0.0174176134, -0.0413216762, -0.0426088348, 0.0681273043, 0.0228379108, 0.0578757785, 0.0525699109, -0.0339619778, 0.0278767291, -0.0051708450, 0.0464170501, -0.0317123756, 0.0511033349, 0.0391144790, 0.0284379814, -0.0599092022, 0.0218948070, 0.0346590914, 0.0648030490, -0.0735598281, 0.0265914891, 0.0116355643, 0.0834589303, -0.0559840538, 0.0641395375, -0.0555025004, 0.0328450650, -0.0072972239, -0.0081238775, 0.0048513054, 0.0135600148, 0.0510906912, 0.0238301791, 0.0536601171, 0.0518525727, 0.0035002450, -0.0241291858, 0.0606223568, 0.0463327356, -0.0415264890, 0.0028992083, 0.0531993806, -0.0374407806, 0.0532943197, 0.0145345489, 0.0297657847, -0.0700470358, 0.0467529446, 0.0395191498, -0.0373280533, 0.0611668155, 0.0079269428, -0.0200854708, 0.0688786358, -0.0019784831, -0.0319794752, -0.0061948420, -0.0401251949, 0.0127162840, 0.0083217490, 0.0089471880, -0.0322488509, -0.0299738701, -0.0720912591, -0.0507001057, -0.0114251999, -0.0643519387, 0.0733105689, 0.0704859868, 0.0390179306, -0.0012428366, 0.0474700592, -0.0224010106, -0.0213575158, 0.0059289588, -0.0796793625, 0.0207676943, 0.0318571776, -0.0551468879, -0.0429342203, -0.0236018337, 0.0456482433, 0.0499879196, 0.0139362607, -0.0452840813, -0.0322695449, -0.0338703729, -0.0666523576, -0.0472479425, -0.0490994453, 0.0423099399, -0.0189933553, -0.0666040778, 0.0263332892, 0.0387219377, 0.0176232588, -0.0306005273, -0.0395741388, 0.0619453266, -0.0608187653, -0.0517798588, -0.0195936840, 0.0314520970, 0.0425870009, 0.0524213165, -0.0481927544, 0.0144850677, -0.0075014727, 0.0031273989, 0.0482894480, 0.0036674677, 0.0373789333, -0.0399185717, 0.0009244079, 0.0062911469, -0.0115990033, 0.0518232249, -0.0175603647, 0.0023594995, 0.0185367446, 0.0828624517, 0.0455157310, 0.0307970308, 0.0401816405, -0.0273410566, 0.0217400417, 0.0291057043, -0.0491372719, 0.0647812709, 0.0609112456, 0.0364210606, -0.0276952814, 0.0014064732, 0.0135930022, 0.0434351899, -0.0200926904, 0.0357775576, -0.0270951353, 0.0583339222, -0.0448059663, 0.0173908379, -0.0301895440, 0.0418438651, -0.0097911377, -0.0585757382, -0.0012808270, 0.0432380699, -0.0580442436, 0.0585197955, 0.0204906203, -0.0179290362, -0.0519799106, -0.0377572179, 0.0317415632, -0.0255888067, 0.0235414710, 0.0207052752, 0.0107832104, -0.0700502172, 0.0407375284, -0.0786491707, -0.0715540871, 0.0366094187, 0.0264386740, 0.0605936088, -0.0627724156, 0.0296667498, -0.0068879607, 0.0779460743, -0.0347613506, -0.0459916405, -0.0723229274, 0.0263336282, -0.0782192349, 0.0523191616, -0.0424486846, 0.0197523851, -0.0441506393, -0.0286463425, -0.0118922656, -0.0156240016, 0.0205213930, 0.0097725261, -0.0765139684, -0.0345653817, 0.0316968150, -0.0490150824, 0.0557765923, 0.0559927672, -0.0061506177, -0.0721404627, 0.0130339209, 0.0211440232, 0.0504997112, 0.0265060961, 0.0202544574, -0.0076463907, -0.0353899039, -0.0371679552, 0.0043860963, -0.0274633616, -0.0195605550, 0.0258810930, 0.0027363321, 0.0309714172, -0.0413967408, -0.0366177484, -0.0289740618, 0.0118814884, -0.0458847359, -0.0692749172, 0.0297679957, 0.0501887836, 0.0205111317, -0.0204113852, 0.0198999010, -0.0253171772, 0.0208375230, 0.0270705801, 0.0102433898, 0.0586958677, -0.0269266330, -0.0709986985, 0.0307114050, -0.0335775614, -0.0693333820, -0.0171193965, -0.0208962150, 0.0107838819, -0.0684196800, 0.0215399358, 0.0744534582, 0.0545052402, -0.0509403460, 0.0396318324, 0.0458276086, 0.0601591803, 0.0167812072, -0.0625489801, -0.0464397296, -0.0260786489, -0.0366764627, -0.0143165477, 0.0335814096, -0.0551361777, 0.0098545942, -0.0623040013, -0.0456166640, 0.0641495734, 0.0534378365, -0.0626180395, 0.0264932029, 0.0414601490, -0.0145054832, -0.0525479503, 0.0461024381, 0.0391984098, -0.0087293489, 0.0522118621, 0.0063194321, -0.0781994015, -0.0508210659, -0.0358226411, 0.0269948430, 0.0342192240, -0.0417622142, 0.0227672923, 0.0189634115, -0.0510019995, 0.0286778510, 0.0204687286, -0.0786081329, -0.0003789794, 0.0290113725, 0.0101501467, -0.0261531826, 0.0180466305, -0.0094445143, 0.0011431726, -0.0848177448, -0.0409276970, -0.0194546059, -0.0319220051, 0.0794411600, 0.0251593478, 0.0237908028, -0.0760141090, -0.0081405453, 0.0240612924, 0.0704165027, 0.0402512364, 0.0280603282, -0.0320799835, -0.0574649535, -0.0635316297, -0.0503223501, -0.0173106827, 0.0562734529, -0.0543845333, -0.0220520273, 0.0068536499, 0.0719129443, 0.0766152442, 0.0047486317, -0.0555945300, 0.0062447535, 0.0094230901, 0.0301416926, 0.0165583678, -0.0546007007, 0.0471653081, -0.0417059623, 0.0517406091, 0.0608207509, 0.0015447465, 0.0317695364, 0.0342692062, 0.0391589552, -0.0193951707, 0.0657690391, -0.0608533286, -0.0311714597, 0.0520501398, -0.0527679250, -0.0479734056, 0.0071234470, -0.0143963890, 0.0658817515, -0.0407280736, -0.0521887615, -0.0294636451, -0.0112039521, 0.0121640228, 0.0484066792, 0.0581870712, -0.0160239525, 0.0122701423, -0.0612612441, -0.0059359088, 0.0699133575, -0.0206228737, 0.0391623266, -0.0704909042, 0.0479260497, 0.0025397968, -0.0581551977, -0.0296455063, 0.0711203367, -0.0226880666, 0.0282850470, 0.0052090571, -0.0166415535, 0.0716588274, 0.0982494503, -0.0333020426, 0.0150347240, 0.0708453283, -0.0601246059, 0.0084049748, -0.0588896759, -0.0269611087, -0.0501793846, 0.0146695971, -0.0491049364, -0.0004746513, 0.0491028130, 0.0078299912, -0.0501603037, 0.0548712574, -0.0242564231, 0.0406005234, -0.0344368927, 0.0750453249, -0.0526626445, 0.0149270901, 0.0668966398, 0.0149266217, -0.0397697277, 0.0575647950, 0.0332001932, 0.0346823297, 0.0469881520, 0.0375109613, -0.0519560501, 0.0643549412, -0.0193359014, 0.0152939428, 0.0493443720, 0.0415836088, 0.0318570361, 0.0347273909, 0.0721090883, -0.0028997243, -0.0087053291, -0.0031013214, 0.0058482410, -0.0075282757, -0.0789531916, -0.0173786804, 0.0128250411, 0.0115572363, -0.0121470792, -0.0739053115, -0.0149147362, 0.0067419009, -0.0452977456, -0.0140100084, -0.0021875347, 0.0460583046, -0.0633915514, -0.0464338847, 0.0063849534, -0.0660505891, -0.0126558077, -0.0574793927, 0.0160092004, 0.0124568930, 0.0677951723, -0.0741872638, 0.0355821848, -0.0118916128, 0.0527128465, 0.0387095809, 0.0178951602, 0.0579711571, 0.0070197051, -0.0116788698, -0.0570229404, 0.1042217389, 0.0467249118, -0.0152008990, -0.0725056231, 0.0214517899, -0.0202590860, 0.0747220442, 0.0821326151, 0.0633769855, -0.0790227279, -0.0945568904, 0.0805042610, -0.0372272767, 0.0034345891, 0.0253315996, -0.0707507059, -0.0128964297, 0.0135838175, -0.0375095271, -0.0336090215, 0.0154287182, -0.0566718280, 0.0514411665, -0.0340589806, -0.0547735691, 0.0305972155, -0.0385366455, -0.0032588840, 0.0067579076, -0.0020700586, -0.0231976379, 0.0548012592, 0.0410096049, -0.0189091023, 0.0007951466, 0.0005617089, -0.0645897537, 0.0781214312, 0.0069094142, 0.0477572195, 0.0320786722, -0.0930945203, -0.0794604346, -0.0016153977, -0.0281280819, -0.0689062402, 0.0026080473, -0.0518664643, -0.0652966797, 0.0260169879, 0.0054987879, 0.0060382700, 0.0618132092, 0.0222220048, -0.0568733774, 0.0294482373, -0.0063400520, 0.0173149910, -0.0229154956, 0.0006497577, 0.0538948290, 0.0753455758, 0.0033418157, -0.0567642711, -0.0509162396, -0.0025804855, 0.0187608432, -0.0557528920, 0.0852380320, 0.0081925215, -0.0447467081, -0.0720833242, -0.0082958918, -0.0503244810, -0.0652562752, 0.0480494760, -0.0274507720, -0.0717379749, 0.0595155247, -0.0581424683, -0.0306731649, 0.0548282117, -0.0560734086, 0.0364469923, -0.0479703508, 0.0505082756, 0.0530726053, -0.0235530008, -0.0220049471, -0.0437505096, -0.0450065993, 0.0291327070, -0.0412303731, 0.0288656894, 0.0761888698, 0.0318545438, -0.0411316305, -0.0236064140, -0.0096220048, 0.0190423410, 0.0805162489, 0.0084183533, -0.0447052456, 0.0573784113, 0.0652314797, -0.0438835472, -0.0380472653, -0.0602499209, 0.0352822803, 0.0391276404, -0.0401530117, 0.0141466958, 0.0634862557, 0.0464304611, -0.0408520475, 0.0106991446, -0.0551138856, 0.0656823739, -0.0392657369, 0.0253562853, -0.0122196013, 0.0558668114, 0.0311826933, 0.0325602777, 0.0034737077, 0.0084507000, 0.0081345420, 0.0106932363, 0.0807159021, -0.0371030457, 0.0105686178, 0.0446006209, -0.0097249420, 0.0880031139, -0.0100581395, 0.0256191082, -0.0449809954, 0.0357063264, -0.0662138909, 0.0369082429, -0.0015604637, 0.0523365550, 0.0293891318, -0.0641328767, 0.0143196099, -0.0692806914, 0.0006458486, 0.0826118141, -0.0664145648, 0.0163608268, 0.0911754817, 0.0512414314, 0.0008369297, 0.0445616432, 0.0201462433, -0.0457943827, -0.0745429471, 0.0447643474, 0.0276107211, 0.0826182738, 0.0298136380, -0.0581377484, 0.0055177403, 0.0547627658, 0.0357459933, -0.0276808180, -0.0662076622, 0.0044970764, -0.0745754689, 0.0417827256, 0.0054220352, 0.0596554875, -0.0180272236, 0.0398597866, 0.0586828291, -0.0621864870, -0.0435949378, -0.0588139482, -0.0798178464, -0.0105917500, 0.0182694625, -0.0388671979, 0.0145312548, 0.0178697929, -0.0596423522, 0.0282598082, 0.0289486330, -0.0655413046, 0.0723974779, 0.0016294197, 0.0088045737, 0.0417272300, 0.0630195737, -0.0205871444, 0.0363639854, -0.0751247033, -0.0194098502, 0.0361611396, 0.0334660709, -0.0257846154, -0.0137489028, -0.0197474677, -0.0406631678, -0.0607831962, -0.0526706874, 0.0183015801, 0.0656860843, 0.0607217625, -0.0368786715, -0.0029749409, 0.0508055463, -0.0525550246, -0.0610868521, -0.0121155307, 0.0172671080, -0.0628979504, 0.0453995354, -0.0543921106, -0.0276681464, 0.0411005542, -0.0774175450, -0.0163670685, -0.0768422633, 0.0068469066, 0.0484095551, -0.0755794123, -0.0585413463, 0.0652677938, 0.0556053370, -0.0416326486, -0.0761452541, 0.0525462255, -0.0030172365, -0.0032278097, 0.0108408788, -0.0441583693, 0.0114077656, 0.0385389738, 0.0477756225, 0.0195442475, 0.0479164161, -0.0083248708, 0.0045395764, -0.0150436657, 0.0373623036, -0.0474767573, 0.0496216081, 0.0711980462, 0.0117216855, 0.0678054616, 0.0494615324, -0.0331206508, 0.0521470904, 0.0421080701, 0.0469468869, 0.0196959339, -0.0550809838, -0.0517448597, 0.0462206192, -0.0336165279, -0.0338727161, 0.0566224828, 0.0077505833, 0.0396934822, 0.0239098296, -0.0783533901, -0.0754923448, 0.0640417114, -0.0358816944, 0.0453820266, -0.0149265369, 0.0631051287, -0.0487515070, 0.0458205231, 0.0480675772, 0.0586868227, -0.0172889996, -0.0491108298, -0.0189154614, -0.0191994719, -0.0400230736, -0.0479319133, 0.0398011878, 0.0557102412, 0.0342082754, 0.0818208382, 0.0314720459, -0.0428528823, 0.0469736978, -0.0202282574, 0.0229466595, 0.0699186027, -0.0426746011, -0.0743559897, -0.0695370063, -0.0055049481, -0.0189814996, -0.0353775546, -0.0312816389, -0.0205809548, 0.0158686787, 0.0360770598, -0.0722947121, 0.0047319587, 0.0245760959, -0.0133536141, -0.0501830094, 0.0279630311, 0.0119112441, -0.0356487334, 0.0670003220, -0.0260126218, 0.0740815774, 0.0505937152, 0.0794119537, 0.0227492824, 0.0736020133, 0.0862784758, -0.0734016746, 0.0231601074, 0.0433542989, -0.0682043508, -0.0367733836, -0.0866014287, 0.0167651195, 0.0860050172, -0.0006194967, 0.0152311819, 0.0181249343, -0.0011985610, -0.0985135362, 0.0553706922, -0.0642062575, -0.0422068313, -0.0482639633, -0.0342092738, 0.0379204266, -0.0972085968, -0.0181161463, 0.0683178902, -0.0303076133, 0.0302631073, -0.0212703254, -0.0493130162, 0.0677803233, 0.0045028338, -0.0562613644, -0.0253792442, 0.0000462959, -0.0553872399, 0.0571340621, 0.0109587284, 0.0578684993, -0.0558195375, 0.0365542434, -0.0572587028, -0.0454948246, -0.0359433256, -0.0377783924, -0.0423706919, -0.0602000691, 0.0203019995, 0.0179059338, -0.0358990878, 0.0074535147, 0.0379128419, -0.0297938325, -0.0530271344, -0.0278597344, 0.0054447260, -0.0541302189, 0.0771583095, -0.0097357295, -0.0106355725, 0.0648251921, 0.0670237541, 0.0553200729, -0.0396396145, -0.0587837696, 0.0459696390, -0.0433292165, -0.0054420792, -0.0552598722, -0.0341077894, -0.0087164044, -0.0397743396, 0.0692034513, -0.0142710451, 0.0304390043, 0.0934187323, -0.0100842826, -0.0735465065, 0.0786835328, -0.0394405797, -0.0926658884, -0.0033944706, 0.0239033066, -0.0789760873, -0.0321837068, 0.0029906689, -0.0403627716, -0.0509173609, -0.0338721573, -0.0105396807, 0.0023896352, -0.0411023833, 0.0742209703, -0.0144600151, 0.0217065345, -0.0069163041, 0.0583548844, 0.0165677611, -0.0791168362, -0.0198590402, 0.0224520657, -0.0220044199, -0.0353883728, -0.0674074888, 0.0228700917, 0.0714489371, -0.0164021011, -0.0688730702, 0.0029679663, 0.0041012019, 0.0047996230, 0.0055555832, -0.0777365416, -0.0417325534, 0.0398729257, -0.0442842469, -0.0478936620, 0.0530381948, 0.0613681115, -0.0420436747, 0.0453984067, -0.0280195624, -0.0288402438, 0.0179061498, 0.0822210312, 0.0608476214, 0.0610297285, 0.0279622879, -0.0078228870, 0.0365154855, -0.0625045598, 0.0622840598, 0.0541816354, 0.0055789724, 0.0483116992, -0.0499462672, 0.0588568971, 0.0295010898, -0.0459297933, -0.0096670128, -0.0069827121, -0.0835712850, -0.0495443828, -0.0188058447, -0.0018003159, 0.0645496547, -0.0455824956, -0.0183738433, -0.0324207246, 0.0373376980, 0.0599289760, -0.0426951647, 0.0343926847, 0.0118336612, -0.0328293517, -0.0168158747, -0.0144020645, 0.0447389558, -0.0256036967, -0.0157555547, -0.0563262515, 0.0200611558, -0.0138578834, 0.0050335261, 0.0076840385, 0.0261023045, 0.0123547679, -0.0316759348, -0.0054218615, -0.0889635310, -0.0350011289, 0.0024397054, 0.0103542246, -0.0025715358, 0.0411157645, -0.0747159123, 0.0120401718, 0.0559215918, 0.0478516072, 0.0384423137, -0.0321413726, 0.0682239160, -0.0001305551, -0.0395037420, 0.0359726660, 0.0770284459, -0.0095387185, 0.0226096343, 0.0736168548, 0.0579525121, 0.0332615860, 0.0107692974, -0.0620539635, -0.0646970347, 0.0147469034, 0.0769561231, 0.0392003916, 0.0640440211, 0.0047008614, -0.0409315601, -0.0169721376, 0.0373071581, -0.0612610877, -0.0551252738, 0.0675304681, -0.0548529141, 0.0008207908, 0.0368190445, 0.0382722206, -0.0312530994, -0.0593569055, 0.0443130955, 0.0105100628, -0.0594919063, -0.0531835444, 0.0096997153, -0.0032213952, 0.0007370262, 0.0333041288, 0.0556168407, 0.0061220345, -0.0304122921, 0.0520908535, 0.0049335058, -0.0403312184, 0.0041394681, 0.0170485210, 0.0147526041, 0.0019950455, -0.0319419205, 0.0037565650, -0.0140938861, -0.0740127861, -0.0324857682, -0.0509418137, 0.0455169491, -0.0150969755, -0.0525262915, 0.0456355363, -0.0058847046, -0.0603703149, 0.0628326982, 0.0651616156, -0.0443835892, -0.0677175373, -0.0733080655, 0.0631143972, -0.0076998589, -0.0617682151, 0.0059127100, 0.0525356568, 0.0792862773, -0.0138564482, 0.0508598126, 0.0454265922, 0.0300558507, -0.0442520976, -0.0150848087, 0.0058694053, -0.0050629252, 0.0338799506, -0.0275288299, 0.0677998140, 0.0554912463, -0.0186805706, -0.0651806518, 0.0113228392, 0.0229636151, -0.0242621414, -0.0507769510, -0.0585080013, -0.0740565732, 0.0127394386, 0.0491744839, -0.0578289852, -0.0379210152, -0.0060463841, 0.0233889855, 0.0585273355, 0.0500305817, 0.0371769927, -0.0008521526, -0.0448263176, 0.0188155528, -0.0334393568, 0.0011057028, 0.0149016520, 0.0096464194, 0.0180386435, 0.0637998581, 0.0409870706, -0.0625708476, 0.0337166339, 0.0435258821, 0.0537086986, 0.0020657729, -0.0793504119, 0.0388992801, -0.0106611224, 0.0298465081, 0.0052380254, -0.0597057790, -0.0474601761, 0.0441062748, -0.0726088881, 0.0610582530, 0.0534991100, 0.0295614041, 0.0535389669, 0.0544380695, -0.0231839512, 0.0012760592, 0.0110203624, -0.0013319391, -0.0642672256, -0.0514168069, -0.0572268069, 0.0211263336, -0.0375297777, -0.0671532005, 0.0279167984, 0.0593869574, -0.0120121678, 0.0392014533, 0.0838855132, 0.0243506804, -0.0553901829, 0.0478155650, 0.0233078804, 0.0491615459, -0.0513840131, 0.0595882386, 0.0040017348, -0.0134064294, -0.0360099673, 0.0552293360, -0.0587023348, 0.0096719116, 0.0211077482, 0.0157264713, 0.0275254901, 0.0515960790, -0.0228959303, 0.0201660078, 0.0429988354, -0.0481373183, 0.0456166007, 0.0352773070, -0.0451143011, 0.0299332067, -0.0203887243, -0.0734268948, 0.0030767499, -0.0219273623, 0.0584747307, -0.0211960152, 0.0207460504, 0.0281735305, -0.0653829128, 0.0576835051, -0.0664284155, -0.0451038182, 0.0806654468, -0.0262189545, 0.0345076434, 0.0454661176, 0.0580602139, -0.0549756959, -0.0605231114, -0.0162828341, -0.0596917532, 0.0099806106, 0.0598200671, -0.0244683251, -0.0588114560, 0.0626482219, -0.0547649674, 0.0258490425, -0.0095059415, -0.0022229236, 0.0328656882, -0.0164708178, 0.0341044478, -0.0680631921, 0.0412236936, -0.0228992458, -0.0474688299, -0.0570261143, -0.0608312711, -0.0077699637, -0.0370456651, -0.0497620255, 0.0595253743, 0.0509486236, 0.0274101421, -0.0368920304, 0.0439302437, 0.0091333156, 0.0520726740, 0.0504093878, -0.0054266639, 0.0058302651, -0.0494829044, -0.0190435257, 0.0468111150, 0.0436343327, -0.0142070698, -0.0255533736, -0.0324138887, -0.0225884411, -0.0044818353, 0.0594849288, 0.0449097753, 0.0131172305, -0.0715775639, -0.0388573892, 0.0720477775, 0.0503794923, 0.0159374494, -0.0099620922, -0.0667062178, -0.0303365085, 0.0597227663, 0.0036092321, -0.0222306922, 0.0412542336, -0.0496286079, 0.0723843724, 0.0621175058, 0.0715012699, -0.0094573358, 0.0062449481, -0.0223912336, 0.0572714917, -0.0460033566, 0.0315131843, -0.0319452845, 0.0133330934, 0.0187538341, 0.0509072691, 0.0461455211, 0.0558058806, -0.0265213642, -0.0562129579, -0.0341527611, 0.0493201129, -0.0145897726, -0.0714764744, 0.0586780906, -0.0485516042, -0.0482609309, 0.0718990788, -0.0388245434, -0.0435685068, 0.0106825121, -0.0028018637, -0.0351587050, 0.0668894798, -0.0147538967, 0.0073673124, 0.0427601598, -0.0383227393, -0.0594253801, -0.0360079966, 0.0424333364, 0.0417323485, -0.0453390852, 0.0483711474, 0.0264616664, 0.0218291301, -0.0582438409, -0.0519143231, 0.0046115303, -0.0338723324, 0.0585807972, 0.0488362126, -0.0487333462, 0.0606015883, 0.0339695737, 0.0298274402, 0.0637176409, -0.0645516291, -0.0727071911, 0.0501332805, 0.0457368903, 0.0123819951, 0.0047629620, 0.0087288078, 0.0172542166, -0.0382234566, -0.0540539399, 0.0703090876, -0.0119071426, 0.0614831895, -0.0719285160, 0.0372223370, 0.0056624468, -0.0066259638, 0.0034734826, -0.0731364787, 0.0184598286, -0.0579866171, 0.0487160943, -0.0586316064, -0.0101830214, 0.0280326195, 0.0619017258, -0.0543145463, 0.0742846951, -0.0088077541, 0.0258045048, -0.0583329387, 0.0431926325, -0.0056598797, -0.0068146889, 0.0308470037, 0.0484245867, -0.0706077293, -0.0566136278, -0.0813321695, 0.0612808876, -0.0135090295, -0.0072901016, 0.0424179919, 0.0394993722, -0.0203799699, 0.0261746962, -0.0188375395, -0.0482202917, 0.0437119380, 0.0029536176, -0.0543665886, -0.0288201421, -0.0491283797, -0.0144251660, -0.0095166909, -0.0066519943, -0.0698107034, 0.0690608174, -0.0598248132, 0.0733466521, 0.0272635985, -0.0101955198, 0.0305589177, 0.0592575595, -0.0157777201, -0.0269114953, -0.0653763264, 0.0800953731, 0.0735772103, -0.0166811086, 0.0190002620, -0.0758648887, -0.0892532095, 0.0174351372, 0.0302492231, 0.0546259359, -0.0073699080, -0.0742511451, 0.0270920154, -0.0734383315, -0.0501059070, 0.0583627634, 0.0851714760, 0.0170389339, -0.0432071052, 0.0095245885, -0.0638630614, -0.0034903612, 0.0734055042, -0.0308944043, 0.0513918586, 0.0355453454, -0.0378274955, 0.0133660203, 0.0184282511, 0.0277087893, 0.0218988601, -0.0145884473, 0.0162741710, -0.0461828001, -0.0279874597, 0.0605338886, 0.0636354610, -0.0234658681, 0.0297527742, 0.0697679371, -0.0184856132, 0.0343641639, -0.0321103148, -0.0427554622, -0.0731914118, 0.0427963324, 0.0259020440, -0.0060508754, 0.0003022946, 0.0065882038, 0.0355416797, -0.0724447444, 0.0522258766, -0.0654662400, 0.0251286216, 0.0120215071, 0.0446213819, 0.0147367325, -0.0296077430, -0.0683575794, -0.0568639524, 0.0611199476, 0.0532356463, 0.0182393380, 0.0530857742, 0.0423522443, -0.0374224819, 0.0053982460, -0.0615569055, -0.0466556586, -0.0343404785, -0.0090351300, -0.0133903697, -0.0190005824, -0.0330251232, 0.0310514700, -0.0003729904, -0.0092793033, -0.0015047818, -0.0560496151, -0.0736640170, -0.0549740307, 0.0445890799, -0.0649971440, -0.0344461985, -0.0623691417, -0.0278743058, -0.0233962834, 0.0675875321, -0.0556235686, 0.0697385073, 0.0303675737, 0.0251862127, -0.0125516094, 0.0222775582, 0.0306190047, -0.0176927913, -0.0552517213, 0.0286746491, -0.0372938663, -0.0226484723, 0.0591510385, -0.0541528873, -0.0304469876, 0.0268997233, -0.0143143246, 0.0715476722, 0.0340820514, 0.0202722717, -0.0163780861, 0.0850952491, -0.0233957916, 0.0614051186, 0.0029502518, 0.0434711501, -0.0156384986, -0.0257713199, -0.0632435307, 0.0649052337, 0.0605076179, -0.0050129066, 0.0194828566, 0.0498753712, 0.0071164132, -0.0198282246, 0.0859835893, -0.0471397750, -0.0145346541, -0.0118818302, -0.0365016274, -0.0494579822, -0.0416809171, 0.0411728434, 0.0507749245, 0.0535213016, -0.0206937622, 0.0236707665, -0.0427601486, 0.0192823019, 0.0204551872, -0.0721319616, -0.0308067631, 0.0703864843, -0.0293226913, 0.0152706737, 0.0007577401, 0.0400017463, -0.0286978353, -0.0871803984, -0.0428401940, -0.0227644853, 0.0005282733, -0.0775955096, 0.0667522252, 0.0350306258, 0.0351978987, 0.0334604383, 0.0168147087, 0.0121309739, -0.0211422648, 0.0381724574, 0.0184580479, 0.0255292915, 0.0159571394, 0.0583766922, -0.0026872724, -0.0264490359, 0.0432325415, -0.0340660103, 0.0302996766, -0.0715196431, 0.0495911725, -0.0432848968, -0.0476570353, 0.0507183187, -0.0395561047, -0.0791956782, 0.0505869463, -0.0223578438, 0.0587926507, 0.0772748739, 0.0601163991, -0.0466201715, -0.0631837472, -0.0289710946, 0.0019421815, 0.0444474146, 0.0193999708, 0.0110640032, -0.0033248970, 0.0289919153, -0.0140267164, -0.0520898886, 0.0831197202, -0.0018694880, -0.0022264549, 0.0968619362, -0.0648080558, -0.0210184027, -0.0061333352, 0.0140747139, 0.0792929605, 0.0359990634, 0.0097318059, 0.0460319109, -0.0846609324, 0.0357127190, -0.0105926478, -0.0139359972, -0.0126994140, -0.0503309220, 0.0184842795, -0.0184089728, 0.0269786939, 0.0791542307, -0.0062279571, 0.0628966019, 0.0756113157, -0.0341082700, -0.0269129109, 0.0465991609, -0.0641703755, 0.0295339152, 0.0536901131, -0.0124385692, 0.0516002662, 0.0001287906, 0.0416094810, -0.0454255119, 0.0636755452, -0.0342814997, -0.0029472809, -0.0165433772, -0.0156879816, 0.0486728698, -0.0734747723, -0.0115232673, -0.0189744215, 0.0286285859, -0.0253433678, -0.0257565659, 0.0432430878, -0.0578180179, 0.0334962867, 0.0078175943, -0.0734269992, 0.0892939493, 0.0099361902, 0.0711578205, -0.0212133359, -0.0345025212, 0.0433078520, -0.0452331193, -0.0371068045, -0.0789482445, 0.0346723683, -0.0520412549, -0.0507644974, -0.0628285855, -0.0751192942, 0.0618271753, 0.0742226392, -0.0424011499, -0.0377350003, 0.0013887121, -0.0313404314, 0.0522951446, -0.0487126634, 0.0042844922, -0.0036185230, 0.0036766718, 0.0193573460, -0.0013401116, 0.0233300645, -0.0528768599, 0.0143105807, -0.0506894253, -0.0475296937, 0.0117254620, -0.0401409231, 0.0060582687, 0.0185305048, -0.0175778158, -0.0583643727, -0.0063505759, -0.0314115323, -0.0635409355, -0.0019165401, -0.0332428738, -0.0418306701, 0.0240270011, 0.0298998076, 0.0424100608, 0.0434307232, -0.0364550501, 0.0141873704, 0.0569407232, 0.0484641083, -0.0489006005, 0.0042795911, 0.0231352523, 0.0177241340, -0.0557325259, -0.0839678347, -0.0272082910, -0.0495828614, 0.0211607367, -0.0162360948, 0.0102005647, -0.0601105355, 0.0148614626, 0.0155749917, -0.0107187647, -0.0504604094, 0.0360637754, -0.0379503332, -0.0114866104, -0.0012730799, -0.0496661104, 0.0363348015, -0.0629526749, -0.0351048335, -0.0316904336, 0.0188265387, 0.0388404317, 0.0407025628, -0.0377427936, 0.0280774143, 0.0099565228, 0.0511945412, 0.0169468187, 0.0260646194, -0.0363034457, 0.0433540978, 0.0067632124, 0.0556351915, 0.0732448697, 0.0603112280, 0.0432098396, 0.0298671331, -0.0592817180, -0.0630311072, -0.0032832606, 0.0394998826, -0.0762139335, -0.0442006811, 0.0487745479, -0.0008457419, -0.0284092370, -0.0517010428, -0.0608209334, 0.0143074794, -0.0134126265, -0.0663542747, 0.0611731820, -0.0356245898, 0.0670332834, 0.0095968181, -0.0419365130, 0.0675162971, 0.0031060462, -0.0399301425, -0.0826832354, -0.0702828988, 0.0090807825, 0.0606749542, -0.0553719364, 0.0279591475, -0.0298717711, 0.0330534130, -0.0532304198, 0.0614353903, 0.0486311316, -0.0343722478, 0.0042306031, 0.0107785324, 0.0289769452, -0.0531591959, -0.0118730403, -0.0339695215, 0.0418878198, -0.0685557872, 0.0391004831, -0.0260027573, -0.0192686506, 0.0191394351, 0.0653386191, 0.0483538471, 0.0602347739, -0.0156135559, -0.0008085810, 0.0312324762, -0.0477670841, 0.0501285382, 0.0408122577, -0.0433315709, 0.0716123879, 0.0110896183, -0.0732722208, 0.0502007715, -0.0377617814, 0.0391961448, -0.0133613218, 0.0301078148, 0.0546683744, 0.0292217396, 0.0601683334, 0.0262072999, -0.0070149698, 0.0075150491, -0.0340656489, 0.0094021158, -0.0619823560, -0.0522590578, -0.0136614414, -0.0637621060, -0.0309775881, 0.0189491156, -0.0163665749, -0.0488148704, 0.0148073137, -0.0622209013, 0.0251635574, 0.0632450581, -0.0570847802, 0.0231338236, -0.0490549393, 0.0280777868, 0.0018848351, 0.0244825799, -0.0418848358, 0.0665843412, 0.0205078870, -0.0123677431, 0.0376521945, 0.0256834105, -0.0241491776, -0.0610585026, -0.0006447620, 0.0724127069, 0.0483830459, -0.0365086794, -0.0661736652, 0.0167387817, 0.0050999834, 0.0668966025, -0.0263351947, 0.0300491992, 0.0283595994, -0.0513814539, 0.0574375726, 0.0290279817, -0.0070660515, 0.0250166822, -0.0448690280, 0.0284751952, 0.0505280718, 0.0600364208, 0.0463276580, -0.0245681442, -0.0549846999, -0.0342196077, -0.0449479930, 0.0603968017, 0.0650094077, 0.0606224872, 0.0564211309, -0.0076767583, -0.0519107990, -0.0338294432, 0.0097578652, 0.0366250426, -0.0501039065, 0.0575022958, 0.0289588496, -0.0624937639, -0.0430973768, -0.0391700529, -0.0049024653, 0.0392478257, 0.0071934531, 0.0540346466, -0.0835055411, -0.0271657854, -0.0088806292, -0.0259711631, -0.0157958418, -0.0510653257, 0.0335313752, -0.0171202365, -0.0011069297, -0.0665806308, -0.0186300911, -0.0378959440, 0.0316958651, -0.0194313247, -0.0694517493, -0.0390179716, 0.0497607738, 0.0605482981, 0.0244336221, 0.0262235217, 0.0119555788, 0.0189815201, -0.0030058802, 0.0082742991, -0.0692829937, 0.0445918925, -0.0314987451, -0.0486426353, 0.0353373550, -0.0715029091, -0.0573332496, -0.0660668910, 0.0296192784, -0.0344129317, 0.0351613164, -0.0634477064, 0.0287006944, -0.0487395972, 0.0559297800, 0.0475751720, 0.0555265509, 0.0157287586, 0.0312452335, -0.0813549533, -0.0169694424, 0.0079732146, -0.0219544787, -0.0120699089, 0.0066037574, -0.0527356565, 0.0482534394, 0.0111237653, -0.0015529896, 0.0480352193, 0.0807523578, 0.0313921161, -0.0430534631, 0.0275638849, -0.0763831213, -0.0490240939, 0.0489589646, -0.0614494458, -0.0755847543, 0.0441394597, -0.0496449359, 0.0352526642, -0.0338380560, -0.0231420547, -0.0202912726, -0.0536006168, -0.0192350596, 0.0480550379, -0.0476792790, 0.0076557528, 0.0732434839, 0.0481940508, -0.0489414446, -0.0376886800, -0.0056042471, -0.0245374050, 0.0117049636, 0.0225612782, 0.0323741920, 0.0614004135, 0.0207351111, 0.0045876997, -0.0400816612, -0.0366313979, 0.0533316396, -0.0293154940, 0.0130130174, 0.0661376268, -0.0254642256, -0.0302917678, -0.0503810532, 0.0245882981, 0.0393451042, -0.0546802767, -0.0685032159, -0.0617473386, -0.0225978438, 0.0105933603, 0.0001591915, -0.0118377348, -0.0639767423, -0.0601544343, -0.0024480450, 0.0341506340, 0.0198749993, -0.0333238766, 0.0139391953, 0.0409164876, -0.0018972036, 0.0542480089, 0.0591598339, 0.0025080184, -0.0226167198, -0.0285810977, -0.0709077641, -0.0706514120, -0.0723646954, 0.0412748307, 0.0083775036, 0.0378922410, 0.0383051299, 0.0359688550, -0.0326531194, -0.0629293695, 0.0517535433, -0.0527174585, 0.0468982048, 0.0354523621, 0.0017128311, -0.0830288306, -0.0604474731, 0.0246319603, -0.0347066969, -0.0150177972, 0.0623336360, -0.0084002838, -0.0060338560, -0.0005268021, -0.0007483564, -0.0128417127, 0.0159644876, 0.0593389794, -0.0453656353, -0.0296692774, -0.0385337099, 0.0045333826, -0.0053900839, 0.0095850741, 0.0326419361, 0.0399524905, -0.0296746511, 0.0293732975, -0.0155382808, -0.0319925025, -0.0563916713, 0.0383288823, -0.0599050671, 0.0079233507, 0.0196950007, -0.0286255535, -0.0041631083, -0.0627976805, -0.0495626144, -0.0255946964, -0.0261807647, 0.0686085969, 0.0447713695, 0.0561940856, 0.0683028102, -0.0324130878, -0.0632980391, -0.0244099759, -0.0127451541, -0.0552403405, 0.0466831438, -0.0080161979, -0.0617868640, -0.0604650155, -0.0395298600, -0.0514271483, 0.0200421847, -0.0622529611, -0.0096492674, 0.0376286954, 0.0010161760, 0.0150599265, 0.0494101197, 0.0568789877, -0.0240103528, 0.0170119070, -0.0249871891, -0.0159517750, 0.0421758257, 0.0168251917, -0.0295821466, 0.0266301818, 0.0661875829, 0.0417511091, 0.0432292819, 0.0189454947, -0.0156426933, -0.0560041703, -0.0399289243, 0.0119329998, 0.0724191070, -0.0508057401, 0.0184350964, -0.0240057837, -0.0328158587, -0.0530656315, 0.0096294126, 0.0585156046, 0.0523591191, -0.0554345846, 0.0187615845, -0.0288713705, -0.0329275429, -0.0558552407, -0.0541473590, 0.0216404907, -0.0633456483, 0.0609061904, 0.0094870031, 0.0363526754, -0.0101975445, -0.0722738355, -0.0378478244, 0.0060074963, -0.0804111585, -0.0438887030, 0.0625706464, 0.0490285382, -0.0220104214, -0.0531407520, -0.0262040440, 0.0019405823, -0.0709686801, -0.0762970075, -0.0498098582, -0.0704955459, -0.0128763076, -0.0178166982, -0.0035331585, -0.0133912573, 0.0097027766, 0.0320929512, 0.0545019694, -0.0439283811, -0.0434092805, 0.0431383438, 0.0265730396, 0.0662138015, 0.0172876362, 0.0726564378, 0.0069800322, 0.0385839082, 0.0073003154, -0.0699846074, 0.0192348398, -0.0420300029, 0.0633421019, -0.0501392111, 0.0045665414, -0.0421947017, 0.0486452729, 0.0058202492, -0.0486188792, 0.0445148461, -0.0162559859, 0.0441253856, 0.0659495667, 0.0294021089, -0.0528156012, 0.0410948992, -0.0005352856, -0.0749662071, 0.0605630726, -0.0521454699, -0.0146499630, 0.0352863595, 0.0297410786, 0.0107257701, 0.0242889803, 0.0484353937, -0.0356797837, 0.0255045723, 0.0777182728, -0.0305421110, 0.0262644589, -0.0556232296, 0.0219418164, -0.0330176391, 0.0345296673, -0.0407662056, -0.0469787195, -0.0003752461, -0.0520654023, -0.0665817633, 0.0592036508, 0.0490842350, -0.0059692278, 0.0275876336, 0.0482225940, -0.0702136010, 0.0249727666, 0.0562083460, 0.0712844431, -0.0807858482, -0.0296892971, 0.0742853358, -0.0399334207, 0.0560568087, -0.0114725754, -0.0214727186, 0.0221368112, 0.0218017902, 0.0206811950, 0.0605142340, -0.0461861864, 0.0047529684, 0.0040792953, -0.0119224386, 0.0196760539, -0.0525143072, 0.0464763008, -0.0299487915, 0.0166376960, 0.0311229415, -0.0136028333, -0.0610445403, 0.0624021553, 0.0629938841, -0.0312992111, 0.0546425357, -0.0293852445, 0.0188071709, -0.0137172034, -0.0020671075, -0.0063839210, 0.0484385490, -0.0436661765, 0.0807421505, 0.0015409915, 0.0133216092, -0.0040635648, -0.0463681407, 0.0185532682, -0.0544999540, -0.0077048610, -0.0111792339, 0.0449778028, -0.0685841367, 0.0381496698, -0.0834153444, -0.0036192485, 0.0769642666, 0.0373941772, -0.0150557142, -0.0755976215, -0.0137691349, 0.0769873634, -0.0752427801, 0.0713239089, 0.0376862623, -0.0097112320, 0.0463648699, 0.0402892269, -0.0688700452, 0.0477213785, 0.0692061484, 0.0659292042, -0.0196762420, 0.0161599871, -0.0261314940, 0.0281197727, 0.0266409703, 0.0731742829, -0.0111804008, 0.0438116565, -0.0449684709, 0.0673054680, 0.0271240771, -0.0043554604, 0.0615840331, 0.0073002172, 0.0301678330, 0.0590298623, -0.0069324831, 0.0345942937, 0.0630846843, 0.0102108559, 0.0534872264, 0.0792749226, 0.0014559843, -0.0557090342, 0.0141489599, 0.0136040486, -0.0260763783, 0.0338660330, 0.0165317617, -0.0113132931, 0.0461701415, -0.0265094489, -0.0278507490, -0.0751457363, 0.0617648140, -0.0262759961, 0.0555685833, 0.0397669077, -0.0201968513, -0.0716559589, -0.0392649435, -0.0060989149, 0.0151385320, -0.0262166467, 0.0198291410, -0.0302506518, -0.0115589360, -0.0074983155, -0.0376507975, 0.0175394118, -0.0193675086, -0.0164045207, -0.0540864021, 0.0545444638, 0.0372777060, -0.0475327186, -0.0068586748, -0.0432299972, -0.0534251705, 0.0223823730, 0.0424649008, -0.0664032623, -0.0406815372, 0.0238409843, 0.0292425305, -0.0262544993, 0.0171092544, 0.0287375413, 0.0522045009, -0.0427317657, 0.0013182550, -0.0443694107, 0.0125257634, -0.0852877274, -0.0307374448, 0.0253611375, 0.0003012537, 0.0279993284, -0.0011104967, -0.0448542200, -0.0127351545, 0.0329500884, 0.0169693753, 0.0619631447, -0.0403448008, 0.0586764775, -0.0042280513, 0.0419613346, -0.0767173171, 0.0105314767, -0.0236069933, 0.0818851516, -0.0138567025, -0.0258703344, 0.0148830069, -0.0108998995, 0.0256962776, -0.0337544419, 0.0584875569, 0.0123099368, -0.0512316190, -0.0392585360, -0.0274664145, 0.0587474853, -0.0406658836, -0.0289740935, 0.0276261158, 0.0244767033, -0.0156023223, 0.0257638954, -0.0046816715, -0.0091499826, 0.0650360435, 0.0642069355, 0.0816085488, -0.0231742822, 0.0337602049, -0.0008129501, 0.0274950583, 0.0707912743, 0.0711184144, 0.0645909756, -0.0001274942, -0.0048789103, 0.0294070598, -0.0093815774, -0.0027374178, -0.0547121428, 0.0070318002, -0.0685598552, -0.0541112050, 0.0415693484, 0.0330822319, -0.0434508026, -0.0617961176, 0.0701806694, 0.0578363724, -0.0406324565, 0.0502461232, -0.0525792874, -0.0441129878, 0.0119723482, 0.0370071754, -0.0468384400, -0.0465199053, 0.0562394708, -0.0590623766, -0.0036111758, -0.0631990805, -0.0485320240, -0.0753769502, -0.0004033886, -0.0445927978, 0.0776284784, -0.0366829038, -0.0416124798, -0.0382036492, -0.0293584391, 0.0046120067, -0.0007613915, -0.0030544968, -0.0520335399, -0.0212448556, 0.0414592288, 0.0474716201, -0.0019210904, 0.0495052524, 0.0116459318, -0.0068064309, 0.0257076230, -0.0581076518, 0.0341737494, -0.0340980478, -0.0380845703, 0.0532448441, 0.0309301522, -0.0097280918, 0.0731172860, -0.0240847077, -0.0492467172, -0.0134330010, -0.0660335794, -0.0238578785, 0.0070073553, 0.0291874651, 0.0211772267, -0.0112728532, -0.0000571255, 0.0060400944, -0.0018941447, -0.0481527224, -0.0259767119, -0.0030421456, 0.0435332209, 0.0346600488, -0.0299690217, 0.0671334118, 0.0381902196, 0.0310459007, 0.0612183250, -0.0312654041, 0.0030384657, -0.0376088247, -0.0079273721, 0.0755460337, 0.0669542924, -0.0447337739, -0.0595752671, -0.0550442226, -0.0059590349, -0.0189209450, -0.0291866865, 0.0004835007, -0.0541094095, 0.0502161048, -0.0440013818, -0.0433822088, 0.0367202722, -0.0041059954, 0.0145584578, 0.0623067655, 0.0139498636, -0.0370929576, 0.0262892786, 0.0845755786, 0.0115108406, 0.0284602270, 0.0001604357, -0.0111163026, -0.0196496919, -0.0198440216, 0.0405194052, 0.0367645286, 0.0020417592, 0.0144722993, -0.0425430611, 0.0509971529, 0.0748631880, 0.0203541853, 0.0413212664, -0.0572429374, 0.0589817092, 0.0084802713, 0.0391124822, 0.0421366617, 0.0665947720, -0.0789375529, -0.0277064219, -0.0173615683, 0.0794829577, 0.0350779481, 0.0260471907, -0.0432312675, 0.0123001765, -0.0790166631, 0.0011298048, -0.0741504580, 0.0375667699, -0.0656465665, 0.0247517917, -0.0671359599, 0.0795616955, -0.0037776222, 0.0218600687, 0.0105312066, 0.0035276290, -0.0137375817, 0.0093986653, -0.0620823726, -0.0008677327, -0.0349864997, 0.0416285694, -0.0675859675, 0.0679558665, -0.0139512876, 0.0278425571, -0.0277244318, 0.0079520047, 0.0490787365, 0.0384222381, 0.0116262697, 0.0537495725, -0.0093530528, 0.0465374663, -0.0628140867, 0.0058490937, -0.0458085649, -0.0091447486, -0.0528244786, 0.0439442322, 0.0200503059, -0.0484971553, -0.0497374646, 0.0372267962, -0.0183305796, 0.0715819746, 0.0629508048, -0.0415989943, -0.0391431153, -0.0170256887, 0.0840051025, 0.0049042832, 0.0364918821, 0.0139111774, 0.0266610812, 0.0289067868, -0.0224575941, 0.0189151373, 0.0350048840, -0.0159956459, -0.0144621115, 0.0242575984, -0.0485766716, -0.0038119922, -0.0469770208, -0.0245928615, 0.0489039235, -0.0283877607, 0.0409987085, -0.0255345721, 0.0645457283, -0.0559766553, -0.0564970225, -0.0578622557, 0.0252031665, -0.0120680891, 0.0454848744, -0.0523522124, 0.0010974696, 0.0016682015, -0.0093632787, -0.0190494712, 0.0649335459, -0.0314398408, -0.0004150011, 0.0738951117, 0.0164168496, -0.0153172873, -0.0210810881, 0.0571590066, 0.0420108438, 0.0022438071, -0.0482571162, -0.0007126667, 0.0436787717, 0.0384727791, 0.0433463715, -0.0041500973, -0.0665311217, 0.0807358027, -0.0770856515, -0.0512261875, 0.0610515624, -0.0175908376, -0.0147117861, 0.0145968162, 0.0188696031, 0.0335459299, 0.0208136626, -0.0356169865, -0.0317129306, -0.0429880843, 0.0742386132, 0.0787581056, -0.0227243081, 0.0199427754, -0.0046503101, 0.0391021259, -0.0013086773, 0.0074140676, 0.0564021990, -0.0378107131, -0.0624576472, -0.0388393849, 0.0342485756, -0.0481824055, 0.0425641350, -0.0674490258, 0.0266281236, 0.0414942466, 0.0136375492, -0.0593671575, -0.0376102105, 0.0653498620, 0.0441897213, -0.0013940372, 0.0444341972, 0.0072129751, -0.0225971192, -0.0259725228, 0.0321594924, -0.0201641042, -0.0605523549, -0.0494469889, -0.0460362397, -0.0403679013, 0.0744052827, 0.0545541756, 0.0451183915, -0.0538999960, -0.0036526877, 0.0409668051, 0.0657691434, -0.0699471310, 0.0276418850, 0.0342859589, 0.0546477810, 0.0107770050, -0.0167307723, 0.0387024395, -0.0126777273, -0.0765983611, 0.0545502938, 0.0372161344, 0.0266038105, -0.0109600397, -0.0283043627, -0.0532753095, -0.0057116672, -0.0692747310, -0.0235257819, -0.0330665410, -0.0643063933, 0.0368491337, 0.0612348393, -0.0370687060, 0.0370389409, -0.0838367268, 0.0228590500, -0.0367890708, 0.0429948717, 0.0155151002, -0.0663285851, 0.0194630604, -0.0544501655, -0.0314272232, -0.0334201269, 0.0339468196, -0.0602976978, 0.0116404649, -0.0399823859, -0.0372485891, -0.0062138247, -0.0267560501, -0.0731095225, -0.0088491961, -0.0421820208, -0.0109180994, -0.0692747906, 0.0553441793, -0.0061686072, 0.0448528454, -0.0383664928, -0.0113985278, 0.0340957269, 0.0813208073, -0.0603442118, 0.0345844068, -0.0194998495, -0.0669949427, 0.0248342231, -0.0516056530, -0.0405557118, 0.0176358167, -0.0277015902, 0.0451291241, 0.0182296000, -0.0796260685, -0.0238206387, -0.0469519272, 0.0108626541, 0.0539428890, -0.0172670688, -0.0316418074, 0.0440535508, -0.0025944309, -0.0779656991, 0.0204251353, -0.0477749668, -0.0583454035, 0.0359672271, 0.0250894632, -0.0644567162, 0.0292838961, 0.0301190298, 0.0131863626, 0.0064538317, -0.0483446978, 0.0100918747, -0.0251256954, 0.0549384058, -0.0432131626, -0.0283870716, 0.0829299614, 0.0479562469, 0.0404348522, -0.0429115072, -0.0136535885, 0.0469538048, -0.0052849967, -0.0227021948, 0.0876816660, -0.0379389822, -0.0691870451, -0.0292469934, 0.0013064560, -0.0443641543, -0.0522737429, -0.0597000755, -0.0610088855, 0.0413926318, -0.0148921227, 0.0255432557, -0.0226196274, 0.0399408527, -0.0566971228, -0.0343345031, -0.0314640850, 0.0430494174, -0.0072784596, -0.0327974781, 0.0019847949, 0.0717491508, 0.0487494394, 0.0329825282, 0.0438794009, 0.0797089860, 0.0463910960, 0.0676260218, 0.0437287949, 0.0178214107, -0.0617056154, -0.0067713656, -0.0581642874, -0.0036369695, -0.0378358327, 0.0186616071, -0.0833402127, -0.0814964622, -0.0301058069, 0.0611079633, -0.0092586828, 0.0759840459, 0.0100937188, 0.0594161227, 0.0013625555, -0.0728273764, 0.0401996784, 0.0410339721, 0.0738713145, -0.0989019796, 0.0124543058, 0.0067964648, 0.0819978118, -0.0237086751, 0.0091628069, -0.0476386882, 0.0954947472, -0.0435099863, 0.0387399681, -0.0659969747, -0.0393776223, 0.0117132161, 0.0238989927, -0.0361163765, 0.0875354558, -0.0832352117, -0.0264696106, 0.0654369369, 0.0056561125, 0.0404218473, -0.0297845006, 0.0644401535, -0.0344225056, 0.0913904458, 0.0303454753, 0.0069315201, 0.0862787962, 0.0764694437, 0.0027020243, 0.0774503201, 0.0362666063, -0.0456725955, 0.0179587863, 0.0169533752, 0.0100535071, 0.0545671247, 0.0272428952, 0.0455597825, -0.0241842866, 0.0500155911, 0.0247918610, 0.0398596711, -0.0254151933, 0.0679253936, -0.0509069562, 0.0091673089, 0.0658373460, -0.0372360684, 0.0052778427, -0.0477779135, -0.0081693158, 0.0146845262, 0.0370140113, -0.0054044733, 0.0738143325, -0.0145315295, -0.0027079412, 0.0640219674, -0.0267627388, -0.0231322777, -0.0187445041, -0.0021429560, 0.0564829446, -0.0728315562, 0.0290197749, -0.0921845883, 0.0463141575, 0.0319201872, -0.0929186046, 0.0012343521, 0.0130980918, -0.0438270271, 0.0449968204, -0.0408905149, -0.0097427554, -0.0140407383, -0.0191812962, -0.0667635724, 0.0501460955, 0.0421542414, -0.0493320934, -0.0541166551, -0.0953230783, 0.0488606803, -0.0365521908, 0.0510144122, -0.0389181525, -0.0138244210, -0.0378711261, 0.0346726589, -0.0272096116, 0.0882440433, -0.0203563273, 0.0173960719, 0.0536313988, 0.0054363194, 0.0581305623, 0.0145602897, -0.0627093911, 0.0941568911, -0.0697971955, -0.0351328962, 0.0321022756, 0.0733041242, 0.0516046062, 0.0637015477, 0.0527648963, 0.0558153652, -0.0820283145, 0.0263213925, 0.0355264172, 0.0276289973, -0.0475408025, 0.0715615004, 0.0524425805, 0.0218507480, -0.0272122938, -0.0121962056, 0.0232691467, 0.0347791761, -0.0679366291, 0.0010952938, -0.0747069642, -0.0617225729, -0.0768079981, 0.0615856089, -0.0026994180, 0.0047705341, 0.0602155030, 0.0636852980, 0.0717864186, -0.0277506523, 0.0491861068, 0.0789143965, -0.0186790861, -0.0346043892, -0.0842690617, 0.0095192241, 0.0316753536, 0.0119905686, -0.0710017532, 0.0450997092, -0.0424322449, -0.0853788853, -0.0468726456, 0.0277188160, -0.0189188421, -0.0033903134, 0.0275166426, -0.0226486381, -0.0132411094, 0.0091666421, 0.0769172460, 0.0270171966, -0.0431585461, 0.0087445090, -0.0252041500, 0.0097216014, -0.0580240563, 0.0030817734, 0.0204171054, -0.0034032138, -0.0710200295, -0.0337766036, -0.0110249706, -0.0295776986, -0.0435034856, 0.0244601853, 0.0335398093, -0.0166079924, 0.0437185429, -0.0394911021, -0.0736098886, -0.0866727829, -0.0057424819, 0.0528042428, 0.0076622870, 0.0087885503, 0.0013013998, -0.0851282179, 0.0108188782, -0.0233676024, 0.0285704918, -0.0233655758, 0.0554960147, -0.0334608182, -0.0699645653, -0.0731110051, -0.0540643670, 0.0598902032, 0.0417169221, -0.0953718424, 0.0771335214, -0.0552917309, 0.0998537913, 0.0546866879, 0.0003274675, -0.0554036722, 0.0776080415, -0.0011293879, -0.0205862820, -0.0640054792, -0.0047943983, -0.0692796186, -0.0239537284, -0.0324653983, 0.0550270975, -0.0562299974, -0.0416726880, -0.0434498526, -0.0020345855, -0.0395551398, 0.0214589089, 0.0152609823, 0.0372025333, 0.0671592280, 0.0409087203, 0.0359166674, -0.0006233889, -0.0322818831, -0.0147107271, 0.0624398477, 0.0472573489, -0.0415514447, 0.0627672374, -0.0279459748, -0.0350453220, 0.0640662238, 0.0591208562, -0.0054929601, -0.0138694867, -0.0544059612, 0.0254466254, -0.0477820598, -0.0073393174, -0.0270492751, 0.0089509347, -0.0056901718, -0.0119069107, 0.0595588312, -0.0566157214, 0.0279428568, -0.0880282298, -0.0788360238, -0.0372608230, 0.0021264383, 0.0102819651, -0.0086197741, 0.0401907787, 0.0806530416, 0.0287988130, 0.0248026699, -0.0084390156, -0.0475044549, 0.0719778538, -0.0574588329, -0.0327754356, -0.0087242695, -0.0284378156, 0.0319245942, -0.0406326130, 0.0138995945, 0.0130748367, 0.0065088109, 0.0335758813, 0.0230581518, -0.0660911798, -0.0163688902, -0.0446093753, -0.0541577041, 0.0437873006, -0.0339197293, -0.0433015488, 0.0035969578, 0.0060629179, 0.0675674602, -0.0021001755, -0.0364116579, -0.0913783312, 0.0047673057, -0.0376031660, -0.0613745824, 0.0354557112, -0.0157074071, -0.0256350003, -0.0355497450, -0.0526762456, 0.0090118246, 0.0501348600, -0.0547158830, -0.0137572521, 0.0983359367, -0.0729735121, 0.0001866786, -0.0345400050, 0.0909307227, -0.0181730464, -0.0320532881, 0.0063781422, 0.0290537421, 0.0038909281, -0.0736459792, -0.0039708051, 0.0468396433, 0.0217110403, -0.0050761229, -0.0654564947, -0.0596306063, 0.0069466331, -0.0267187636, 0.0085652852, -0.0381223261, -0.0805882141, 0.0589532927, 0.0258288439, -0.0052788388, -0.0868165642, -0.0579901524, -0.0564329848, -0.0957798809, 0.0782614797, -0.0610365458, -0.0114665804, 0.0044137966, 0.0435761809, -0.0126780346, -0.0178655200, -0.0419661142, 0.0276881214, -0.0466077439, 0.0111961663, 0.0203846060, -0.0848994404, 0.0067992117, 0.0895832703, 0.0193591900, 0.0623582751, -0.0378087908, -0.0165421497, -0.0608398691, -0.0334150270, -0.0372097306, 0.0681649297, 0.0543366335, 0.0351296142, -0.0647264868, 0.0219990499, -0.0039309724, -0.0069339173, 0.0333453044, 0.0609009825, 0.0824637339, -0.0177671369, -0.0257657655, 0.0310141556, -0.0236256607, -0.0059621655, -0.0344910957, -0.0846586525, 0.0759369135, 0.0723833069, -0.0033627369, 0.0561759993, 0.0845789164, -0.0954751745, -0.0256552044, 0.0690158457, -0.0061089904, -0.0281273834, 0.0657091811, -0.0045961132, -0.0890943184, -0.0816911012, -0.0538987219, 0.0009387713, -0.0674737990, 0.0301458836, 0.0024764556, -0.0024523539, 0.0220518000, 0.0274232980, -0.0290372055, -0.0402049273, 0.0153113538, -0.0218205918, 0.0323955566, -0.0042230366, -0.0281402916, 0.0303224102, -0.0423546359, 0.0168677531, 0.0830756575, -0.0547073968, -0.0649423227, -0.0458613485, -0.0308612231, 0.0073831230, -0.0564383119, -0.0447806194, 0.0332884155, 0.0474808626, -0.0338128023, 0.0419127606, -0.0535393730, -0.0283806529, -0.0021861533, 0.0590613894, 0.0033062086, 0.0861993283, 0.0439541973, 0.0612844862, 0.0087065417, 0.0709080249, -0.0348012783, -0.0521581918, 0.0388515033, -0.0164243877, 0.0167941079, 0.0423012152, -0.0284335501, -0.0105030006, -0.0337530449, 0.0214994904, 0.0572026893, 0.0604788214, -0.0454808250, -0.0072938246, 0.1010137424, 0.0026763070, 0.0333855711, 0.0058426377, -0.0772356316, -0.0559961498, 0.0585127175, 0.0147786178, -0.0635781959, 0.0229174010, -0.0834313408, 0.0344982520, 0.0274598338, -0.0766936243, 0.0426894799, 0.0210155249, -0.0719387531, 0.0628620982, 0.0036089725, 0.0738302320, -0.0734755024, -0.0014406006, 0.0418275781, 0.0980821699, 0.0481337607, 0.0301931445, -0.0316454247, 0.0496797897, 0.0308016092, -0.0012104551, 0.0516707264, -0.0439224243, -0.0110270288, -0.0247198008, 0.0342438221, 0.0456280969, -0.0408781357, -0.0595778190, -0.0205214731, 0.0192164853, -0.0486791171, -0.0485945083, -0.0254335925, -0.0406629294, 0.0066471654, 0.0417847633, -0.0709653720, 0.0428810492, -0.0170478132, -0.0220468659, 0.0292600431, -0.0394969098, -0.0115929954, -0.0290000476, -0.0304182284, 0.0104811629, 0.0282988921, 0.0149554582, -0.0523169264, 0.0554533899, 0.0376097448, 0.0542481020, 0.0477886386, 0.0814679265, 0.0335479714, -0.0202042665, 0.0580856055, -0.0162593815, 0.0563338101, 0.0022472439, -0.0737330839, 0.0199696925, -0.0529983900, -0.0296008196, 0.0679429621, -0.0274839941, 0.0115738958, 0.0635739192, 0.0367795825, 0.0599037446, 0.0310252216, 0.0126288822, 0.0436531492, 0.0294676758, -0.0591224916, -0.0001421135, 0.0204479620, -0.0514150932, 0.0462734848, -0.0571027733, -0.0624551624, 0.0321927667, 0.0511003323, -0.0008684808, -0.0420115739, 0.0464146920, 0.0635800958, 0.0664295480, 0.0484615117, -0.0556622073, -0.0115767065, -0.0764053911, 0.0399636142, 0.0290434491, 0.0149732837, -0.0081085786, 0.0019660960, -0.0410234742, -0.0190203805, -0.0367968716, -0.0378399342, 0.0163116772, 0.0488603190, 0.0542803295, 0.0761580393, 0.0807038024, -0.0445824005, -0.0035562729, -0.0632227212, -0.0578280948, 0.0072304918, -0.0437780805, 0.0416426100, 0.0503119044, -0.0004080174, -0.0053845081, 0.0242332183, 0.0548649393, -0.0322457366, -0.0208572950, 0.0450947210, -0.0758334994, 0.0117087988, 0.0618236251, 0.0664484352, 0.0264264643, -0.0487031713, -0.0305883642, 0.0653076097, -0.0247234702, 0.0300291143, 0.0581934899, -0.0426892415, 0.0352425985, 0.0271304809, 0.0226192363, 0.0405351110, -0.0314161442, 0.0327276252, 0.0195217934, 0.0247604363, 0.0030356070, 0.0742451921, -0.0053836317, 0.0149645582, 0.0061648260, 0.0018210115, 0.0224876497, -0.0123584922, -0.0414712653, -0.0599956438, 0.0134390257, 0.0713104606, 0.0077725076, 0.0489853285, -0.0687438026, -0.0696081966, 0.0540852919, -0.0043485877, -0.0537676737, 0.0555803031, -0.0270682536, -0.0605233200, -0.0602349117, -0.0455134921, 0.0027684274, -0.0440099165, -0.0424272418, 0.0357509851, -0.0485011041, 0.0421352498, 0.0049090791, 0.0596114993, 0.0544142462, -0.0017712065, -0.0241536759, 0.0594635233, 0.0422059298, 0.0108505180, -0.0571078360, 0.0097402642, 0.0025415176, 0.0752542242, 0.0676007420, 0.0339421742, 0.0487190560, -0.0450684242, -0.0300617665, -0.0568290092, 0.0253656898, -0.0209390689, 0.0466799736, 0.0611933395, 0.0198088884, 0.0357102901, 0.0053089764, -0.0457873419, 0.0219187047, 0.0154180871, 0.0649160296, -0.0656922609, -0.0707737133, 0.0737844408, 0.0288386550, -0.0698377043, -0.0433654338, 0.0731249526, -0.0141322799, 0.0359550305, 0.0004828682, 0.0342650414, 0.0045771492, -0.0395943597, -0.0053334124, -0.0360480398, 0.0821383595, -0.0668455884, 0.0476128235, -0.0044651213, -0.0435983762, 0.0620818399, 0.0168883111, -0.0490753092, -0.0580258258, -0.0392613709, -0.0305380579, 0.0126035260, -0.0414670706, 0.0387572385, 0.0215127561, -0.0339080840, -0.0331287123, 0.0485660844, -0.0019094149, -0.0300436430, -0.0609435029, -0.0209355932, 0.0133328158, -0.0673646927, 0.0321898609, 0.0095529985, 0.0017883937, 0.0255728308, -0.0420748256, 0.0378440060, -0.0101157455, 0.0760486275, 0.0425966233, -0.0377106108, 0.0070922622, 0.0651507229, 0.0307223629, -0.0642829090, -0.0071516945, -0.0615103245, 0.0530586652, -0.0253239982, -0.0708094537, -0.0660929233, -0.0339669213, -0.0248520970, 0.0302371047, -0.0536751784, -0.0177682526, -0.0237433128, -0.0482846126, 0.0511377528, 0.0367360972, -0.0605857037, 0.0247841794, 0.0566987097, 0.0544907004, 0.0248675868, 0.0318332464, -0.0182610154, 0.0367908627, -0.0442077965, 0.0052468516, -0.0557474121, 0.0681062490, -0.0047484781, -0.0383317098, -0.0306245927, -0.0373140499, -0.0459876396, -0.0370577723, -0.0631056130, 0.0458679497, -0.0169518050, 0.0557197630, -0.0745616481, -0.0086388243, -0.0505685806, -0.0800750032, 0.0154954065, 0.0166748650, -0.0134099713, -0.0152741652, 0.0515291207, 0.0520065986, 0.0129983760, -0.0663116127, 0.0141965458, -0.0207895655, -0.0098286141, 0.0974052697, -0.0563879497, -0.0228288379, -0.0452194251, 0.0670519769, 0.0398856178, 0.0486278273, 0.0052987621, -0.0022364857, -0.0561458021, -0.0476598330, 0.0289326068, 0.0398202948, 0.0136356317, 0.0020445157, 0.0089575630, 0.0043859351, 0.0565180294, 0.0230853427, 0.0193673838, 0.0373998992, 0.0411672518, -0.0460006595, 0.0030966401, -0.0538195968, -0.0265412759, -0.0678110644, 0.0274752341, 0.0101245102, 0.0357458480, -0.0669857487, -0.0377780572, 0.0142598394, -0.0603199564, 0.0159241855, 0.0148253255, 0.0080670854, -0.0461095832, 0.0351188481, 0.0155990673, 0.0158367548, -0.0375686772, 0.0365784466, -0.0503559187, -0.0145092485, 0.0244325846, 0.0268953387, -0.0254114848, -0.0769831091, 0.0539327413, -0.0105782812, -0.0506595522, 0.0226394366, -0.0035938784, -0.0163963549, 0.0697234794, 0.0068944562, -0.0741881430, -0.0486872606, -0.0404878110, -0.0176993739, 0.0373420455, 0.0415650420, 0.0353883132, -0.0388829596, 0.0269087497, 0.0233016815, -0.0385884568, -0.0074449112, -0.0079902960, 0.0660843030, -0.0550462827, -0.0607629567, -0.0397009403, 0.0516418926, -0.0157639086, -0.0557808802, 0.0361013748, 0.0388683416, -0.0042756293, 0.0293162931, 0.0517403111, 0.0466482975, 0.0263775419, 0.0024751767, -0.0728780478, -0.0573770329, 0.0579771362, 0.0575750954, 0.0058248588, 0.0247897953, -0.0671060011, -0.0512322709, 0.0446722955, 0.0493927971, -0.0736290589, 0.0171761457, -0.0666566789, 0.0575219952, -0.0496786498, -0.0190801788, 0.0138539039, 0.0054204143, -0.0136251040, -0.0169361532, -0.0716650188, -0.0258466806, 0.0740463287, 0.0502505451, -0.0508359186, 0.0242785215, 0.0147395674, -0.0535555631, 0.0024779970, 0.0168718752, 0.0299653672, -0.0199453849, -0.0634553134, -0.0033296582, 0.0675373822, -0.0503066964, -0.0810818896, -0.0427042209, 0.0642883554, -0.0010223862, 0.0438896082, -0.0183425304, 0.0555915050, -0.0196527503, -0.0153969442, -0.0596483834, -0.0321758389, 0.0341053829, -0.0140059805, -0.0524828956, 0.0539694577, 0.0210683700, -0.0436512344, 0.0371106528, -0.0351894945, 0.0415945798, 0.0820681378, -0.0550846867, -0.0376486965, 0.0226024725, -0.0569816530, 0.0430882312, 0.0354665406, 0.0464815721, -0.0206979364, 0.0410020426, -0.0775005966, -0.0818844289, 0.0305358469, -0.0376087949, 0.0242003016, -0.0201260336, -0.0201295651, -0.0218862742, -0.0324050151, 0.0104672192, -0.0841530338, -0.0604846664, -0.0017353673, -0.0574833155, -0.0591586009, -0.0050913109, 0.0128141576, -0.0449060313, 0.0396322682, 0.0714806765, -0.0482592769, -0.0269199815, 0.0436164662, 0.0491171405, 0.0489204526, -0.0090872729, 0.0259959847, 0.0224015806, -0.0317391641, 0.0416343547, -0.0017477634, -0.0642481521, -0.0115643404, 0.0575378425, -0.0058705597, -0.0291556362, 0.0753753036, -0.0056974827, -0.0602552369, 0.0446806177, 0.0708830580, 0.0379606709, -0.0550507940, -0.0706133917, 0.0366383046, -0.0829247460, -0.0127521586, 0.0335608423, 0.0605556257, 0.0108712064, 0.0019643845, 0.0127347419, -0.0589319058, 0.0206789784, 0.0035750573, -0.0654404312, 0.0585418120, 0.0010149479, -0.0233962294, -0.0210267529, -0.0181897711, -0.0105429012, -0.0091390051, 0.0624921322, -0.0727193132, -0.0792529061, 0.0628004596, 0.0274890065, 0.0832915232, -0.0711357221, -0.0104866000, 0.0220330041, -0.0494750850, -0.0022315858, -0.0247599334, 0.0654844865, -0.0066453866, -0.0104816854, -0.0349258855, 0.0591857545, -0.0735845864, -0.0094851032, 0.0364870727, -0.0140675139, -0.0063604275, -0.0340941362, 0.0178341214, -0.0192403290, 0.0627681166, 0.0543693192, -0.0261014588, -0.0594493337, 0.0686914101, -0.0221638810, 0.0516784266, 0.0039957962, 0.0320359953, 0.0429451130, 0.0461900644, 0.0219041947, 0.0312890261, 0.0417535417, 0.0541090257, -0.0147472974, 0.0499486849, 0.0545671172, -0.0529549085, -0.0107915513, -0.0190978330, 0.0525375865, 0.0315316655, -0.0558650903, 0.0654252097, 0.0751872584, 0.0791205838, -0.0701560751, 0.0441638716, -0.0042824107, 0.0688323006, 0.0553797893, -0.0476004928, 0.0002641185, 0.0133145349, 0.0615116172, -0.0667697266, -0.0049435743, 0.0377228968, 0.0338445343, 0.0029826118, -0.0587585233, -0.0514955446, -0.0782469511, 0.0348711386, 0.0547113344, 0.0570924096, 0.0127749704, -0.0716398209, -0.0450119972, -0.0626186281, -0.0488912985, 0.0228690114, 0.0679320469, 0.0252245124, 0.0563289784, -0.0255119856, -0.0574823394, -0.0216848124, -0.0200688168, 0.0130291618, 0.0483353809, 0.0129835503, 0.0492750853, 0.0579963885, -0.0254658964, 0.0393431485, -0.0842489228, 0.0204385910, -0.0589855164, -0.0601182915, 0.0099304784, -0.0168772452, -0.0134305060, -0.0242556911, -0.0245109182, 0.0334574655, 0.0743107349, 0.0065370365, -0.0330863111, -0.0861126408, 0.0449598506, -0.0796603262, -0.0180692002, -0.0879629180, 0.0189573243, 0.0389037542, 0.0599462353, -0.0201551151, 0.0450200178, 0.0703944638, 0.0489331819, 0.0205011703, 0.0147227850, 0.0302823577, 0.0890195742, 0.0880367905, 0.0034660751, 0.0061216843, 0.0904540420, -0.0066215508, -0.0177696217, 0.0454788096, -0.0018866378, 0.0527095869, -0.0016917983, 0.0484624989, 0.0259437542, -0.0599047430, -0.0733291283, 0.0504473075, -0.0608065166, -0.0757086501, 0.0647572055, 0.0043428657, 0.0055017453, 0.0201739818, -0.0078640142, 0.0612286329, 0.0617604703, -0.0359328203, -0.0030519641, 0.0122286221, -0.0771114677, 0.0409161784, 0.0760760084, 0.0080456836, -0.0109429304, 0.0014567351, -0.0474958383, 0.0466076769, -0.0764954835, -0.0200057384, 0.0590667613, -0.0054650661, 0.0336444117, 0.0288131349, 0.0340819880, -0.0425792709, -0.0067717754, 0.0250768512, 0.0074296277, -0.0760155246, -0.0350990221, 0.0028792270, 0.0627162457, -0.0618578494, 0.0405777618, -0.0180725176, 0.0238423068, -0.0744395852, -0.0204873011, 0.0645194352, -0.0011797062, -0.0182653852, -0.0224628244, -0.0780242234, 0.0694510788, -0.0139699737, 0.0354314819, -0.0092895627, -0.0130408024, 0.0183680411, -0.0141144646, -0.0003361892, -0.0461178198, -0.0016356934, 0.0697091445, -0.0192423165, -0.0547269210, -0.0250619296, -0.0702623427, -0.0056644981, 0.0096884854, -0.0109540774, -0.0424966216, 0.0214597601, 0.0379530080, 0.0636815876, 0.0828891918, -0.0533718914, -0.0660321563, 0.0094412547, -0.0327684544, 0.0436749682, -0.1012561768, 0.0669962242, -0.0620598607, 0.0305535272, -0.0563104376, -0.0594753474, -0.0257430710, -0.0508777089, 0.0478621200, -0.1004294008, -0.0111654531, -0.0382094644, -0.0790737197, -0.0393920355, -0.0153297670, 0.0206401143, -0.0314758085, -0.0178784225, -0.0934217125, 0.0345887989, 0.0355233997, -0.0637659505, -0.0042447597, -0.0068829334, 0.0678229854, -0.0592642426, 0.0010682642, -0.0441693403, -0.0562919006, -0.0988191068, 0.0692324936, 0.0871390328, 0.0549146496, 0.0351329669, 0.0453541577, -0.0208389964, -0.0462997146, 0.0470184051, -0.0146859856, 0.0548835583, -0.0914547220, 0.0610290803, -0.0300007425, -0.0333594494, -0.0559083857, -0.0590441041, -0.0106604639, -0.0707882643, 0.0070322771, 0.0413285866, -0.0268483162, 0.0180407744, -0.0495495535, 0.0183921885, 0.0827097371, 0.0337977633, 0.0431704782, 0.0775681287, 0.0109793236, -0.0349346101, -0.0720350668, -0.0163078774, 0.0359127931, 0.0113220941, 0.0206461437, 0.0412694439, -0.0419492610, 0.0163861196, 0.0529912636, 0.0423354320, 0.0649865344, 0.0553184077, 0.0397800729, 0.0020599144, -0.0418579504, -0.0045716623, -0.0309703685, -0.0188327469, -0.0283972677, 0.0203661676, -0.0441351794, -0.0257802960, 0.0393353365, 0.0602694564, 0.0795188695, -0.0208630972, -0.0253213365, -0.1191012934, 0.0050210287, -0.0524816848, -0.0459317006, -0.0651829764, 0.0551652722, 0.0085275173, 0.0331006013, 0.0252608694, 0.0134077556, -0.0609422550, -0.0005700220, -0.0450359695, -0.0023486547, 0.0300730448, 0.0827821940, 0.0017654285, -0.0643034428, 0.0795539469, 0.0507095382, -0.0694360659, 0.0774662197, -0.0483637266, -0.0108547695, 0.0777994916, 0.0521191172, 0.0588689111, -0.0332242139, 0.0181792788, -0.0698232204, 0.0081551457, 0.0528693423, -0.0312852301, -0.0093084108, -0.0037087938, -0.0178258996, -0.0693455040, -0.0521679781, -0.0569417216, -0.0402965099, 0.0940292999, -0.0167223476, 0.0417334698, 0.0010474869, -0.0347528197, 0.0687313899, -0.0004102620, 0.0755984783, -0.0126470281, 0.0187327527, -0.0708811432, -0.0563715585, -0.0722922906, -0.0288993251, -0.0587856472, -0.0681092590, 0.0533106923, 0.0026387062, -0.0210114922, 0.0391254127, -0.0350597240, -0.0187533852, -0.0161319077, 0.0884629339, -0.0416030921, -0.0175817590, -0.0126617756, -0.0614745691, 0.0157822967, -0.0404853560, -0.1043805555, -0.0314758010, -0.0312792100, -0.0285185575, -0.0581117012, -0.0477728583, 0.0183775593, -0.0386049785, -0.0357738286, -0.0016545467, 0.0303765759, -0.0092700208, 0.0302204099, -0.0112686399, -0.0866312459, 0.0164506193, -0.0144628417, 0.0954733863, 0.0068618874, 0.0321543813, 0.0793336481, 0.0392355658, -0.0519907773, -0.0821401030, 0.0247225557, -0.0215636380, -0.0219515022, -0.0599698536, 0.0407448635, 0.0627267882, 0.0043090940, -0.0447012931, 0.0705006421, 0.0527500696, -0.0230084211, -0.0807384029, 0.0657349974, -0.0121812923, 0.0475253016, -0.0473817736, -0.0109220017, 0.0778270885, 0.1012377143, 0.0245492663, -0.0248548035, -0.0342664756, -0.0194204040, -0.0113109779, -0.0739551485, -0.0784482807, -0.0753483325, 0.0745072737, -0.0135178510, -0.0265604854, 0.0311474856, 0.0339258760, -0.1076428294, 0.0663349405, -0.1075284109, 0.0135669522, -0.0773534998, -0.0129489237, -0.0553221963, 0.0051295594, -0.0833655298, 0.0710902289, 0.0261754375, -0.0374858901, 0.0675970986, -0.0473843701, -0.0458803847, -0.0079204487, 0.1023537219, 0.0156692620, -0.0311521478, -0.0358358435, 0.0233680420, 0.0990924910, -0.1124395728, -0.0276752301, 0.0604546256, -0.0336625502, -0.0110144978, -0.0235014874, 0.0507322773, -0.0034092073, 0.0174937304, -0.0599564053, 0.0570679456, -0.0509258695, -0.0694820434, -0.0751137808, -0.0206306633, -0.0341963135, -0.0221402347, 0.0149672553, 0.0306761451, 0.0557183623, 0.0723433048, -0.0604517274, -0.0439008959, -0.0109877046, 0.0158705842, 0.0901836231, -0.0136635266, 0.1019639596, 0.1033307463, 0.0054583838, -0.0784217119, -0.0360825248, -0.0784155428, -0.0492917821, -0.0297407117, 0.0418564379, 0.0463955626, -0.0222814325, -0.0271391682, 0.0233729556, -0.0561033934, 0.1078323424, -0.0935795307, 0.0962688774, -0.0221026093, 0.1008699015, -0.0340306610, 0.0183735657, -0.1062897891, -0.0570182726, -0.1181188375, 0.0294944160, 0.0255777929, -0.0846011490, 0.0185566228, -0.0219375491, -0.0095355846, 0.0286908112, 0.0104128234, 0.1115217730, -0.0079904124, -0.1017616913, -0.0383968204, 0.0671972334, 0.0093537793, 0.0095663257, 0.0443326011, 0.0257220268, -0.0410495289, -0.0311180092, 0.1190190539, -0.0661355853, 0.0358278230, -0.1107007563, 0.0408594012, 0.0074782632, -0.0262397621, 0.0146182170, -0.0156828482, -0.0284440070, -0.0767098591, 0.0166878086, -0.0171455555, 0.0315301009, 0.0265415702, -0.0783056840, 0.0264860056, -0.1017268822, 0.0470764339, 0.0266086534, -0.0226364192, 0.0081316605, 0.0753984004, 0.0306268055, -0.0131322248, -0.0894745961, -0.0809688345, -0.0513304882, 0.0294901840, -0.0119284112, -0.0535282195, -0.0344664417, 0.0047378917, -0.0643984824, 0.0915367007, 0.1002946720, -0.0527938455, -0.0191354491, 0.0025885256, 0.0393299237, -0.0060966350, -0.0812423378, -0.0935640633, 0.0427369997, -0.0284661278, 0.0835984349, 0.0213918798, 0.0178206228, 0.0707643926, -0.0250210352, 0.0192708299, -0.0554405525, -0.0005186625, 0.0820985064, -0.0184518900, -0.0725186542, 0.0595472716, 0.0246928595, -0.0662657693, 0.0145712132, 0.0769481212, 0.0191254746, -0.0396101251, 0.0222482458, 0.0046267300, 0.0366446190, 0.0140950847, -0.1114422008, 0.0606490187, -0.0307435691, 0.0366980508, 0.0252098162, -0.0464873016, -0.0593587607, -0.0817829221, -0.0855372846, -0.0157924257, 0.0477133095, 0.0805290043, -0.0405944437, -0.0088545140, -0.0783296302, 0.0397005044, 0.0556688458, -0.0498553067, 0.0266354829, 0.0537935831, -0.0557429641, -0.0297630541, -0.0230017528, 0.0233409908, -0.0834228694, -0.0333650969, -0.0449133739, -0.0559024215, 0.0763065442, -0.0100112399, -0.0011217928, -0.0174006987, 0.0451803617, -0.0731111690, -0.0508754812, -0.0361614712, 0.1257867068, 0.0017340275, -0.0097744828, -0.0757815391, -0.0355294459, -0.0717700273, 0.1023186296, 0.0141821075, -0.1162568256, 0.0726322457, 0.0651003569, -0.0983185321, 0.0777221322, 0.0555837862, 0.0058815847, 0.0524026118, -0.0987861603, -0.0067812232, 0.0045324680, -0.0809136331, 0.1019583642, 0.0054696007, 0.0008404471, -0.0432716161, -0.0154781900, 0.1393282861, -0.0556507893, -0.0065200650, -0.0961478502, -0.0566282570, 0.0571618751, 0.0164025947, -0.0599956587, -0.0368292779, 0.0363493823, -0.0881120786, -0.0604199506, -0.0624676906, 0.0541155227, 0.0911228135, -0.0150751537, 0.0191233233, 0.0252494663, 0.0311250705, 0.0004087031, 0.0129158078, 0.0325271003, 0.0836755782, 0.0019052231, 0.0268481337, 0.0509053916, 0.0084772836, 0.0031682558, -0.0520128533, -0.0086796666, 0.0109200040, -0.0542794541, -0.0453918576, 0.0522282608, 0.0686188266, 0.0458368398, -0.0060036508, -0.0510709509, 0.0232306793, -0.0643195808, 0.0490607917, -0.0192633215, -0.0044108802, 0.0105434721, 0.0597843602, -0.0381640531, -0.0111643681, 0.0556128360, -0.0203545727, 0.0155474916, -0.0418381765, 0.0499988794, 0.0468384102, 0.0045120548, 0.0163836870, -0.0537337363, -0.0546067394, 0.0060321386, -0.0381089151, -0.0212469660, -0.0367070138, -0.0209402051, 0.0243984461, -0.0170714930, 0.0538440496, 0.0649709776, -0.0178103764, 0.0663201287, 0.0463369824, -0.0355381072, 0.0083977487, 0.0402605273, 0.0386309624, -0.0091427481, -0.0554556847, 0.0192024857, 0.0015349775, 0.0516569279, -0.0158978626, 0.0211268310, -0.0643813685, 0.0611258335, -0.0393712334, -0.0388490297, 0.0465101413, 0.0546373576, 0.0027008078, 0.0133745046, 0.0609104075, 0.0337204263, 0.0717178881, 0.0545634478, -0.0126278708, -0.0361424424, 0.0584659427, -0.0108559700, 0.0293091647, -0.0543381535, -0.0420580842, 0.0202969108, -0.0689116269, 0.0429273359, -0.0657645687, 0.0745346323, -0.0527759157, -0.0201393832, 0.0361107141, -0.0443179980, -0.0032807337, -0.0182986259, 0.0524646379, 0.0490551479, 0.0102518676, -0.0177646279, 0.0035430572, 0.0350965671, -0.0490024053, 0.0399405621, -0.0641169548, -0.0126902210, -0.0012610436, -0.0125733046, -0.0162386317, 0.0343697183, -0.0184381604, -0.0286211371, -0.0093234284, -0.0091693038, 0.0203001108, -0.0200700909, -0.0335440151, 0.0644609109, -0.0236623362, -0.0445207134, -0.0526378639, -0.0230263341, -0.0310958214, 0.0188464690, 0.0014724914, 0.0058180369, -0.0632183403, -0.0436020568, 0.0198946651, 0.0340459496, 0.0665000081, -0.0560811721, -0.0115015246, -0.0566261597, -0.0264850296, 0.0543502010, -0.0705729127, 0.0125895860, 0.0308652781, -0.0117657203, -0.0355851129, -0.0706273392, -0.0102282194, 0.0251565035, 0.0512323864, -0.0049706111, 0.0425317548, 0.0496264361, -0.0615595803, 0.0275978781, 0.0536932908, -0.0045235748, -0.0095535377, 0.0075533027, -0.0273133107, -0.0313895419, -0.0055834292, 0.0262010153, -0.0125666782, -0.0124052884, -0.0423842929, -0.0379811786, 0.0584789477, 0.0132330311, -0.0562132336, -0.0063418378, 0.0602398179, -0.0214924775, -0.0283052120, -0.0694764480, -0.0201505031, 0.0122402320, -0.0625500977, 0.0341240987, -0.0188749880, -0.0557797365, -0.0560349971, 0.0146271484, 0.0211169235, 0.0164094586, 0.0364762656, -0.0004559768, -0.0109463865, -0.0530209616, -0.0365969725, 0.0416187979, -0.0737817585, 0.0246896408, 0.0119199995, -0.0201048348, -0.0038382648, -0.0195224676, 0.0265011918, -0.0240307879, 0.0564032532, 0.0406583957, 0.0589833744, -0.0436089002, 0.0745919645, -0.0215834863, 0.0266984198, 0.0740231723, -0.0430779718, -0.0378990471, -0.0634624064, 0.0168437082, -0.0387373343, -0.0624375977, -0.0621434301, 0.0630238652, -0.0290430877, -0.0833289549, -0.0237925313, 0.0270184707, 0.0127972858, 0.0302471556, -0.1092101485, 0.0262529347, 0.0254376829, -0.0748701915, -0.0708277896, 0.0040858891, 0.0178487692, 0.0842443109, 0.0877554640, -0.0747837573, 0.0249817595, -0.0311475899, 0.0027689973, -0.0566632226, 0.0600292087, 0.0854717046, 0.0151826283, 0.0227102041, 0.0593582243, 0.0735381916, 0.0066227401, 0.0493386649, -0.0611800477, -0.0049567441, -0.0440915711, -0.0086646834, 0.0599245690, 0.0002706040, -0.0357496962, -0.0570520870, 0.0576659590, 0.0549425967, -0.0036796755, -0.0120615456, -0.0388605855, -0.0362429991, -0.0594860315, -0.0476605035, 0.0429679155, -0.0335557498, 0.0776575878, -0.0459236279, 0.0620845929, 0.0000977055, -0.0293290634, 0.0533867739, 0.0434702300, 0.0673020408, -0.0134707494, -0.0817960054, -0.0930864662, -0.0604714341, 0.0016957369, -0.0132292770, -0.0123055642, 0.0475692935, -0.0729362220, -0.0191611219, -0.0173037481, -0.0819197595, -0.0168427061, 0.0313332044, -0.0950095206, -0.0096984794, 0.0327514298, 0.1049192548, -0.0382594839, -0.0272972696, -0.0151606742, -0.0659562126, -0.0223657526, -0.0261078645, 0.0990200564, -0.0943283588, 0.0595322400, 0.0813754797, -0.0444571152, 0.0299845692, 0.0707539022, 0.0599512570, 0.0941100568, -0.0590934306, 0.0284070000, -0.0342672616, 0.0170483291, -0.0234227758, -0.0197498705, 0.0965948403, -0.0003964219, 0.0524866432, 0.0859108046, 0.0610002354, -0.0221600365, -0.0426996164, -0.0020308851, -0.0607135855, 0.0415413864, 0.0438136645, 0.0253041033, 0.0452785157, 0.0107425433, -0.0258492902, 0.0616824701, -0.0031775245, 0.0737616420, -0.0269135553, 0.0543906353, -0.0432752781, -0.0465452075, 0.0664283186, 0.0127643896, 0.0957761407, -0.0189688765, -0.0317955166, -0.0736525282, -0.0672075003, -0.0457374342, 0.0319236331, 0.0251750760, 0.0380534157, 0.0070954193, 0.0260881241, 0.0458916761, -0.0197435580, 0.0517943092, -0.0254462902, -0.0716961697, -0.0103961127, 0.0329538248, 0.0699722916, -0.0076676258, 0.0434545502, -0.0081680585, -0.0046313279, -0.0741935521, 0.0654449239, 0.0561728179, -0.0459928885, -0.0384273417, 0.0071632261, 0.0333482996, 0.0962058678, 0.0702975765, 0.0817316025, 0.0617728457, -0.0448080786, 0.0674300641, 0.0840197951, -0.0682053566, 0.0101799695, 0.0708750784, -0.0199469570, 0.0093520051, 0.0412951298, 0.0636343509, 0.0357540734, -0.0197867174, -0.0190379396, -0.0068948027, -0.0025921750, -0.0120304674, -0.0097754514, -0.0441105217, -0.0166347492, 0.0712504983, -0.0592203252, -0.0062728417, -0.0591808558, 0.0706002340, -0.0502048172, 0.0188923012, 0.0183111373, -0.0007585335, -0.0453400090, 0.0199342351, 0.0204686821, -0.0616768077, 0.0601009391, -0.0418850593, -0.0759204552, -0.0390775762, -0.0827000365, -0.0530022047, -0.0568672679, 0.0232911594, -0.0023639488, -0.0205273889, -0.0838338435, -0.0013873280, 0.0064835744, -0.0160125140, -0.0364207178, -0.1063948050, 0.1012088731, -0.0281142127, -0.0478957221, -0.0206262935, 0.0362814665, -0.0767631158, -0.0345594995, 0.0327775851, -0.0011229195, 0.0375401117, -0.0465638600, -0.0749194473, 0.0317844637, -0.0062844823, 0.0658075288, 0.0553381927, -0.0461031161, 0.0304820221, 0.0957812965, -0.0445806235, 0.0493160561, 0.0407148078, 0.0371078253, -0.0539189428, 0.0753588155, -0.0022182851, 0.0637222081, -0.0044366699, 0.0081758788, -0.0342280976, 0.0051385383, 0.0399946980, 0.0071994415, 0.0263112262, -0.0304435715, -0.0902561694, -0.0159580465, 0.0193264801, 0.0894124210, 0.0010349316, -0.0572837368, 0.0786695704, -0.0321788415, -0.0010023272, 0.0240115505, -0.0117490543, 0.0479123890, -0.0065397555, 0.0267648660, -0.0298806168, 0.0287844781, 0.0867360607, 0.0251598004, -0.0592691377, 0.0226552300, 0.0546564870, 0.0268255435, 0.0114937043, -0.0570980459, -0.0717662945, 0.0218200814, 0.0156325232, 0.0526274219, -0.0649610385, 0.0626715645, 0.0229568407, -0.0140320836, -0.1049663201, -0.0706073120, 0.0002176576, 0.0931418911, -0.0469367467, -0.0169853177, 0.0284257438, 0.0597339571, -0.0409458205, 0.0011489394, 0.0053076856, -0.0148435365, 0.0487372689, 0.0234006476, 0.0665621907, -0.0120818084, -0.0061949515, -0.0224154331, -0.0245970786, 0.0061922930, -0.0746334195, -0.0368786268, -0.0032023066, 0.0489065461, 0.0283703227, -0.0777991712, 0.0602324940, -0.0354521237, 0.0227362886, -0.0270150956, 0.0183667168, -0.0259765182, -0.0319331698, 0.0039079655, 0.0009886657, 0.0914436579, -0.0090241227, -0.0353745371, -0.0507796146, -0.0284554008, 0.0469356515, 0.0637416691, -0.0298985820, 0.0542570241, 0.0606171526, 0.0110014714, -0.0452176780, -0.0907573998, -0.0119510060, -0.0960030928, 0.0164079741, -0.0534068272, -0.0663030222, -0.0598075539, -0.0815433860, 0.0079715857, 0.0285748001, -0.0019467493, -0.0823152065, -0.0573768429, -0.0282761287, 0.0626356229, -0.0672667027, 0.0127993459, -0.0156151941, -0.0552964322, -0.0275029205, 0.0466297381, 0.0506195463, 0.0404369645, 0.0744788796, -0.0567925163, -0.0493366905, 0.0291876253, -0.0059783622, 0.1226444542, 0.0169213861, -0.0188456438, -0.0141238505, 0.0359890796, -0.0348129980, -0.0308477916, 0.0736155808, -0.0053394940, -0.0428125188, 0.0155334435, 0.0938922763, 0.0644358248, -0.0176885761, -0.0193462390, -0.0145423496, 0.0560964718, -0.0114414180, -0.0045910496, -0.0217448901, -0.0634551272, 0.0696005896, 0.0189131275, 0.0289077293, -0.0003681234, 0.0562716685, -0.0153248375, 0.0966303125, -0.0411444083, 0.0468644984, 0.0007832116, -0.0084974170, 0.0164164249, -0.0535085350, 0.0436762311, 0.0161245745, -0.0251794774, 0.0496811718, 0.0007328576, -0.0633312613, 0.0047643827, -0.0305056758, 0.0448597334, -0.0465641841, 0.0054388042, -0.0325038321, 0.0733997002, 0.0512427613, 0.0312274005, 0.0373452120, 0.0357548259, -0.0027440509, -0.0510856286, 0.0438277945, 0.0065015908, -0.0192675963, -0.0264150705, 0.0386379361, -0.0624976754, 0.0597139336, 0.0446047895, 0.0041351644, -0.0016981371, -0.0735762715, 0.0617114119, 0.0401756428, 0.0293500181, 0.0063438443, -0.0062460182, -0.0243141912, 0.0554579273, 0.0554056279, -0.0402164385, -0.0322566330, -0.0405173935, -0.0260386057, 0.0241997968, 0.0086760866, -0.0313562714, 0.0341417640, -0.0257963650, -0.0128933005, 0.0399280675, -0.0709509626, -0.0269392002, 0.0049433564, 0.0778271854, -0.0355284102, 0.0001641773, -0.0612807237, -0.0497860275, -0.0506483465, -0.0226175673, -0.0776687413, 0.0580122545, 0.0486527607, -0.0444215387, -0.0648216307, -0.0271213744, -0.0215625688, -0.0387284942, -0.0280664153, -0.0635780171, -0.0398006998, 0.0078720069, 0.0519767180, -0.0342252739, 0.0644286573, 0.0060894089, -0.0344943665, 0.0056696506, 0.0240205023, -0.0538571700, -0.0551802441, 0.0021004397, -0.0670833141, -0.0154768890, 0.0591448881, 0.0567843840, -0.0811578855, 0.0506191738, -0.0610363297, 0.0118226362, 0.0082303314, -0.0196186639, 0.0561378002, 0.0297874529, -0.0305862874, -0.0195356011, 0.0496146902, -0.0031024774, -0.0402007848, -0.0409388915, -0.0044555264, -0.0016523205, 0.0634602904, 0.0196413826, 0.0538261160, -0.0568092428, -0.0394793898, -0.0799468905, 0.0572291873, -0.0076384465, -0.0570144467, 0.0319637805, 0.0268628672, -0.0433732904, -0.0167862605, 0.0139890108, -0.0086743338, 0.0181197245, 0.0534826219, -0.0345507786, 0.0228542984, -0.0802677199, 0.0649290085, -0.0281332452, 0.0228066910, -0.0584309883, -0.0038231211, -0.0216429867, 0.0265408717, 0.0240275655, -0.0837211683, -0.1120456234, 0.0355537869, -0.0645863637, -0.0731261671, 0.0222774986, -0.0688207224, 0.0539685339, -0.0052258293, -0.0194908306, -0.0398976207, 0.0537687019, -0.0403665081, -0.0677638575, -0.0366579816, 0.0835444704, -0.0648499727, -0.0475111082, -0.0251434706, -0.0159443840, -0.0868712887, 0.0004392050, -0.0169972014, -0.0415387973, 0.0873081610, -0.0121328188, -0.0323249288, 0.0044598216, -0.0027244948, 0.0454201214, -0.0253001880, -0.0787694082, -0.0508045293, 0.0056946776, -0.0536394157, -0.0227077734, 0.0223315712, -0.0285067242, -0.0606686473, -0.0344977565, 0.0166717488, 0.0411322378, -0.0481716581, -0.0369838923, -0.0190499779, 0.0716249719, 0.0499901175, 0.0463176705, -0.0204310603, 0.0238282662, -0.0003002627, 0.0518657304, 0.0281393901, 0.0067774523, 0.0451138280, -0.0390463658, -0.0290048942, -0.0017303604, 0.0289196111, 0.0257726349, 0.0512703508, 0.0793861076, 0.0629025251, -0.0026431882, 0.0424867831, 0.0151545098, -0.0061736717, 0.0240605026, 0.0075202701, 0.0440486148, -0.0169609599, -0.0301669873, -0.0716061294, 0.0516949743, -0.0244404376, -0.0470928699, 0.0332459472, 0.0030480728, -0.0893606618, -0.0465832911, 0.0143807800, -0.0156045808, -0.0117963133, 0.0498341024, 0.0235137064, -0.0168720223, -0.0126798321, -0.0551907867, -0.0343735516, 0.0625323057, 0.0599447004, -0.0060345810, 0.0491560213, 0.0832319260, 0.0282240529, -0.0545338802, -0.0444462225, -0.0405358039, 0.0326299034, -0.0289971866, -0.0625088736, 0.0776973218, 0.0785394162, 0.0287329443, 0.0578529648, 0.0552945696, -0.0900901332, -0.0730018839, 0.0426560752, -0.0388334841, 0.0120889861, 0.0349455886, 0.0441083610, 0.0064733233, -0.0658128187, -0.0665467754, 0.0172567703, -0.0063654385, 0.0017584539, 0.0144622158, 0.0279693529, -0.0797083303, 0.0455161408, -0.0574818477, -0.0461441614, 0.0349719971, 0.0233307090, 0.0099699516, -0.0562647246, -0.0559514984, -0.0748696700, -0.0549282804, -0.0381846651, -0.0143694775, 0.0229319874, 0.0430243425, -0.0205779690, -0.0277632996, -0.0115015144, 0.0406034701, -0.1151034683, 0.0116514359, -0.0055919131, -0.0039455276, -0.0068102321, -0.0153606553, -0.0618917346, 0.0037842954, -0.0166094415, 0.0570649467, -0.0120145744, 0.0074381642, -0.0200157985, 0.0517565832, -0.0118015110, 0.0444747284, 0.0294941645, 0.0855800137, -0.0061254743, 0.0007004396, -0.0435898490, 0.0375776067, -0.1081580222, 0.0210158993, 0.0438828394, 0.0686403140, -0.0585585013, 0.0577183589, 0.0021173747, -0.0323866233, 0.0506268032, -0.0789898932, 0.0400182977, 0.0083726076, -0.0492895469, 0.0292983707, -0.0483628735, -0.0209169965, -0.0458206683, 0.0456053317, 0.0444228835, 0.0150542893, -0.0087737134, 0.0230473988, -0.0501460768, 0.0005022881, -0.0017725208, 0.0211887099, -0.0195331164, 0.0183765516, 0.0566647574, 0.0189658664, 0.0185703635, -0.0993463621, -0.0121568069, 0.0287257079, -0.0337705463, 0.0070467605, 0.0605997108, -0.0651128814, -0.0073230644, -0.0311357230, 0.0323691107, 0.0703997836, -0.1160251200, 0.0418186374, -0.0244337115, 0.0278771892, -0.1183264777, -0.0092446506, -0.0938868076, -0.0390034541, -0.0876488835, -0.0189396553, 0.0180262551, -0.0755669698, 0.0025271028, -0.0375626869, -0.0463152342, -0.0356843062, 0.0562564954, 0.1033421233, 0.0020151490, -0.1032130718, 0.0645255968, 0.0995338634, -0.0037406329, 0.0991164595, 0.0639508814, 0.1055193767, -0.0242369864, -0.0450691953, 0.0512775294, 0.0693120360, -0.0121773873, -0.0867283866, 0.0229901597, 0.0038033263, -0.0334003307, 0.0608622245, 0.0507236123, 0.0270470306, -0.0582539923, -0.0283616800, 0.0728980228, 0.0657515228, -0.0163774136, 0.0331876613, -0.0257364586, -0.0359945484, -0.0121419253, -0.0435294062, 0.0040585347, 0.0889371336, 0.0204126108, -0.0269457810, 0.0298788957, -0.0092660217, 0.0339977294, -0.0381012037, -0.0627162308, 0.0027912657, 0.0595539771, 0.0536214486, 0.0092524132, -0.0249140058, -0.0121573424, -0.0003617262, 0.0025976265, 0.0309676193, -0.0557135902, 0.0875273719, -0.0816382393, -0.0422593430, -0.0543445349, -0.0372168943, -0.0391506851, -0.0135552883, 0.0070566526, -0.0332855023, -0.0337473601, -0.0076442836, 0.0018395208, -0.0451584309, 0.0942496806, 0.0831557363, 0.0085946042, -0.0198948942, -0.0260928441, 0.0933021978, -0.0806920603, 0.0396520123, 0.0253647957, 0.0504753292, 0.0019606119, 0.0317560285, 0.0554702692, -0.0325361490, -0.0328861251, -0.0041112639, -0.0443860739, -0.0739871264, 0.0553165302, -0.0488720275, -0.0415764935, 0.0585224070, -0.0189760812, -0.0739389732, 0.0263562072, 0.0987116843, 0.0755311325, -0.0357203931, -0.0344034843, 0.0397265814, -0.0552074090, 0.0475397557, -0.0361847952, 0.0254872702, 0.0896944106, -0.0745362267, -0.0998036265, -0.1037301198, 0.0536129102, -0.0769953504, 0.0048413938, -0.0678422675, 0.0254111718, 0.0763652772, 0.0603582039, 0.0244188178, 0.0279652886, 0.0142910080, -0.0906085819, 0.0198264793, -0.0237883516, -0.0238585286, -0.0384286344, -0.0615741462, 0.0360753424, 0.0069441223, -0.0268511791, 0.0601128154, 0.0588029921, 0.0097307349, -0.0119650112, 0.0476499014, 0.0154819712, 0.0233038012, 0.0244084671, 0.0356411710, 0.0387159176, -0.0361475460, 0.0074047293, 0.0302998498, -0.0716174096, 0.0711327121, 0.0314938724, 0.0937581137, 0.0419657677, -0.0146288658, 0.0172747634, 0.0286979228, -0.0260035396, -0.0282586068, 0.0231436063, 0.0615796484, 0.0116691655, 0.0233880766, -0.0191726200, -0.0082313865, -0.0173041616, 0.0398858450, 0.0446860008, 0.0174993221, 0.0772526935, 0.0091979252, 0.0142144393, -0.0173998494, 0.0540598743, 0.0473531596, 0.0733011886, 0.0615189113, 0.0917040557, 0.0103030493, -0.0451930426, -0.0536901541, 0.0117571596, -0.0891995579, -0.0631460547, -0.0803925246, 0.0544454418, 0.0678551570, -0.0933112875, -0.0620151013, 0.0803250298, 0.0782886222, -0.0108843055, -0.0140028158, 0.0151542742, 0.0206497107, -0.0172840022, -0.1094982401, -0.0926608145, -0.0083406782, -0.0501251146, 0.0770401880, 0.0790080801, -0.0236307345, 0.0953937396, 0.0031055075, -0.0847920775, 0.0208867434, -0.0163942166, -0.0021914958, 0.0445573442, -0.0866884217, -0.0109410575, 0.0594107546, -0.0518854968, 0.0226890873, 0.0449074581, 0.1028562263, 0.0015351842, -0.0754374191, 0.0768995509, 0.0488514937, 0.0357872769, -0.0091657499, 0.0253496282, -0.0032696198, -0.0011709546, -0.0550900772, -0.0769155696, 0.0628062189, -0.0247761793, -0.0643558875, 0.0071857953, 0.0274170656, -0.0151697993, -0.1069595888, -0.0152229043, -0.0476530343, 0.0597469024, -0.0179517586, -0.0414773859, 0.0206225403, 0.0215428732, 0.0154381059, -0.0396339297, -0.0101301167, 0.0141915893, -0.0544112660, -0.0279835612, 0.0311371330, 0.0536000021, 0.0629816651, -0.0177366193, 0.0242073350, 0.0625962391, 0.0738112032, 0.0105517730, -0.0370168053, 0.0114054726, 0.0447655097, 0.0235663932, 0.0006198472, 0.0250794254, 0.0256882049, 0.0323932357, -0.0380865745, -0.0678390115, 0.0612547286, -0.0274797846, -0.0243564602, -0.0133794369, 0.0094484538, -0.0519391038, -0.0145099023, -0.0178813282, -0.0147568882, 0.0147735113, 0.0294902883, 0.0517181866, -0.0471896417, 0.0326549597, 0.0352636129, 0.0148209780, -0.0272656810, -0.0108975042, 0.0028276618, -0.0476664603, 0.0297483671, -0.0201025791, -0.0402087569, 0.0067595080, -0.0762566552, -0.0435068794, 0.0618708804, 0.0291679595, -0.0617858283, 0.0147110457, -0.0335164331, 0.0233477894, -0.0751584843, 0.0706902519, 0.0085599357, -0.0051233694, -0.0285233520, 0.0191687793, -0.0733328685, -0.0550605059, 0.0397120714, -0.0151711358, -0.0635771677, -0.0697821304, -0.0598296486, -0.0070467810, 0.0319790244, -0.0365222618, 0.0531832613, -0.0292198732, 0.0488124117, 0.0323787890, -0.0406921245, 0.0107260561, -0.0068614813, 0.0616642945, -0.0002093026, 0.0636742786, -0.0477575548, -0.0043761535, -0.0316688754, 0.0421498381, -0.0291576814, -0.0282555558, -0.0191919133, 0.0289164148, -0.0309229121, 0.0188696589, 0.0175141040, -0.0643002465, -0.0543158948, 0.0403808542, -0.0433254428, 0.0200882070, 0.0595940463, -0.0427272394, -0.0686693639, -0.0365709811, 0.0212928709, -0.0270459801, 0.0369971432, 0.0323768333, -0.0170026571, 0.0315777548, 0.0378202908, 0.0440340824, 0.0033021290, 0.0323440768, -0.0001944105, -0.0718784779, -0.0372351483, 0.0869314298, 0.0493839160, -0.0464409739, -0.0102806771, -0.0580372475, 0.0696607977, -0.0267323349, -0.0416253880, 0.0307268817, 0.0776371807, 0.0448791198, -0.0046826168, -0.0648063868, -0.0541099831, 0.0027036322, 0.0676775873, 0.0503043234, 0.0088259997, 0.0271179397, 0.0687584430, 0.0568736903, -0.0532992519, 0.0710405931, -0.0624531098, 0.0100680469, 0.0197358932, 0.0041164737, 0.0030946103, 0.0541005880, -0.0363251641, 0.0113032218, -0.0159126241, 0.0619222224, -0.0035743685, 0.0039770184, 0.0077526672, 0.0095280586, 0.0167652126, 0.0231891815, 0.0299905315, 0.0593283288, -0.0751954764, 0.0581127442, -0.0403020866, 0.0542989857, -0.0599515773, 0.0370103680, -0.0131980395, -0.0476514362, 0.0172669329, -0.0448295437, -0.0713473037, 0.0244526342, 0.0175093748, -0.0306930877, -0.0274022855, -0.0363872647, -0.0596214756, -0.0571957752, 0.0422206335, -0.0407565944, 0.0188904461, -0.0140750324, 0.0590236299, 0.0213845130, -0.0563003272, -0.0403382964, -0.0596790053, 0.0112644574, -0.0300057102, 0.0099336822, -0.0701449364, 0.0386650190, -0.0626311526, 0.0080737481, 0.0302765984, -0.0325474367, 0.0278334748, 0.0250875298, -0.0247568693, 0.0622900873, 0.0461985469, -0.0383494720, 0.0494252630, 0.0122361928, -0.0033039921, 0.0101285689, -0.0718241930, 0.0082873069, -0.0169918649, -0.0308785699, -0.0696643367, -0.0537475869, -0.0071938946, 0.0086593768, -0.0568196140, 0.0567248501, -0.0088895448, 0.0134874890, 0.0027542633, -0.0073445598, -0.0688189715, 0.0147133265, 0.0140217859, 0.0353311040, -0.0243610106, 0.0359043330, -0.0341089666, -0.0295811575, 0.0264326893, -0.0548599586, 0.0500184633, 0.0322307758, -0.0641303360, 0.0292865168, 0.0549224541, -0.0457300246, 0.0366399959, -0.0222007632, -0.0447319485, -0.0289420206, -0.0066034677, -0.0446408577, 0.0079737138, 0.0457917601, 0.0220745597, -0.0218973737, -0.0530114286, 0.0299746599, -0.0131421387, -0.0214180574, 0.0051856898, 0.0505464524, 0.0276787318, -0.0165507030, 0.0193254612, -0.0257585756, 0.0227305200, 0.0179280993, 0.0366534479, 0.0594729371, 0.0321619324, 0.0146508608, 0.0005936048, -0.0464964546, 0.0711317584, 0.0067791096, 0.0651612133, 0.0238731820, 0.0358973518, -0.0320143960, -0.0574623980, -0.0007670097, -0.0228592996, 0.0297288038, -0.0567808039, -0.0392208956, -0.0411709026, -0.0521797165, 0.0292269476, -0.0479491837, -0.0604662448, 0.0287700891, -0.0112570133, -0.0297557432, 0.0327400342, 0.0592320040, 0.0608724691, -0.0138428733, -0.0698260814, 0.0137394173, -0.0462656245, -0.0411010496, -0.0019898578, 0.0653793141, 0.0509725399, -0.0189189557, -0.0378520526, 0.0109038688, -0.0587774180, -0.0634933934, 0.0115003409, -0.0413265117, -0.0461275466, -0.0703785270, 0.0099590626, -0.0297836885, -0.0599811412, 0.0163925383, 0.0234089959, 0.0387087613, 0.0173536390, -0.0047537801, 0.0137604577, 0.0575727075, -0.0566288568, 0.0753017142, 0.0678789318, -0.0459268540, -0.0063286563, -0.0590430759, -0.0669895187, -0.0640038475, 0.0266660042, 0.0524877422, -0.0381537788, -0.0014972412, 0.0763804317, 0.0380073935, -0.0089972317, -0.0389135778, 0.0569197871, 0.0500381887, -0.0215368215, -0.0226441529, -0.0004896410, 0.0745535865, 0.0260502268, -0.0045979377, 0.0158109646, 0.0249199737, 0.0045708641, -0.0530936271, 0.0019460232, 0.0580774061, 0.0155194560, -0.0475963391, 0.0599802732, 0.0175277237, -0.0268830042, 0.0152740646, 0.0101029361, -0.0182595979, 0.0531246103, -0.0090068774, 0.0471172258, -0.0735412687, -0.0260684993, 0.0404625013, -0.0280126669, -0.0118921185, 0.0424021147, -0.0626592413, -0.0680251643, -0.0471088402, 0.0660278499, -0.0245571788, -0.0541878119, 0.0716988295, 0.0195661727, 0.0192787442, -0.0307223685, 0.0327439681, -0.0809560642, 0.0144029008, 0.0477010682, 0.0074502863, -0.0404800288, -0.0344648063, -0.0410473086, 0.0733347386, -0.0019609865, -0.0417409353, -0.0425040126, -0.0247072261, -0.0187112708, -0.0296721831, -0.0686856061, -0.0610561222, 0.0419608504, -0.0127546275, -0.0432933569, 0.0415162370, -0.0692969188, 0.0631769449, 0.0109545719, 0.0162959304, -0.0072004525, -0.0601576343, 0.0082548214, 0.0233645495, 0.0212562792, 0.0550000817, 0.0549298488, -0.0383750424, 0.0473636314, -0.0495851412, 0.0417214185, 0.0283325333, 0.0232170522, -0.0124385180, 0.0396595486, 0.0123084942, 0.0709386393, 0.0320646875, 0.0486601330, -0.0428652242, -0.0304060578, 0.0532241203, 0.0039045911, 0.0255848132, -0.0371305607, -0.0033162022, -0.0300258752, 0.0322509930, -0.0476118810, 0.0079676248, -0.0741652548, 0.0003335064, -0.0609604679, 0.0213972405, 0.0366740376, 0.0538448691, -0.0568985566, -0.0643462017, -0.0479766503, -0.0244141258, -0.0904433578, 0.0112311943, 0.0313064903, 0.0717755556, 0.0795105249, 0.0358702615, -0.0355032422, -0.0041578799, 0.0340005122, -0.0358324982, 0.0280984547, -0.0154217957, -0.0500135571, -0.0449565947, -0.0618892014, 0.0094889263, 0.0942390412, 0.0527105518, 0.0538747050, -0.0392314866, 0.0247742198, 0.0042168475, -0.0079081180, -0.0320920050, 0.0207573473, -0.0741789266, 0.0384040438, -0.0392736010, -0.0165386815, 0.0260903034, -0.0553208701, 0.0667112321, 0.0612650476, -0.0707951337, -0.0051972801, -0.0017531121, 0.0373758189, -0.0323133506, -0.0273483600, -0.0002917554, 0.0181702897, 0.0554131418, -0.0057308851, 0.0426260307, 0.0247306079, 0.0570616834, -0.0410054885, 0.0042949528, -0.0035891528, -0.0619277321, 0.0067861918, -0.0357321016, 0.0095033133, -0.0001420544, 0.0015859120, -0.0021523733, -0.0539003164, -0.0036002211, -0.0613797121, -0.0516277291, 0.0475952439, 0.0451666042, -0.0338882916, 0.0580453910, -0.0851951391, -0.0041864454, 0.0480976105, 0.0737508535, -0.0116720693, -0.0033586088, 0.0480506532, -0.0383269340, 0.0090691689, -0.0020285167, 0.0082759652, 0.0208335593, 0.0544189587, -0.0523844808, -0.0532639511, 0.0164839067, -0.0167989805, 0.0678778812, 0.0059262994, 0.0372528099, 0.0017044772, -0.0095544346, 0.0544022135, -0.0028511959, 0.0654985532, 0.0097914748, 0.0438833572, 0.0409311578, 0.0075245495, 0.0296980701, -0.0076123257, -0.0251172576, 0.0502856672, -0.0496863537, -0.0694362596, -0.0579366349, -0.0292935632, 0.0522447377, 0.0685288459, 0.0606950298, -0.0386849530, 0.0467902534, 0.0546209253, 0.0597490147, -0.0422741175, -0.0719051436, -0.0480694324, 0.0341600180, -0.0645156056, 0.0536388978, 0.0144457333, 0.0748717263, 0.0124299740, -0.0484963059, 0.0205725804, 0.0580291189, -0.0007965973, 0.0096723279, 0.0376678482, 0.0498667844, 0.0648816377, -0.0110834697, 0.0193004739, 0.0402813852, -0.0713969991, 0.0137851909, -0.0046168966, 0.0268372651, 0.0395410322, -0.0003980443, 0.0633846447, 0.0430710465, 0.0156164393, -0.0256370138, 0.0442857668, -0.0039228783, -0.0253351312, 0.0570808165, 0.0655795410, 0.0142491823, 0.0255573988, -0.0368840210, -0.0493233427, -0.0090257926, -0.0874535218, 0.0347749032, -0.0009877292, -0.0148154534, 0.0377420895, 0.0215898119, -0.0695223585, 0.0310619120, 0.0318889767, -0.1020467579, 0.0227848571, -0.0788115114, 0.0093528116, -0.0939139202, 0.0342965126, -0.1012016088, -0.0927518755, -0.0466749184, 0.0778235197, 0.0823659077, -0.0731290057, 0.0344368443, 0.0426076762, -0.0730093494, -0.0547220558, 0.0567011535, 0.0233353339, 0.0105352215, -0.0451295264, -0.0619631782, 0.0518416427, -0.0555229560, 0.0890366957, -0.0531955287, -0.0034456465, -0.0023629253, 0.0096515873, 0.0917379186, 0.0371852629, 0.0724456087, -0.0213428475, -0.0607813038, 0.0285817049, -0.0088558532, 0.0046932017, -0.0143056335, 0.0492846332, -0.0054857712, -0.0647702143, 0.0010801924, 0.0593514033, -0.0310477447, 0.0065802177, 0.0562562644, 0.0598572828, -0.0408782475, -0.0250454526, -0.0419601090, -0.0442807525, 0.0622833408, -0.0134281162, -0.0091231260, -0.0604817979, 0.0791994110, -0.0846213102, -0.0587432384, -0.0375607200, 0.0291220006, 0.0411191769, 0.0097410260, -0.0310980678, 0.0603565089, 0.0307336617, -0.0481586605, 0.0152801033, 0.0458229966, -0.0180737246, 0.0273087434, -0.0082340129, -0.0526835732, 0.0405930057, 0.0009083769, -0.0122176455, -0.0169562846, 0.0030160828, 0.0370969847, -0.1067661345, 0.0503140762, -0.0515922643, 0.0023769627, -0.0257198103, -0.0363271013, -0.0687972903, -0.0314979032, 0.0098077068, -0.0005892609, 0.0217852201, 0.0745847598, -0.0255639385, -0.0698538646, -0.0793301240, 0.0792105347, 0.0176161826, 0.0214336440, -0.0697279721, -0.0164889749, 0.0845641196, -0.0033712478, -0.0381009728, -0.0469129384, -0.0398187041, -0.0672406331, -0.0411565304, 0.0189184807, 0.0296459235, -0.0815352872, -0.0273844115, 0.0198766328, 0.0365474038, 0.0031993568, -0.0322550982, 0.0293000601, 0.0573459417, -0.0157338176, 0.0639503822, -0.0492338426, 0.0034602433, 0.0164854005, -0.0021183088, 0.0149563365, 0.0394687727, -0.0228134934, 0.0603927933, 0.0280072857, 0.0295020696, 0.0203928556, -0.0566445515, -0.0604238138, -0.0093738008, 0.0753820911, -0.0219086744, -0.0133836893, 0.0662266165, 0.0546612367, -0.0790202245, 0.0208738502, 0.0155725740, 0.0391415656, 0.0457860790, -0.0244211461, 0.0136794280, 0.0526322946, -0.0113274446, 0.0401922204, -0.0013769569, 0.0074757454, 0.0537360683, -0.0486239307, 0.0234977528, 0.0109634604, 0.0028207696, -0.0310945082, -0.0206715129, 0.0131948246, -0.0586418211, -0.0485490225, -0.0714114979, -0.0024099201, -0.0037036010, -0.0483776443, -0.0142960595, -0.0240851287, -0.0762825310, 0.0269505959, 0.0024388419, 0.0394708589, -0.0190766174, -0.0093947072, 0.0622489117, -0.0641122237, -0.0615996644, -0.0482556559, 0.0914462507, 0.0517869405, 0.0781307593, 0.0463010706, -0.0508885086, -0.0098756552, 0.0763468221, -0.0309627429, -0.0521834828, -0.0011535644, 0.0097093722, -0.0259576011, -0.0299519897, -0.0705845580, -0.0526144765, 0.0337183550, -0.0833383128, -0.0038087680, 0.0497936308, 0.0071918014, -0.0534328297, -0.0638329089, 0.0367844403, -0.0998516232, -0.0454306863, -0.0747014359, -0.0078316266, -0.0862234607, -0.0087841721, 0.0522589758, -0.0499339998, 0.0539634563, 0.0402866304, -0.0013824935, 0.0396265350, 0.0283163115, 0.0805378929, -0.0281810835, 0.0123063046, -0.0371008217, 0.0708903223, 0.0182857513, -0.0051231124, 0.0228307359, -0.0009543765, -0.0028648630, 0.0105505800, 0.0371693708, 0.0587175414, 0.0531539954, -0.0224409271, -0.0223358013, 0.0243049506, 0.0265923422, 0.0198502224, -0.0237038042, -0.0163918901, 0.0328957550, -0.0149871968, -0.0422704481, 0.0687669143, -0.0082539571, 0.0356434137, 0.0422248282, -0.0456983410, -0.0188623946, 0.0664187893, 0.0163244065, 0.0003774224, 0.0702315420, 0.0809050426, 0.0336603336, -0.0620766468, 0.0187476277, -0.0141112059, -0.0749257207, 0.0545017309, -0.0763943493, 0.0207625702, -0.0257741585, -0.0783747211, -0.0330036022, 0.0435932726, 0.0320215635, 0.0193251148, 0.0362170897, 0.0490095355, -0.0419576466, 0.0444000736, 0.0488029830, 0.0215398259, -0.0646469519, -0.0644279495, 0.0129147554, -0.0221982747, -0.0201843735, -0.0058337082, -0.0261983946, 0.0324817039, 0.0231626164, 0.0151081113, 0.0309796538, -0.0658661053, -0.0293275956, 0.0705577210, 0.0156570263, 0.0664924532, -0.0436584651, 0.0249287412, -0.0451667979, -0.0274038464, 0.0167843997, -0.0632788241, -0.0281233601, -0.0512016304, -0.0705643147, -0.0125813205, -0.0641981810, -0.0559297726, -0.0016767643, -0.0644501671, 0.0581899211, -0.0785540417, 0.0534869023, -0.0047897482, 0.0020169711, -0.0286329072, -0.0255240444, 0.0519070514, -0.0501483120, 0.0025110908, -0.0155338086, 0.0507183224, -0.0074917162, 0.0270500556, 0.0432223119, 0.0702102855, -0.0261455644, 0.0816132352, 0.0018296562, -0.0299085584, -0.0743146762, -0.0623135827, -0.0728002861, -0.0404356718, -0.0527846701, -0.0557254255, -0.0455942042, -0.0613046251, 0.0099997818, 0.0005114508, 0.0715997890, 0.0120065771, 0.0416739546, -0.0683189034, -0.0441328548, -0.0339749083, 0.0566535071, 0.0064841998, 0.0477644317, -0.0030115803, 0.0445851982, 0.0393611565, -0.0289395470, 0.0220039859, -0.0174891558, -0.0221856292, 0.0383933187, -0.0679172501, -0.0381634794, 0.0581741557, -0.0661354959, 0.0483990796, 0.0334505178, 0.0194264408, -0.0119724358, 0.0044094683, -0.0228152312, 0.0354340672, 0.0690134168, -0.0740547702, 0.0092448741, -0.0295958500, -0.0182821453, 0.0416522697, 0.0670387149, 0.0137892505, -0.0418052226, -0.0401623212, -0.0425181352, 0.0158405807, -0.0625654012, -0.0099518578, 0.0204045121, -0.0211817138, 0.0341156572, -0.0472932830, 0.0545978211, -0.0357823707, -0.1045314372, -0.1045264974, -0.0368869752, 0.0135596786, -0.0656344518, -0.0486951806, -0.0706180334, 0.0314405262, 0.0436190739, 0.0412867293, -0.0450481810, -0.0115157356, 0.0294011962, 0.0624170788, -0.0159870163, 0.0150677869, -0.1049791127, -0.0954144299, -0.0411318652, 0.0139368903, -0.0562358052, 0.0275456309, -0.0295250248, -0.0005073495, -0.0506617129, -0.0471016355, -0.0158675630, -0.0620204918, 0.0518644005, 0.0210737754, 0.0690175891, -0.0665167049, 0.0134666255, 0.0962967724, 0.0281388033, 0.0693555847, 0.0712299719, 0.0583836772, 0.0502649657, -0.0217041411, -0.0020665517, 0.0657128096, -0.0003813434, 0.0135997068, -0.0599197187, -0.0614346787, 0.0217080191, -0.0498532094, 0.0067445813, 0.0188007671, 0.0014181678, -0.0521457195, -0.0051697041, -0.0137362257, -0.0430314243, -0.0658264384, -0.0103572896, 0.0102541372, 0.0342797302, 0.0408728942, -0.0273132082, -0.0495174900, 0.0939585716, 0.0717876554, 0.0162212532, 0.0236915313, 0.0623971894, -0.0177847445, -0.0250925682, -0.0031289107, 0.0266960803, 0.0372276977, -0.0086232973, 0.0230848193, -0.0287177209, 0.0253340099, -0.0332523473, -0.0285013542, -0.0771820694, 0.0632540584, -0.0169637930, 0.0313417204, -0.0227685999, 0.0627646074, -0.0270131472, -0.0289786085, 0.0511847883, -0.0370540880, -0.0054626996, -0.0550943725, -0.0686121061, -0.0091678407, -0.0168977417, 0.0667773113, 0.0749951378, -0.0437529981, -0.0243018866, 0.0120347599, 0.0360386446, 0.0652685463, 0.0434446596, -0.0186247025, -0.0727321804, 0.0511123948, -0.0248707458, 0.0413607620, -0.0279084165, -0.0870221183, 0.0672054738, -0.0385513343, -0.0626472756, -0.0158732031, -0.0439684242, 0.0730322599, -0.0499275029, 0.0296716001, -0.0366535671, -0.0161240809, 0.0551459417, 0.0181883145, 0.0390573740, -0.0644338131, -0.0493987054, -0.0167745743, -0.0125662712, 0.0039180061, -0.0220261738, 0.0689559877, 0.0096391952, 0.0589240082, -0.0552265346, -0.0119643183, -0.0363807492, -0.0059083840, 0.0551867187, -0.0056477198, 0.0090658339, -0.0010596259, 0.0332427435, 0.0526640080, 0.0293912906, 0.0038641943, 0.0196034834, 0.0347075611, 0.0408040583, 0.0578128323, 0.0180427767, -0.0234875400, -0.0364416167, -0.0192499086, 0.0542349331, 0.0213266034, 0.0172071196, 0.0100033684, -0.0022699456, -0.0922916979, 0.0419963486, 0.0187021457, -0.0449426509, 0.0455298536, 0.0026839024, 0.0115636010, -0.0333875120, 0.0119981309, 0.0014955101, -0.0541679673, 0.0635535270, -0.0188081954, 0.0409401283, 0.0244958661, 0.0358103402, -0.0503087230, 0.0447671562, -0.0341078974, -0.0511279888, 0.0661136508, -0.0055789291, -0.0185711812, -0.0324808173, 0.0030317011, -0.0097700674, -0.0828419104, -0.0170027744, -0.0219985917, 0.0561786629, 0.0217661280, -0.0360140614, -0.0187959876, 0.0349837281, 0.0251526739, -0.0239949040, 0.0300560128, -0.0432721078, 0.0278171115, 0.0516284928, 0.0555919521, -0.0199322011, -0.0691953450, -0.0025706084, 0.0564975850, 0.0343588367, -0.0576794222, 0.0223249998, 0.0147390403, 0.0428429469, 0.0328074917, -0.0195589866, 0.0028025031, -0.0137201454, -0.0090164039, -0.0448367856, 0.0225609709, -0.0241145585, 0.0478965119, 0.0154432245, 0.0158158615, 0.0559126176, -0.0418215990, -0.0500584543, -0.0295528844, 0.0453597717, -0.0317215882, 0.0097100977, -0.0502481051, -0.0190669689, 0.0392743647, 0.0745979026, 0.0015736795, 0.0211895127, 0.0644149482, 0.0173285753, 0.0168421380, 0.0095138066, 0.0726749301, 0.0166594442, -0.0255003404, -0.0797626972, 0.0129074277, 0.0526556559, 0.0560363047, -0.0455672257, -0.0080574425, 0.0372404680, -0.0305919331, -0.0282013100, -0.0217576399, -0.0446347445, -0.0278041605, 0.0208334960, 0.0510157496, 0.0458417982, -0.0132319434, -0.0533623397, 0.0340861008, 0.0292270593, -0.0512911975, -0.0619661994, 0.0254222453, -0.0307518560, -0.0100246929, -0.0349614322, -0.0344397426, 0.0397855267, 0.0363968387, -0.0306802392, -0.0732235759, -0.0601428971, 0.0728498250, 0.0124948481, -0.0218126457, -0.0191879272, 0.0601060688, 0.0455414243, -0.0507243238, -0.0057604066, 0.0026963770, -0.0122286733, 0.0102660060, 0.0009458851, 0.0781253576, 0.0534181707, -0.0044168201, 0.0251290780, 0.0404161885, 0.0437956341, 0.0081783598, 0.0694449097, 0.0635624304, 0.0006048490, -0.0323024392, -0.0466222279, 0.0651390031, -0.0849601999, -0.0630298853, -0.0335274562, 0.0253386684, -0.0072717094, -0.0102698803, 0.0454675034, -0.0653875098, -0.0266958158, 0.0609301701, -0.0408961140, 0.0587482117, -0.0181488190, 0.0737175718, 0.0121423192, 0.0545648634, -0.0491069481, 0.0458553359, -0.0510254800, -0.0405267067, -0.0373892859, 0.0522417724, -0.0456455313, -0.0515770391, -0.0802961662, 0.0531602129, -0.0127174081, 0.0489290692, -0.0730265453, -0.0157264341, 0.0307806637, -0.0117923664, -0.0488299616, 0.0400702208, 0.0515395515, -0.0393138379, -0.0073451768, -0.0000391132, -0.0228108149, -0.0233760010, -0.0477703251, -0.0332877226, 0.0357829779, 0.0782228783, 0.0245192572, 0.0242466182, -0.0264490470, -0.0494785234, -0.0675125495, 0.0556260794, 0.0230519436, 0.0011895148, -0.0530675426, 0.0090926150, -0.0657105967, 0.0895057470, -0.0330490135, 0.0662499219, 0.0710859597, -0.0908656791, -0.0381706990, 0.0697102770, -0.0121519109, 0.0456944257, 0.0457311049, -0.0095932595, 0.0313134454, 0.0498499274, -0.0045835022, 0.0427520387, -0.0085669262, -0.0365467668, -0.0100195277, 0.0398304239, -0.0163016319, -0.0608392060, 0.0319182537, 0.0482821390, -0.0164819285, 0.0315022953, -0.0322797671, 0.0516343415, 0.0769613683, -0.0593288951, -0.0548602976, 0.0783415586, 0.0059254975, 0.0749281943, 0.0311298054, 0.0865543187, -0.0601777770, 0.0486488417, -0.0672423616, 0.0660079494, -0.0101099098, -0.0487354770, 0.0498547144, -0.0280977916, -0.0287177674, -0.0690247938, 0.0083985459, 0.0305787902, 0.0396429412, -0.0367633477, 0.0440526158, -0.0500965863, 0.0061703240, 0.0128466738, 0.0619974695, 0.0661570579, 0.0281781051, 0.0076903999, -0.0205933787, 0.0650381595, -0.0667436644, -0.0008384977, 0.0249014962, 0.0782064497, -0.0531869121, -0.0207821727, -0.0286805686, -0.0350023918, -0.0188378729, -0.0559526198, 0.0414827019, 0.0300386809, -0.0561409071, -0.0541816615, -0.0582162179, -0.0237971507, 0.0603234805, 0.0250443239, 0.0704767033, -0.0223023742, -0.0399169363, -0.0429953597, -0.0055331858, -0.0157098249, 0.0573437102, -0.0666947141, -0.0070478022, -0.0313285850, 0.0441015325, -0.0163266156, 0.0514439084, 0.0274904799, -0.0059771342, -0.0415992178, 0.0641856119, 0.0013148166, -0.0306438785, 0.0451253541, -0.0648681074, -0.0525881462, 0.0682886913, -0.0580535196, -0.0749697685, -0.0050333254, 0.0642567798, -0.0518946722, 0.0561523587, -0.0224836860, -0.0488854088, 0.0510929376, -0.0048509254, 0.0356821530, 0.0328287482, -0.0062953033, -0.0611575805, 0.0633101463, -0.0072576134, 0.0313860029, 0.0437838472, -0.0329407528, 0.0470754988, -0.0495295897, 0.0455577187, 0.0207412988, 0.0442248061, -0.0107342461, 0.0632091463, -0.0053512990, -0.0233653914, -0.0290077515, -0.0495289713, 0.0374293774, -0.0658710897, -0.0161432866, 0.0706017390, -0.0231944229, -0.0575928017, -0.0382031277, -0.0265727732, 0.0429340787, -0.0369713604, -0.0120959729, -0.0098436289, 0.0647384897, 0.0099465484, -0.0022604140, 0.0121725015, 0.0407254472, 0.0473162793, -0.0573349707, 0.0419355407, -0.0253015496, 0.0245110765, -0.0105652129, 0.0623309799, -0.0602692775, 0.0163061824, -0.0501934439, 0.0678228736, 0.0320642143, 0.0474801138, -0.0368596949, -0.0209130906, -0.0360119417, 0.0087530110, -0.0219985079, -0.0135940360, -0.0944619998, 0.0413504504, -0.0386731401, -0.0475670733, 0.0265220273, -0.0352987722, -0.0552641265, 0.0520976856, -0.0051433695, 0.0714449808, -0.0140761640, -0.0323582478, -0.0732665136, -0.0352809168, 0.0006842180, -0.0004354196, -0.0545698889, -0.0335792378, 0.0395965688, -0.0458267331, 0.0398373343, 0.0695634782, -0.0534091182, 0.0089727938, -0.0798938945, 0.0084471237, -0.0073793251, -0.0112945717, -0.0002232449, 0.0283461995, -0.0196278151, -0.0552899167, 0.0052576712, -0.0249745753, 0.0857666209, 0.0757133141, 0.0039778114, -0.0065887435, 0.0541781820, -0.0304939058, 0.0598584004, -0.0446266308, -0.0730339736, 0.0178146362, 0.0445898324, -0.0097732889, 0.0203050710, -0.0661642253, -0.0245724712, 0.0406826250, 0.0041555390, 0.0489743575, 0.0583567768, -0.0598649643, -0.0233228188, -0.0340214260, -0.0388883129, -0.0296253767, -0.0259282943, -0.0394208319, -0.0297698081, -0.0378437266, 0.0610168017, -0.0444703661, -0.0269938298, -0.0806432664, -0.0466125496, -0.0774016082, -0.0212552156, -0.0600567386, -0.0461877361, 0.0000670376, 0.0425061285, 0.0169483423, 0.0117151868, -0.0665359795, -0.0056421850, -0.0541104041, -0.0234171934, 0.0445465446, 0.0514422916, 0.0533135682, -0.0363666713, 0.0015613290, -0.0157538578, 0.0488350168, 0.0617216192, 0.0549499355, -0.0259827040, -0.0121196546, 0.0144583341, 0.0410132855, -0.0579442605, -0.0066301874, 0.0639690682, 0.0629340857, 0.0191913098, -0.0547973551, 0.0599855632, -0.0210699588, 0.0543415323, 0.0393656082, -0.0441299193, 0.0239682309, 0.0330081359, -0.0124565791, -0.0199267510, -0.0081414813, -0.0673647523, -0.0525705926, -0.0796610042, -0.0018684563, -0.0306273364, -0.0608577877, -0.0645914823, 0.0057104426, -0.0585829802, -0.0583826937, 0.0426171124, -0.0618939474, -0.0902357399, -0.0178231671, 0.0264448971, -0.0006204863, -0.0397898182, 0.0563030019, 0.0623418577, -0.0011986297, -0.0650498718, -0.0257985685, -0.0711487457, 0.0495975986, 0.0549231023, -0.0189819261, 0.0211152732, 0.0557071902, 0.0148393661, -0.0444952212, 0.0554617345, 0.0294141993, -0.0151266921, -0.0257786494, -0.0257423948, -0.0363816470, 0.0438813083, -0.0229367018, -0.0013242476, 0.0150295729, 0.0363011993, 0.0298044831, 0.0015174870, 0.0006829588, -0.0405857898, 0.0035244359, 0.0431966111, 0.0416564420, 0.0257420726, 0.0637735948, 0.0390252247, 0.0159421451, 0.0787086785, -0.0735323578, 0.0375261456, 0.0744959265, 0.0334743261, -0.0649757758, 0.0244817417, 0.0846445337, 0.0693659708, 0.0294268746, -0.0840987787, 0.0534502082, 0.0533346944, 0.0710589513, 0.0107063549, -0.0176648926, -0.0222109072, 0.0047620437, -0.0810186863, 0.0471968912, -0.0401039012, -0.0344063491, -0.0035931387, -0.0308488589, -0.0641248897, 0.0164629407, -0.0274732783, -0.0002834786, 0.0612641647, 0.0492858589, -0.0467488877, -0.0862625986, -0.0260042753, 0.0532237925, 0.0267487895, -0.0529859178, 0.0381270982, 0.0540189147, -0.0416393802, -0.0258782469, -0.0202552769, 0.0467462167, 0.0363016315, 0.0123195415, 0.0250088070, -0.0355302133, 0.0933936685, 0.0161356851, -0.0549964495, -0.1074196324, -0.0333560742, -0.0434405766, -0.0116400551, -0.0531298257, -0.0561374538, 0.0145980241, -0.0566691980, -0.0784805492, -0.0161036421, 0.0287158787, 0.0480363332, 0.0399868228, 0.0181833711, 0.0122175207, 0.0789600834, -0.0393457040, -0.0319909938, -0.0130487205, 0.0230954047, -0.0010399334, 0.0609797016, 0.0047357841, -0.0310001597, 0.0410015620, -0.0682104751, 0.0415990613, 0.0145195015, -0.0487219021, -0.0072897365, -0.0017447172, -0.0810460895, -0.0832145289, 0.0106229307, 0.0602856204, -0.0280274972, 0.0025177922, -0.0233614370, 0.0453096256, 0.0239324924, 0.0687827915, -0.0440867655, 0.0476649441, 0.0342700034, -0.0568417199, -0.0195098240, -0.0150796594, 0.0294041429, 0.0287633203, 0.0092726965, 0.0219226275, -0.0131606041, 0.0209531039, -0.0329002142, 0.0617177039, -0.0637891218, -0.0351219624, -0.0058289305, -0.0107100876, 0.0044046980, -0.0300981328, 0.0482416898, -0.0163968839, -0.0191379096, 0.0434162319, 0.0242136102, 0.0202918015, -0.0522905514, -0.0137360366, -0.0506290570, -0.0755300522, 0.0282948315, -0.0130003421, 0.0561802424, -0.0019922182, -0.0411769859, -0.0297425073, 0.0312577263, -0.0020290038, 0.0193068162, -0.0459618010, -0.0669242889, -0.0026442702, 0.0483032987, 0.0012464017, 0.0719025359, 0.0031453362, 0.0311122425, -0.0338192247, -0.0577450618, 0.0354341976, 0.0054727001, -0.0094882045, 0.0333776176, 0.0127804102, -0.0786399990, 0.0559677184, -0.0332578421, -0.0559149384, 0.0294920206, -0.0444452465, 0.0021095057, -0.0501519591, 0.0405086018, -0.0698690265, 0.0507179759, 0.0302097071, -0.0049628671, 0.0295509472, -0.0324126221, 0.0530693084, -0.0096717020, -0.0667616725, -0.0607249066, -0.0547137298, 0.0117468415, 0.0869377553, 0.0118984673, -0.0348011777, 0.0765471309, 0.0942470282, -0.0033292789, 0.0662133321, -0.0091647981, -0.0462724492, -0.0654603392, 0.0650509596, 0.0339256525, -0.0610084124, -0.0383286737, 0.0086376490, 0.0210915860, -0.0501208827, 0.0015568315, -0.0060170237, 0.0557531901, 0.0644803420, 0.0253864340, 0.0616135262, -0.0522905886, -0.0340351239, 0.0029664354, -0.0232515689, -0.0290885307, 0.0325072594, -0.0381816141, -0.0037349572, -0.0075424393, -0.0176091176, 0.0101414556, 0.0302139483, 0.0397596695, -0.0287768003, 0.0643047988, -0.0045609395, -0.0176576730, -0.0257235281, 0.0567294694, -0.0285748411, 0.0196445920, 0.0507552922, -0.0416686945, 0.0436302684, 0.0484215803, -0.0277074669, -0.0124062821, -0.0527451523, -0.0097059887, -0.0028078207, -0.0661758259, -0.0571713261, 0.0224452447, -0.0223626196, -0.0184647534, 0.0279090386, -0.0100439498, 0.0377935357, 0.0555270575, -0.0067380411, -0.0447766855, 0.0615545847, 0.0431342460, 0.0632693172, 0.0669396818, 0.0544954911, 0.0689651147, -0.0531744398, -0.0489932261, 0.0392759293, 0.0019275364, 0.0321184583, 0.0504454635, 0.0461008959, -0.0064565404, 0.0760321468, 0.0114127630, -0.0079151820, -0.0346165784, 0.0083759855, -0.0428146087, 0.0277180057, 0.0328580029, -0.0411441326, -0.0257998500, 0.0183574259, 0.0322695971, -0.0426404290, 0.0103762560, 0.0174436867, -0.0171680171, 0.0153230187, 0.0072709485, 0.0653747320, 0.0744881034, 0.0329114832, -0.0426198095, -0.0413249359, -0.0234952345, -0.0090962481, -0.0820498988, -0.0769458264, -0.0101828789, 0.0341212340, 0.0006485159, 0.0547529981, 0.0171222799, 0.0270680673, -0.0333001055, 0.0752963051, -0.0375070237, 0.0494159795, -0.0074774926, -0.0618630201, -0.0618277453, 0.0107150972, 0.0753056556, 0.0285952128, 0.0156474598, 0.0448920168, 0.0740279257, 0.0223982222, 0.0391715951, 0.0583865419, -0.0344586447, -0.0027354108, 0.0597462580, 0.0597411878, 0.0856908709, -0.0809424520, -0.0547911525, -0.0420492776, -0.0781461447, 0.0348433591, -0.0404353105, 0.0862291679, -0.0582990721, 0.0518001467, -0.0450249128, 0.0369118080, -0.0618535765, -0.0163848288, 0.0892198831, -0.0667803586, 0.0513992459, 0.0747971311, 0.0512266085, -0.0414273664, -0.0074269571, 0.0248815529, 0.0615481436, 0.0344690494, -0.0072246972, -0.0377590358, 0.0505737066, 0.0137716914, 0.0266140029, -0.0327323303, 0.0240019653, 0.0487566926, 0.0075096549, 0.0230895989, 0.0191425532, -0.0638461933, 0.0026030508, 0.0501814112, -0.0654455796, -0.0605384111, -0.0667529181, 0.0559537373, -0.0209677052, 0.0393089801, 0.0661774799, 0.0230055302, 0.0546359383, 0.0584928878, -0.0054581459, 0.0349846408, -0.0279382393, 0.0847937465, -0.0821743757, -0.0425959826, 0.0143306572, 0.0757924542, 0.0157293342, -0.0630476549, -0.0127411755, -0.0233807154, -0.0166804940, 0.0317148007, 0.0693236813, 0.0180034377, 0.0313353166, -0.0696126074, 0.0159898996, -0.0337261148, 0.0263013653, 0.0350478403, -0.0473052226, 0.0369439349, -0.0405416191, 0.0252162311, -0.0053987275, 0.0054980619, 0.0185037181, 0.0127506889, -0.0627788007, 0.0689245909, -0.0346369892, -0.0213849787, 0.0564300567, 0.0559368655, 0.0135258008, -0.0589323081, -0.0100279385, 0.0473695137, 0.0639448538, 0.0200787764, -0.0040486129, -0.0138367796, -0.0306596495, 0.0680436045, -0.0365050137, 0.0287412833, 0.0549999066, -0.0304627810, 0.0764969215, 0.0040343581, 0.0573349074, 0.0068263826, 0.0489296317, -0.0085098818, 0.0282808319, -0.0312612914, 0.0423838347, -0.0508029573, -0.0233867709, 0.0046783444, 0.0588796958, 0.0685341433, -0.0384806357, -0.0091161756, 0.0072985487, 0.0076442929, -0.0488167927, 0.0159890894, 0.0296123512, 0.0522922724, -0.0393747129, -0.0525202639, 0.0544633791, -0.0090377387, -0.0266353097, -0.0312705636, 0.0033179147, 0.0425665490, -0.0449563675, -0.0567167886, -0.0350854173, -0.0280417651, 0.0327808037, 0.0275788065, 0.0048299013, 0.0604949668, 0.0544108301, -0.0441634953, -0.0151096517, -0.0615823790, -0.0243654829, 0.0322122723, 0.0406895466, -0.0100302445, 0.0320492834, 0.0739142448, -0.0645320341, -0.0704634264, 0.0129037909, 0.0056024659, -0.0417946167, 0.0002970163, -0.0644107461, 0.0343917422, 0.0677248091, 0.0364646949, 0.0359832458, 0.0417056791, 0.0316651575, 0.0038273672, -0.0495470203, 0.0535214245, 0.0162391011, -0.0268976465, 0.0642972514, -0.0412593856, -0.0422777608, -0.0452636629, -0.0215272587, 0.0579607673, 0.0286180452, 0.0010855799, 0.0352600180, 0.0238495544, 0.0280980840, -0.0402242988, 0.0123933405, 0.0601117723, 0.0182243902, 0.0528896041, -0.0321112312, 0.0468064770, -0.0720602870, 0.0370218828, 0.0752055496, 0.0663172007, 0.0609235503, 0.0057860981, -0.0381882451, -0.0217838380, 0.0144387148, -0.0361868143, -0.0166411698, 0.0344586186, 0.0351644270, -0.0067769159, -0.0049517076, 0.0866745636, -0.0082809683, -0.0080432538, 0.0410039499, 0.0608368292, 0.0066300398, 0.0874252617, -0.0882458910, -0.0855087489, 0.0529883876, -0.0342072323, -0.0414243490, -0.0028217800, -0.0614908189, -0.0094990470, -0.0779649913, -0.0891776159, 0.1132613868, 0.0328588374, -0.1073873043, 0.0041867611, -0.1129816398, -0.0801187605, -0.0669733062, 0.0439400598, -0.0298505556, -0.0021506329, 0.0317867771, 0.0529487617, 0.0846220851, -0.0250837579, 0.0287918709, 0.0768786594, 0.0529755466, 0.0121812131, -0.0657518357, -0.0637555271, 0.0602710396, -0.0040209894, -0.0032247920, 0.0178991631, 0.0938150808, -0.0600728579, -0.0232402887, -0.0005768673, -0.0111354580, -0.0199595243, -0.0925766826, -0.0027023668, 0.0325991996, 0.0355611667, 0.0910647959, -0.0545108020, 0.0818630531, 0.0705267861, 0.0056478060, -0.0642542094, 0.0203319155, 0.0382447615, -0.0024218671, -0.0460394956, -0.0394531228, 0.0847175419, 0.0247198474, -0.0516526327, -0.1083530337, 0.0005533713, -0.0357955545, 0.0964784920, -0.0458325855, 0.0784100145, -0.0776142254, -0.0392325670, -0.0480388068, -0.0850388855, 0.0065610190, 0.0667585135, -0.0257829484, -0.0627557561, 0.0189939346, -0.0052211736, 0.0121269263, -0.0331650600, 0.0023036930, 0.0537510067, -0.0559263937, -0.0049546417, -0.0220165569, 0.0646896213, 0.0295044929, -0.0516772233, 0.0138619142, -0.0521909148, 0.0721246749, -0.0647384003, 0.0038735913, 0.0804020464, 0.1012323350, -0.0376968309, -0.0770089552, -0.0149877025, 0.0046503562, 0.0090872133, -0.0706458092, 0.0109998882, -0.0438268445, 0.0436577685, 0.0450459421, -0.0675748959, -0.0141517706, 0.0104212668, -0.0598174892, -0.0117654335, -0.0366543569, -0.0365272313, 0.0221325438, -0.0120574199, -0.0653014556, 0.0099005960, 0.0700579509, 0.0462321751, 0.0626973435, 0.0155963600, 0.0012122858, -0.0323977321, 0.0072930134, 0.0479489192, -0.0095985746, -0.0337226093, -0.0093290964, 0.0477088317, 0.0465345681, 0.0496657230, -0.0098205917, 0.0902872160, 0.0510066971, -0.0029818295, 0.0805894136, 0.0175184067, 0.0192634556, 0.0201920848, 0.0027781287, 0.0266131386, -0.0559950583, 0.0389908217, 0.0893655196, 0.0044219620, -0.0031962036, 0.0723908022, -0.0726096407, -0.0184452981, -0.0332368650, 0.0591880865, -0.0468153432, -0.0740881190, -0.0680546016, 0.0699919239, 0.0959217250, 0.0417107977, 0.0017129299, -0.0068849926, -0.0114683891, 0.0083803963, -0.0303559154, -0.0314601734, 0.0524431095, 0.0463980660, -0.0796937644, 0.0565914586, 0.0038615544, -0.0435654707, -0.0129807992, -0.0554327071, 0.0676569864, -0.0451803505, -0.0502950028, 0.0262280293, 0.0193102323, -0.0331046879, -0.0381912105, 0.0378299765, -0.0481281541, -0.0428545028, -0.0418832414, 0.0105323913, -0.0045352890, -0.0457011014, -0.0244031809, 0.0033395861, 0.0841954276, 0.0418749079, -0.0223994441, -0.0283411145, -0.0342716277, -0.0459902249, -0.0339059345, 0.0056827716, -0.0484057926, -0.0163169634, 0.0430663154, 0.0403721966, -0.0285786521, 0.0573919863, 0.0751542598, -0.0294841826, -0.0016402652, 0.0699653104, -0.0111365579, 0.0812482610, -0.0711119473, 0.0708851293, 0.0569165163, 0.0451883599, 0.0555869676, 0.0684184134, -0.0396508165, -0.0721864998, 0.0723845214, -0.0518532246, -0.0538112409, -0.0131113287, -0.0131233735, -0.0273179710, 0.0411338061, 0.0221361276, 0.0319624804, 0.0819222108, 0.0239514504, -0.0074744793, -0.0221972503, 0.0601108484, 0.0009445805, 0.0374130160, 0.0186059605, -0.0168390945, -0.0688847452, 0.0724540502, 0.0200772565, -0.0700865537, 0.0369331427, 0.0623414367, -0.0102313282, -0.0535753705, 0.0319410525, 0.0138592869, -0.0665550679, 0.0408221744, 0.0556196794, -0.0070231962, -0.0372310951, -0.0028205758, -0.0016492429, -0.0281662848, 0.0500830337, -0.0290819257, 0.0673599020, -0.0702054650, -0.0069761956, 0.0414268672, 0.0148979714, 0.0164778605, 0.0534919724, 0.0217377711, 0.0945080817, 0.0482959859, 0.0346962735, -0.0027902855, -0.0354739055, -0.0783529803, -0.0343444385, -0.0325056538, 0.0122754425, 0.0599462986, -0.0100420583, -0.0233045518, -0.0303002577, -0.0158803631, 0.0553720333, 0.0039426722, -0.0489695184, 0.0637636259, 0.0143329399, 0.0430131741, -0.0079604434, -0.0231626593, -0.0606924966, 0.0246412847, -0.0516594015, -0.0284424685, 0.0624027550, -0.0033229350, -0.0041753477, -0.0540297441, -0.0622763596, -0.0281661116, 0.0289080869, -0.0284135118, 0.0141432527, 0.0499766804, -0.0142270522, -0.0449893400, 0.0161646008, 0.0258310568, -0.0510552600, 0.0458667055, -0.0122939451, 0.0367646255, 0.0420766659, 0.0530836359, 0.0618245788, -0.0634099767, -0.0601126514, 0.0575054139, -0.0444107838, -0.0312440284, 0.0312929340, 0.0217493847, -0.0051600677, 0.0307819694, 0.0612808205, 0.0046771406, -0.0437738150, -0.0545183495, -0.0630324855, 0.0365158208, 0.0507368073, 0.0323185511, 0.0287618209, -0.0490928106, -0.0202950239, -0.0311857332, 0.0184958205, 0.0197847299, 0.0668763965, -0.0567093194, -0.0748953819, 0.0639940053, -0.0231321864, 0.0545007885, -0.0136492625, 0.0565631986, -0.0113176964, 0.0418430082, -0.0639478937, -0.0332212523, -0.0103800213, -0.0333799422, 0.0089722956, 0.0094935987, 0.0610732771, -0.0197300427, -0.0262503140, 0.0200458560, -0.0236543342, 0.0340875015, 0.0602441058, 0.0454265997, -0.0513490923, -0.0864358619, -0.0065995757, -0.0529606044, -0.0107512632, 0.0429117270, -0.0015464146, 0.0338353924, -0.0497660674, 0.0058997720, 0.0503822416, -0.0283896327, 0.0130839935, -0.0470724739, -0.0719173327, 0.0561412722, 0.0163299534, 0.0683339834, -0.0708372444, -0.0700759962, 0.0602001399, 0.0559655428, 0.0167408790, 0.0399266817, 0.0094170021, 0.0179340281, 0.0518624447, 0.0666500404, 0.0314893611, 0.0344026238, -0.0302657336, -0.0096593164, -0.0547386110, 0.0065441243, 0.0095064575, 0.0666432604, -0.0545402355, 0.0379938222, 0.0234607011, 0.0112805748, -0.0527054034, 0.0063104099, -0.0518399701, 0.0162917133, -0.0129442411, -0.0030781061, 0.0504633151, -0.0105657410, -0.0074866973, 0.0457770489, 0.0522217751, 0.0524019375, -0.0010652706, 0.0713785067, -0.0477276593, -0.0266041402, 0.0087368703, -0.0122307781, 0.0164940432, 0.0321902893, -0.0394055657, -0.0286086928, 0.0404203385, 0.0263761654, 0.0132087404, 0.0173675194, 0.0073566409, 0.0239074491, -0.0337091498, -0.0526537448, -0.0145741105, 0.0240612440, 0.0474663973, 0.0015084555, -0.0596982986, 0.0175317302, -0.0299766194, -0.0385275893, -0.0525999554, 0.0388495699, 0.0421510115, -0.0216104705, 0.0675353408, 0.0616569817, 0.0163713098, -0.0501689427, -0.0206834693, 0.0240551084, 0.0313277207, -0.0230552536, -0.0463548228, -0.0562747829, 0.0307730362, 0.0551297292, -0.0709003955, 0.0594701245, -0.0269658919, -0.0714776963, -0.0487502106, 0.0210619234, 0.0396398120, 0.0254366770, 0.0114478236, 0.0688710809, -0.0569836572, 0.0250397176, 0.0050678817, 0.0531562418, -0.0078790309, 0.0367078669, 0.0283365157, -0.0025340123, -0.0087985918, -0.0387013070, -0.0140636927, -0.0205874238, -0.0204409715, 0.0566226318, 0.0269079451, 0.0436041653, 0.0012116191, 0.0034214922, -0.0380347334, 0.0540157892, 0.0076361196, 0.0680686757, 0.0870945230, -0.0670658126, 0.0436650924, -0.0395448469, -0.0395340174, -0.0858929232, 0.0445665680, 0.0335874371, -0.0106418002, 0.0660419837, 0.0121017611, 0.0194929782, -0.0665434003, -0.0678583309, 0.0818492994, 0.0395753644, -0.0168056879, 0.0084317643, 0.0129290288, -0.0053953552, 0.0585927628, -0.0102770943, -0.0661634877, 0.0504962914, 0.0165540930, 0.0210749675, -0.0000254091, -0.0538152382, 0.0326152071, -0.0231549498, -0.0347479843, -0.0225595236, -0.0165329445, -0.0103840204, -0.0298108831, -0.0539977923, 0.0686521605, -0.0620979182, -0.0510549657, -0.0042568827, -0.0492719971, 0.0545530394, 0.0149347670, -0.0698611364, 0.0620417669, 0.0214721896, 0.0146601936, 0.0070865951, -0.0457650460, 0.0681201294, 0.0185393561, -0.0103004454, -0.0478893556, -0.0105942590, 0.0536648892, 0.0265509225, 0.0520531647, -0.0801552534, 0.0613644384, -0.0225759763, 0.0244137775, 0.0204681605, -0.0360111967, 0.0492869653, 0.0943453833, 0.0314450227, -0.0097638974, 0.0235676486, 0.0606609993, -0.0630890802, 0.0028025701, 0.0082227867, 0.0548377559, 0.0563479178, 0.0284280293, 0.0276354644, 0.0486523509, -0.0302263983, -0.0116225788, -0.0122470940, 0.0697571039, -0.0207233801, -0.0238681324, 0.0074124616, -0.0284388121, -0.0617448427, 0.0191525090, 0.0333790556, -0.0167330895, -0.0080361990, 0.0584326498, -0.0727177560, 0.0612225346, 0.0192226842, 0.0194952507, -0.0329447947, 0.0730830878, -0.0524483807, 0.0508947335, 0.0288054254, 0.0535589717, -0.0039691376, -0.0426373295, 0.0122594163, -0.0354397371, -0.0263302978, -0.0275395215, 0.0231971405, -0.0551205315, -0.0424399264, 0.0372358635, 0.0259281043, 0.0129140131, 0.0531596728, -0.0659600645, -0.0334255360, 0.0274032317, -0.0196949579, -0.0252012499, -0.0037859790, -0.0401003398, 0.0165775307, -0.0157269817, 0.0773857310, 0.0437235422, -0.0507162325, 0.0520221107, 0.0089506852, 0.0378385521, -0.0245604776, 0.0485791229, -0.0256512929, -0.0472183116, -0.0479288921, 0.0709410235, 0.0519962795, -0.0054217502, 0.0010518411, -0.0164604485, -0.0005401954, -0.0518774614, 0.0734395012, -0.0596383028, 0.0127471155, 0.0025550402, -0.0035229060, 0.0048295078, -0.0250050258, 0.0141980648, 0.0060714404, -0.0423395075, -0.0559142269, -0.0128579941, -0.0574311092, 0.0156890359, -0.0185888633, -0.0117728896, 0.0459824502, -0.0343505889, -0.0191556979, -0.0306714736, -0.0243384298, 0.0172996912, 0.0563001409, -0.0289349575, -0.0578316078, 0.0661919415, 0.0527783521, -0.0512895808, -0.0518539660, -0.0450739823, 0.0605327412, -0.0049235462, -0.0132685425, -0.0219862815, 0.0215468053, 0.0432354435, -0.0657460019, -0.0623603463, -0.0685983077, -0.0091888737, 0.0398476720, -0.0209620278, -0.0507845394, -0.0110803824, 0.0075046942, 0.0241372306, 0.0256779417, -0.0604033023, 0.0108365286, 0.0171585921, -0.0478644073, -0.0246558040, 0.0471667796, 0.0248109624, 0.0316186547, -0.0661492795, -0.0186762884, 0.0160530657, 0.0110920807, -0.0079430593, -0.0195437204, 0.0355919190, -0.0676032379, -0.0383902676, -0.0423395336, -0.0139667625, -0.0556315333, 0.0633807406, -0.0246184263, -0.0068394542, 0.0641476065, 0.0028094386, 0.0482661799, -0.0253608935, 0.0349745713, -0.0249057747, -0.0053240340, -0.0000607869, -0.0314238556, 0.0652749240, 0.0417931564, -0.0019931342, -0.0434895754, -0.0323807076, 0.0454216078, -0.0382881649, 0.0070411288, -0.0420896709, 0.0056190076, -0.0637483895, -0.0242735110, 0.0730021372, 0.0332812183, -0.0168514736, -0.0667808801, -0.0852350965, -0.0441905037, -0.0431746654, -0.0400404185, 0.0222333074, -0.0154645769, -0.0439938642, 0.0389786549, 0.0046549970, 0.0093774768, 0.0737293661, -0.0886385366, 0.0692107826, -0.0524476878, 0.0225122534, -0.0098029189, -0.0744913369, 0.0372716822, -0.0458004065, -0.0175526422, 0.0572442524, 0.0373974517, 0.0231627822, -0.0513920076, 0.0312020052, -0.0671605319, 0.0250019301, 0.0088540083, -0.0227725580, -0.0652093962, -0.0703058839, 0.0445958301, 0.0195284709, 0.0238095745, -0.0642891452, 0.0564459674, 0.0164387058, 0.0384579152, 0.0340055600, -0.0284616966, -0.0233347733, 0.0562800057, -0.0686597303, -0.0657689571, -0.0068896222, 0.0274868216, -0.0332515091, 0.0030999328, -0.0246863347, -0.0324643292, 0.0129678668, 0.0538890213, 0.0954614952, 0.0560648069, 0.0345447585, -0.0161363240, -0.0080670705, -0.0828048810, 0.0876961201, -0.0666417480, -0.0143641569, 0.0751563385, 0.0255918354, 0.0257675331, -0.0598788932, -0.0515481904, 0.0242829826, 0.0461635366, -0.0663562864, -0.0265630074, -0.0470187366, -0.0027880792, -0.0276216567, -0.0331295431, -0.0705125108, 0.0005931632, 0.0117383832, 0.0405061617, 0.0194008164, -0.0252406951, 0.0256227925, 0.0595489219, -0.0317416303, 0.0408249050, -0.0380079150, 0.0709654018, 0.0066812374, -0.0038905875, 0.0506599359, -0.0543111041, -0.0091343792, 0.0582879633, 0.0145891542, 0.0210209452, 0.0567598231, 0.0224840268, 0.0055460883, -0.0277610403, -0.0094909268, -0.0369589068, 0.0632568672, -0.0060039740, -0.0463547520, -0.0251270887, 0.0595071837, -0.0333017334, 0.0049662041, 0.0246751159, -0.0452922508, -0.0490798131, -0.0323612057, 0.0306413975, -0.0195050705, 0.0508908406, -0.0941726416, 0.0257359408, 0.0118669430, -0.0086843064, -0.0514361262, 0.0692921355, -0.0055138436, -0.0570449457, 0.0633472800, -0.0266513471, -0.0539088026, -0.0229691193, 0.0303014796, -0.0540215485, 0.0152743375, -0.0700021461, -0.0424264148, 0.0303461868, -0.0414479412, 0.0426884405, -0.0265777893, -0.0368165784, -0.0146726100, 0.0054825903, -0.0707894564, -0.0056453566, -0.0423046537, -0.0375560150, 0.0919845104, -0.0563743897, 0.0440177061, 0.0747047067, -0.0253687352, -0.0019886678, -0.0631145239, 0.0560061112, -0.0502697788, 0.0326894149, -0.0195313450, -0.0403499939, 0.0329759121, -0.0375127979, 0.0676474869, -0.0517714135, 0.0078442115, 0.0411599986, 0.0371226557, -0.0307161771, 0.0365535580, 0.0240446515, -0.0297672488, 0.0600481778, 0.0281075202, -0.0394678749, -0.0283672679, -0.0583274998, 0.0360032395, -0.0231835116, -0.0569243915, -0.0032051823, -0.0813853666, -0.0199637841, 0.0125411749, -0.0276463814, -0.0534645393, -0.0404291041, 0.0573903583, 0.0112694530, -0.0165159535, -0.0047881631, -0.0431172363, -0.0247756653, 0.0139087560, 0.0693440586, -0.0609503202, -0.0377336629, -0.0440360419, -0.0008825983, 0.0038990902, -0.0581835322, 0.0051047928, 0.0408945680, -0.0798833445, -0.0543378405, -0.0028429113, -0.0091372002, -0.0171754695, -0.0485302061, 0.0519573353, -0.0831205845, 0.0176284332, 0.0615982004, -0.0350133255, -0.0265254881, -0.0391537137, 0.0869962946, -0.0050728703, 0.0090954453, -0.0343338847, -0.0396522619, 0.0306253508, 0.0328795165, -0.0080183810, 0.0431812629, 0.0714949295, 0.0070233666, -0.0474411473, 0.0280561391, -0.0470752157, -0.0439888947, -0.0604984947, -0.0576600507, 0.0125001939, 0.0406035110, 0.0079089040, -0.0646043867, 0.0526578426, -0.0246058069, 0.0628633201, -0.0319003314, 0.0495866127, 0.0429031327, 0.0525371432, 0.0405605435, -0.0234355927, -0.0403027311, -0.0841929615, -0.0072247139, 0.0025659192, -0.0259082671, 0.0338383168, 0.0752601698, -0.0644357800, -0.0187734012, -0.0889312178, 0.0102152890, -0.0186908711, -0.0293815043, 0.0210804157, -0.0539383814, 0.0868464559, 0.0351718776, -0.0291919000, -0.0065630814, -0.0080988128, 0.0460071638, -0.0070025348, 0.0140185608, 0.0384824611, -0.0710508600, -0.0527668372, 0.0231801886, -0.0548155978, 0.0299103819, 0.0250300281, -0.0131842922, 0.0357506163, -0.0169987697, 0.0302017592, -0.0402658172, 0.0331705622, 0.0144528551, 0.0376181751, 0.0108774900, 0.0612920076, 0.0079821497, -0.0256873462, -0.0129968747, -0.0029953883, 0.0377775840, 0.0586742386, 0.0392767563, -0.0314516947, 0.0446426757, -0.0101731922, -0.0319621675, 0.0452838205, -0.0524222404, -0.0014690591, 0.0165157430, -0.0352678187, -0.0571255088, -0.0056706378, -0.0272842813, 0.0270359907, -0.0166938324, -0.0418419912, 0.0077345278, -0.0545403548, 0.0147630405, -0.0215174705, -0.0094664078, -0.0567977093, 0.0601409562, 0.0675741509, 0.0301540978, -0.0472261943, 0.0532924682, -0.0165940560, -0.0361298807, 0.0169916023, 0.0512151383, 0.0369607881, -0.0218361188, 0.0752314180, 0.0350685641, 0.0043376409, -0.0419109203, -0.0287689324, 0.0532428920, 0.0460531972, -0.0081520658, -0.0222537182, 0.0361562036, -0.0068330015, -0.0605991557, -0.0624505766, -0.0107623097, -0.0006235091, -0.0028266830, 0.0440486483, 0.0251534283, -0.0031212645, -0.0328352042, 0.0357677527, -0.0200540945, -0.0127704702, 0.0264694821, 0.0076691094, 0.0160184298, -0.0160544328, 0.0750202537, -0.0537979156, -0.0358579680, 0.0704445615, -0.0340223722, 0.0022048776, 0.0584391356, -0.0348084606, -0.0421851203, -0.0160087440, 0.0163474046, 0.0423279256, -0.0401913375, -0.0093395989, -0.0309836995, -0.0362117961, -0.0393354781, 0.0546366982, 0.0499931462, 0.0403388664, 0.0080340020, -0.0594212189, -0.0674018413, -0.0688592717, -0.0478369519, 0.0476082191, 0.0694943666, 0.0018160568, 0.0357912369, -0.0415175296, 0.0265607685, -0.0134398397, -0.0561772846, 0.0164730232, 0.0566193275, -0.0076132985, 0.0189920124, -0.0475049913, 0.0222186875, 0.0570709519, 0.0383800901, 0.0003571073, -0.0420308933, 0.0652799606, 0.0026067472, -0.0235876106, -0.0504383966, -0.0218483303, 0.0258995816, -0.0323367566, -0.0344598480, -0.0181227475, 0.0094712544, 0.0707785189, 0.0391392037, 0.0277046822, -0.0148761384, 0.0629918724, -0.0173456501, 0.0394069478, 0.0155326184, 0.0324646272, 0.0617768355, -0.0340406075, -0.0388097204, 0.0387634374, -0.0094016036, -0.0393257402, -0.0239130575, -0.0033269732, 0.0526951104, -0.0539010540, 0.0161414780, 0.0562843308, -0.0181865785, -0.0375812314, 0.0863321126, -0.0173440631, -0.0068476596, -0.0368123502, 0.0081247427, -0.0564459413, -0.0486454703, -0.0737831891, -0.0844970271, -0.0378342159, -0.0761063844, -0.0737207085, 0.0643011853, -0.0726679191, 0.0640304014, -0.0146406656, -0.0584688634, 0.0387672707, 0.0167112369, -0.0048271338, 0.0267540012, -0.0631331280, 0.0764729455, -0.0915901437, -0.0152362837, 0.0105263153, -0.0255458932, -0.0627643466, -0.0494079627, -0.0551428348, 0.0002280201, 0.0163812451, 0.0528008044, -0.0270685405, -0.0411414020, -0.0914633423, -0.0031110696, -0.0113685681, 0.0505893715, 0.0333452635, 0.0051187249, 0.0256473888, -0.0449125990, 0.0394174084, 0.0183297060, -0.0752035975, 0.0247678440, -0.0598671176, 0.0224307608, 0.0078004035, 0.0307849329, -0.0587930195, 0.0271456446, 0.0442592911, -0.0518839359, 0.0288527627, -0.0395021886, 0.0216726251, 0.0265579596, -0.0436019972, -0.0778153166, 0.0033707176, -0.0482363999, 0.0329338834, -0.0017881737, -0.0775811449, 0.0500612557, -0.0092404429, -0.0091272350, -0.0614373870, -0.0019531037, -0.0024747022, -0.0159496143, -0.0645186082, -0.0649481565, -0.0104155345, 0.0606401227, -0.0503469370, 0.0075682746, -0.0321943238, 0.0140191307, 0.0442744531, -0.0562733114, 0.0774706677, 0.0246349648, 0.0517234877, -0.0226873700, 0.0393831506, 0.0380495191, 0.0399540439, -0.0653358474, 0.0725239590, -0.0059317113, 0.0405377634, 0.0432853065, 0.0193845108, 0.0732757300, 0.0169572122, 0.0724631771, -0.0124010565, -0.0728812516, -0.0258568712, -0.0537299961, 0.0492465459, 0.0724735409, 0.0359437540, -0.0218219832, 0.0458599031, -0.0025935590, -0.0540869907, 0.0449136570, -0.0927511677, 0.0375361294, -0.0420165360, 0.0015233252, 0.0581525676, 0.0288959276, 0.0392789580, -0.0136982081, -0.0275391992, 0.0797140375, 0.0131632304, 0.0153063228, 0.0879492015, -0.0642580241, 0.0257359408, -0.0830151141, -0.0097697182, 0.0303944703, -0.0702909231, 0.0487822741, 0.0440821350, 0.0490673184, 0.0674114302, -0.0255178548, -0.0344424061, 0.0219940357, 0.0246553961, 0.0509235933, -0.0159983598, -0.0287364610, 0.0318523049, -0.0351803228, -0.0741326436, -0.0109374225, 0.0179028995, 0.0244770665, 0.0607179292, -0.0402553380, 0.0518767461, -0.0066822050, 0.0014107828, 0.0595680512, 0.0734675750, -0.0066471389, -0.0284043849, 0.0379957855, -0.0702049732, -0.0325439200, 0.0842926204, 0.0087796003, 0.0639420003, -0.0048406152, 0.0699838251, -0.0014331507, -0.0563026294, 0.0649542212, 0.0858559236, 0.0057638208, -0.0367718525, 0.0286943242, 0.0696811676, 0.0748289078, -0.0418379419, -0.0688983276, -0.0259537511, -0.0091828955, 0.0300247837, 0.0019496140, -0.0354270861, 0.0447296537, 0.0502029248, 0.0230858736, 0.0094841300, -0.0193325039, 0.0351513661, -0.0195233002, 0.0134807676, 0.0314963572, 0.0313219279, 0.0487041287, 0.0668636635, 0.0374167599, 0.0275294781, -0.0651873052, 0.0354047269, 0.0431101471, 0.0109696127, 0.0440940186, -0.0551420189, -0.0653498843, -0.0051356833, -0.0156857371, -0.0149714891, -0.0674450174, -0.0016401365, 0.0457332879, 0.0001165822, -0.0450588427, -0.0219904948, -0.0344227143, 0.0348058641, -0.0485765822, -0.0187447555, -0.0025263506, 0.0486448258, -0.0727560967, 0.0192231573, 0.0117204366, -0.0075812801, 0.0595151931, -0.0418174639, -0.0327176489, -0.0313488021, -0.0100226086, 0.0358850919, 0.0302599482, 0.0238738228, -0.0171723310, 0.0498464219, -0.0518394858, 0.0675701201, -0.0353852957, 0.0449499339, 0.0395460539, -0.0099790543, 0.0442080647, -0.0494737290, 0.0072216210, 0.0467284285, 0.0590137616, -0.0295011010, 0.0144763878, -0.0160056595, 0.0149043724, 0.0486821756, -0.0619996004, -0.0052624526, -0.0531279370, 0.0543403067, 0.0792874619, 0.0507070757, 0.0121255815, -0.0249638055, 0.0165017769, 0.0011569953, 0.0872863680, -0.0457301624, 0.0560911261, -0.0317013599, -0.0621601678, -0.0701328814, 0.0250520501, 0.0107107060, -0.0583289638, 0.0621536635, -0.0070028850, 0.0110599427, -0.0541729182, -0.0043300549, -0.0304145962, -0.0585533567, 0.0540878400, -0.0236957464, -0.0813428760, -0.0031003335, 0.0590308271, -0.0031519087, 0.0632222295, -0.0460139215, -0.0696108714, 0.0197756700, -0.0063668136, 0.0641038269, -0.0643755272, -0.0358989947, -0.0229286328, -0.0607008673, 0.0530177727, 0.0253866110, -0.0057247723, -0.0556075163, -0.0610237680, -0.0048741004, -0.0290289056, -0.0094523653, 0.0709453076, 0.0087226424, -0.0663690045, 0.0253590178, 0.0131807448, -0.0004425253, 0.0112793269, 0.0336595774, -0.0236670878, 0.0497581623, 0.0268827658, 0.0535066165, -0.0297946800, -0.0127896471, 0.0728245601, 0.0138520692, 0.0485841259, -0.0525033586, 0.0018356311, -0.0171108786, -0.0654225796, 0.0354286768, 0.0525806509, 0.0799014866, -0.0404889248, 0.0373119041, 0.0746914223, 0.0270870086, 0.0507484972, -0.0005591229, -0.0279883109, -0.0207386017, 0.0554691106, -0.0748798326, 0.0579757690, -0.0120379375, 0.0793664381, 0.0453888811, 0.0112507660, 0.0032587000, -0.0602227263, 0.0599830598, -0.0706350282, 0.0117844017, -0.0549243093, 0.0804525912, 0.0683974624, -0.0660957769, -0.0414025672, 0.0504850484, -0.0051484979, 0.0722156391, -0.0657359660, 0.0250712447, 0.0127585093, -0.0355658121, -0.0182308294, 0.0569018647, -0.0794850737, 0.0346767828, 0.0364486501, -0.1034517065, 0.0598841347, 0.0244288556, 0.0389998630, -0.0017989003, -0.0210161842, -0.0087752827, 0.0810453594, -0.0573070012, 0.0418187119, 0.0414340422, 0.0944865793, -0.0025248309, 0.0905988514, 0.0180393085, 0.0550281368, 0.0166019164, -0.0378282852, -0.0108882450, -0.0305862483, 0.0749376342, 0.0184085444, -0.0593244210, 0.0173390843, 0.0710194707, -0.0278854445, -0.0518962480, 0.0780109987, -0.0093409680, 0.0627077147, 0.0576159507, 0.0466384180, 0.0553834923, -0.0393328406, 0.0303531904, 0.0009288807, -0.0083953552, -0.0564823821, 0.0371159762, -0.0031251812, 0.0028100305, -0.0632305443, 0.0222434662, -0.0422825292, -0.0503800213, -0.0338893831, -0.0354046747, 0.0020194091, -0.0374017544, -0.0610967167, 0.0434345268, -0.0052070324, -0.0045119370, 0.0350975730, 0.0420322716, -0.0297777932, -0.0003776152, 0.0485629812, -0.0698546544, -0.0738597289, 0.0634305403, 0.0343856625, -0.0191458240, -0.0723349825, 0.0456240140, -0.0175859220, -0.0433947816, -0.0155700315, -0.0579685569, -0.0769820288, 0.0270261485, -0.0611670315, 0.0249621831, 0.0596485138, 0.0551598296, 0.0487942435, 0.0335620269, -0.0275918394, 0.0444296375, 0.0083152493, -0.0486534424, 0.0610452592, 0.0058110552, -0.0296486560, -0.0000714532, -0.0409963503, 0.0012266858, -0.0467649810, -0.0103731817, 0.0353570841, -0.0564516634, -0.0244267266, 0.0416956618, 0.0469474792, 0.0561536774, -0.0138854664, -0.0019481325, -0.0488757305, 0.0103519000, -0.0233472437, 0.0218120981, -0.0769867152, 0.0585903898, -0.0636940598, -0.0658206046, -0.0009489350, 0.0454756618, 0.0306848697, 0.0458725318, -0.0529319793, 0.0489068814, 0.0655255392, -0.0544992834, -0.0536666922, 0.0227679610, -0.0093549034, -0.0018608050, -0.0590903386, -0.0149575947, -0.0726090297, 0.0447745100, -0.0773009062, -0.0083088204, 0.0067570372, 0.0092243133, 0.0056388918, -0.0005913367, 0.0173377730, -0.0728159919, 0.0175861046, -0.0513692275, -0.0189728551, 0.0634539574, -0.1006038040, -0.0342060104, -0.0370309800, 0.0041795461, 0.0289830640, 0.0000901373, 0.0630894974, 0.0257937964, 0.0045707976, -0.0718691945, -0.0375456214, 0.0506076738, 0.0542757623, -0.0025396638, 0.0388018563, -0.0067182672, 0.0088124778, 0.0000634635, -0.0139611727, 0.0756449401, -0.0291700419, 0.0086547770, -0.0219152868, 0.0350699835, -0.0590461567, 0.0409204736, 0.0313619189, -0.0445550606, -0.0953501239, -0.0230443198, 0.0308032334, -0.0005265489, -0.0410145484, -0.0306395181, 0.0506573357, -0.0329217762, -0.0611943379, 0.0426542833, -0.0261587538, -0.0072936560, -0.0679229498, -0.0148421805, 0.0109348409, -0.0195047650, 0.0270811263, -0.1045599803, 0.0646140426, 0.0903931484, -0.0271683428, 0.0242795441, -0.0794717371, 0.0392903872, -0.0946806520, 0.0248980541, -0.0227661356, -0.0686040744, -0.0721054524, -0.0576005913, -0.0634641871, -0.0120658884, 0.0291041229, -0.0075071864, 0.0863443464, -0.0231764205, -0.1023099422, 0.0538649820, 0.0560955368, -0.0469899029, -0.0774181411, 0.0152793489, 0.0284677949, -0.0003922034, 0.0272398405, 0.0383527167, 0.0036325061, -0.0556459576, 0.0342604667, 0.0336215757, 0.0139202410, 0.0110102044, -0.0055712769, 0.0270693805, -0.0773046240, 0.0693833157, -0.0311991740, -0.0767121688, 0.0349527746, -0.0920662433, -0.0273444504, -0.0342452228, -0.0405975059, 0.0824457631, 0.0412086882, -0.0611115918, -0.0057124160, -0.0218541920, -0.0371159501, -0.0124490215, -0.0351584367, 0.1011094153, -0.0172393396, 0.0020755141, -0.0133519620, 0.0477390364, 0.0024842701, 0.0744578764, 0.0261899941, 0.0336227641, 0.0368303694, -0.0873709470, -0.0025112806, -0.0447135083, -0.0333042331, -0.0155868614, -0.0638159886, 0.0511709601, 0.0489141606, 0.0179027822, -0.0723394603, 0.0524130426, 0.0001712906, 0.0703406632, 0.0400050171, -0.0589556172, 0.0889790431, -0.0019615879, -0.0536273047, 0.0350517407, -0.0838633180, -0.0133262118, 0.0423365198, -0.0383830816, -0.0561691374, -0.0481339507, 0.0452370718, -0.0770998225, -0.0326323062, 0.0223538913, 0.0589379407, -0.0520393364, -0.0580687113, 0.0008697485, 0.0532127172, 0.0755105764, 0.0554567464, 0.0893199667, -0.0155297630, -0.0153925372, -0.0175622012, -0.0129614100, -0.0582183115, 0.0085907979, -0.0277108643, -0.0547967255, -0.0151571054, 0.0049140332, -0.0870316774, 0.0243607946, 0.0511754155, 0.0352570675, -0.1006487161, -0.0413401872, 0.0150239123, 0.0817305744, 0.0304094516, -0.0283218659, -0.0045892983, -0.0716456398, -0.0475098602, 0.0049788486, 0.0784352794, 0.0491123572, -0.0188403949, -0.1033963487, -0.0394019336, 0.0725738779, 0.0858580247, 0.0551966615, -0.0122786770, -0.0369503684, 0.0523166768, -0.0026250251, 0.0588679165, 0.0844768733, -0.0108960895, 0.0180579275, 0.0304949190, -0.0813322142, 0.0328960866, 0.0563077107, 0.0179981422, 0.0278517921, 0.0253914520, 0.0000185024, 0.0501910225, -0.0876290277, -0.0270874612, 0.0445114598, -0.0510360450, -0.0352844000, 0.0413150266, 0.0731564388, -0.0589108877, 0.0155673809, -0.0040715709, -0.0528331101, 0.0379294120, 0.0693165883, 0.0569043383, 0.1095047817, -0.0091426764, -0.0002681704, -0.0321061611, 0.0198576320, 0.0588018633, 0.0454836600, -0.0550310984, 0.0247024838, 0.0287922267, 0.0675375983, -0.0485916771, 0.0245292392, 0.0325302556, 0.0266853552, -0.0388158374, -0.0205116365, 0.0210968219, -0.0210180692, 0.0128333969, 0.0374328867, -0.0207443703, 0.0057716067, 0.0251124334, -0.0283335205, -0.0222558808, -0.0381357037, -0.0261826050, -0.0206332430, -0.0381043367, -0.0163436830, 0.0544839166, 0.0415216722, -0.0386585817, -0.0447061695, -0.0690249056, -0.0540752597, -0.0418342687, 0.0322207399, -0.0309785381, 0.0404990762, 0.0115852095, 0.0308819059, 0.0499291457, 0.0233499743, -0.0487568229, -0.0664664209, -0.0373803824, 0.0995275825, -0.0319881253, 0.0090313833, -0.0890410393, -0.0649564862, -0.0555728078, 0.0648069233, 0.0454724468, 0.0513423905, 0.0015916793, 0.0181136783, -0.0654178560, -0.0079921195, -0.0375257321, -0.0257179383, -0.0090620769, 0.0582644939, 0.0524345450, 0.0377641171, -0.0571147986, -0.0537989922, 0.0105796745, -0.0507783182, -0.0231554881, -0.0648641884, 0.0724816248, 0.0132790385, -0.0039870632, -0.0547812060, 0.0296387151, 0.0459699482, 0.0345945656, 0.0914628059, -0.0210055523, -0.0220370609, -0.0394092090, -0.0282680076, 0.0172170028, 0.0186362453, 0.0442077368, -0.0070904279, -0.0240923781, -0.0282616299, -0.0660234392, 0.0633082762, 0.0425902493, -0.0210717116, 0.0687179491, -0.0127024436, -0.0009844595, -0.0077915937, -0.0342496336, -0.0420538820, -0.0230090376, -0.0527253672, 0.0351245515, 0.0581509396, -0.0195540357, 0.0553237163, -0.0551295765, 0.0437789485, -0.0270432755, 0.0407276489, -0.0535698906, -0.0525189191, 0.0673904791, 0.0840857625, 0.0263336115, -0.0139214909, -0.0580412112, -0.0430521145, -0.0686760545, 0.0713348314, -0.0140786087, 0.0296113342, -0.0310235880, 0.0256149843, -0.0223856643, 0.0214922540, -0.0620550178, 0.0567801297, -0.0581357516, -0.0437685438, 0.0270756260, 0.0021421327, -0.0087724030, 0.0390262380, 0.0186937284, -0.0371669680, 0.0354320705, 0.0644403771, 0.0688177198, -0.0177981518, -0.0180415269, -0.0007640575, -0.0210170522, -0.0378704295, 0.0319782607, 0.0332026780, 0.0362236239, -0.0652035475, -0.0258019567, 0.0162120238, -0.0238703806, 0.0458395891, -0.0201631691, 0.0070007513, 0.0011568742, 0.0591966659, -0.0824847445, 0.0061295708, 0.0318575874, 0.0268373676, 0.0225426573, -0.0107403090, 0.0385514461, -0.0230127312, 0.0374361053, 0.0232666265, 0.0341381729, 0.0804260224, 0.0795194283, 0.0174014270, 0.0485306010, -0.0251607094, 0.0277040992, -0.0725792199, -0.0460475869, -0.0318425298, -0.0510516651, -0.0431107730, -0.0497658737, 0.0445153415, -0.0087250341, 0.0137046464, -0.0656002015, -0.0414984152, -0.0010626583, -0.0982074812, 0.0289719217, -0.0973364636, -0.0422967151, -0.0426443778, -0.0101140589, -0.0204464737, 0.0247796774, 0.0061707981, -0.0649680197, -0.0657352060, -0.0635332465, -0.0664533302, -0.0329408832, 0.0128841540, 0.0509128720, 0.0593436882, -0.0461573265, -0.0055451575, 0.0452544242, 0.0913809910, 0.0161058493, 0.0852381140, -0.0571336187, 0.0483549945, -0.0853367150, -0.0627558902, 0.0409547687, 0.0157959368, 0.0410572514, 0.0812143609, -0.0151159875, -0.0508630462, -0.0110973613, 0.0477666296, -0.0160123669, -0.0417452902, 0.0693115741, 0.0384820104, 0.0277645048, -0.0031732735, 0.0769650415, 0.0601163730, 0.0572237186, 0.0838403553, -0.0379920937, -0.0226143226, -0.0367847383, 0.0418076254, -0.0448066518, -0.0169285331, 0.0082051605, -0.0240311921, 0.0636038855, -0.0149245812, -0.0621158332, 0.0089072352, 0.0621934645, -0.0134200165, -0.0654772148, -0.0649979934, -0.0602029264, 0.0667479411, 0.0817144364, 0.0122643150, -0.0497800596, -0.0759993270, 0.0083760014, -0.0072978991, 0.0493889786, 0.0851117745, -0.0072228932, -0.0440165251, -0.0161080416, 0.0168368723, -0.0728277192, 0.0426147319, 0.0510392673, -0.0520797260, 0.0312588029, 0.0653042793, -0.0008461872, 0.0119319251, -0.0184051413, 0.0953963697, -0.0490235202, 0.0892799944, -0.0417825505, -0.0407994576, -0.0580082089, -0.0316523872, -0.0291250926, 0.0336193368, -0.0190286245, 0.0617055222, -0.0103293071, -0.0348203741, 0.0666802227, -0.0113547901, -0.0934395790, 0.0147086233, 0.0627890229, 0.0659015775, -0.0557432994, -0.0300430711, 0.0545824096, -0.0364251249, 0.0333799832, 0.0544372424, 0.0337564386, -0.0351773240, 0.0590911582, 0.0650016591, 0.0112416521, -0.0140970880, -0.0602150485, -0.0769643411, 0.0056782598, -0.0459966883, 0.0595554896, 0.0624295175, -0.0583919771, -0.0735094845, -0.0106179463, -0.0072243456, 0.0416778959, 0.0296315998, 0.0771166310, 0.0524937436, -0.0312444847, -0.0605687350, 0.0165482853, -0.0299480297, 0.0591539219, -0.0453488082, 0.0099338312, -0.0082554901, -0.0157993715, -0.1010374874, -0.0543990098, -0.0244942587, 0.0304352082, -0.0336957052, 0.0428358205, 0.0531257167, 0.0499806404, 0.0049958401, 0.0048989858, -0.0040062428, -0.0615779348, -0.0548205674, -0.0184428468, 0.1127340943, -0.0341612287, -0.0269894525, 0.0375262089, -0.0120246094, -0.0084628360, 0.0412303433, 0.0536270887, 0.0395301543, 0.0080162212, -0.0136358114, 0.0171869155, -0.0317870416, 0.0054146266, 0.0124079613, 0.0723997727, -0.0425359569, 0.0567943826, -0.0129877692, -0.0044313120, 0.0817185640, 0.0432538241, 0.0366208963, 0.0554352179, 0.0079831043, 0.0465361066, 0.0439421795, -0.0096996427, -0.0058105509, -0.0248213485, 0.0401414260, -0.0021725991, 0.0321028791, 0.0343359858, 0.0655592829, -0.0362951495, 0.0189841483, -0.0055467612, -0.0463564582, 0.0256650951, 0.0036528504, -0.0175138172, 0.0071102697, 0.0156059135, 0.0546819009, 0.0011230971, -0.0369536355, 0.0375107974, -0.0131468736, -0.0231463723, 0.0292140245, 0.0233199652, -0.0189749356, -0.0420875810, -0.0260100663, -0.0151587827, -0.0162915271, -0.0792945698, 0.0309767965, 0.0063086362, 0.0551753677, -0.0927428529, 0.0195782091, 0.0301958211, 0.0414261408, -0.0519487895, -0.0815608799, -0.0628663898, -0.0186493229, -0.0666853562, 0.0069751972, -0.0175471511, -0.0957204252, -0.0230943058, 0.0045068851, -0.0501080714, -0.0290231276, -0.0321544223, -0.0060814144, 0.0562041365, 0.0103491787, -0.0106048062, 0.0696983859, 0.0182362162, -0.0241562799, 0.0292576049, -0.0018736417, -0.0619973168, 0.0111720301, -0.0337325744, 0.0690065250, 0.0055427998, 0.0060996362, -0.0447436497, -0.0104940142, 0.0138353528, -0.0343174487, -0.0101924799, 0.0513923243, 0.0532496199, 0.0263075884, 0.0486833081, 0.0744522065, -0.0238407869, -0.0038879921, 0.0371287912, 0.0525766015, 0.0384768285, 0.0303339716, 0.0510686710, 0.0014468585, 0.0922303349, 0.0433074199, -0.0641356632, -0.0995765179, 0.0446659997, 0.0071053365, -0.0641534701, 0.0312698446, 0.0464155413, 0.0096165016, 0.0200742260, 0.0151613494, 0.0902856886, 0.0082498891, -0.0258785691, 0.0020105997, 0.0037046717, 0.0366189219, -0.0363686495, 0.0106257973, -0.0347105823, -0.0379214771, -0.0972336009, 0.0404134393, 0.0816887021, -0.0780977160, 0.0027969549, 0.0867167264, -0.0295957979, 0.0355765820, 0.0458749719, 0.0435976498, 0.0129195945, -0.0128111010, 0.0369256027, 0.0869072378, 0.0240813177, 0.0093914159, 0.0208100174, 0.0471175052, -0.0086426996, 0.0338432156, 0.0733588189, -0.0165423304, 0.0537458211, -0.0715248883, -0.0004467545, -0.0042525511, 0.0454239920, -0.0348548964, 0.0323634744, 0.0415025428, 0.0548203029, 0.0314002931, -0.0434243307, 0.0019101956, 0.0073777083, -0.0142998351, 0.0018043108, -0.0190041475, 0.0037192267, -0.0361177213, -0.0020334967, 0.0364768431, 0.0178301688, 0.0402766392, -0.0985766724, -0.0147754289, 0.0673444569, -0.0619853027, 0.0378493108, -0.0304429866, 0.0606238134, -0.0103034386, 0.0002170534, -0.0481717512, 0.0023147131, -0.0155172339, -0.0328367762, 0.0472267717, -0.0098363422, 0.0002855474, -0.0483016074, -0.0505118668, -0.0665434673, -0.0464909337, 0.0221971218, 0.0908034742, -0.0209388845, -0.0528528430, -0.0507985726, -0.0444354378, -0.0200955495, 0.0338903703, 0.0191780347, 0.0319292843, -0.0330527760, -0.0501797386, -0.0677754804, 0.0723615214, -0.0104087498, 0.0749833062, -0.0196889639, 0.0781417415, -0.0615756027, -0.0750368461, 0.0008558193, -0.0151356179, -0.0146999527, 0.0166305806, 0.0190130472, -0.0321366675, -0.0222129431, -0.0565175302, 0.0585114732, 0.0073598698, 0.0313880146, -0.0127669172, -0.0194797963, -0.0033380494, 0.0148770344, -0.0747767836, 0.0696865469, 0.0648210719, 0.0781383812, -0.0238908324, -0.0278672241, 0.0352875330, 0.0058498159, 0.0517797954, 0.0305437185, -0.0851400420, -0.0168827325, 0.0156024592, -0.0554451533, -0.0565941744, 0.0234169103, 0.0345946886, -0.0261624753, -0.0661972687, -0.0253159013, -0.0481311157, -0.0836065114, -0.0009985518, -0.0392668284, 0.0898261666, -0.0629479066, -0.0232275743, 0.0200927015, -0.0551108830, 0.0095174545, -0.0332959853, -0.0042908778, -0.0301025975, 0.0045361612, -0.0479276814, -0.0414358899, 0.0482940897, 0.0715895817, -0.0407346413, 0.0529395565, -0.0154783428, 0.0614266694, 0.0835223049, -0.0725114271, 0.0574502982, 0.0826644748, -0.0173055269, -0.0514251627, -0.0470461436, -0.0179030448, 0.0580842905, -0.0400040336, 0.0387600474, -0.0038704493, -0.0092286412, -0.0307908263, 0.0461654551, -0.0621704124, 0.0168458354, -0.0607898198, -0.0484218523, 0.0468619503, 0.0045609097, 0.0520646498, -0.0855195224, 0.0774102658, -0.0333370566, 0.0646106601, -0.0204536952, -0.0455223992, -0.0285174362, 0.0510811694, -0.0148058990, 0.0799584240, 0.0062575112, 0.0594199523, 0.0770398080, 0.0818550810, 0.0463729538, 0.0071832412, 0.0400927700, -0.0580150150, 0.0505694114, 0.0105105182, 0.0121161658, 0.0325801112, 0.0325809903, 0.0394265205, 0.0499939248, 0.0888243094, -0.0220442340, 0.0332597755, 0.0237955935, 0.0167134143, -0.0404439084, -0.0582724996, -0.0069494471, 0.0081421668, 0.0730420873, 0.0377708450, -0.0101554934, -0.0905858278, -0.0839798152, 0.0307486430, 0.0889785364, -0.0692477822, 0.0021976973, -0.0284299757, -0.0573369935, -0.0737355649, -0.0407527946, 0.0348629057, 0.0008090702, -0.0757426769, -0.0391020663, -0.0195409823, -0.0177886989, 0.0470353849, 0.0125699397, 0.0345587395, 0.0312131401, -0.0716806203, -0.0447725505, 0.0862256438, 0.0119085908, 0.0079067294, 0.0253201481, -0.0283550099, 0.0923467949, 0.0409674309, -0.0326832980, -0.0014232646, -0.0344421044, 0.0757379681, 0.0520973951, 0.0186962392, -0.0263071172, 0.0602598377, -0.0310175512, 0.0111469766, -0.0638611838, -0.0320072621, 0.0679392740, 0.0501264594, -0.0515016392, -0.0197344348, 0.0995030180, 0.0415256880, 0.0024835397, 0.0168318171, -0.0373544730, 0.0123330718, -0.0666168183, 0.0011155183, 0.0151967295, 0.0232571233, 0.0571656935, 0.0818931758, -0.0739874095, 0.0201889072, -0.0617983788, -0.0627310798, 0.0531964265, -0.0548359416, 0.0792848468, 0.0277210493, 0.0148753570, -0.0385023132, -0.0465086699, -0.0352671370, -0.0288970713, 0.0008231549, -0.0365328155, 0.0364252701, 0.0061697192, 0.0506701656, -0.0613916367, -0.0518017374, -0.0120999916, -0.0933557823, -0.0132088456, 0.0047197770, 0.0374663509, -0.0569226705, 0.0261895731, -0.0504844710, 0.0533497818, 0.0336901695, -0.0285257120, 0.0016316103, 0.0537350401, -0.0389994830, 0.0708669722, -0.0496683903, 0.0280988328, -0.0253888424, -0.0502368659, 0.0073301070, -0.0017450618, 0.0546222664, -0.0230464302, 0.0481685847, 0.0113750212, -0.0695061088, 0.0728528053, 0.0853181854, 0.0403198525, 0.0258427076, 0.0253423899, 0.0321890488, 0.0935991257, -0.0620391034, 0.0563432239, 0.0167396497, 0.0806942955, 0.0398908630, -0.0828621536, 0.0484695584, 0.0021591266, 0.0526955016, 0.0713075325, -0.0127882259, -0.0207990482, 0.0090143727, 0.0738579780, 0.0260726083, 0.0812012181, 0.0443412922, 0.0532001704, 0.0210882276, -0.0046953638, -0.0744485185, 0.0883746222, -0.0325295702, 0.0082759159, 0.0759487450, -0.0864137337, 0.0115519222, -0.0688143298, 0.0588566996, -0.0497626364, 0.0056187715, 0.0175291952, 0.0070423991, 0.0200967547, 0.0370830223, -0.0791233405, -0.0074897734, -0.0173336118, -0.0569028035, 0.0366547555, -0.0088972664, 0.0345649347, -0.0649818182, 0.0492686704, -0.0370265581, 0.0448853523, -0.0352204964, -0.0351083837, -0.0657625198, -0.0350947529, -0.0139088817, -0.0397579707, -0.0489305891, -0.0375219658, -0.0012275892, 0.0365945101, -0.0396679044, -0.0090698851, 0.0496212915, 0.0295094550, 0.0619558878, 0.0364389718, 0.0650739372, 0.0567326657, 0.0231170915, -0.0365431681, 0.0841421336, 0.0598963760, 0.0515786670, 0.0348351076, 0.0517556667, -0.0129715735, 0.0857925639, -0.0496091433, 0.0368847512, -0.0856968910, 0.0244334992, -0.0262720082, -0.0078539355, 0.0045757755, -0.0292121451, 0.0025514022, -0.0619816892, -0.0447717197, -0.0025130578, -0.0270591043, 0.0282045696, 0.0062637995, -0.0343844779, -0.0093355458, 0.0008417783, 0.0352749527, 0.0139284385, 0.0356555097, -0.1077784821, -0.0639243200, -0.0320730619, 0.0433907546, -0.0288602971, 0.0007926454, -0.0658602268, 0.0500579476, 0.0674054101, 0.0711410567, -0.0144936973, 0.0395106189, 0.0178304017, -0.0065236320, 0.0013320108, 0.0938704163, 0.0226789396, 0.0487762988, -0.0236998331, -0.0361256599, 0.0609009191, -0.0653740913, -0.0168216191, 0.0187901668, 0.0241508037, -0.0048096362, 0.0500415713, 0.0090635624, 0.0547130667, -0.0149469012, 0.0419343077, 0.0172034036, 0.0773859620, 0.0199233610, -0.0695773289, 0.0154469050, 0.0866387784, 0.0585952699, 0.0095241433, -0.0875232518, -0.0395147018, 0.0719154552, 0.0735803023, 0.0403444618, 0.0716003776, 0.0531794541, -0.0452917404, -0.0302786883, -0.0435793586, 0.0636743754, -0.0142233912, -0.0499298163, -0.0760244727, -0.0368027650, 0.0028768280, -0.0211598556, 0.0015998553, -0.0138961682, 0.0331222527, -0.0354205109, 0.0489209518, 0.0382814445, 0.0611214042, 0.0595949851, 0.0211609155, -0.0106761241, 0.0044001029, 0.0044438057, 0.0173405297, 0.0051052775, 0.0119516896, 0.0845745653, 0.0297064073, 0.0710323751, 0.0134558389, -0.0387332402, -0.0540104397, 0.0150444452, -0.0513051301, 0.0186379515, -0.0056379260, 0.0427633114, 0.0271796212, 0.0188030601, -0.0259762239, -0.0411495343, 0.0331530645, 0.0323317572, 0.0454577133, -0.0104731722, 0.0016427321, -0.0140656941, 0.0206193645, 0.0768408403, 0.0428421199, 0.0792007297, -0.0275640320, 0.0994097292, -0.0455096662, -0.0578818321, 0.0320770442, -0.0417012796, -0.0004202431, -0.0217132606, -0.0221370962, 0.0416727811, 0.0550420694, 0.0096298270, 0.0582822710, 0.0098973652, 0.0421524830, -0.0089365486, -0.0344687328, 0.0526342690, 0.0767318383, -0.0152113615, -0.0673173591, -0.0593621321, 0.0058432133, 0.0391823277, -0.0461401120, -0.0885654986, 0.0879198164, 0.0052424162, -0.0805062130, -0.0259295609, 0.0867170021, 0.0399974547, -0.0061302711, -0.0466486998, -0.0004943493, 0.0421538204, 0.0732503235, -0.0801233053, -0.0362266302, -0.0410177670, 0.0397186317, -0.0426075757, 0.0560025759, 0.0781595185, 0.0433460772, 0.0445102155, -0.0642269328, 0.0757560730, -0.0068124691, -0.0855902731, 0.0130473804, -0.0107440501, -0.0094004739, 0.0045615761, 0.0563156195, -0.0514317267, 0.0634859428, 0.0226348899, -0.0442218259, -0.0073458184, 0.0168159939, 0.0009669901, 0.0305995606, -0.0602926575, 0.0898797363, 0.0014910314, 0.0010722335, 0.0174198039, 0.0695720091, -0.0105143478, 0.0424042903, -0.0478968322, 0.0926753581, 0.0684077144, 0.0528737605, 0.0271618012, 0.0016640710, -0.0446696281, -0.1133758128, -0.0068224273, -0.0891191810, 0.0649196431, -0.0166642293, -0.0314125791, -0.0372278094, -0.1225625724, -0.0879764780, -0.0315579958, -0.0310864057, 0.0195944495, 0.0295639411, -0.0554698147, -0.0040222085, 0.0568091683, -0.0245604832, -0.0387367122, -0.0518740714, -0.0243780166, -0.0529798083, 0.0326326415, 0.0009030314, 0.0320684873, 0.0320396237, 0.0881607533, 0.0728476271, 0.0371286534, -0.0507144369, -0.0509052724, 0.0208948776, -0.0076811570, -0.0137469992, 0.0512854010, -0.0838447809, -0.0185884088, 0.0507973433, -0.0693624765, -0.0714915022, -0.0662529841, -0.0221567303, -0.0582793206, 0.0909890532, 0.0114336275, -0.0117685962, 0.0092821456, 0.0000707501, 0.0015751636, -0.0047522583, -0.0427300036, -0.0257206075, 0.0593627766, -0.0259901993, -0.0208574552, 0.0268761460, -0.0038612443, 0.0007268418, -0.0253442116, 0.0034239432, -0.0268103853, 0.0793926939, 0.0854754224, 0.0320669189, -0.0020696199, 0.0032813554, -0.0123031288, -0.0797146782, -0.0011605751, 0.0538653284, 0.0094854729, 0.0011055311, -0.0875373185, -0.0725948736, -0.0249942001, 0.0429140590, -0.0439114496, -0.0355002694, -0.0958524197, -0.0713718757, 0.0487806238, 0.0365944318, -0.0373627804, -0.0284597240, -0.0236033034, -0.0023984278, 0.0052614864, 0.0751529858, 0.0221692175, -0.0151252309, 0.0711682439, -0.0429773815, 0.0629985631, 0.0736512840, 0.0095479116, -0.0266206171, 0.0392578766, -0.0934862196, -0.0095411623, -0.0531282835, -0.0516637936, 0.0108791990, -0.0015943552, -0.0609999672, -0.0770824924, -0.0207146779, -0.0127544720, 0.0249569938, 0.0888366848, 0.0274908952, 0.0593684465, 0.0096336706, -0.0055228821, -0.0336518176, 0.0209512562, -0.0079319151, 0.0156120304, -0.0068815933, -0.0258868448, 0.0720126554, -0.0445798747, -0.0109324008, -0.0315428190, -0.0023497432, -0.0019480988, 0.0735104457, -0.0374441110, 0.0531351417, -0.0315500833, -0.0783013105, 0.0452483967, -0.0389757454, -0.0002374822, -0.0440744013, 0.0103362035, 0.0091157770, -0.0628426224, 0.0124072172, 0.0815977082, 0.0482487828, -0.0714072287, -0.0245558321, -0.0558312498, -0.0101399804, -0.0609878376, -0.0146054374, -0.0030367693, -0.0946208015, 0.0424257405, -0.0909672454, 0.0889318585, 0.0107116569, 0.0064941761, 0.0518474020, 0.0426331721, -0.0093659498, -0.0520080253, -0.0225371718, 0.0695178956, 0.0164862834, -0.0468195938, -0.0227626413, 0.0009398847, -0.0164822638, 0.0054203514, 0.0350702219, -0.0102665070, -0.0063062031, -0.0975135043, 0.0228476599, -0.0923752785, 0.0587151237, -0.0630978793, -0.0432738774, -0.0587705001, -0.0677519739, -0.0145818777, 0.0145435948, 0.0716525018, -0.0615713894, -0.0686616004, -0.0187470075, 0.0865275264, 0.0411164127, 0.0615188219, -0.0926232338, -0.0463258550, -0.0463530682, 0.0139933396, -0.0323481597, 0.0525357127, -0.0508700125, 0.0722531304, -0.0354373865, -0.0450594276, -0.0206014123, 0.0191087779, 0.0354949161, -0.0047702086, 0.0098127062, -0.0641749799, 0.0055017457, 0.0065435302, -0.0052970601, 0.0250900667, -0.0542912856, 0.0299548935, 0.0336020701, -0.0175490063, -0.0389156118, 0.0485155582, -0.0446678586, -0.0090418654, 0.0588374026, 0.0281376932, 0.0167227238, -0.0170517862, -0.0312806591, 0.0741333961, -0.0594997481, -0.0511546731, 0.0199955720, -0.0749138147, 0.0472949818, -0.0382157303, 0.0440199785, -0.0178840049, 0.0051951664, -0.0886347666, -0.0613002889, 0.0552953593, 0.0695248768, 0.0366736092, -0.0563910753, 0.0294642448, -0.0184181556, -0.0128284032, 0.0078967288, -0.0677057579, 0.0329481103, 0.0493160188, -0.0215017404, -0.0276274979, 0.0122530116, -0.0737992227, -0.0186236855, -0.0467401221, -0.0112791611, -0.0017004514, -0.0353856832, 0.0299308784, 0.0151751852, 0.0450847074, 0.0045618224, -0.0198742691, -0.0077629285, 0.0265599675, 0.0810742080, -0.0046325894, -0.0616349429, 0.0309815295, -0.0444773547, 0.0361901112, 0.0245144814, 0.0255151056, 0.0149196545, 0.0446626954, 0.0124893514, 0.0758223012, 0.0424135067, 0.0452410989, -0.0343883969, -0.0363242924, 0.0666329488, 0.0058738631, -0.0326238647, 0.0376257300, -0.0008494836, -0.0070373071, 0.0754864216, -0.0113308709, 0.0328944735, 0.0643007904, 0.0330539234, 0.0183764249, 0.0292464960, 0.0236122590, -0.0265006199, 0.0357845575, -0.0476425365, 0.0079369554, 0.0625090003, -0.0347456113, -0.0390115678, -0.0062324619, -0.0314954259, -0.0059100096, 0.0734845549, 0.0274768192, -0.0899743065, -0.0098972498, -0.0465403572, 0.0595780201, -0.0453184433, 0.0269135442, 0.0571399368, 0.0176163055, -0.0031458410, -0.0161748659, 0.0478379503, 0.0158917587, -0.0015841819, 0.0463705249, -0.0534305237, 0.0685471743, 0.0217996873, 0.0570704080, 0.0560032986, 0.0660101846, 0.0283382460, -0.0680111647, 0.0310210939, 0.0371131338, -0.0587665774, -0.0154025694, 0.0149051314, 0.0408476628, 0.0481728725, 0.0315575413, 0.0800876394, -0.0536916740, 0.0242533889, 0.0840954930, 0.0499647781, -0.0327391811, 0.0679715574, -0.0156980660, 0.0395262763, -0.0252314676, 0.0827636197, -0.0279511083, 0.0492917150, 0.0588754490, -0.0169992819, -0.0686387718, -0.0870905071, 0.0219997130, -0.0339046717, -0.0049320143, 0.0174057186, -0.0374867246, 0.0425996594, 0.0163720455, 0.0706000701, 0.0084388051, 0.0590562858, 0.0170837175, -0.0364337340, 0.0023592811, 0.0289314874, 0.0679729581, -0.0424334407, 0.0005440838, -0.0129582286, -0.0284125526, -0.0768292472, -0.0655893609, 0.0290042087, 0.0025672310, 0.0221200325, 0.0240155067, -0.0200070888, 0.0173884332, 0.0127941584, 0.0113088125, -0.0095800161, 0.0513638370, 0.0027245379, 0.0075302552, -0.0011299384, 0.0220233016, -0.0779788271, 0.0472451821, -0.0802579299, 0.0584304705, -0.0347641557, -0.0196898282, -0.0436385460, -0.0207042545, 0.0463323183, 0.0109659992, 0.0108914524, 0.0438825637, 0.0563991331, -0.0875490978, -0.0318886787, 0.0257606152, -0.0331596546, 0.0374417156, -0.0233576559, 0.0152525278, -0.0112239122, 0.0129914768, 0.0844395235, -0.0341290459, 0.0420246869, 0.0106429458, 0.0008778102, 0.0445225015, -0.0043442734, 0.0380099341, 0.0719229579, 0.0179994125, -0.0076429341, 0.0478586406, -0.0310007781, 0.0559835508, -0.0407982282, -0.0230598040, 0.0034141580, 0.0063068308, -0.0319904983, 0.0464390777, -0.0360267907, -0.0412876606, 0.0649269521, -0.0244891755, -0.0786233023, -0.0275227688, 0.0141319158, 0.0275988486, -0.0681478158, -0.0248965677, -0.0451631770, -0.0452661961, -0.0841144621, -0.0401476584, 0.0440653898, 0.0158370547, 0.0177443735, -0.0361237936, 0.0119286655, 0.0627741292, -0.0067561259, -0.0102313654, -0.0771387145, 0.0450213775, -0.0241109412, 0.0291475505, 0.0472048409, 0.0336030796, 0.0385363623, 0.0058175079, -0.0040128222, -0.0010448176, 0.0147266574, 0.0029271932, -0.0570897982, -0.0559545867, -0.0005055367, -0.0294144899, -0.0408435278, -0.0016687774, 0.0535107516, 0.0378061272, 0.0234471895, -0.0374758020, 0.0663019121, -0.0094334129, -0.0216949917, -0.0607084632, -0.0287336130, 0.0345880613, 0.0178451557, -0.0683765635, 0.0448178127, -0.0068211062, -0.0615810528, -0.0406893902, 0.0087855291, -0.0134764360, -0.0350063518, -0.0592695884, -0.0445032679, 0.0040852912, -0.0698532611, 0.0302233733, 0.0539402999, -0.0304702390, 0.0609098524, -0.0619484596, 0.0327772014, -0.0958498865, 0.0507203117, -0.0697625130, 0.0146355629, -0.0048988331, 0.0103571843, 0.0136524010, -0.0258573890, -0.0481991954, 0.0532743484, 0.0237878915, 0.0052244486, 0.0219272804, -0.0624913052, 0.0570012406, -0.0799653679, 0.0215973593, 0.0418952629, 0.0184499323, -0.0605770312, 0.0142924618, 0.0667606220, -0.0502175763, 0.0695657060, -0.0225941911, 0.0171866436, 0.0245191082, -0.0057578362, -0.0232845601, 0.0184758361, 0.0333629251, -0.0695477128, 0.0547756851, -0.0543155856, 0.0224294495, 0.0345327444, -0.0147850625, 0.0514862612, 0.0132141197, -0.0376451239, 0.0259118956, -0.0558548495, -0.0008580984, 0.0153245572, -0.0437222347, -0.0662044808, -0.0011936154, -0.0286369305, -0.0554107651, -0.0072931782, -0.0566799752, 0.0300990790, 0.0586794727, 0.0574423969, 0.0502681918, -0.0185632315, 0.0259125959, -0.0644325241, 0.0190175660, 0.0022648957, 0.0061679496, 0.0488471277, -0.0495430939, -0.0901385248, 0.0158736594, 0.0279085524, 0.0342493691, 0.0311599579, -0.0097234547, 0.0008854458, 0.0731572285, 0.0728881359, 0.0376405567, 0.0601262189, -0.0580286756, -0.0505509712, -0.0295670871, -0.0471899956, 0.0779946595, 0.0243407525, -0.0582189932, -0.0389264151, 0.0339464881, 0.0395957679, -0.0343641154, 0.0804144815, -0.0321655832, -0.0605356134, 0.0430079773, -0.0509325638, -0.0706249550, -0.0174962003, 0.0723417699, 0.0630578026, 0.0130716246, 0.0623631366, 0.0196850467, -0.0231773313, -0.0600326993, 0.0246148761, -0.0426328480, -0.0201605558, -0.0407218151, 0.0643773824, -0.0129054189, -0.0592232756, 0.0561042838, 0.0130984113, -0.0056743002, 0.0507994518, -0.0266018342, -0.0204514079, 0.0525507778, -0.0312495325, -0.0424406976, -0.0053884503, 0.0779673606, 0.0097583039, -0.0227878783, 0.0561328046, -0.0115938885, 0.0261433888, 0.0368072689, -0.0121157560, 0.0123806838, 0.0267139263, -0.0231762771, -0.0681008697, -0.0448413566, -0.0230138414, -0.0266530570, 0.0223150011, -0.0108250668, -0.0015943212, 0.0024247461, 0.0429921970, -0.0209305920, -0.0171764772, 0.0822164863, -0.0089597572, -0.0296707954, -0.0034575460, 0.0143676791, 0.0415953621, -0.0489870273, -0.0709452704, -0.0242601000, -0.0268670339, -0.0295857303, 0.0494729355, 0.0531855114, -0.0140499063, 0.0015754644, -0.0324516147, -0.0017620621, -0.0011047850, -0.0213674530, 0.0204415228, -0.0051955697, 0.0327278599, 0.0437808335, 0.0118549950, 0.0102066491, 0.0701741725, -0.0225521494, -0.0157919079, -0.0086152591, 0.0607009642, 0.0118467342, -0.0074525410, -0.0976972505, 0.0011078685, 0.0298542976, -0.0305562615, -0.0394181870, 0.0117643736, -0.0383563042, -0.0654508546, 0.0549081787, 0.0496784337, -0.0051791812, 0.0864279941, -0.0837627798, -0.0583659671, -0.0087823430, -0.0389990658, 0.0597391203, 0.0225145910, 0.0754283443, -0.0040945048, 0.0632491410, -0.0275229439, -0.0414529406, 0.0687933415, -0.0287315454, -0.0964152738, -0.0151647087, 0.0466488078, 0.0719783232, -0.0764848888, -0.0000517454, 0.0312940627, 0.0129889986, 0.0417604893, 0.0070499810, 0.0436695218, 0.0604826733, -0.0761039853, -0.0528240018, -0.0405052267, -0.0732561275, -0.0356390513, 0.0715084150, 0.0334343351, -0.0586579740, 0.0351174176, 0.0476984680, -0.0352845490, 0.0781616643, 0.0576531775, -0.0182804093, -0.0027513660, -0.0244243424, -0.0624592863, 0.0882156342, -0.0699039474, 0.0374966711, -0.0160820354, 0.0181926657, -0.0343864784, -0.0835925788, 0.0816021711, -0.0134962620, -0.0141391540, 0.0011330679, 0.0473590195, 0.0535923392, 0.0267798342, -0.0143993050, 0.0175277740, 0.0590209365, -0.0045552542, 0.0439604148, 0.0308294520, -0.0254955366, 0.0587889962, -0.0473623686, 0.0222043041, -0.0389472842, -0.0409933925, 0.0563509651, 0.0607417263, 0.0296695251, 0.0656280667, 0.0965150893, -0.0034664806, 0.0247359108, -0.0387205556, 0.0282849260, -0.0525940731, -0.0294256620, -0.0274532959, -0.0421307236, 0.0489190482, -0.0287613254, 0.0340560488, 0.0070104930, 0.0451927595, -0.0272788256, 0.0033574440, 0.0143715758, -0.0604626164, -0.0111476881, -0.0124398917, -0.0633561835, 0.0492767096, 0.0951295942, -0.0366174839, 0.0455266573, 0.0391870141, 0.0467820205, 0.0360957831, -0.0406920873, 0.0193830319, 0.0673266277, 0.0304545816, -0.0787857547, 0.0185712017, 0.0396187939, -0.0187375601, -0.0076693064, 0.0302450042, 0.0414536595, -0.0097326441, -0.0445976891, 0.0535692945, 0.0614134818, -0.0399449691, -0.0033401155, -0.0592384040, 0.0400550067, 0.0405690894, 0.0900795236, 0.0697688833, 0.0217337422, -0.0832413286, 0.0430800058, -0.0705476850, -0.0461541191, 0.0503529161, -0.0633680001, -0.0325932577, 0.0309459064, 0.0037442944, 0.0382807143, 0.0530596152, 0.0319610387, 0.0123053836, -0.0552923866, -0.0391785651, 0.0297600292, 0.0592287108, -0.0109825777, 0.0472533517, -0.0529130846, -0.0204651374, 0.0156091750, 0.0457478687, -0.0194802210, -0.0046405937, -0.0061888485, 0.0398406759, 0.0909215435, -0.0426504947, -0.0303061958, -0.0503130034, 0.0527277365, -0.0050803600, 0.0511933900, -0.0623818673, 0.0277861040, 0.0157061312, -0.0836986601, 0.0402529761, -0.0271840841, 0.0507414080, -0.0047422554, -0.0326530859, 0.0063728392, 0.0578170270, 0.0259735305, 0.0652757511, 0.0605007075, -0.0445836224, -0.0486494824, 0.0234768968, -0.0318724811, 0.0258412845, 0.0731521770, 0.0193436872, -0.0486631617, 0.0474964716, -0.0189183541, 0.0095124338, 0.0151691800, 0.0079195742, 0.0516624860, -0.0567293614, -0.0170435589, 0.0085638352, -0.0204151664, 0.0314322300, 0.0574173220, 0.0630180687, -0.0266164411, 0.0181911848, -0.0214358848, -0.0148424339, -0.0295823850, 0.0559123568, 0.0639028847, -0.0009477952, -0.0192380100, 0.0257790089, -0.0322301909, 0.0608993396, 0.0315044336, 0.0628938079, 0.0070652226, 0.0105994726, -0.0556561165, -0.0360463783, 0.0047263610, -0.0025977283, 0.0431722961, 0.0468093865, -0.0431074053, 0.0387959741, 0.0381923430, -0.0261770971, 0.0620491356, -0.0404196084, 0.0359484442, 0.0090851095, -0.0189008415, 0.0009473371, -0.0100587020, 0.0330328532, 0.0416227728, 0.0755186975, -0.0419377610, -0.0231101606, -0.0467177629, 0.0403984785, -0.0604889728, -0.0491405614, 0.0731892958, 0.0584700331, 0.0315802917, -0.0595726855, 0.0084956689, -0.0387328528, 0.0205485281, -0.0537918322, -0.0331554748, -0.0185665507, 0.0619781539, 0.0415977724, 0.0173672065, 0.0156954061, -0.0061166659, -0.0020531504, 0.0027411552, -0.0515026711, 0.0302844029, 0.0616817214, -0.0313852616, -0.0129615739, 0.0432536826, 0.0474179275, -0.0575833581, -0.0339832492, -0.0342503525, -0.0153306359, 0.0210494548, 0.0382391512, -0.0507290661, -0.0415286794, -0.0320701972, -0.0585465394, 0.0200537276, 0.0197159108, -0.0434884913, -0.0418043509, 0.0471075475, -0.0285998285, 0.0196432993, 0.0757687613, -0.0458533838, -0.0390511528, -0.0109606767, -0.0973850414, -0.0072251824, 0.0142667005, -0.0520932637, -0.0498247296, 0.0373154469, -0.0718388110, 0.0449405424, -0.0324003845, 0.0031496112, -0.0299215242, 0.0336822979, -0.0065531461, 0.0570703857, -0.0479579009, 0.0158682726, -0.0006759331, 0.0134484014, 0.0077415681, 0.0747030601, -0.0101394570, 0.0302766431, -0.0511646420, 0.0151460813, 0.0053904606, -0.0434417613, -0.0206701271, -0.0602987632, -0.0280437209, -0.0161899682, -0.0177659206, 0.0148168905, 0.0434524007, 0.0740942210, 0.0427788086, -0.0142953061, 0.0015216040, -0.0036716920, -0.0780111104, 0.0282500852, 0.0331250094, -0.0033799123, -0.0305077061, -0.0215652809, 0.0708340630, 0.0795756429, 0.0127949603, 0.0066244323, 0.0101968953, -0.0799429342, 0.0098988879, 0.0680866688, -0.0148694096, 0.0760200769, 0.0607953630, -0.0783440843, -0.0432221852, -0.0552878082, 0.0168529525, 0.0461942144, 0.0622115955, -0.0104315793, -0.0022429849, 0.0579216145, -0.0259485263, -0.0694925636, 0.0498342440, -0.0280411057, -0.0211533755, 0.0612481833, -0.0165658873, 0.0042551421, 0.0217798520, 0.0500094257, -0.0446498133, 0.0531815216, -0.0218259785, 0.0445937701, -0.0423417427, -0.0467495807, -0.0338105150, -0.0492008962, -0.0614024848, 0.0286777858, 0.0478463657, -0.0677097961, 0.0315406434, -0.0061011375, -0.0329506025, -0.0661581010, -0.0219296310, 0.0540438257, -0.0407779887, 0.0405922905, 0.0145058744, -0.0416289642, 0.0529583395, 0.0517535955, 0.0311737210, 0.0857059136, -0.0083219372, 0.0242268033, -0.0409063101, 0.0282647014, -0.0248147920, 0.0446839631, 0.0021847824, -0.0659476370, 0.0039346605, 0.0199899375, 0.0064499057, -0.0027126670, -0.0227089673, -0.0016387212, -0.0151777538, 0.0410600677, 0.0357842967, 0.0987270623, -0.0510253124, 0.0395756811, 0.0083157225, -0.0471684895, 0.0224267114, -0.0064391373, -0.0015378594, 0.0271229800, 0.0258516856, 0.0371626057, 0.0225103498, 0.0293822307, -0.0616193786, -0.0049497434, -0.0416097380, -0.0004576112, -0.0735407025, -0.0739880130, -0.0127516836, 0.0312067904, 0.0076032216, 0.0019461887, 0.0601726882, -0.0256911181, 0.0700256526, 0.0623301975, 0.0257341973, -0.0046628206, -0.0497401655, -0.0351809300, 0.0441782847, 0.0192963332, 0.0130674364, -0.0737727284, -0.0651549399, 0.0023242803, 0.0085483454, -0.0536318272, 0.0038172179, -0.0536810532, -0.0399636030, 0.0505434312, 0.0131446263, 0.0392053053, 0.0543273538, 0.0476476885, -0.0427251197, -0.0201368909, 0.0298439562, -0.0246577971, 0.0453600064, 0.0059632873, 0.0291248485, -0.0368418768, 0.0183510575, -0.0326413810, -0.0689593777, 0.0362844281, 0.0731497258, 0.0007461963, -0.0125668524, -0.0878045410, -0.0737320483, 0.0075815255, 0.0022716015, -0.0791649967, 0.0318226591, -0.0439183824, -0.0742937177, -0.0128946826, 0.0084347418, 0.0051475558, -0.0010325925, -0.0249849614, -0.0482438616, -0.0113819912, -0.0618021600, -0.0289162137, 0.0100157997, 0.0533203259, -0.0466179848, 0.0645033121, 0.0565279499, 0.0071362671, 0.0581617132, 0.0786929876, 0.0547294691, 0.0212897696, -0.0397552960, 0.0349738300, 0.0737997964, 0.0244904999, -0.0432023592, 0.0615779571, -0.0416373871, 0.0383798517, -0.0490564033, -0.0036640987, -0.0614298880, 0.0673002452, -0.0078759883, -0.0213604681, -0.0643358454, -0.0074719083, 0.0215195864, 0.0154486876, 0.0090962183, 0.0258639548, -0.0369872004, 0.0010238029, -0.0651456788, 0.0631824136, -0.0235682372, 0.0187436827, -0.0233129784, -0.0833846405, 0.0316552818, -0.0274456367, 0.0056166151, 0.0401393212, -0.0192795061, -0.0407870002, 0.0116286660, 0.0587898530, -0.0455059186, 0.0293423347, 0.0002100855, 0.0488083586, -0.0151302423, 0.0081943357, -0.0626053661, -0.0699984953, -0.0357007012, -0.0029280605, -0.0306072403, -0.0052661328, -0.0554173738, 0.0118419202, -0.0897831023, 0.0252372306, 0.0183719508, -0.0071477820, -0.0641479641, 0.0488159396, -0.0517318137, -0.0018577107, -0.0160336569, 0.0338508412, 0.0107105626, 0.0444826894, -0.0193346664, 0.0557532758, 0.0924488083, -0.0365110673, -0.0007252968, -0.0833198950, -0.0211301055, 0.0047730459, -0.0496474914, -0.0281547550, 0.0472920313, 0.0438439138, -0.0520877540, 0.0041244538, -0.0264220275, -0.0724544004, 0.0141339861, 0.0003559425, -0.0667028204, 0.0448043086, 0.0541486591, 0.0394021198, 0.0569418669, -0.0072854292, 0.0303267185, 0.0516577773, -0.0006863900, -0.0314098448, 0.0189715009, -0.0105402600, 0.0783828869, -0.0206837170, 0.0445897877, -0.0106468061, 0.0042234701, -0.0306467712, -0.0250921641, -0.0530006066, -0.0673258454, 0.0492164753, -0.0476483777, 0.0049359170, 0.0301434845, 0.0490124598, 0.0190786272, -0.0216044504, -0.0123189120, 0.0462315269, -0.0171286035, 0.0340548269, 0.0410328470, 0.0210214090, -0.0085131852, 0.0153668877, 0.0487301163, -0.0740245804, 0.0455911197, -0.0291765872, -0.0544804111, 0.0130179618, 0.0690786690, -0.0225442909, 0.0674704760, -0.0368476920, 0.0600204431, 0.0379520282, 0.0794647932, 0.0443483554, 0.0363884829, -0.0654483363, 0.0403241776, 0.0147435274, 0.0200025365, 0.0250301100, 0.0010908120, -0.0539048612, -0.0031733611, 0.0320695043, -0.0506692640, -0.0583058298, -0.0299587958, 0.0460552387, -0.0609363206, 0.0393476896, -0.0136034749, 0.0051228469, -0.0809363052, 0.0630672351, -0.0412019640, 0.0368945189, 0.0034683284, 0.0257138964, 0.0371042825, 0.0317877308, 0.0143289296, -0.0202892702, 0.0651927069, -0.0298806950, -0.0745611712, -0.0098630022, 0.0299532972, 0.0226277970, -0.0343863666, 0.0541600361, -0.0030060196, -0.0179380756, 0.0173903778, 0.0326099582, 0.0738773942, 0.0073870448, 0.0236528311, 0.0656605959, -0.0618880652, 0.0261459034, -0.0344249271, -0.0251485817, -0.0052530118, -0.0452356711, -0.0365405455, -0.0429177098, 0.0575372390, -0.0537958667, 0.0304377750, -0.0182349887, -0.0403719358, 0.0400655158, 0.0549661852, 0.1008278579, -0.0279323384, -0.0817091912, -0.0252179708, -0.0717466995, -0.0277469698, 0.0369666107, 0.0527729690, -0.0217444934, -0.0374769643, -0.0617788658, -0.0487149693, 0.0080001680, 0.0219473690, 0.0387711078, -0.0813933909, -0.0691221729, 0.0371231884, 0.0592739135, 0.0721781328, -0.0865368843, 0.0195356756, -0.0242066532, -0.0332663357, 0.0123801138, 0.0174578186, 0.0577058196, -0.0868183896, 0.0632733181, 0.0188556872, -0.0447269082, 0.0578384511, -0.0228566993, -0.0138302315, 0.0028044130, -0.0304002333, -0.0037887136, 0.0601097494, -0.1099622622, 0.0158664398, 0.0898629352, 0.0261128973, 0.0558014810, -0.0134487636, -0.0251049977, -0.0071018413, 0.0180260204, -0.0655926540, -0.0601105727, 0.0397628359, 0.0691277832, -0.0094565414, -0.0106093995, 0.0113874739, -0.0037101407, 0.0159648135, -0.0016558393, -0.0277461000, -0.0082692485, -0.0286007598, -0.0195567869, 0.0397149846, -0.0173362363, -0.0207264125, 0.0675644875, 0.0691192448, -0.0060183308, 0.0271773748, -0.0374442302, 0.0082773371, 0.0197976287, -0.0142437359, 0.0696080253, 0.0392626077, -0.0834172368, 0.0594009720, 0.0771283880, 0.0545616597, 0.1036725789, 0.0509443283, 0.0288892556, -0.0284161475, 0.0617307499, 0.0885250717, 0.0057526557, -0.0792741999, 0.0020943533, -0.0397555791, 0.0178382602, -0.0431354828, -0.0269772951, -0.0038317421, 0.0207124874, -0.0765553415, -0.0642187297, -0.0255578272, -0.0577544160, 0.0154141160, -0.0850877985, -0.0290220436, -0.0072874115, -0.0098222531, -0.0810238421, 0.0371550210, -0.0239650067, -0.0175085831, 0.0601456836, -0.0219939593, 0.0646577850, 0.0661136359, 0.0253289789, -0.0121935690, 0.0526993722, -0.0047981311, -0.0353270695, -0.0318766460, 0.0927021503, -0.0255638752, -0.0498509370, 0.0155419186, -0.0125502758, -0.0284466296, 0.0190058667, -0.0573806651, -0.0275904872, 0.0484732725, -0.0215046927, -0.0155832963, 0.0369022749, -0.0374291614, -0.0711692870, -0.0340609699, -0.0329962187, -0.0591352507, -0.0581879243, 0.0412850678, 0.0467640013, 0.0045083142, -0.0167265013, -0.0498008020, 0.0014915009, -0.0147865089, 0.0096246973, 0.0239831675, 0.0352946185, -0.0715894699, 0.0093823969, 0.0458881147, 0.0257665738, -0.0675801188, 0.0690604523, 0.0412699468, 0.0190117937, -0.0282921493, 0.0298931655, 0.0256414395, -0.0141392807, -0.0494014099, 0.0051753568, -0.0512650348, -0.0713623762, 0.0281251594, -0.0903085545, -0.0522112884, -0.0721323714, 0.0531287752, -0.0712419376, 0.0501113087, 0.0122919781, -0.0037411612, 0.0562375449, -0.0439697057, 0.0498236455, -0.0581039116, 0.0175051503, 0.0742511228, 0.0224407930, 0.0201602746, 0.0552311912, -0.0443121307, -0.0380454957, -0.0443708636, 0.0368866399, -0.0440537743, -0.0431398973, -0.0310995691, 0.0191304572, 0.0766682848, -0.0211413652, -0.0482882299, -0.0193611775, -0.0285983756, 0.0713677034, 0.0534427054, -0.0611107536, -0.0567168854, -0.0436598137, 0.0054068160, 0.0398263969, 0.0342423543, 0.0784822032, -0.0242456812, -0.0226671733, 0.0760298520, 0.0484942719, 0.0413868353, -0.0371560007, -0.0189441312, 0.0011829303, -0.0338040031, -0.0327295437, -0.0191568863, -0.0637504235, 0.0275260974, -0.0124811428, 0.0568618141, -0.0626632869, 0.0096012177, -0.0319024585, -0.0116011733, -0.0182377473, 0.0350295864, -0.0456442088, 0.0633064881, -0.0133785056, -0.0263860803, -0.0407001637, 0.0573050454, -0.0525227748, -0.0611979403, -0.0736745521, 0.0387045108, -0.0515755415, 0.0325871408, -0.0015995252, -0.0484572686, 0.0101736663, 0.0433029085, 0.0326887183, -0.0151145197, -0.0060569155, 0.0616875365, 0.1004111618, 0.0328335874, 0.0374143161, 0.0266605373, -0.0281111114, 0.0021903666, 0.0326225422, 0.0166399553, -0.0353758261, 0.0505615957, 0.0521835871, -0.0452636443, -0.0694446489, -0.0145632364, 0.0064469725, -0.0605026633, -0.0657532364, 0.0622387528, 0.0062818774, 0.0531028099, -0.0527960062, 0.0245314166, -0.0111205941, -0.0127757760, -0.0012843439, 0.0695534423, 0.0851968005, -0.0049938974, -0.0069308872, -0.0522193648, 0.0121866968, 0.0265567694, -0.0574062578, 0.0075008851, -0.0085677328, 0.0300427284, -0.0122472849, 0.0903568417, 0.0842109770, 0.0205861330, -0.0322517194, -0.0463910326, 0.0011834889, 0.0739448145, -0.0079622539, -0.0460380875, -0.0093806991, 0.0458495878, -0.0752141476, 0.0418569334, -0.0595561191, -0.0189681854, 0.0057623563, -0.0591187626, 0.0596678630, 0.0009888328, -0.0565831289, 0.0284342989, -0.0641553625, -0.0475689732, -0.0623020045, 0.0468241759, 0.0428651981, 0.0021344763, -0.0142869018, -0.0431343429, 0.1039156169, -0.0151393069, -0.0167656597, -0.0420450717, 0.0602326356, -0.0328494534, -0.0101603167, 0.0722275153, 0.0301553197, 0.0697723702, 0.0373509526, 0.0521811545, 0.0313108191, -0.0362715870, -0.0893681869, 0.0555262566, 0.0177446119, -0.0103296461, -0.0327286534, 0.0265070852, -0.0349928625, -0.0812700018, 0.0418075323, -0.0116661862, 0.0335845500, -0.0346302763, 0.0886762142, -0.0088012712, 0.0219597388, -0.0144311134, -0.0226221886, -0.0445739441, 0.0611365028, -0.0344205908, -0.0095035313, -0.0564204343, 0.0076519358, -0.0025262446, 0.0821529329, -0.0486229360, -0.0679906085, 0.0415304415, 0.0665697232, -0.0285448339, -0.0179197639, -0.0201517604, -0.0467591584, 0.0346904099, -0.0756707415, 0.0647204891, -0.0630142614, 0.0481591821, 0.0840231776, -0.0459993146, -0.0012485783, -0.0622680821, 0.0193709303, -0.0552804507, -0.0236837920, 0.0198999625, 0.0353889689, -0.0074822945, 0.0318607315, 0.0281979684, -0.0294200387, 0.0606338494, -0.0931300446, -0.0350279100, 0.0153524708, -0.0343233757, 0.0380980037, -0.0496292450, 0.0007291417, 0.0078718988, -0.0404571779, -0.0635634661, 0.0225279555, 0.0512690730, -0.0255112238, -0.0236113071, 0.0321834572, 0.0340351760, 0.0225052759, 0.0477327593, -0.0003533610, -0.0112590957, 0.0427836180, 0.0468101166, -0.0390923806, -0.0018051151, 0.0580779053, -0.0517811701, -0.0559272580, -0.0470461696, -0.0046609086, 0.0607970729, -0.0034221006, -0.0890418515, -0.0294382405, 0.0581913069, 0.0227780715, -0.0227743890, -0.0155314310, -0.0801302493, -0.0051585129, -0.0630168468, -0.0425974727, -0.0599684343, -0.0822646245, -0.0566546693, -0.0243688673, -0.0141631886, 0.0231804941, -0.0648041517, -0.0205005333, 0.0708400831, -0.0327562988, -0.0043365569, 0.0549594797, -0.0199702773, 0.0562296547, -0.0647427365, -0.0418006591, 0.0226118993, -0.0129626840, -0.0072092973, 0.0546187460, -0.0219183788, -0.0052261562, 0.0222871527, 0.0136326784, -0.0437433459, -0.0086143631, 0.0719738901, -0.0087293480, 0.0259129163, 0.0321051255, -0.0321419351, 0.0405756943, -0.0045839045, 0.0212644860, 0.0573519208, 0.0496727675, -0.0021061960, -0.0308888592, -0.0393103696, -0.0191625152, 0.0694950745, -0.0586135685, 0.0607763827, -0.0313672535, -0.0007102392, -0.0399588384, 0.0271375570, -0.0412506983, 0.0562245473, -0.0669715926, -0.0407981202, 0.0511641130, -0.0321558602, -0.0888085589, -0.0382795557, -0.0267797243, 0.0513654947, -0.0269932691, 0.0155918915, 0.0559468120, -0.0789264068, -0.0453464538, 0.0648798048, -0.0051205014, -0.0308818985, 0.0191142298, -0.0712736100, -0.0357834771, -0.0606944188, -0.0010856984, -0.0498517305, -0.0907855704, 0.0813418999, 0.0601369478, -0.0587699413, -0.0565611981, -0.0695913360, -0.0474901050, 0.0535696894, -0.0404619947, -0.0286112241, -0.0053991685, 0.0074730096, 0.0833677873, 0.0612494908, 0.0987400115, 0.0259795617, -0.0067187506, 0.0387717150, -0.0196468625, 0.0537616238, -0.0388375558, 0.0466269404, 0.0208580121, 0.0815557018, -0.0412612595, -0.0741909370, -0.0156552903, -0.0613721870, 0.0037556496, -0.0205961615, 0.0227753241, 0.0661204085, 0.0680553541, 0.0437888540, -0.0421440378, -0.0325752795, 0.0042353258, -0.0685904175, 0.0339598209, 0.0055591920, -0.0211720783, 0.0214835126, 0.0668898374, 0.0178958941, -0.0045763557, -0.0142354844, -0.0281692538, 0.0310710110, 0.0365762562, -0.0398368686, 0.0582260713, -0.0009173712, -0.0588463694, -0.0818709433, 0.0338184461, 0.0045974143, 0.0089693833, -0.0190347824, 0.0120627964, 0.0679267347, 0.0122793801, 0.0124415364, -0.0392180942, -0.0470540151, 0.0283559915, -0.0020408311, -0.0433556922, -0.0155982189, 0.0120378733, -0.0612921976, -0.0410669670, -0.0614559650, -0.0005846524, -0.0032402915, -0.0254958328, 0.0493320525, -0.0175142214, -0.0257051904, 0.0008116704, 0.0623803847, -0.0677407756, 0.0128725870, 0.0566994622, 0.0432271324, -0.0074738343, 0.0132187121, -0.0134628527, -0.0726078674, -0.0172726214, -0.0015075570, -0.0386045687, -0.0232733134, 0.0337929651, 0.0277950279, -0.0542003922, -0.0593966618, 0.0071270061, 0.0692296177, 0.0024342651, 0.0621175990, -0.0059073092, 0.0316070095, 0.0430623963, 0.0365972854, 0.0155367274, 0.0498039089, -0.0629156306, -0.0158729218, 0.0140423272, -0.0491722934, 0.0345109962, -0.0655161142, 0.0469759330, -0.0213393439, 0.0356050394, -0.0637049004, -0.0454554707, 0.0317400806, 0.0039822902, 0.0585203171, 0.0157875326, 0.0578437932, -0.0934157670, -0.0064897742, -0.0562333763, -0.0239974111, 0.0390034132, -0.0017965625, -0.0821240917, -0.0143214110, -0.0508572385, -0.0132211577, -0.0564974993, 0.0328527726, -0.0319357328, -0.0655084476, 0.0553383902, 0.0596210770, -0.0149418497, 0.0575112365, -0.0075785788, -0.0282177906, 0.0247084815, -0.0209117178, -0.0348239988, -0.0688878968, -0.0273135416, 0.0275986567, 0.0575182438, 0.0522034168, -0.0537067503, -0.0186378937, 0.0337658003, 0.0291833896, -0.0424578413, 0.0530347675, 0.0421825908, 0.0742124021, -0.0214369856, 0.0598388724, -0.0142109664, 0.0225186758, 0.0393819511, -0.0070340103, -0.0381380282, 0.0636869296, 0.0010010296, 0.0555658191, 0.0694237351, -0.0494264252, 0.0517802760, -0.0604703687, 0.0559386350, -0.0399254262, 0.0011381021, -0.0418372191, -0.0331849121, 0.0199806523, 0.0492350683, 0.0452469513, -0.0122727435, 0.0364940874, -0.0182487238, 0.0213422328, -0.0562866554, -0.0298132747, -0.0740525201, 0.0189603101, 0.0084030507, 0.0359791853, -0.0096302647, 0.0081801713, -0.0148511408, 0.0437623039, -0.0687900484, -0.0675472990, 0.0472535491, 0.0082402425, 0.0706318393, 0.0649596155, -0.0232452992, 0.0614339337, -0.0336550549, 0.0231926963, 0.0650645420, -0.0189625192, -0.0325470082, -0.0429244228, 0.0601265132, -0.0166007653, 0.0528911240, -0.0341875330, 0.0545527600, -0.0757543296, -0.0391862951, 0.0312701128, -0.0770624503, 0.0398685932, -0.0471481457, -0.0253042188, 0.0976636410, 0.0458180197, -0.0484606475, -0.0309039447, -0.0594645664, 0.0242360588, 0.0528946444, -0.0432893522, -0.0067976583, -0.0395907275, -0.0536117740, 0.0336498879, 0.0243062656, 0.0607203878, 0.0299122445, -0.0116152847, 0.0249140579, 0.0124015333, 0.0460937545, 0.0386700295, -0.0152625199, 0.0588467717, 0.0388143919, -0.0739878789, 0.0523668639, -0.0387544893, 0.0018148188, 0.0559226163, -0.0387263894, -0.0027007360, -0.0921117887, -0.0647723153, 0.0500951149, 0.0752832294, -0.0043056575, -0.0127317403, 0.0496043153, -0.0168666802, -0.0297280457, 0.0361245200, 0.0423683599, -0.0550740249, -0.0160435475, -0.0118157454, 0.0791563317, 0.0188046526, -0.0183427427, -0.0338062979, 0.0338805132, -0.0245056152, -0.0291610137, 0.0290787909, 0.0538859256, 0.0359624177, 0.0724784583, 0.0277041718, -0.0037804127, -0.0089977989, 0.0005698928, 0.0244802404, 0.0399274975, 0.0039107474, -0.0675098076, 0.0131570557, 0.0249437075, -0.0428594016, 0.0444876328, -0.0218674392, -0.0678284541, -0.0251605809, 0.0205640737, 0.0474881940, -0.0419985428, 0.0366064832, -0.0809469149, 0.0627743751, 0.0473274328, -0.0427693352, -0.0069691897, 0.0322132744, 0.0650772974, 0.0605943501, 0.0241442788, -0.0688855425, 0.0496268421, 0.0266533755, -0.0392223671, 0.0831924230, 0.0363897197, 0.0153353745, 0.0354869440, -0.0255142525, 0.0101236319, 0.0010097702, -0.0060557839, -0.0390766971, 0.0507734306, -0.0339664817, 0.0161930230, -0.0727026239, 0.0434940234, -0.0246409662, 0.0298628379, -0.0316103771, 0.0311384592, -0.0090219239, 0.0622599646, 0.0210351795, 0.0388184190, -0.0186593626, 0.0604478493, -0.0306565706, 0.0219341367, 0.0097088162, -0.0371497832, -0.0160145424, 0.0444975495, 0.0105640395, 0.0489704981, 0.0550279655, 0.0681016967, 0.0048858272, 0.0638969168, 0.0785091445, 0.0313444175, 0.0268141478, 0.0011448079, -0.0441480279, 0.0204527657, -0.0596532337, -0.0489029735, -0.0096534463, -0.0316181853, 0.0493690260, 0.0646561459, 0.0068650967, -0.0003348805, -0.0108331991, 0.0494330972, 0.0361260064, -0.0496682562, 0.0573526770, 0.0402928628, 0.0283911098, -0.0401122235, 0.0303344168, -0.0054306048, 0.0250001382, -0.0247586351, -0.0301824082, 0.0506320223, 0.0566403158, -0.0117993075, 0.0684893653, -0.0203238055, -0.0448692515, -0.0341229290, -0.0093159722, 0.0557292923, -0.0028920590, 0.0413056873, -0.0278263893, -0.0416491367, -0.0273683332, 0.0014077043, 0.0068662148, 0.0080842981, 0.0565682650, 0.0472296663, 0.0132292127, -0.0096023884, -0.0269638095, -0.0291496515, 0.0268259775, -0.0352431163, 0.0187815484, -0.0189100914, 0.0334337056, -0.0806326643, 0.0284002721, -0.0024972702, 0.0191718247, -0.0739681870, -0.0073355031, -0.0118159810, 0.0535114445, -0.0578532256, 0.0504327603, 0.0215460490, -0.0502059385, -0.0198498145, -0.0114602149, 0.0549527816, 0.0271525830, 0.0277606267, -0.0536732860, -0.0349457674, 0.0370941162, -0.0034586429, 0.0419886261, 0.0164101738, 0.0083642472, 0.0198698379, -0.0294580106, -0.0167043749, 0.0285674818, 0.0098317657, 0.0331205316, 0.0360378549, -0.0471442863, 0.0226407405, 0.0045107915, 0.0387960598, 0.0395349413, -0.0170479324, -0.0679035485, 0.0379384123, 0.0137705570, 0.0428826846, 0.0327859595, 0.0436694287, -0.0097456658, -0.0067519746, 0.0670581609, 0.0301951747, 0.0724791065, 0.0899030715, 0.0430073738, -0.0445953459, -0.0298440661, -0.0385537408, -0.0570588596, -0.0435333773, 0.0551934503, 0.0660910085, -0.0010987637, -0.0431588739, -0.0561376289, 0.0712293833, -0.0139763029, 0.0222203936, 0.0049483594, 0.0019627365, -0.0489944108, 0.0125609701, -0.0123980939, 0.0454400778, -0.0423126332, 0.0158560257, -0.0018800783, 0.0494017005, -0.0357596576, 0.0500540361, -0.0599278957, 0.0280249044, -0.0473518446, 0.0114995884, 0.0626291037, -0.0252335034, -0.0228869542, -0.0111439889, -0.0241304431, 0.0704396889, 0.0456010811, 0.0591952913, 0.0388499647, -0.0403190851, -0.0516913384, -0.0825688466, 0.0551387817, -0.0541323535, 0.0052761650, -0.0187350195, -0.0415301323, 0.0181310084, -0.0280069262, 0.0429686196, 0.0496628247, -0.0627210662, 0.0362056941, 0.0609617122, 0.0587280728, 0.0367808864, -0.0283206347, -0.0552358031, -0.0045784246, 0.0638232231, -0.0634073764, 0.0478768386, -0.0120663708, -0.0176689513, -0.0776435062, 0.0371809378, -0.0268908329, 0.0231426153, 0.0596992485, -0.0559394844, 0.0252695680, 0.0096723903, 0.0566126294, 0.0130663421, -0.0111516584, 0.0249980371, -0.0222531073, -0.0442326516, -0.0592104532, -0.0355096944, 0.0466448851, 0.0056538954, 0.0253380463, -0.0772578791, 0.0230495445, -0.0815117061, 0.0515916720, -0.0427960306, -0.0446217246, 0.0449891686, -0.0023169641, 0.0391069353, -0.0036433474, 0.0423717275, 0.0398325771, 0.0552787818, 0.0326108262, -0.0739926174, -0.0802530274, 0.0197774544, 0.0673918054, -0.0145891383, -0.0411643982, -0.0466423780, -0.0716726780, 0.0291456226, -0.0365618877, 0.0110330470, 0.0640028641, -0.0598685890, -0.0709968209, 0.0364544541, -0.0222447030, -0.0561790541, -0.0807994008, 0.0505764186, -0.0450642034, -0.0597533584, 0.0643210709, 0.0153610595, -0.0306436997, -0.0450821854, -0.0558722578, 0.0071895658, 0.0234590601, -0.0239907447, -0.0362871438, -0.0011757517, 0.0272556935, -0.0230909511, -0.0180459637, 0.0056109941, 0.0186356362, -0.0116978372, -0.0539226606, 0.0602448657, -0.0869417042, 0.0846098289, 0.0198067594, -0.0089962427, 0.0080175567, -0.0510912724, -0.0363342576, -0.0314004794, 0.0024272299, 0.0211285576, -0.0555826314, -0.0202064775, -0.0816292167, -0.0173305403, -0.0757167265, -0.0476738922, 0.0581614710, 0.0411063805, -0.0129776783, -0.0199313946, 0.0034281104, 0.0790354908, 0.0262647700, 0.0349551514, -0.0710028708, -0.0655467659, 0.0247086938, 0.0727723092, -0.0271869469, 0.0852747634, 0.0518293604, -0.0228845961, -0.0363796651, -0.0145460414, -0.0381248668, -0.0227444638, -0.0097540226, -0.0175363123, -0.0247662496, 0.0714423209, 0.0920770988, 0.0201114155, 0.0486067012, 0.0449420400, -0.0568804815, -0.0045900904, -0.0178802516, 0.0041516698, -0.0226939321, 0.0574663132, -0.0437223688, 0.0882909074, 0.0826910511, 0.0636817515, 0.0933167636, 0.0353101306, 0.0196039677, -0.0102435332, -0.0063600941, 0.0216883291, 0.0615124963, 0.0043519973, -0.0172570925, -0.0399627015, -0.0500994846, 0.0618455634, 0.0180330463, 0.0552067012, -0.0627317801, 0.0294973906, 0.0102527384, -0.0390045755, 0.0757743493, -0.0150602721, 0.0650062189, 0.0467679128, 0.0081777396, 0.0245037004, 0.0245859679, 0.0481847376, -0.0133443633, -0.0176862758, -0.0595488474, 0.0103675798, 0.0089031234, 0.0486875996, -0.0587500446, 0.0540087335, -0.0049622310, -0.0442659818, 0.0414503552, 0.0387873948, 0.0489967838, 0.0240178145, 0.0028865102, 0.0500449352, 0.0197950937, 0.0400913320, 0.0114004519, 0.0034002739, 0.0237293094, 0.0354469344, -0.0426159240, -0.0387152992, 0.0651701391, -0.0785139725, 0.0493918136, 0.0219640285, 0.0173593350, 0.0765315220, 0.0037230803, 0.0528695174, 0.0858244449, 0.0359811224, 0.0366667248, -0.0371114910, -0.0570600964, 0.0372975916, -0.0301811341, 0.0273030046, 0.0517912209, -0.0194873419, 0.0344134681, -0.0559941083, 0.0600499399, 0.0367214568, 0.0266196672, 0.0388234444, -0.0011947551, 0.0284180157, 0.0429917723, 0.0634353235, -0.0307623334, -0.0030224926, 0.0381000452, -0.0433276966, 0.0140060820, 0.0473487824, 0.0225464646, -0.0716353357, -0.0022385370, 0.0289276652, -0.0118222460, 0.0445282869, -0.0486784540, -0.0814366341, 0.0060149115, -0.0690453947, 0.0735046118, -0.0550191142, -0.0473875999, 0.0558205396, -0.0188002139, 0.0242437478, 0.0074321469, -0.0055876309, -0.0436136946, -0.0546226278, -0.0128851226, -0.0278470442, 0.0233956967, -0.0463413596, 0.0470410846, 0.0532117039, -0.0368487872, 0.0557049438, -0.0552056879, -0.0027196144, -0.0033879476, -0.0353627354, 0.0819042400, -0.0700064227, 0.0539852902, -0.0291530546, -0.0643854961, 0.0387404002, 0.0493385941, -0.0403152555, -0.0483833589, 0.0440748669, 0.0630870834, -0.0470449142, -0.0622759275, -0.0570667014, -0.0568742789, -0.0153982295, -0.0012987402, -0.0762708038, -0.0572965853, -0.0401261076, -0.0139550157, 0.0573072135, -0.0550456531, -0.0354540050, 0.0684946477, -0.0075191017, 0.0142983738, -0.0111381449, -0.0546431728, 0.0544065163, 0.0284853131, 0.0067357491, 0.0686163902, 0.0129423337, -0.0773114860, -0.0623092651, 0.0051191146, 0.0765530840, 0.0427909419, -0.0691933706, -0.0154134277, -0.0036035948, 0.0072436924, 0.0090161981, -0.0391607694, 0.0210102107, -0.0353381149, -0.0089858556, -0.0668489113, 0.0155182285, 0.0550058782, -0.0616186112, 0.0766820163, -0.0084238918, 0.0143269766, -0.0563275218, 0.0445897132, 0.0337355919, 0.0401822217, -0.0639708415, 0.0153812151, 0.0602283515, -0.0339024775, 0.0334787518, 0.0712448433, -0.0540605038, -0.0570843145, -0.0001046860, -0.0633234680, 0.0320776924, -0.0142631745, -0.0452137962, -0.0370625816, -0.0102268737, -0.0755656436, 0.0663318262, 0.0045532431, -0.0182872731, -0.0395773612, 0.0903517678, 0.0011597663, -0.0251038056, -0.0621921681, -0.0697285756, -0.0549235009, 0.0201884378, -0.0489936024, 0.0341192186, -0.0529507473, 0.0059246561, 0.0109400321, -0.0692747012, 0.0672777221, -0.0205179304, -0.0619347580, 0.0301104803, -0.0460365638, 0.0198662877, 0.0034387314, 0.0715259090, 0.0156285986, 0.0364236906, -0.0232988689, 0.0026614179, 0.0130380215, -0.0340893790, -0.0091219665, 0.0671948418, -0.0423192829, 0.0152752679, -0.0093984324, 0.0253388900, 0.0310223736, 0.0010426387, 0.0128666516, -0.0648926198, 0.0198381841, 0.0412123539, 0.0302799977, 0.0090534315, -0.0572236814, 0.0693299770, -0.0039937687, -0.0371057652, -0.0431686826, 0.0109742442, 0.0277867913, -0.0445623100, -0.0228181090, -0.0375161655, 0.0038769629, -0.0743889362, 0.0112421140, 0.0250452161, -0.0459573753, -0.0534439795, 0.0575854778, -0.0028572981, 0.0273299031, -0.0183290932, -0.0475663804, -0.0400109626, 0.0137805063, -0.0457604751, -0.0006216560, 0.0145765794, -0.0159416199, -0.0867587849, 0.0440762565, -0.0818415359, 0.0426899269, -0.0041254703, -0.0650978684, -0.0385123827, -0.0118749402, -0.0225109737, 0.0575386100, 0.0656273291, 0.0396612100, -0.0506375507, 0.0221710354, 0.0100646997, 0.0361235701, 0.0323314629, 0.0338585228, 0.0153680025, 0.0240300167, 0.0629603863, 0.0218292549, -0.0076446808, -0.0272793975, -0.0167817380, -0.0452207178, 0.0311827008, -0.0254278537, -0.0078513529, 0.0116709322, 0.0178077444, -0.0666573048, 0.0182303023, -0.0156084970, -0.0208475441, 0.0244442653, -0.0736320689, -0.0511888042, 0.0343418866, -0.0766770095, 0.0168309323, 0.0474346541, -0.0137934266, 0.0089895083, -0.0730343983, 0.0019051875, -0.0557793640, -0.0732717663, 0.0410782211, -0.0254901703, -0.0499630310, 0.0381700732, 0.0701957420, -0.0207812097, 0.0410484038, -0.0466396660, 0.0723980516, 0.0080332449, 0.0632182211, 0.0472900532, -0.0016696898, 0.0638679713, 0.0040561818, -0.0218161736, -0.0284247901, -0.0566367581, -0.0501530021, 0.0522441342, 0.0006545348, 0.0511539467, 0.0480266437, 0.0319952108, 0.0375070535, 0.0366664678, 0.0242739562, 0.0205866862, 0.0204695221, 0.0667395666, 0.0808601379, 0.0259962566, 0.0450268239, 0.0647545606, -0.0380549952, -0.0070703793, 0.0875125751, -0.0096767638, 0.0091421977, -0.0174262095, -0.0359680094, 0.0402105376, 0.0322378390, -0.0048619015, 0.0352021344, -0.0611054227, -0.0744230226, -0.0368731022, -0.0226447564, -0.0590925217, -0.0276024248, 0.0201862417, 0.0096213976, -0.0677665398, 0.0657135993, -0.0067222426, 0.0070041283, -0.0374855027, 0.0608262159, 0.0217076261, 0.0636943057, -0.0198770445, 0.0129812993, -0.0634982809, 0.0106209368, -0.0680561811, -0.0030341190, 0.0296934992, -0.0054508597, 0.0180340372, 0.0098679718, 0.0594745576, -0.0291640610, 0.0213378575, -0.0228622090, -0.0599084646, 0.0090797907, -0.0570623837, -0.0580865853, 0.0622817874, -0.0564892329, -0.0456045046, -0.0184013788, -0.0156690385, -0.0589010864, -0.0166162085, -0.0090611884, 0.0080939820, -0.0249543656, -0.0584055632, -0.0116143879, -0.0381128229, 0.0057211025, -0.0489781722, -0.0572707616, -0.0554767102, 0.0042399513, -0.0320334174, -0.0164887328, 0.0709623694, -0.0556092300, -0.0161341913, 0.0190898255, -0.0512467436, -0.0377664939, 0.0635216758, -0.0299737100, 0.0694920570, -0.0597706251, -0.0386393145, 0.0637577772, -0.0137314247, 0.0692348257, -0.0130950268, 0.0524027124, -0.0766085535, 0.0704231858, 0.0678951517, 0.0008982142, 0.0478355177, -0.0095222406, 0.0279583354, -0.0292126033, -0.0113645401, -0.0578474589, 0.0627307743, -0.0610629953, -0.0506120995, 0.0155026317, 0.0464564785, 0.0267161839, -0.0686966777, -0.0668084472, -0.0539001264, -0.0606099218, -0.0402051993, 0.0546219237, -0.0646823794, 0.0438474156, 0.0444695391, 0.0255337674, 0.0194556974, -0.0477127992, -0.0364450105, 0.0322697461, -0.0307237580, -0.0408643149, -0.0106993550, 0.0161542147, -0.0151278796, -0.0087045496, 0.0199566036, 0.0242859200, -0.0097929835, -0.0341324657, 0.0186790247, 0.0144603308, -0.0589383170, 0.0306149069, -0.0336341001, 0.0521316938, 0.0263156332, 0.0395715721, 0.0400983244, -0.0612509549, 0.0198813900, -0.0664095730, 0.0118817845, -0.0549304150, 0.0522545502, 0.0587894507, -0.0256113261, -0.0741259977, 0.0029797358, 0.0269361269, -0.0482371077, 0.0393138900, 0.0453347415, -0.0151212346, -0.0621654801, 0.0359661654, 0.0422536023, 0.0173372477, 0.0096465060, -0.0638416037, -0.0584143773, -0.0133190984, -0.0069277300, 0.0165193658, 0.0528466217, -0.0371770002, 0.0458909906, -0.0565963946, -0.0413252935, 0.0183155537, 0.0002992415, -0.0066931951, 0.0717877373, -0.0420588329, -0.0623273291, -0.0346292704, -0.0588901304, 0.0215734709, 0.0195789821, 0.0473775864, 0.0628836229, 0.0355982929, -0.0652511567, -0.0331796408, 0.0678234622, 0.0681646615, -0.0607123859, 0.0304523744, -0.0486368239, 0.0128447646, 0.0613249727, -0.0239022188, 0.0865084752, 0.0110308118, 0.0468413569, -0.0345404036, 0.0265637767, 0.0028213619, 0.0134416809, -0.0531570725, 0.0793599784, 0.0210268106, 0.0127391377, 0.0189557411, -0.0663940087, 0.0523347557, 0.0613335297, -0.0323132090, 0.0479513183, -0.0407011323, 0.0397851616, -0.0509525426, 0.0012147458, -0.0558850728, 0.0153664490, -0.0439741015, 0.0520105436, 0.0114272749, -0.0696943179, -0.0076798596, 0.0201657154, 0.0178196207, 0.0329408199, -0.0507342778, 0.0255712941, 0.0320248902, -0.0348751470, -0.0279019438, 0.0003351062, -0.0199277848, 0.0235759877, 0.0681093633, -0.0279430095, -0.0641469955, -0.0517378449, -0.0471113771, 0.0306508802, 0.0058593396, -0.0621981621, 0.0347008370, -0.0630043447, -0.0055952487, 0.0018037824, 0.0728515089, 0.0397703089, 0.0259211212, 0.0326163732, -0.0840760171, -0.0733438283, -0.0065420270, 0.0072505698, -0.0382270962, -0.0456478633, -0.0295874942, 0.0258967169, 0.0309145637, 0.0169057418, -0.0547938235, 0.0170028862, -0.0163518395, -0.0361114964, 0.0141066732, 0.0410166942, -0.0717460737, 0.0376072638, 0.0212505609, 0.0221695341, 0.0649373159, 0.0258668251, 0.0453473739, -0.0308181681, 0.0643006265, 0.0343281664, -0.0060331016, 0.0302515663, 0.0439538918, 0.0233468655, 0.0815466940, -0.0591420308, 0.0505121350, -0.0218865052, -0.0365582891, -0.0774032176, -0.0807311013, 0.0129135111, 0.0211704262, 0.0817783624, -0.0772432312, -0.0306153744, 0.0642234385, 0.0226865485, -0.0697910637, -0.0694878325, -0.0362293050, 0.0187317990, -0.0326479748, 0.0365045667, 0.0328058302, 0.0203916244, -0.0156839062, -0.0658261180, 0.0270485003, -0.0277198106, 0.0722898692, 0.0074368599, -0.0252406858, 0.0522342883, 0.0021636051, -0.0180973485, 0.0561767891, -0.0256317947, -0.0066455887, 0.0400044844, -0.0381999835, -0.0321416147, -0.0229754541, -0.0336302817, 0.0701891333, 0.0522703938, 0.0335174985, 0.0464220755, 0.0051989751, 0.0492687412, 0.0055639315, 0.0231767520, 0.0143386256, -0.0197561011, -0.0050630602, -0.0037860882, -0.0487168357, 0.0127720367, -0.0744372904, -0.0695548430, -0.0265693851, -0.0171248838, 0.0317304842, 0.0498552360, 0.0395774618, 0.0262768846, 0.0583529510, 0.0218279697, 0.0012994020, 0.0084325466, 0.0698556080, -0.0656418577, -0.0286550745, -0.0128627205, 0.0499966927, -0.0230443999, -0.0469061285, -0.0174715407, -0.0421680622, 0.0709522590, -0.0405356698, -0.0468066745, -0.0294762254, 0.0434867367, -0.0356719904, 0.0345772319, 0.0038254266, -0.0580624156, 0.0285002049, -0.0820694193, -0.0057463730, 0.0584233627, 0.0652478114, 0.0854573771, 0.0190649573, 0.0094538648, -0.0586046912, 0.0351615772, 0.0409651697, 0.0619909763, -0.0038701545, -0.0093269292, 0.0511064641, 0.0137695391, 0.0546853468, 0.0718658641, -0.0774604529, -0.0484759398, -0.0024390412, 0.0074255154, -0.0046934802, -0.0569799319, 0.0333096720, 0.0162482355, -0.0709077716, 0.0761456415, 0.0494190678, 0.0513173267, -0.0598100014, -0.0241034590, -0.0853269175, -0.0692802742, -0.0064701186, -0.0172029976, -0.0278101582, -0.0315699615, 0.0184868369, -0.0607232489, 0.0128411613, 0.0551450774, -0.0004716242, 0.0117088910, -0.0645843744, -0.0583120659, -0.0370474011, 0.0449809097, -0.0343120880, -0.0249454789, -0.0251927990, -0.0766141415, 0.0153975114, -0.0421185344, 0.0394757763, 0.0828315690, -0.0311048981, 0.0213643629, 0.0416897237, -0.0069074417, -0.0669134185, -0.0049056727, 0.0313378759, -0.0711845830, -0.0670244619, -0.0762578771, 0.0421150438, 0.0267894119, -0.0427385941, -0.0613909140, -0.0626115352, -0.0854949504, 0.0407966673, 0.0580487885, 0.0154707916, 0.0438974947, 0.0334076285, 0.0149005279, -0.0847700685, -0.0335356668, -0.0356236994, 0.0308409780, 0.0594333634, 0.0665749982, -0.0296152644, -0.0254579633, -0.0592661910, 0.0013095543, -0.0806963742, 0.0028967205, -0.0512980334, 0.0377790928, -0.0775672048, -0.0754003897, 0.0269949716, -0.0092723537, 0.0190286692, -0.0253690016, 0.0491194613, 0.0335340723, 0.0397374891, 0.0314472839, 0.0571135059, -0.0298578646, 0.0851363167, -0.0057012443, -0.0704972818, 0.0087833889, 0.0463376641, -0.0311877504, 0.0344541110, 0.0656119511, 0.0595651306, 0.0198430941, -0.0499881022, 0.0363018513, -0.0064008469, -0.0347783342, -0.0011947771, -0.0402453020, 0.0658656433, 0.0785541832, -0.0052185562, 0.0035244415, -0.0735202953, 0.0400633179, 0.0493462197, 0.0251809563, -0.0446247831, -0.0432199873, -0.0392670818, -0.0481314026, -0.0556786992, 0.0239881761, -0.0353544801, 0.0594890751, -0.0254390594, -0.0457000732, 0.0326013900, -0.0363408998, -0.0552424714, 0.0537919514, -0.0640930012, 0.0054804794, 0.0239357706, -0.0405461304, -0.0487436317, 0.0491857976, -0.0302472748, -0.0679605007, 0.0338139646, 0.0481442623, 0.0065783528, 0.0190847479, 0.0068066493, -0.0717854723, -0.0672321543, 0.0010618435, -0.0127161592, 0.0163814593, 0.0150875058, -0.0533085130, -0.0682494566, 0.0203537233, -0.0399332792, 0.0087517351, -0.0438794419, -0.0086405389, 0.0036569997, 0.0360304788, -0.0352062061, 0.0475050695, -0.0216440670, -0.0364075638, -0.0434767790, 0.0725987405, -0.0406311676, -0.0154820718, -0.0746766254, 0.0169513077, -0.0732367188, -0.0236128625, -0.0727931708, 0.0545177422, 0.0713547394, 0.0591874830, -0.0299957059, 0.0535342582, 0.0114250062, 0.0246287398, -0.0557189956, 0.0486498028, 0.0765124783, -0.0637683794, -0.0293853097, -0.0455085710, -0.0428123698, -0.0109879840, 0.0246961303, -0.0398338474, 0.0504666790, 0.0075141015, -0.0561920479, -0.0359272696, -0.0598356538, 0.0398340300, -0.0183454193, -0.0602309220, 0.0136803901, 0.0664654970, -0.0423186533, -0.0166983083, -0.0690239146, -0.0393325016, -0.0733465180, 0.0345459208, -0.0521516018, 0.0409159996, -0.0115151918, 0.0277859978, -0.0387682691, 0.0292790923, -0.0143812168, -0.0536847599, -0.0851708502, 0.0137616657, -0.0279507302, 0.0013283027, -0.0261191335, -0.0202902146, 0.0709654912, 0.0087098042, 0.0766281039, 0.0370830968, 0.0454678722, 0.0120788133, -0.0372123607, 0.0236873794, 0.0412840471, 0.0526064746, -0.0141267292, -0.0370394029, 0.0239680018, -0.0574219301, 0.0156426802, 0.0353276022, 0.0474568158, 0.0159507021, 0.0380813181, -0.0151907858, -0.0458523408, -0.0600822046, 0.0340757109, -0.0381744541, -0.0056699207, 0.0632418618, -0.0230702236, 0.0785088316, -0.0551335737, 0.0335499309, 0.0441079773, -0.0415131040, -0.0317999758, -0.0548343584, 0.0636754632, -0.0502877980, -0.0536801443, -0.0728969276, 0.0325749256, -0.0099551743, -0.0470344573, -0.0383756422, 0.0599668398, 0.0332701392, -0.0193632748, 0.0693618506, -0.0399505869, 0.0570435002, 0.0212564077, -0.0452098437, -0.0117395865, -0.0361551121, -0.0175757818, -0.0037628133, -0.0438627526, 0.0657639429, 0.0303120483, -0.0014162743, -0.0478062518, -0.0121581228, -0.0066914451, -0.0302575156, 0.0531365573, 0.0126881991, -0.0481695868, 0.0424794592, -0.0125747537, 0.0043000900, -0.0300149191, -0.0486754328, 0.0456458069, -0.0290201101, 0.0132653043, -0.0559869967, -0.0083485115, -0.0505876765, 0.0183424074, 0.0424578711, -0.0049407189, 0.0522491299, 0.0381647237, -0.0192353111, 0.0069853184, -0.0004392939, 0.0257898029, 0.0102672596, 0.0671079680, 0.0585975982, 0.0325362422, -0.0403701700, -0.0563452095, -0.0349443406, 0.0169853549, -0.0691118389, 0.0609434247, 0.0649719909, -0.0263602771, -0.0042898604, -0.0201584883, -0.0318625085, -0.0125509603, -0.0382009447, 0.0307474378, 0.0736807883, 0.0517295115, 0.0482212827, 0.0406916179, -0.0553674921, -0.0389420725, 0.0514759533, -0.0357387476, 0.0296465214, -0.0049545509, -0.0378816836, -0.0043707634, -0.0274493303, -0.0752325505, 0.0282959640, 0.0263698939, -0.0041160923, 0.0284006707, 0.0384742767, -0.0310121290, 0.0147837186, 0.0371597633, 0.0683196783, -0.0660962015, -0.0001448496, -0.0368320756, -0.0215038955, 0.0351468809, 0.0200081021, -0.0168632641, 0.0147857117, -0.0423649922, -0.0507761575, 0.0404910184, -0.0457758866, 0.0156950038, -0.0233573094, -0.0393236354, 0.0481021032, -0.0651314855, 0.0772581771, -0.0221031960, 0.0018622080, -0.0555504337, 0.0263841413, 0.0379230827, 0.0598405860, -0.0428293012, 0.0829606801, -0.0433020033, 0.0160248559, -0.0591058657, 0.0520704314, -0.0437675379, 0.0329374112, 0.0493103079, -0.0348227061, 0.0213840343, 0.0614056177, -0.0139970100, 0.0139564145, -0.0709186941, 0.0459750071, 0.0604497679, 0.0058484511, -0.0461713374, 0.0669962466, 0.0757382438, 0.0296349432, -0.0125521459, -0.0300429221, -0.0129531072, -0.0271264464, 0.0262488145, 0.0620736815, -0.0528310165, -0.0491520911, 0.0389909782, 0.0265640207, -0.0535854436, 0.0218207687, 0.0717522502, -0.0078895148, -0.0263632126, 0.0330953114, 0.0231047105, 0.0718807131, 0.0594385639, -0.0208939016, -0.0162545685, 0.0568486117, 0.0421024561, 0.0099928807, -0.0015634510, -0.0557277910, -0.0112657603, -0.0481746867, 0.0233195685, -0.0104886368, -0.0107119186, -0.0608494692, -0.0248623565, -0.0207158569, -0.0650642142, -0.0229611006, -0.0397359207, 0.0141358664, -0.0675711185, -0.0307669193, 0.0527871549, -0.0294765625, -0.0600909777, 0.0527846478, 0.0049547213, 0.0048552654, 0.0270303115, -0.0589438528, 0.0619107410, -0.0512841530, 0.0188735556, 0.0233204104, -0.0043077664, 0.0191461612, -0.0710751489, 0.0105658248, -0.0635499880, 0.0411196016, 0.0471920148, 0.0477739647, -0.0793365762, -0.0386350714, 0.0239036884, -0.0138347903, 0.0068037244, -0.0247243252, 0.0138915386, -0.0612217002, -0.0278210212, 0.0676026121, -0.0092058023, 0.0367125347, 0.0185849871, -0.0232963208, 0.0161067396, 0.0482476801, 0.0557810217, -0.0001087259, 0.0608299300, 0.0052143233, 0.0660154670, -0.0012471228, -0.0015758200, 0.0597199239, 0.0663600340, -0.0463781878, 0.0031460403, 0.0325485356, 0.0062796348, 0.0010532172, -0.0148530407, -0.0013217507, -0.0021798997, 0.0005972158, -0.0565172434, -0.0457036085, 0.0014145083, 0.0084319254, -0.0519614853, 0.0121363783, 0.0640465692, -0.0167911593, -0.0467129648, 0.0498918928, 0.0513504371, 0.0772345588, -0.0819034576, -0.0419030823, -0.0341112129, 0.0013038109, 0.0724012777, 0.0362043343, -0.0107950354, -0.0390802696, -0.0262181628, 0.0004475754, 0.0278422069, 0.0547127053, -0.0707698241, -0.0097259115, 0.0693262070, -0.0295920335, 0.0079697073, -0.0450581573, 0.0130454851, 0.0337828472, 0.0635674223, 0.0050205505, -0.0392655022, 0.0314719528, -0.0561079793, 0.0464029126, 0.0470175743, -0.0506421737, 0.0294729639, -0.0599249229, 0.0172322411, 0.0592500642, -0.0188716650, 0.0550308265, -0.0684669539, -0.0415676497, 0.0092547061, 0.0495991074, 0.0597663969, 0.0326362699, 0.0383144915, 0.0053048870, 0.0535999499, 0.0208782014, -0.0827023238, 0.0264163055, 0.0613783859, -0.0258426946, -0.0728565902, -0.0748832896, 0.0325931944, 0.0290952716, 0.0303220432, 0.0279126186, -0.0056757755, 0.0179764852, 0.0204251353, 0.0297668315, -0.0150221493, -0.0441666916, -0.0513798296, -0.0075403424, -0.0776560381, -0.0461421795, 0.0679728761, 0.0270974152, 0.0424728617, -0.0599662922, 0.0720381141, -0.0440406501, -0.0230923183, 0.0447671227, 0.0409558862, -0.0213693492, 0.0051649809, 0.0151862074, 0.0053882254, -0.0163933020, -0.0157221090, 0.0149430986, 0.0940608606, 0.0189285185, 0.0789022893, 0.0491288304, 0.0326955058, -0.0116356844, -0.0619409755, -0.0163872503, 0.0573740751, 0.0425734408, -0.0489741191, 0.0314342715, -0.0335468836, 0.0411030203, -0.0766863972, -0.0323976018, 0.0422888659, 0.0328656845, 0.0214779098, 0.0364051014, -0.0366852544, -0.0626553893, -0.0018731420, -0.0886825100, -0.0285052583, 0.0679644793, -0.0450358614, -0.0471370332, 0.0184503514, 0.0625991598, 0.0764797106, 0.0667072162, -0.0930515602, 0.0457413010, 0.0474015884, -0.0142005924, -0.0445737541, -0.0185591858, -0.0678922385, -0.0714373663, 0.0449442156, -0.0739675164, -0.0208726749, 0.0735901818, -0.0554040708, -0.0805315375, -0.0243787616, 0.0208275970, 0.0247666202, 0.0883529708, 0.0650472417, 0.0151340580, -0.0251827817, -0.0824238062, 0.0201817695, -0.0427322239, -0.0337146856, -0.0553453267, -0.0138220834, 0.0128875840, 0.0107022142, -0.0060533625, 0.0479540229, 0.0273242574, -0.0256601516, -0.0425464660, -0.0184368119, 0.0847933888, -0.0085881399, 0.0184628516, -0.0548277386, -0.0744626224, 0.0404325724, -0.0781215951, 0.0279687289, 0.0829790533, -0.0206558760, 0.0768172890, -0.0317901038, 0.0423821844, 0.0668345913, 0.0526669398, -0.0261796657, 0.0258580130, 0.0516779050, -0.0851492733, 0.0052034166, -0.0086557455, -0.0902142972, -0.0094003463, 0.0346224457, 0.0190997981, -0.0426371023, 0.0433734991, -0.0384621285, -0.0221642628, 0.0398080982, 0.0616381392, -0.0698285624, -0.0042210226, 0.0458021946, -0.0442140326, -0.0801288337, 0.0634975284, -0.0004596003, 0.0831434652, 0.0332050920, 0.0487763882, -0.0096242549, 0.0794625878, 0.0000171617, -0.0141049288, -0.0573275201, 0.0607681498, -0.0173814856, 0.0504186675, 0.0107901711, -0.0361758098, 0.0018657513, -0.0182048418, 0.0061278637, 0.0089609651, -0.0244392678, -0.0046006804, 0.0451242663, -0.0146353617, 0.0810978487, 0.0173736438, 0.0228147916, 0.0349841751, 0.0282655135, 0.0535131916, 0.0265462156, 0.0133604333, 0.0125026787, -0.0449976549, 0.0440072976, -0.0078467485, 0.0380680040, 0.0419470444, 0.0611450151, -0.0520880744, -0.0760111958, 0.0908824876, 0.0651656315, 0.0829107612, 0.0681779459, -0.0057904334, 0.0499578640, 0.0419678539, -0.0180202667, 0.0372937284, 0.0382005051, 0.0248946957, 0.0223965496, -0.0318723060, 0.0110976454, -0.0422802828, 0.0482182205, -0.0512397960, 0.0388499424, 0.0650694370, -0.0464940034, 0.0287242737, -0.0561815612, -0.0096547026, -0.0024727245, -0.0557500124, -0.0066262502, 0.0556766763, 0.0790534467, 0.0121710319, -0.0373063534, 0.0105807837, 0.0018007866, -0.0529891104, 0.0652455539, 0.0715356693, -0.0359790511, -0.0076044346, 0.0223318785, 0.0010202999, 0.0566519313, -0.0254912004, -0.0443143994, 0.0252029467, -0.0210610144, -0.0385031477, 0.0064178244, -0.0643095970, 0.0274548586, 0.0149700334, -0.0246839654, -0.0082313502, 0.0708183348, -0.0106002083, 0.0006182241, -0.0426064730, -0.0144167263, -0.0193415657, 0.0766769648, 0.0692057014, 0.0046197888, 0.0731383562, 0.0409175456, 0.0077089346, -0.0509030186, 0.1005293578, -0.0115250191, 0.0154346582, 0.0354093201, -0.0084504047, -0.0401629470, 0.0078792004, -0.0159808006, 0.0256397258, 0.0595167130, 0.0263203513, -0.0031170216, -0.0277960207, -0.0995061398, 0.0229552444, -0.0397348478, -0.0028773423, 0.0374291912, -0.0039548990, -0.0741920471, -0.0871547088, -0.0398761332, -0.0142062819, -0.0442729704, 0.0230472144, 0.0193303227, 0.0511931106, 0.1130926535, -0.0060628159, -0.0526427403, -0.0474728569, -0.0369905122, 0.0084635066, -0.0080453418, 0.0225419234, 0.0367746577, -0.0334659480, 0.0490268879, -0.0143583007, 0.0430099182, 0.0103152478, 0.0006284963, 0.0556700602, -0.0376231745, -0.0228694789, 0.0214420110, 0.0458849780, 0.0261270050, 0.0070046186, 0.0333847627, 0.0330020152, -0.0017776092, -0.0472143665, -0.0161854923, -0.0251371972, -0.0265189204, 0.0570290796, 0.0703897476, -0.0373394266, 0.0116119199, -0.0095049338, -0.0784468651, 0.0664938390, 0.0329304785, 0.0891615301, -0.0284270085, -0.0349468440, -0.0115236938, -0.0420742892, -0.0598420314, 0.0139493244, -0.0331781395, 0.0037142751, -0.0833167732, 0.0656610802, -0.0283292551, -0.0799236000, -0.0027006776, -0.0529025719, 0.0107734567, 0.0395728685, 0.0090141585, -0.0329178423, 0.0282587651, -0.0254042912, -0.0905610844, -0.0368772447, 0.0202345420, -0.0384711511, 0.0613632090, 0.0607746504, 0.0074905357, 0.0692090988, 0.0226481743, 0.0528237559, -0.0321456753, -0.0404494144, 0.0073254062, 0.0000136287, -0.0040415353, 0.0360141695, -0.0435551926, -0.0079151299, -0.0245097242, 0.0305336211, -0.0076513314, -0.0663460717, 0.0112233795, 0.0113337087, 0.0346567221, 0.0452665314, 0.0652386397, -0.0263579600, -0.0157569014, 0.0369115733, -0.0572522767, 0.0348944701, -0.0116187837, -0.0170668159, -0.0449042469, 0.0522883274, -0.0279297121, -0.0169985034, 0.0069601811, 0.0743130222, 0.0257495679, 0.0551382676, -0.0561945438, 0.0729992539, 0.0689098239, 0.0067177229, -0.0561995618, 0.0758396387, -0.0287606865, -0.1041772142, 0.0220920648, -0.0446708426, 0.0571011268, 0.0815904066, 0.0349387378, -0.0380284376, -0.0239957515, -0.0282627195, 0.0825768113, 0.0266772192, 0.0232302602, 0.0280330405, 0.0043188687, -0.0107284784, -0.0339166559, -0.0058421218, -0.0488559119, -0.0764886662, 0.0150377266, 0.0490977615, 0.0593766756, -0.0107801082, -0.0285654552, 0.0143884653, -0.0599528775, 0.0019978881, -0.0091148745, 0.0610929653, 0.0149112269, -0.0617206283, 0.0057052649, -0.0167396087, 0.0845041499, -0.0929462016, 0.0669700801, 0.0535259396, -0.0273830108, 0.0470692292, -0.0550148189, -0.0599194132, -0.0464169979, -0.0095850891, 0.0775191262, -0.0561928898, 0.0785557926, 0.0555176586, 0.0756250694, 0.0555644743, 0.0137733864, 0.0561615229, 0.0650044382, -0.0477391481, 0.0341369510, 0.0840056315, -0.0634632483, 0.0543574020, -0.0554981418, 0.0539768040, -0.0219481718, 0.0712584406, -0.0549705625, 0.0129999472, -0.0589062981, -0.0857316181, 0.0048587313, -0.0826091096, 0.0174848009, -0.0239655674, -0.0549964011, 0.0040365225, -0.0579857230, 0.0374231748, 0.0498836190, 0.0469209515, -0.1065614596, 0.0854854956, -0.0274062119, 0.0446538292, 0.0273402222, 0.0007120428, -0.0200429726, -0.0653176829, 0.0560978390, 0.0450866334, 0.0999962166, 0.0128460005, 0.0130470572, -0.0464022793, 0.0224189535, 0.0255105384, -0.0800283253, -0.0506638885, 0.0667147934, 0.0401255190, -0.0199030638, -0.0304647256, -0.0179104619, -0.0323557071, -0.0203177687, -0.0184063949, -0.0444422849, -0.0216077641, 0.0122954389, 0.0080400882, -0.0707593262, 0.0278231297, -0.0386946090, 0.0489261299, -0.0416712239, 0.0509725064, 0.0558603257, -0.0311397482, 0.0098694488, 0.0409834720, 0.0204814430, -0.0735837519, 0.0523449481, -0.0464178994, -0.0722820982, -0.0514070876, 0.0252165031, 0.0525684915, 0.0572544523, 0.0561777726, -0.0325480998, 0.0045656795, 0.0546012223, 0.0089906538, -0.0496451072, 0.0043276213, 0.0217929389, -0.0381928310, -0.0024032639, -0.0457717031, 0.0243188664, -0.0212176666, -0.0563488230, -0.0187397767, -0.0292011648, -0.0432022810, 0.0270115845, 0.0449272580, -0.0117191914, -0.0666889623, -0.0289215371, -0.0133248754, 0.0633072257, -0.0332574956, 0.0370522775, -0.0152243227, -0.0406926684, -0.0721890479, 0.0242192149, -0.0217739996, 0.0037964992, 0.0503462404, 0.0427252017, 0.0065828580, 0.0001587651, 0.0804341659, -0.0663250163, -0.0519115329, 0.0148729170, -0.0264647286, -0.0065257982, -0.0785943195, 0.0334995277, -0.0461222380, 0.0123644648, -0.0572950467, -0.0678798854, -0.0030631754, -0.0229674522, -0.0624669828, -0.0647063777, 0.0504528880, 0.0282966010, 0.0160814393, -0.0106765348, -0.0721569285, -0.0667072311, -0.0744957104, -0.0540262237, -0.0180003010, 0.0842572600, 0.0032225209, 0.0142134055, -0.0559130497, 0.0344742462, 0.0380035006, -0.0498781539, 0.0750135779, 0.0577391125, 0.0354627669, 0.0240122583, -0.0285634864, 0.0070690028, 0.0611095242, 0.0179486219, -0.0516814142, -0.0675391704, 0.0221458580, 0.0583765320, -0.0518225841, 0.0614151359, 0.0470864512, -0.0297949966, -0.0354842581, 0.0546630174, 0.0689088479, 0.0557757765, 0.0120980572, 0.0350408703, 0.0557386242, 0.0391266271, -0.0392321385, -0.0298299305, -0.0257476866, 0.0280489512, -0.0318484828, 0.0663721859, 0.0292682461, -0.0205167215, 0.0044160816, 0.0116017964, 0.0072902888, -0.0052655842, 0.0099909697, 0.0492431819, -0.0588893369, 0.0139943836, 0.0559708141, 0.0851066783, -0.0748670101, -0.0112039372, 0.0417287275, 0.0000894142, -0.0404739603, -0.0384685174, -0.0907821879, 0.0582951531, -0.0726808980, -0.0784723535, -0.0031112805, -0.0166587532, 0.0394932181, -0.0541079193, 0.0690442845, 0.0620524734, -0.0895667598, 0.0017812800, -0.0851969123, 0.0231732596, 0.0177614819, 0.0409490541, -0.0069877286, 0.0422111452, -0.0102360295, 0.0012430454, 0.0271822903, 0.0015995177, 0.0441678464, 0.0223413557, -0.0255384557, -0.0293432456, -0.0013060119, 0.0365388989, -0.0110273315, 0.0417235009, -0.0124804154, -0.0660154000, 0.0102096889, -0.0752240047, 0.0861437544, 0.0640516207, -0.0361348093, -0.0878068581, 0.0130074807, -0.0091118263, 0.0595997684, 0.0293127168, -0.0521129072, 0.0120457690, -0.0148446476, 0.0585011505, 0.0888144448, -0.0241827648, 0.0750613809, 0.0065713841, -0.0578796417, 0.0205982812, 0.0179540850, 0.0215426236, -0.0680353716, 0.0431109369, 0.0043887212, -0.0220206734, -0.0122385770, 0.0480280481, -0.0165436845, -0.0165976901, 0.0331232361, 0.0445109680, 0.0057098670, 0.0012583793, 0.0491836034, 0.0654411018, 0.0326672755, -0.0366300605, -0.0400577150, 0.0093488945, 0.0069614663, -0.0175767764, -0.0375395752, 0.0049680537, -0.0480346344, -0.0300098583, -0.0718805715, 0.0559101850, -0.0747359022, 0.0226037521, -0.0253112521, -0.0171133485, -0.0525155254, 0.0298645347, 0.0094906604, -0.0471325740, -0.0682054460, -0.0090294210, -0.0475240313, 0.0513935387, 0.0430538952, 0.0766968727, -0.0099393623, 0.0213239398, -0.0685652718, 0.0474595577, 0.0501995385, 0.0654853955, -0.0647184178, -0.0207969900, -0.0621157028, 0.0637470558, 0.0258751176, -0.0385659374, 0.0045656180, 0.0465036407, -0.0387046374, -0.0468051769, -0.0446898639, -0.0317554511, -0.0515626185, 0.0140441721, 0.0134418560, 0.0615842491, -0.0318760239, 0.0589268655, -0.0173082445, 0.0344138294, 0.0428303853, 0.0615666062, 0.0312036015, -0.0211708546, -0.0253101382, 0.0223210286, -0.0306174438, -0.0536463112, 0.0492430776, 0.0453157015, 0.0084338989, -0.0588885695, 0.0444372147, -0.0058217836, -0.0477709472, -0.0025677714, 0.0181119125, 0.0000251378, -0.0529345460, -0.0441023484, -0.0065122903, 0.0326565541, -0.0073657986, 0.0325255319, -0.0347746834, 0.0158934928, 0.0889608562, -0.0381339081, -0.0398746692, 0.0508893803, 0.0087092500, 0.0592203960, -0.0726069137, 0.0467225090, 0.0308101717, -0.0101414928, 0.0025806993, 0.0886592716, -0.0287981648, -0.0422526374, 0.0365229920, 0.0478080809, 0.0890047327, -0.0389292426, 0.0988346264, 0.0423998311, 0.0562938415, 0.0059582335, -0.0359006301, -0.0523293354, 0.0106515447, -0.0672293752, 0.0443255007, 0.0229636524, -0.0010664419, -0.0256049782, -0.0388373919, 0.0162595455, 0.0571586564, 0.0797180608, 0.0123161655, 0.0168608297, 0.0492560081, 0.0700603276, 0.0000551179, 0.0398078412, -0.0327839553, 0.0197249614, 0.0353790969, -0.0659004599, -0.0168837309, -0.0133410152, 0.0411466546, -0.0273680966, 0.0602689013, -0.0588097572, -0.0352508910, 0.0457775220, -0.0525628701, -0.0830186158, 0.0370707288, -0.0552789755, -0.0313039087, -0.0273500122, -0.0005629739, -0.0379802510, -0.0286296979, -0.0490377769, -0.0278499275, 0.0072719175, 0.0268364400, -0.0295922067, 0.0372105576, -0.0083381254, 0.0618313886, 0.0058470285, 0.0688750595, -0.0831532776, 0.0426934212, -0.0419250689, 0.0254861116, 0.0908747986, 0.0338488184, -0.0705092326, -0.0763055012, -0.0136974053, -0.0100303171, 0.0564948693, 0.0129544614, -0.0453888513, -0.0460061580, -0.0417910591, -0.0318349674, -0.0640210360, -0.0138258757, -0.0204774328, -0.0656548887, -0.0427214690, -0.0112446574, -0.0349619724, 0.0405752659, -0.0312761143, -0.0362914689, 0.0427777059, -0.0041466919, 0.0383051261, -0.0664588362, 0.0185753796, -0.0304293316, 0.0410130285, -0.0641292334, 0.0211178586, 0.0328562371, -0.0067098932, -0.0365584344, 0.0043425481, -0.0465010591, 0.0315655023, 0.0639019161, 0.0179433152, 0.0459868014, 0.0251111481, 0.0057337661, -0.0035543614, -0.0323907770, 0.0427897163, -0.0326987132, -0.0060755340, -0.0004567167, 0.0511092767, -0.0616003387, -0.0030239096, 0.0367854983, 0.0462738574, 0.0503803156, -0.0279899333, -0.0168633610, -0.0077058622, 0.0635467619, 0.0143670337, 0.0563157573, -0.0528136194, -0.0078775389, -0.0684508309, -0.0418853648, 0.0258124508, 0.0504200682, 0.0494245067, 0.0498063080, -0.0134036224, -0.0080514988, -0.0070066634, 0.0074400255, 0.0417361967, 0.0384375043, -0.0156421624, -0.0265692696, 0.0455321483, 0.0292790513, -0.0143053513, 0.0298459306, 0.0704548061, 0.0346609056, -0.0200482849, 0.0663483068, 0.0133577045, 0.0341277346, 0.0211420823, -0.0007269651, -0.0365932584, 0.0314185694, 0.0393970348, 0.0709444657, 0.0734925643, -0.0726969838, -0.0676831082, 0.0321652144, 0.0011709948, -0.0390127711, 0.0169449672, 0.0030092108, 0.0786158070, -0.0658930615, -0.0460971072, -0.0684672818, -0.0493622348, -0.0295119863, 0.0087070400, 0.0234363414, -0.0396747552, -0.0345194004, -0.0297751185, -0.0780023634, -0.0516348183, -0.0297330208, 0.0654659867, -0.0384009257, -0.0127908187, -0.0507291108, -0.0501521230, 0.0492899455, 0.0669894516, 0.0167047046, 0.0063790628, -0.0696060583, -0.0541128255, -0.0156730637, -0.0007828368, -0.0778856426, 0.0024172354, -0.0810271204, -0.0054565449, -0.0142858988, -0.0707557574, -0.0407853685, -0.0133975465, 0.0094855111, 0.0002096706, 0.0278200023, 0.0033098096, 0.0011286028, -0.0736823454, 0.0447578244, 0.0269193202, 0.0228880607, 0.0807604119, 0.0801550895, 0.0154504813, -0.0393576398, 0.0401735902, -0.0333519541, 0.0064065093, 0.0068943845, 0.0171690956, 0.0300362296, 0.0345725268, 0.0699582100, -0.0136121428, -0.0195722729, -0.0775841922, 0.0067055258, 0.0653236359, 0.0044596181, -0.0335168913, -0.0199683458, 0.0572360754, -0.0287847761, 0.0422764085, 0.0663812757, -0.0205822606, 0.0284697507, 0.0286943801, 0.0068874341, 0.0460760556, -0.0203297473, -0.0335889235, -0.0560208522, 0.0110429842, 0.0271480475, -0.0063685854, 0.0592059642, -0.0089398762, -0.0206735618, -0.0040930747, 0.0413146019, 0.0148851089, 0.0680062771, 0.0020235789, -0.0692461058, -0.0226016175, 0.0331962779, 0.0042379443, -0.0560706370, -0.0362563841, -0.0932115614, -0.0020070043, -0.0452937298, 0.0217184220, 0.0404026918, -0.0700357109, 0.0816220492, 0.0243541170, 0.0196259059, -0.0286667906, 0.0012839995, 0.0420320779, -0.0646789297, -0.0758740306, 0.0436957590, -0.0467727222, 0.0330018625, 0.0585551597, -0.0197995510, -0.0028121283, 0.0789553374, 0.0022543299, 0.0331116356, 0.0398904793, 0.0587451681, -0.0346690975, 0.0767776743, -0.0216130596, 0.0178942345, -0.0567914434, 0.0128032947, 0.0034982299, 0.0488141514, -0.0115157533, 0.0285792723, -0.0702236146, -0.0105176410, -0.0363924615, -0.0354861282, 0.0844879076, -0.0588264354, 0.0373376831, -0.0215532687, 0.0715874657, 0.0297581237, 0.0137236351, 0.0311796423, 0.0454419628, 0.0355925038, -0.0286513399, -0.0367960222, -0.0377660617, 0.0497532301, -0.0429342203, 0.0344547741, -0.0122932838, 0.0435954817, -0.0698100775, 0.0568379015, -0.0699138641, 0.0780804679, -0.0220919345, -0.0220643282, -0.0022975567, -0.0376809277, 0.0276539996, 0.0399332717, 0.0874402151, 0.0109559465, -0.0168739408, -0.0829927549, -0.0294663981, 0.0101893200, -0.0157415140, -0.0686447173, -0.0009490685, -0.0064475834, 0.0583988801, 0.0031395822, 0.0405515879, 0.0509195551, 0.0227330662, -0.0005303327, -0.0529816709, -0.0780073181, 0.0278656743, 0.0657344386, -0.0526601709, -0.0154591287, -0.0486533605, 0.0056925393, 0.0286489651, -0.0303152949, 0.0537352338, -0.0048128520, -0.0651009381, -0.0366894789, 0.0031347035, -0.0360260159, -0.0600094162, -0.0373013578, -0.0351958275, 0.0039942572, -0.0256153718, -0.0410838835, 0.0133593203, -0.0581646524, 0.0292833727, -0.0163351335, -0.0203766841, -0.0218383763, -0.0073391474, -0.0201206803, 0.0731469542, 0.0323839597, -0.0401819795, 0.0104085626, 0.0673325732, 0.0602296703, -0.0537267849, -0.0737990513, -0.0658415034, 0.0777917951, 0.0445643589, 0.0540448390, -0.0140828677, -0.0380999669, 0.0118045909, 0.0483356901, 0.0613453798, 0.0194536708, 0.0334978215, -0.0838139653, -0.0376020484, 0.0343541577, -0.0620423071, 0.0979429856, -0.0785430968, -0.0347604044, 0.0646066517, 0.0255267471, -0.0238475762, 0.0589977726, -0.0365350731, -0.0095834220, -0.0631432533, 0.0119865881, -0.0388923325, -0.0661408380, -0.0530230850, -0.0172228646, -0.0543865822, -0.0058970377, -0.0723200366, -0.0230942219, -0.0421304144, 0.0099894470, -0.0443930402, -0.0301416237, 0.0794085041, 0.0459535494, 0.0554472022, -0.0382981561, 0.0154567212, -0.0164917260, -0.0212628655, 0.0421320125, -0.0281174742, -0.0133004086, 0.0375675261, 0.0098582208, -0.0668744370, 0.0575717799, 0.0675905049, -0.0394112989, 0.0779883638, 0.0750937536, 0.0044762688, -0.0341580324, -0.0348674133, -0.0620612726, 0.0435597338, 0.0583017729, 0.0139815882, 0.0271083191, -0.0577751286, -0.0269322507, -0.0439446606, -0.0011461558, -0.0635372847, 0.0271862056, 0.0185243394, -0.0073021385, 0.0278300997, 0.0376222655, 0.0486705415, -0.0628728494, -0.0200639348, -0.0620739385, -0.0374910347, -0.0214106459, -0.0525335781, -0.0129390312, 0.0927779675, 0.0208656844, 0.0901919976, -0.0447728261, 0.0846765190, -0.0352941789, 0.0124381371, -0.0495697968, -0.0232161153, -0.0500732251, -0.0660108775, -0.0061758892, 0.0312055349, 0.0472033098, -0.0351128057, 0.0517551340, -0.0112423142, 0.0311672743, -0.0445227325, -0.0519569591, 0.0138899181, -0.0778040513, -0.0575464778, 0.0248678997, 0.0542992726, -0.0382250659, -0.0851182640, 0.0160484929, 0.0634311810, -0.0311744269, 0.0985793620, -0.0012431432, 0.0604347959, 0.0142571675, -0.0652348772, 0.0437096246, -0.0260738377, -0.0276397616, -0.0535736419, 0.0686034635, -0.0235690176, -0.0269389041, -0.0568917058, 0.0270974375, 0.0359250568, 0.0727824792, 0.0302028302, 0.0718708634, 0.0520055033, 0.0471096933, -0.0461520478, 0.0299712345, -0.0117803998, 0.0366834290, 0.0080945371, 0.0115239220, 0.0646209493, -0.0078359162, -0.0101602143, 0.0357072167, 0.0183885023, 0.0284317229, 0.0219575278, -0.0340738259, -0.0328179114, 0.0321788788, 0.0290876124, 0.0515893102, 0.0488695949, -0.0493911542, 0.0804552585, 0.0262764245, -0.0387275778, 0.0610623136, -0.0663648918, -0.0259856228, 0.0300806072, -0.0141312210, -0.0512347594, -0.0450949818, -0.0122182164, 0.0161033235, -0.0074894889, 0.0408091657, 0.0538324378, -0.0431526862, 0.0158542488, 0.0262360536, -0.0083967904, 0.0007437479, -0.0688875318, 0.0547470935, -0.0331984684, 0.0289437585, 0.0527033508, -0.0958836153, 0.0324749723, 0.0484010652, -0.0547812134, -0.0288839024, 0.0645555854, 0.0117118191, 0.0850235000, -0.0230756439, 0.0231242869, -0.0537038706, 0.0726474226, -0.0227975603, 0.0716421679, -0.0148533164, 0.0222526677, -0.0040349676, -0.0393953696, 0.0457219295, 0.0316113047, 0.0415609516, 0.0323033482, 0.0690372586, -0.0417910106, -0.0456647165, 0.0190852582, -0.0286913756, 0.0257870127, 0.0188525133, -0.0115350317, 0.0317810997, 0.0097931689, -0.0849329382, 0.0141873118, -0.0165379588, -0.0096800495, -0.0722945035, 0.0559883378, -0.0564610846, 0.0227599200, 0.0662429407, -0.0867142305, 0.0111863269, 0.0050564772, -0.0383669510, -0.0260989983, 0.0152785480, 0.0517374836, -0.0572926179, 0.0364352651, -0.0289974622, -0.0414040200, 0.0536443442, 0.0118498504, -0.0139364563, -0.0138099222, 0.0004146114, -0.0219553504, -0.0469038077, -0.0602887124, 0.0296379402, 0.0713856518, -0.0778274387, 0.0607284121, 0.0332412347, 0.0448284224, 0.0250418354, -0.0670402646, -0.0199137703, -0.0111821238, -0.0605166182, -0.0106487544, -0.0032636379, -0.0516590327, -0.0361252688, -0.0189714096, -0.0390385985, 0.0076570539, 0.0561901778, -0.0000133792, 0.0142301302, 0.0071089431, 0.0366074368, 0.0837507397, 0.0604236498, 0.0048528258, 0.0469958819, -0.0324495994, -0.0071408344, -0.0167619959, 0.0653709099, -0.0548115112, -0.0594954416, 0.0148219736, 0.0295232870, -0.0791243613, -0.0864474475, 0.0351868682, -0.0410926379, -0.0331519917, 0.0285181217, -0.0415075161, -0.0883975625, 0.0613621660, 0.0499141142, 0.0641135573, 0.0191459395, -0.0073472084, -0.0588211603, 0.0006477985, -0.0056094131, 0.0769181401, 0.0360143669, -0.0643539429, -0.0935550928, -0.0375565030, -0.0406232066, -0.0203248635, -0.0171652809, -0.0744350031, -0.0363435224, 0.0611665137, 0.0264005028, -0.0151402801, 0.0052106548, -0.0236128047, 0.0073284092, 0.0475904234, 0.0032853121, -0.0223753881, 0.0181607138, -0.0037510674, 0.0404526740, 0.0613857880, 0.0084119169, 0.0145143168, 0.0252817031, -0.0613429919, 0.0794777274, 0.0273851175, -0.0089835860, -0.0006576597, 0.0108866449, 0.0156380124, 0.0474757589, -0.0225905944, -0.0690580830, 0.0047209105, -0.0679925904, -0.0060123354, 0.0205052663, 0.0169792231, 0.0308276657, 0.0491975360, 0.0102837412, -0.0716826767, 0.0452240147, -0.0195163954, 0.0462783240, 0.0710362718, 0.0627013892, 0.0170233883, -0.0334989876, -0.0587643385, 0.0037421281, -0.0580914095, 0.0369297154, -0.0476895049, -0.0073532900, 0.0268861726, -0.0006090470, -0.0423184186, 0.0577077828, 0.0500581078, 0.0266679022, 0.0844341964, 0.0359945148, -0.0258528572, 0.0396110862, 0.0388036631, 0.0694784448, 0.0303183384, 0.0356560796, 0.0491747297, -0.0538907833, -0.0630746484, -0.0514399447, 0.0239533894, 0.0793546438, -0.0439968035, -0.0397675633, 0.0781832188, -0.0529704094, 0.0612767301, -0.0137569308, 0.0566315763, -0.0636108518, 0.0432358496, -0.0243501179, -0.0323003307, 0.0884501636, 0.0494809151, 0.0006046642, 0.0517144054, -0.0499487221, 0.0007840627, 0.0375316925, -0.0512751043, 0.0208638143, 0.0166495871, -0.0425139032, 0.0362561829, 0.0522170477, 0.0821742862, 0.0620515123, 0.0152689368, -0.0550600588, -0.0292130653, 0.0864165202, 0.0367265418, 0.0627563894, -0.0761299282, -0.0627181754, -0.0219866708, 0.0157292914, -0.0233963244, -0.0007593658, 0.0846673548, -0.0789968148, -0.0301595591, 0.0657308474, 0.0050900183, 0.0151428375, -0.0697450489, -0.0089645898, 0.0074351793, 0.0446093902, 0.0572066419, 0.0281863082, 0.0618343428, 0.0230816808, 0.0244199056, -0.0321417488, 0.0122430278, 0.0126894685, -0.0745207369, -0.0304842554, -0.0757251903, -0.0506150648, -0.0357720070, -0.0803474709, 0.0106404051, 0.0004914392, 0.0721159354, 0.0235648770, 0.0540639274, -0.0712910742, -0.0011641065, 0.0207832176, 0.0157998502, 0.0347104333, 0.0307498313, -0.0061301538, 0.0542076342, 0.0787926018, 0.0365661494, 0.0281269625, 0.0413413718, 0.0456152856, 0.0651033968, -0.0085572535, 0.0873937532, -0.0194642004, -0.0339019746, -0.0584995337, 0.0725641251, 0.0514831506, -0.0388876274, 0.0659992471, 0.0609200485, -0.0397930965, 0.0049223611, 0.0466704071, -0.0385203995, -0.0227811355, 0.0499285646, 0.0706470609, -0.0631776825, 0.0732554048, 0.0606142655, -0.0303300414, -0.0248852670, 0.0465442352, -0.0651435032, -0.0359113328, -0.0133277019, -0.0565781668, 0.0272218678, 0.0265854988, 0.0362871215, 0.0237624906, 0.0498967245, 0.0048867217, 0.0485014133, 0.0224075317, 0.0210694354, -0.0241708606, 0.0017840905, 0.0345305353, 0.0462787636, 0.0020550578, -0.0549354106, 0.0555274859, -0.0134008294, -0.0031701010, 0.0307267420, -0.0248511042, 0.0031295638, -0.0546781942, -0.0439749956, -0.0666932240, 0.0348560810, -0.0006735193, 0.0235253964, 0.0263863988, -0.0271835588, 0.0477280319, 0.0525918491, 0.0716058388, 0.0243852269, 0.0545009933, 0.0249795113, -0.0686845928, -0.0263757426, -0.0452703275, 0.0538460910, -0.0552628636, -0.0502519123, -0.0377758741, -0.0488205031, 0.0574161038, 0.0000503712, -0.0093302410, 0.0040864213, -0.0818975195, 0.0605131462, 0.0693503618, 0.0376134925, -0.0720782131, 0.0221941806, 0.0751067027, 0.0203753933, 0.0517171957, -0.0172624197, -0.0480949730, -0.0109619778, -0.0362036265, 0.0384362005, -0.0194643065, -0.0155422492, 0.0385288000, 0.0234243199, 0.0454071239, 0.0566643849, 0.0392540544, -0.0400167666, -0.0286724735, -0.0125635434, -0.0506007522, -0.0149692977, 0.0134903779, 0.0118786320, -0.0550226346, -0.0377552100, 0.0505447388, -0.0547679439, -0.0708744749, -0.0427684896, 0.0473219715, -0.0312214997, 0.0278890040, -0.0401386358, -0.0801004544, 0.0003942632, 0.0439029410, -0.0223349817, -0.0719130635, 0.0442804471, 0.0090918010, 0.0459937453, -0.0401342735, 0.0295666810, -0.0647129342, 0.0418187566, 0.0706213638, -0.0369337872, 0.0335305780, -0.0006774714, 0.0569268353, 0.0376822837, 0.0501789041, 0.0292211305, -0.0090856291, 0.0443061218, 0.0243724324, -0.0268290173, -0.0117820790, -0.0165563598, -0.0655102655, 0.0324590579, -0.0429384671, -0.0660447776, -0.0491715334, -0.0488927811, -0.0229105875, 0.0733696893, -0.0220083911, 0.0523261949, -0.0502257347, -0.0486477949, 0.0452580862, -0.0503867343, -0.0503885038, 0.0640532672, 0.0197463483, -0.0153277125, 0.0222440530, 0.0192373469, 0.0431217737, -0.0277573839, 0.0485109538, -0.0331125595, -0.0668400601, 0.0018284019, -0.0792570040, -0.0320561863, -0.0161090977, -0.0723261163, -0.0337193124, 0.0666703656, -0.0524012782, -0.0000462606, -0.0678214729, -0.0691355243, 0.0812669471, -0.0285476502, 0.0135689639, 0.0452169180, -0.0523261577, -0.0056642154, 0.0311494209, 0.0605865680, -0.0255008843, -0.0524582602, -0.0058577638, -0.0231269561, -0.0158636272, 0.0757125691, 0.0052093538, -0.0258815587, -0.0397227630, -0.0285738334, 0.0585814379, 0.0806239322, 0.0449280217, -0.0481784232, -0.0213701148, 0.0412262902, 0.0573789142, 0.0767233446, -0.0022776150, 0.0427707396, -0.0243034139, -0.0277796369, 0.0204342715, -0.0129468255, 0.0353218690, -0.0102738598, -0.0723658428, 0.0130613716, 0.0149871297, 0.0090585733, -0.0610843077, -0.0219852403, 0.0105919475, -0.0415337533, 0.0200698152, -0.0317734145, 0.0451398715, 0.0320666246, -0.0155039057, -0.0014820801, -0.0570414327, -0.0066623925, 0.0682099834, 0.0102265058, -0.0090695517, 0.0707373694, 0.0545914322, 0.0224769562, -0.0536753461, 0.0061083315, 0.0451770499, 0.0508904941, -0.0425834097, -0.0497193933, -0.0432288125, -0.0362929925, -0.0333024338, 0.0377579667, -0.0379814021, -0.0510649607, -0.0358592235, -0.0150265098, 0.0244518761, -0.0003315147, 0.0107737686, -0.0083093625, -0.0480267741, 0.0383488461, 0.0465204753, 0.0457330830, 0.0604257472, 0.0196511615, 0.0078687407, 0.0397691801, 0.0677665174, 0.0763484314, 0.0006635499, -0.0617714263, -0.0530779213, 0.0622862764, -0.0849695876, 0.0212627668, 0.0424092673, 0.0463044159, -0.0799455792, -0.0759690478, 0.0063756574, -0.0447357669, -0.0578395613, 0.0035614269, 0.0461679660, -0.0334740952, -0.0286940746, 0.0241107233, -0.0212166179, 0.0597648844, 0.0051812795, -0.0243656822, 0.0736482590, -0.0061300923, -0.0497575849, 0.0257197097, 0.0486170091, -0.0423459336, -0.0547557659, 0.0003129021, 0.0241639093, 0.0670353174, -0.0748950914, 0.0583772436, 0.0126594258, -0.0087440228, -0.0680494010, -0.0440129638, 0.0138530592, -0.0175409373, -0.0413173065, -0.0081421202, 0.0661395043, 0.0754191577, -0.0008635094, -0.0190437771, -0.0892903730, -0.0320033468, -0.0261247829, 0.0363196395, -0.0344574042, -0.0589901023, -0.0483706892, -0.0615709461, 0.0239163581, 0.0669968352, 0.0548857078, -0.0081396997, 0.0350431278, 0.0491348840, 0.0071158409, 0.0130874477, -0.0570434816, 0.0554846749, 0.0161116235, -0.0624131933, -0.0500747710, -0.0692957267, -0.0199591555, 0.0838933736, -0.0606538504, -0.0438623056, -0.0234319102, 0.0052790707, 0.0006303961, -0.0165510438, -0.0763771385, -0.0396512225, 0.0054368405, 0.0538758859, -0.0404472426, -0.0604852252, -0.0338035561, 0.0295768809, -0.0154469879, -0.0710201263, -0.0096889632, -0.0129088275, 0.0409053601, -0.0235481244, -0.0155366641, -0.0403857715, 0.0340912752, 0.0564965308, 0.0482409410, -0.0040807365, 0.0331456624, -0.0306461956, -0.0673495457, -0.0475209169, -0.0705000982, -0.0731412470, -0.0140221640, -0.0633761883, -0.0799610317, 0.0076670921, -0.0154424524, 0.0362995788, -0.0463899300, 0.0632190779, 0.0334194340, 0.0178077761, 0.0572448336, -0.0006120530, -0.0592529923, 0.0306827445, -0.0817144960, 0.0625785664, 0.0047340938, 0.0560284108, 0.0078516379, 0.0259806216, -0.0139295748, -0.0770091265, -0.0653121769, -0.0111782793, 0.0493654720, -0.0302447509, 0.0183458123, -0.0079379780, -0.0207157806, -0.0421865024, 0.0164476000, 0.0206516311, -0.0327077433, -0.0018054611, 0.0390423909, 0.0085057672, -0.0325977989, -0.0169719271, 0.0665635616, 0.0093730856, -0.0323119164, 0.0648390874, 0.0329667330, 0.0311306342, -0.0242740605, 0.0426517501, 0.0649745613, 0.0019067249, -0.0186529513, -0.0011213028, -0.0551090874, 0.0335868970, 0.0620530508, 0.0032420505, -0.0279737618, -0.0387471914, 0.0545689873, 0.0311160907, -0.0404607393, 0.0646709129, -0.0985381901, 0.0230396073, 0.0126926741, 0.0182719398, -0.0220935307, -0.0810523555, -0.0243915301, 0.0647269562, 0.0299445707, 0.0311571229, 0.0866996124, 0.0374781825, -0.0421125554, 0.0518666208, -0.0035367822, 0.0778636485, -0.0490853079, -0.0551633313, -0.0258842427, 0.0611565523, -0.0593683347, 0.0549981035, 0.0734552667, -0.0353358351, 0.0701195747, 0.0192928091, 0.0090020150, 0.0692459196, 0.0377283096, 0.1059278101, 0.0244387668, -0.0003036357, -0.0652633905, 0.0326545313, -0.0461957008, 0.0457357615, 0.0251038112, 0.0653327182, 0.0287945569, 0.0235785488, -0.0213086903, -0.0587055758, 0.0407111943, -0.0769979134, 0.0150628658, 0.0680380613, 0.0597636625, -0.0547832325, 0.0468566343, -0.0320669338, 0.0251846109, -0.0750957131, 0.0640643165, 0.0239520408, 0.0337428413, -0.0819223225, 0.0135603519, 0.0223587621, 0.0149460118, -0.0114552332, 0.0169292707, 0.0681608468, -0.0656417310, 0.0106248120, -0.0601359010, -0.0326463170, -0.0556714609, -0.0120013766, 0.0671856403, 0.0521713309, 0.0051193838, 0.0096915755, 0.0105223898, 0.0632532164, 0.0570739470, -0.0279693194, -0.0230109394, -0.0160204954, -0.0647800714, 0.0602408797, 0.0162499472, -0.0273562465, 0.0117560728, 0.0370141752, -0.0362546183, -0.0483078808, -0.0305274837, -0.0574548133, -0.0499751605, 0.0328387171, 0.0101913512, 0.0641989633, -0.0310785361, 0.0327356458, -0.0440930799, 0.0461656675, -0.0688468590, 0.0883552656, 0.0345265158, 0.0252628885, -0.0006695137, 0.0369201638, 0.0680653676, -0.0217480808, 0.0829261094, -0.0875662714, 0.0448547453, -0.0088700326, -0.0248550326, -0.0059397304, 0.0384265520, -0.0027467688, 0.0148505801, -0.0333489887, -0.0690432191, -0.0358764492, 0.0711649582, -0.0327601619, 0.0753923729, -0.0205245521, -0.0342653394, 0.0341126993, -0.0576751567, -0.0628304854, 0.0413226783, 0.0695315152, 0.0521678403, 0.0341789834, 0.0177966598, -0.0761485398, -0.0634164214, 0.0267389230, 0.0492601134, -0.0072614974, -0.0090175811, -0.0616029389, -0.0399797782, 0.0409316830, 0.0008950064, -0.0014062572, -0.0811253563, -0.0676632375, -0.0001779985, -0.0269207582, -0.0462897941, -0.0872214586, -0.0599604622, -0.0341716744, -0.0489920303, 0.0356025510, 0.0091525000, -0.0499282219, -0.0044084755, 0.0422213413, 0.0395083167, -0.0082738986, 0.0533804260, 0.0457510911, 0.0157820266, -0.0718537867, -0.0408973545, 0.0934658945, -0.0590460636, 0.0396785401, 0.0428237803, -0.0228747316, -0.0406727083, 0.0541806407, 0.0399860218, -0.0228827037, 0.0367898680, -0.0734411925, -0.0713696852, -0.0319392271, -0.0173857417, 0.0138318259, -0.0499903932, -0.0041256500, -0.0840591714, -0.0636944324, 0.0838940442, -0.0521148145, 0.0447842032, 0.0015232867, 0.0506005846, 0.0572356917, 0.0494580567, 0.0848880857, -0.0192875713, 0.0047369828, 0.0369075388, -0.0250989571, 0.0583238713, 0.0699396655, 0.0277929269, 0.0907183737, 0.0779359341, 0.0490601771, 0.0228110962, -0.0517318882, -0.0402176641, 0.0505545624, 0.0139468787, -0.0362442806, -0.0032003757, -0.0493926704, 0.0384174436, -0.1063219979, 0.0481641255, -0.0321620107, -0.0154911680, -0.0172262434, 0.1050803736, -0.1027972698, -0.0459059179, 0.0021676163, -0.0217991658, -0.0694000572, 0.0210980382, -0.0059783268, -0.0017224567, -0.1186992228, 0.0405548960, -0.0178294312, -0.0341410898, -0.0984016657, 0.0946192965, -0.0567112230, 0.0224887822, -0.0256572869, -0.0225728787, -0.0089049591, -0.0118509894, 0.0479923822, -0.0521159507, 0.0414302535, -0.0089514488, -0.0697277859, 0.0030514838, 0.0876454860, -0.0491996147, 0.0504886024, 0.0159654822, -0.0268226452, -0.0131577551, -0.0722547024, -0.0324052870, -0.0220929775, 0.0049979445, -0.0525492802, 0.0377681069, -0.0674070418, -0.0120788505, -0.0004793772, 0.0447269082, -0.0406448580, 0.0590204783, 0.0086652907, 0.0507125594, 0.0620215610, -0.0123596936, -0.0126353633, -0.0247806404, 0.0689009726, 0.0104964217, -0.0274197664, -0.0802639201, 0.0101245977, 0.0568430461, 0.0122820893, -0.0221676212, -0.0457525216, 0.0376750305, -0.0093580410, 0.0586801954, 0.0209515113, -0.0143995453, -0.0869087651, -0.0764820725, 0.0633474067, -0.0433290303, -0.0518185832, -0.0647599101, -0.0598724969, -0.0227759741, -0.0736281723, -0.0089615928, 0.0519440621, 0.0087664677, -0.0250499845, 0.0609693490, 0.0030418199, -0.0290676672, 0.0024538022, 0.0101662660, -0.0438322537, -0.0595526993, 0.0273527317, 0.0215351842, -0.0124453800, 0.0399262607, -0.0232386943, 0.0128645226, 0.0043476108, 0.0510989092, -0.0750275254, -0.0488930866, 0.0152488770, 0.0390714146, -0.0424382538, -0.0042689661, 0.0112420134, -0.0667629912, -0.0111562889, 0.0601587892, 0.0051122028, 0.0446878858, -0.0713152364, -0.0581215322, 0.0475743636, 0.0466195196, 0.0494878404, 0.0505339541, 0.0389252119, 0.0545001850, -0.0589769892, 0.0187557340, -0.0292512905, 0.0328622386, 0.0541241616, 0.0009404637, 0.0686613098, -0.0119481161, 0.0567154810, -0.0366978496, -0.0226371828, 0.0509133078, 0.0480785556, -0.0398842953, 0.0205583349, -0.0081229471, 0.0027823169, 0.0605327077, 0.0036808020, -0.0263341870, 0.0105834492, -0.0186533090, -0.0080880672, -0.0215872303, 0.0224938113, -0.0348432511, 0.0514730476, 0.0433449224, -0.0270694382, 0.0505508892, -0.0742599815, -0.0617540479, -0.0417318046, -0.0378104672, 0.0531080440, 0.0278118253, 0.0116955405, -0.0304439664, 0.0813175812, 0.0025078652, 0.0581053309, -0.0606393665, 0.0782943889, 0.0032744403, -0.0331932642, 0.0229566190, 0.0518763326, 0.0490664057, -0.0440681092, -0.0212694872, -0.0108348280, 0.0017775490, 0.0477726720, 0.0071932012, 0.0202779379, 0.0037575401, 0.0010417169, -0.0008993118, -0.0402046740, 0.0285236016, 0.0583295338, 0.0357364491, -0.0150263486, 0.0363793895, 0.0353622474, 0.0701629221, -0.0577204339, 0.0331835411, -0.0380837172, 0.0439429432, -0.0052404893, 0.0825616419, -0.0635973290, -0.0073545012, -0.0962686241, 0.1002082527, 0.0236775763, 0.0146587081, -0.0412594453, 0.0790698677, -0.0630418435, -0.0629729331, 0.0900950208, 0.0202697795, -0.0513685830, 0.0354817063, -0.0579781830, -0.0886318535, -0.0990851074, -0.0298482366, 0.0864401534, 0.0000896922, -0.0539599732, 0.0715135038, -0.0451427773, -0.0350930877, -0.0073624724, 0.0133638792, -0.0049596294, -0.0367931351, 0.0643225163, -0.0557506569, 0.0721232891, -0.0313135050, -0.0007782588, -0.0030510852, 0.0897600874, -0.0440723039, 0.0369335115, -0.0223770663, -0.0282189623, -0.0177924130, -0.0718963295, -0.0380518474, 0.0365606323, 0.0309649669, 0.0529883504, -0.0029266574, 0.0221604723, -0.0062936461, -0.0041251876, -0.0476989523, 0.0147212613, -0.0488195643, 0.0901984870, -0.0701005906, -0.0151237072, 0.0105357897, 0.0073987935, -0.0107596219, -0.0402617007, -0.0073790317, -0.0546196066, -0.0336006843, -0.0048857732, 0.0265565608, -0.0496134274, -0.0097709140, -0.0297335554, 0.0767100900, 0.0717662945, 0.0268672537, -0.0249229427, 0.0174843930, 0.0525525473, 0.0072005354, 0.0433133729, -0.0239250101, -0.0111089237, 0.0605531111, 0.0732636824, -0.0417826809, 0.0228797235, -0.0152480202, 0.0017606720, -0.0506126024, 0.0283345431, 0.0411990136, -0.0256229714, -0.0225826949, 0.0144327339, 0.0726205930, 0.0176978316, -0.0814849213, 0.0562720969, 0.0241076685, 0.0565167479, 0.0231238026, -0.0709443837, 0.0680243745, 0.0268551931, 0.0516945757, 0.0254588332, -0.0445936956, -0.0022636375, -0.0497814417, 0.0115529187, 0.0459289178, 0.0547653437, -0.0234403964, 0.0155476918, 0.0668821931, 0.0709023923, -0.0674559399, -0.0642923862, -0.0110341404, -0.0012632293, 0.0521634370, 0.0097741177, 0.0050679166, 0.0087871505, -0.0038383945, 0.0224722903, 0.0670595318, 0.0327001214, -0.0229729563, 0.0336677246, -0.0252183788, -0.0056046201, 0.0107790018, 0.0212691445, -0.0060472097, 0.0491720811, -0.0090279114, 0.0267421622, 0.0348184556, -0.0052110716, 0.0642514974, -0.0513691641, -0.0445386507, -0.0008883571, 0.0184052978, -0.0258772410, 0.0461244211, 0.0490580872, 0.0511711501, -0.0674351007, -0.0570214875, 0.0470093451, 0.0530115291, 0.0520763062, -0.0176351666, -0.0080555174, 0.0254740044, -0.0227833334, 0.0188962873, 0.0200898703, 0.0441051088, 0.0467245355, -0.0636722594, 0.0064501958, -0.0538063422, 0.0260043703, 0.0667554289, -0.0474680811, 0.0161791090, -0.0375841148, 0.0640114620, -0.0198705085, -0.0452694111, 0.0285715237, -0.0125784287, 0.0293925013, 0.0231622886, 0.0462708324, 0.0160916578, 0.0060426863, 0.0310404096, -0.0409863330, 0.0327024944, 0.0425958186, 0.0209431425, 0.0310852975, -0.0441780649, -0.0017188728, 0.0097551188, -0.0188491158, 0.0519087724, -0.0470442660, 0.0552358590, -0.0072667855, -0.0340955108, 0.0415841118, 0.0450351872, 0.0362832434, 0.0595688336, -0.0135768401, -0.0442703627, -0.0370973833, 0.0305873286, -0.0487118475, 0.0732675493, -0.0399843194, -0.0904302523, -0.0189353004, 0.0199901722, 0.0073324330, 0.0217027385, -0.0435238779, 0.0088270009, -0.0844086707, -0.0290399939, 0.0020420544, 0.0034140791, -0.0826010779, 0.0606536902, 0.0232558306, -0.0578280278, 0.0210603550, -0.0464387760, 0.0244740825, 0.0008530043, -0.0145667233, 0.0617643818, 0.0525245108, -0.0155169917, 0.0448894165, 0.0685419887, -0.0384201705, 0.0746113807, -0.0305000376, 0.0187815502, 0.0322995223, 0.0207396001, 0.0346927606, 0.0393273309, 0.0215656888, -0.0135800634, -0.0024017857, -0.0498889498, 0.0060992660, -0.0599066615, -0.0058492557, -0.0307457894, -0.0294691324, -0.0052483929, -0.0727721602, 0.0094224317, -0.0707610771, 0.0642344952, -0.0066581578, 0.0732681751, -0.0508807860, -0.0150142191, -0.0567439236, -0.0161257815, -0.0364145078, -0.0328180604, -0.0356569216, -0.0365519412, 0.0608080253, -0.0369191356, 0.0229999516, -0.0326095000, -0.0850976482, 0.0611417592, 0.0473859832, 0.0459315963, 0.0590169057, 0.0730665848, -0.0886128023, -0.0288711563, 0.0517565012, -0.0676887482, -0.0259684268, -0.0819162354, 0.0629814193, -0.0444792882, -0.0070862584, -0.0030813878, -0.0422534384, -0.0094774105, -0.0186488107, -0.0074714110, 0.0657497793, -0.0605208613, -0.0444502234, 0.0208069868, 0.0301523078, -0.0294547826, 0.0276381336, -0.0032958605, -0.0169205517, 0.0075889369, -0.0348679274, 0.0210178699, 0.0054383297, -0.0027290997, 0.0011183274, -0.0417632200, -0.0701091737, -0.0766138434, 0.0362673849, 0.0025645739, 0.0745104998, 0.0630405098, -0.0362142436, -0.0506849028, 0.0312886052, -0.0468242131, -0.0303973183, -0.0142424200, -0.0788357630, -0.0651644096, 0.0683163479, -0.0168251749, 0.0804821104, 0.0041564857, -0.0043397523, -0.0682946891, -0.0425983146, -0.0024577060, 0.0450376384, 0.0883373469, -0.0271601304, 0.0716044679, -0.0073873820, 0.0595480204, -0.0674128160, -0.0293761492, -0.0258581396, 0.0085746618, 0.0533431843, -0.0252205860, 0.0407756642, -0.0217273254, -0.0648959801, -0.0673777685, 0.0284947772, -0.0804825798, -0.0424243137, 0.0193136204, -0.0140354391, -0.0106702847, 0.0624257214, 0.0560185798, -0.0662374049, 0.0313487016, 0.0428520292, 0.0439456515, -0.0193980318, 0.0404347554, 0.0074511459, 0.0445197448, -0.0016202212, -0.0456371233, 0.0032518210, 0.0290491786, 0.0054958072, 0.0872250423, 0.0418918505, -0.0014220378, 0.0277583599, -0.0087373108, 0.0223339554, 0.0379215963, -0.0031250603, -0.0666497201, 0.0648591667, 0.0099232793, 0.0070432895, 0.0652167723, -0.0243157521, 0.0960808769, 0.0536968410, 0.0639556050, 0.0766669810, 0.0189234037, -0.0548723042, -0.0023031393, -0.0140327392, 0.0165155921, 0.0600766875, -0.0639664307, 0.0414328799, -0.0515637472, 0.0517250597, 0.0168973804, -0.0327462517, -0.0031632232, 0.0017948698, -0.0268731136, 0.0059098704, 0.0516562909, 0.0153356232, -0.0024115883, 0.0355217606, 0.0295635834, 0.0739494264, 0.0592358559, 0.0601169392, 0.0013319411, -0.0686968341, -0.0725735947, 0.0440016165, 0.0616300069, -0.0692610890, 0.0031087163, 0.0399796218, -0.0090281805, 0.0155004244, -0.0194353964, 0.0477843136, 0.0500890017, 0.0224360563, 0.0476475134, 0.0797138140, 0.0706212297, 0.0170733221, 0.0308434740, 0.0729326159, 0.0294171143, 0.0560665466, -0.0577349216, 0.0760189593, -0.0201264322, 0.0443008319, 0.0123279970, 0.0334070399, -0.0579833053, -0.0538891889, 0.0551483110, -0.0088640694, 0.0028754107, -0.0196260735, -0.0322946422, -0.0601451509, -0.0328201577, -0.0167679340, 0.0408036634, 0.0016385065, -0.0508038513, 0.0112724230, -0.0061790855, -0.0499729998, -0.0016706961, 0.0101132542, -0.0048097000, -0.0574262403, -0.0332927518, -0.0143264513, 0.0667669922, 0.0075579775, -0.0038753178, -0.0206959844, -0.0079160137, -0.0282501392, -0.0070685251, 0.0374843590, 0.0078896116, 0.0578578785, 0.0598739535, -0.0180517007, -0.0512153693, -0.0252651814, -0.0388701148, -0.0712991431, -0.0449793115, -0.0409639664, -0.0788665563, 0.0222935844, 0.0465775169, 0.0124259498, -0.0649000555, -0.0098501844, -0.0482530966, 0.0251021273, -0.0656462312, -0.0186479948, 0.0600826703, 0.0351441465, 0.0492671207, 0.0252986904, 0.0076553584, 0.0501996726, -0.0606588386, 0.0120498715, 0.0662676990, 0.0872958228, 0.0708058625, -0.0308259949, 0.0380537324, -0.0155796772, -0.0157667492, -0.0415638387, -0.0412208289, -0.0259132050, -0.0372322388, 0.0179210361, 0.0252160951, 0.0451461263, -0.0417826809, -0.0392228216, 0.0474966876, -0.0404210538, -0.0057453364, 0.0247752033, 0.0179957803, -0.0196844358, 0.0276859365, -0.0135927228, 0.0109636812, 0.0319347978, 0.0081878407, -0.0679787397, -0.0283184629, -0.0180200338, -0.0654383004, -0.0245238729, -0.0517619029, -0.0427822806, -0.0304283332, 0.0499309711, 0.0436747558, 0.0367220119, 0.0466480777, -0.0230864622, -0.0284167156, 0.0066002575, 0.0664647520, 0.0259402748, 0.0053138249, 0.0672960505, -0.0647695214, -0.0557386726, 0.0452300534, -0.0360231437, -0.0309928134, 0.0527923554, -0.0397586189, 0.0064992975, -0.0437177643, -0.0363361612, 0.0629190728, -0.0273335148, -0.0384322107, -0.0023116930, -0.0493019000, -0.0767862126, 0.0129104080, 0.0370530225, -0.0334785841, 0.0653661340, 0.0482597426, 0.0136631811, 0.0377005823, -0.0083907787, 0.0229734723, -0.0094853453, 0.0102329226, 0.0221579690, 0.0759315714, 0.0290363822, -0.0544719994, 0.0537423678, 0.0275578201, -0.0479476564, 0.0434506051, 0.0794134811, 0.0065085781, -0.0526574329, -0.0384468697, 0.0585284978, -0.0195017923, -0.0396606773, -0.0131785236, 0.0710693374, -0.0085356720, -0.0293746442, 0.0286685340, 0.0030881672, -0.0293928608, 0.0529191270, -0.0153026041, 0.0793173909, 0.0412433483, -0.0697365701, -0.0030570026, 0.0216198117, -0.0644842535, 0.0812262520, -0.0096351877, -0.0143511454, -0.0207078084, -0.0011671028, -0.0666427463, -0.0190768503, -0.0449445620, -0.0088934703, -0.0836622939, -0.0066002249, -0.0407727994, 0.0349700898, -0.0604950003, 0.0100293821, -0.0123930899, 0.0034368460, 0.0072134598, -0.0011706167, 0.0233456902, 0.0533602759, -0.0008618792, 0.0857543126, -0.0360336304, 0.0601537302, -0.0309560597, 0.0742819756, -0.0180235356, 0.0238322988, -0.0403373055, 0.0604323335, -0.0036300169, 0.0306544118, 0.0043190713, -0.0617572293, -0.0455044247, 0.0161674265, 0.0156769753, -0.0072344169, 0.0544519648, 0.0261145737, 0.0013251057, -0.0074233115, 0.0399599560, 0.0151551748, -0.0122248679, -0.0462065488, -0.0251778979, 0.0088341981, -0.0606728978, 0.0198777691, -0.0649400651, -0.0659081563, 0.0605913736, -0.0134844212, -0.0159995705, -0.0248517338, -0.0140226260, 0.0639292300, -0.0187241957, 0.0564861447, 0.0116740139, 0.0396517701, 0.0605070144, -0.0292418282, -0.0139184101, -0.0216928404, 0.0474202931, -0.0620879643, -0.0574323796, -0.0724350587, -0.0001254170, 0.0203269832, 0.0391446687, -0.0134314522, -0.0593694076, 0.0391424373, 0.0412137546, -0.0801015198, -0.0135087399, -0.0067888466, -0.0443953425, -0.0534896776, -0.0521513224, -0.0427634865, -0.0051589510, 0.0230400059, -0.0575784147, 0.0074380566, -0.0314524844, 0.0164137557, 0.0099691758, -0.0569022447, 0.0351786688, 0.0008863569, -0.0158767477, 0.0719873682, -0.0013290409, 0.0084987748, 0.0138448654, -0.0182177816, 0.0309023298, -0.0075853560, -0.0681520626, -0.0263965745, 0.0261630565, -0.0655498952, -0.0566666089, -0.0436745510, -0.0590290651, 0.0423028357, -0.0235982742, -0.0732879937, -0.0619456731, 0.0155608077, -0.0539962240, -0.0835522264, -0.0603067093, 0.0322821252, 0.0059966934, -0.0090245819, -0.0883950889, -0.0715792626, 0.0197979342, 0.0479113981, 0.0202711876, 0.0334962755, -0.0355509259, 0.0054615443, -0.0376950912, 0.0299015101, -0.0312143583, 0.0141911032, -0.0169806052, 0.0324683152, -0.0438777059, -0.0286449194, -0.0780974329, -0.0445202142, -0.0331433341, -0.0580578074, -0.0152298482, 0.0083492594, -0.0400568508, -0.0622555763, -0.0111172348, -0.0864064321, -0.0538747944, -0.0385970771, -0.0514026582, -0.0835134238, -0.0880223289, 0.0027654122, -0.0085883215, 0.0035849342, 0.0723164231, -0.0219896976, 0.0103782732, -0.0514571927, 0.0175858475, 0.1010166481, -0.0444011129, 0.0951653644, 0.0034877760, 0.0643144697, 0.0488498136, -0.0013011972, -0.0826416537, -0.0160883404, -0.0352542065, -0.0644309968, 0.0321508981, -0.0309296679, 0.0324795321, -0.0454314426, 0.0433099419, -0.0568892695, 0.0157556459, 0.0290620569, -0.0027774270, -0.0755669177, 0.0513304844, 0.0524952598, -0.0850338489, -0.0730752051, 0.0483490005, -0.0299592279, 0.0492389388, 0.0718312636, -0.0294658523, -0.0058222120, -0.0412279814, 0.0170646682, -0.0068863118, 0.0398475565, -0.0410498045, -0.0502886102, 0.0091737937, -0.0829533711, -0.0187924504, -0.0432471409, -0.0184994563, 0.0106590101, -0.0327130668, 0.0148556177, -0.0327757671, -0.0461579040, 0.0766429827, -0.0124963941, 0.0049950876, 0.0411079861, -0.0617336892, 0.0442727469, -0.0151443481, 0.0214808490, -0.0763184056, -0.0115156015, 0.0546691939, 0.0052532409, -0.0252732895, -0.0214806534, 0.0800951123, -0.0660462081, -0.0244948044, 0.0128373541, 0.0312440991, -0.0035376647, -0.0508543514, 0.0045176321, -0.0582061559, -0.0236726850, 0.0353026837, -0.0858753696, 0.0705061853, -0.0721495152, -0.0776173547, 0.0455033332, 0.0173648931, 0.0295378845, -0.0890626907, -0.0328342654, 0.0335316285, -0.0093236594, -0.0024857461, 0.0088724988, -0.0388866439, 0.0737194493, -0.0741691515, 0.0146624623, 0.0259116609, -0.0741615295, -0.0840427801, 0.0586433448, 0.0208481513, -0.0617450438, -0.0045339395, -0.0295873173, -0.0432546549, 0.0020095380, 0.0210679378, 0.0290018730, 0.0138570871, 0.0302911177, 0.0027927218, -0.0098870937, 0.0282925554, 0.0037273073, -0.0104638059, 0.0569362640, 0.0473498777, 0.0441539139, 0.0723573193, -0.0192841943, 0.0946203545, -0.0297625605, 0.0343784131, -0.0172583517, 0.0056787999, -0.0438305549, -0.0067532575, -0.0882012993, -0.0044996683, -0.0300694611, 0.0360392891, -0.0517833717, 0.0926011056, 0.0081291161, -0.0099697085, -0.0131403403, -0.0290169064, 0.0688876435, -0.0027474051, -0.0156419855, 0.0080693290, 0.0439033583, -0.0137855439, -0.0311720613, -0.0201569013, 0.0055227056, -0.0094819665, 0.0234737173, -0.0438318215, 0.0512689799, -0.0673036203, 0.0076430831, 0.0488055758, -0.0125805689, -0.0339162163, 0.0261342321, 0.0020151460, 0.0708953142, 0.0346385278, -0.0808135346, 0.0044756792, -0.0408674031, -0.0526602864, -0.0390038639, 0.0473938622, -0.0074051390, 0.0092481589, -0.0168222599, 0.0414091311, 0.0091919489, 0.0755603611, 0.0762087330, 0.0629231408, -0.0340454094, 0.0306872986, 0.0112549998, 0.0030968464, 0.0000407958, 0.0282629877, 0.0298537221, -0.0645366907, -0.0507406965, 0.0216426644, -0.0341751911, 0.0314360261, -0.0092410175, 0.0388405658, -0.0198571589, 0.0393671989, -0.0324268527, -0.0645855963, -0.0410773829, -0.0499022938, 0.0653812587, 0.0393830948, -0.0061184573, 0.0871348530, -0.0490168259, 0.0228938144, 0.0613965318, -0.0048869615, 0.0375974625, -0.0193155836, 0.0947921798, 0.0382507145, -0.0299830865, -0.0163802914, -0.0298098065, 0.0290858001, -0.0602879561, -0.0059003746, -0.0442639515, 0.0525296777, -0.0419321246, -0.0004940259, 0.0502970256, -0.0167652462, -0.0213025156, 0.0232213605, 0.0286688022, -0.0814147815, 0.0773616880, -0.0628675148, -0.0100972075, 0.0383295342, -0.0526516140, 0.0538989678, -0.0548977032, -0.0415129773, -0.0366988629, 0.0387694389, 0.0329196379, -0.0792658329, -0.0119933113, 0.0325100496, 0.0746616125, 0.0022709598, 0.0147057809, 0.0644855350, 0.0593694001, -0.0508865714, -0.0376691781, 0.0607813448, -0.0675571412, 0.0155949062, -0.0648035705, -0.0390159227, 0.0147715556, -0.0880399495, 0.0548519827, 0.0475514531, -0.0291750450, 0.0179476012, -0.0436866395, -0.0598931201, 0.0640425757, -0.0064197052, -0.0563922450, 0.0460552461, -0.0227779131, 0.0033693388, 0.0229899548, 0.0190784838, -0.0648977086, -0.0161547475, -0.0315104499, -0.0459829681, 0.0167225543, -0.0182435047, -0.0440195501, -0.0988142937, -0.0240275189, -0.0055170404, 0.0062616551, -0.0028433793, -0.0229189415, -0.0690935999, 0.0217260811, -0.0196868647, -0.0069137430, -0.0495633073, -0.0612801127, -0.0198948570, -0.0036796280, -0.0571591593, 0.0043658945, -0.0351882912, 0.0428617336, -0.0509418212, -0.0090377955, 0.0337096229, 0.0777475238, -0.0182887781, -0.0109187551, -0.0167838968, 0.0293480679, -0.0076903692, -0.0016261494, 0.0177692380, -0.0166035090, -0.0081151500, -0.0508857034, -0.0464458019, 0.0507629029, -0.0628040135, -0.0054384982, 0.0686570778, 0.0262106098, 0.0526907742, 0.0734380782, 0.0616689473, 0.0307379048, -0.0634566247, -0.0224844441, -0.0257441606, -0.0692318752, -0.0061120545, -0.0475120433, 0.0406819806, -0.0646178424, -0.0092999721, -0.0432200395, 0.0199772473, -0.0462400615, -0.0482820123, -0.0697062835, 0.0471869968, 0.0005896348, -0.0644839108, -0.0303426608, 0.0095102666, 0.0181299150, 0.0398152545, 0.0442229733, -0.0806620196, -0.0683092922, 0.0473574474, -0.0081482437, -0.0140102319, -0.0392299667, 0.0294731241, 0.0550615750, -0.0168659706, 0.0505610965, 0.0225569308, 0.0550402254, -0.0584814176, -0.0129740909, -0.0408833958, 0.0341947004, -0.0991903245, -0.0718315393, -0.0351724587, -0.0008331147, 0.0280812513, 0.0657896772, -0.0384573787, 0.0323097594, -0.0477801561, 0.0353232361, 0.0290323310, -0.0301006455, 0.0833261758, 0.0259602759, 0.0776528120, -0.0796023980, -0.0475727729, 0.0790372491, -0.0445546396, -0.0507943593, 0.0688466057, -0.0565214045, 0.0013815160, -0.0721853599, 0.1026384011, 0.0593255945, -0.0573376678, -0.0749892890, 0.0592058599, -0.0302394554, -0.0201663692, 0.0343653448, 0.0293123852, 0.0208508987, -0.0135291778, -0.0651018918, -0.0392772071, 0.0716808066, -0.0066446741, -0.0853992701, 0.0809972882, 0.0196627714, 0.0555214249, 0.0391972102, -0.0691037551, -0.0366650000, 0.0367977917, 0.0090009216, -0.0365551971, -0.0823174044, 0.0111696906, -0.0372534543, -0.0802325532, -0.0438581668, -0.0038597549, 0.0539843030, 0.0000471057, -0.0631183386, -0.0203070771, 0.0652602762, -0.0227522813, 0.0405934006, 0.0367041714, 0.0963785946, -0.0988336951, 0.0508109704, -0.1046235859, 0.0200834945, 0.0119342916, 0.0776116550, 0.0053377119, -0.0147737740, 0.0007897753, -0.0337241516, -0.0649665073, -0.0621539392, 0.0784040987, 0.0716210157, 0.0520275235, -0.0125640146, 0.0392641090, 0.0723448023, -0.0227872487, 0.0068469774, 0.0385033824, -0.0127346702, -0.0566180386, 0.0373696722, 0.0601147637, 0.0203282759, -0.0221966133, -0.0245809834, 0.0831371471, -0.0537209809, -0.0698927045, -0.0746017769, -0.0423867516, 0.0635793433, 0.0259116273, -0.0432423800, -0.0476629436, 0.0861535892, -0.0132682808, 0.0120921433, 0.0499059930, 0.0309269782, 0.0639282763, -0.0036298083, -0.0563140810, 0.0089657009, 0.0831696615, 0.0690197349, -0.0475710779, -0.0220090020, -0.0551646389, -0.0471796021, 0.0439962596, 0.0071611428, 0.0311925486, -0.0349368937, -0.0391552299, -0.0297695026, 0.0449607112, -0.0523761176, -0.0732488930, -0.0135669075, -0.0228668489, 0.1031153351, -0.0013114156, -0.0348427035, -0.0490485877, -0.0298220832, -0.0835744888, 0.0365281627, 0.0648683235, -0.0581710562, 0.0487440415, -0.0176125374, -0.0794422701, 0.0443301499, 0.0758883432, 0.0849904120, 0.0131894099, -0.0150417490, 0.0550907366, -0.0013107538, -0.0479481108, -0.0242662467, -0.0510645695, 0.0882386193, 0.0513329357, -0.0421562754, 0.0880014896, -0.0520199649, 0.0615945160, -0.0897593126, 0.0686541647, 0.0537767075, -0.0654989779, 0.0047843074, 0.0260346029, -0.0208297614, 0.0404101759, 0.0031077955, -0.0512300655, -0.0186627638, 0.0279873144, -0.1085145772, 0.0473475382, -0.0553684346, 0.0481098443, 0.0516986847, 0.0271789245, 0.0827756822, 0.0225025732, 0.0671784878, 0.0147120878, -0.1018868536, -0.0579302199, 0.0036488518, -0.0363995321, -0.0284321047, 0.0285866242, -0.0394131877, -0.0240401421, 0.0326187499, 0.0404246189, 0.0007203214, -0.0551029071, 0.0541958138, -0.0830479637, 0.1026820540, -0.1032467186, -0.0068540676, -0.1024872586, -0.0058483165, -0.0357670709, 0.0478883870, 0.0260211248, -0.0273307413, -0.0339616872, 0.0414778627, 0.0241383556, 0.0268084966, 0.0962855294, 0.1314484626, 0.0586649366, -0.0843207613, 0.0657930449, 0.0154978884, -0.0393642038, -0.0062548290, 0.0309492592, -0.0424939319, -0.0534865037, -0.0196101535, 0.0730186924, -0.0545060299, -0.0143877324, -0.0824831128, 0.0026825324, -0.0046689799, -0.0775233880, -0.0010079042, 0.0122688720, -0.0662742406, 0.0469338074, 0.0494537912, 0.0231685787, -0.0446650721, -0.0334627926, -0.0265176818, 0.0387442857, -0.0007181988, 0.0692576468, 0.0242970325, -0.0586830154, 0.0540497489, -0.0280889906, 0.0046369787, -0.0849777460, -0.0934996381, 0.0464923978, 0.0347949676, -0.0551034734, 0.0104020201, 0.0668753162, 0.0049522775, -0.0690807030, -0.0534140952, 0.0525996722, 0.1071629822, -0.0518706553, 0.0695501491, -0.0071733734, 0.1082089096, -0.0471735038, -0.0502807833, 0.0102341734, -0.0397374146, -0.0100074885, 0.0760833845, 0.1085607037, 0.0351129249, 0.0384246856, 0.0965704992, -0.0871683657, -0.0502885580, -0.0045427796, 0.0449685119, 0.0744874328, -0.0865424126, -0.0386186764, 0.0043239901, -0.0356077850, 0.0646223053, 0.0855335742, 0.0166636184, -0.0059600631, 0.0351301990, 0.1042154878, 0.0616330542, 0.0118257888, -0.0729266331, -0.0541828312, 0.0567553267, -0.0480765179, -0.0174508616, 0.0186275672, -0.0183918010, -0.0240451861, 0.0577863641, 0.0427266732, 0.0770118833, -0.0090027563, -0.1063910052, 0.0475938991, -0.0414071977, -0.0416627526, 0.0429792255, -0.0233808570, -0.0350485183, -0.0465242714, -0.0228958223, -0.0972573981, -0.1106046587, 0.0460903123, -0.0661454871, -0.0515411869, -0.0806658715, -0.0096682403, 0.0822807476, -0.0568602681, -0.0009893917, 0.0343267508, 0.0347585678, 0.0016788680, 0.0324920900, 0.0101156039, 0.0186881982, -0.0884783268, -0.0933171511, -0.0190793052, -0.0410575271, -0.0265966188, -0.0193445776, 0.0432737730, -0.0181291644, 0.0931816846, -0.0236366522, 0.0081059635, -0.0346157849, 0.0271296203, 0.0504518338, 0.0572715253, -0.0365121514, 0.0549814776, 0.0827111229, -0.0236692913, -0.0051154424, -0.0292722434, 0.0557936542, -0.0127141057, -0.0472436398, 0.1290212423, 0.0555055328, 0.0210139863, 0.0335629396, -0.0132060135, 0.0527890511, 0.0690484866, 0.0538986325, 0.0298987348, -0.0467673466, 0.0411032364, -0.0116185322, 0.0688273981, -0.0168806110, 0.0978577137, -0.0902857631, 0.0391147956, -0.0476787798, 0.0077361856, -0.0339078009, -0.0206757169, 0.0934384242, 0.0149454018, 0.0078210765, 0.0049080178, 0.0148966024, -0.0845274404, -0.1083147675, 0.0336631089, -0.0870879665, 0.0041151471, 0.0559225678, -0.0240681153, -0.0785929784, 0.0089276293, 0.0728493556, -0.1017500833, -0.0067686755, -0.0162988175, 0.1166762635, -0.0809090659, -0.0578516498, -0.1016561016, -0.0209291372, -0.0569233075, 0.0529521219, 0.0906799063, -0.0655637383, 0.0643413216, 0.0330909975, -0.0805723593, 0.0032253321, 0.0236598626, 0.0125861317, 0.0922992453, 0.0069673778, 0.0405507497, 0.0014358358, -0.0877970979, 0.0134541504, 0.0466893576, 0.0394722484, -0.0096969493, 0.0238435473, 0.1253892034, 0.0149409696, 0.0587396994, -0.0326282270, -0.0187852420, 0.0181054175, 0.0312125161, -0.0752504170, 0.0267816689, 0.0553173572, -0.0935182124, 0.0008605453, 0.0278353225, 0.0823836625, -0.0307081249, -0.0205692351, 0.0197534673, -0.0146441730, 0.0372559242, 0.0752042085, 0.0159648005, 0.0104672564, -0.0136536602, 0.0246728696, 0.0273458380, 0.0116967596, -0.0215170495, -0.0383212306, -0.0314208120, 0.0452675521, -0.0654586256, -0.0125307674, 0.0317732058, 0.0409164168, 0.0831655040, -0.0492609739, -0.0798202753, 0.0179497637, -0.0771592483, 0.0122254696, -0.0285521448, -0.0628806129, 0.0070595662, 0.0420726240, 0.0341728516, 0.0590008236, 0.0229994524, 0.0575720966, -0.0228447001, 0.0526580997, 0.0204828084, -0.0680656508, 0.0350514539, -0.0646442249, 0.0140655460, -0.0568681546, 0.0308967177, 0.0893273577, -0.0800905749, 0.0106760683, -0.0147474855, 0.0314321667, 0.0434401557, 0.0268329345, -0.0340194143, 0.0127206119, 0.0209216699, -0.0745895356, -0.0112625994, 0.0117042772, -0.0441035703, 0.0613566041, 0.0286010001, 0.0876604170, -0.0029579261, -0.0716981366, 0.0245499257, 0.0255293101, -0.0363174900, 0.0217596926, 0.0049472824, -0.0044647255, 0.0019337612, -0.0586340912, -0.0407156274, 0.0085148346, 0.0672781691, 0.0119300531, -0.0463748127, -0.0476867557, -0.0280667972, -0.0138086649, 0.0531783365, -0.0265787523, -0.0699344650, 0.0362280793, -0.0714476705, -0.0813715234, -0.0059011765, 0.0364545621, -0.0932047740, 0.0468679033, -0.0096928813, -0.0348456018, 0.0141310450, 0.0130909421, -0.0519637242, 0.0088100247, -0.0864092708, 0.0444302112, 0.0128676733, 0.0145291109, -0.0018678183, -0.0005873825, -0.0362456366, -0.0107535105, -0.0278433561, 0.0614212342, 0.0068968683, -0.0776124969, 0.0502477363, 0.0259451196, 0.0186057314, 0.0595760122, -0.0599707812, -0.0402447172, 0.0237265825, -0.0152551094, -0.0182073470, 0.0233990625, 0.0695445389, -0.0315512531, -0.0070450897, -0.0436603576, 0.0517735407, -0.0431279726, 0.0414708555, 0.0756213441, 0.0503593981, 0.0204030555, -0.0452011637, -0.0745410025, 0.0290639028, 0.0269923527, 0.0226209555, -0.0333226249, -0.0019300035, -0.0730684400, 0.0121592060, 0.0261811987, -0.0141139952, -0.0593546182, -0.0439078100, -0.0052063568, 0.0480253994, -0.0407674834, -0.0069535277, 0.0495644026, 0.0331053622, 0.0103373257, -0.0080086496, -0.0049817655, -0.0205369014, -0.0203477237, -0.0492521748, -0.0670780689, 0.0321933106, 0.0716322437, 0.0085690385, -0.0526451990, -0.0555674881, -0.0485974886, -0.0350888334, -0.0243599266, -0.0584922098, -0.0005835026, 0.0129298121, 0.0283421390, 0.0561062954, -0.0125534236, 0.0641563386, -0.0197531190, -0.0324394219, 0.0342000388, 0.0297503956, 0.0142297968, -0.0746783465, -0.0156577248, -0.0188650675, -0.0169050880, 0.0537827574, -0.0126816602, 0.0814005286, 0.0393818282, -0.0429711640, -0.0287739467, -0.0657142028, 0.0683004931, 0.0505127870, -0.0469886921, 0.0169423129, 0.0640157834, -0.0406126939, -0.0160879288, -0.0158409420, -0.0602218956, -0.0236019008, -0.0612460822, -0.0211710259, 0.0635903478, -0.0411901250, 0.0137729784, -0.0155587681, -0.0218313243, 0.0263640489, -0.0323538519, 0.0340455212, 0.0426773019, 0.0483042523, -0.0723154992, -0.0635519177, 0.0130787594, -0.0568015724, -0.0312813781, -0.0388316736, 0.0219773594, -0.0368244536, -0.0342495255, -0.0580048934, -0.0034541038, 0.0251282584, 0.0182039365, -0.0306382459, -0.0828254595, -0.0417471379, -0.0303993840, -0.0044633476, -0.0299074501, 0.1013336703, 0.0345432796, -0.0317485370, -0.0226206612, -0.0775926560, 0.0337714665, 0.0807371140, 0.0879586488, 0.0592848696, -0.0114717716, 0.0028117751, 0.0499870330, -0.0911502913, -0.0575776100, 0.0671215877, 0.0543341041, -0.0078276750, -0.0170008335, -0.0352531523, 0.0759451464, -0.0098827314, -0.0315154567, 0.0446758531, -0.0287914854, 0.0443296731, 0.0479834974, 0.0654462352, 0.0688000172, -0.0231751930, -0.0059987516, -0.0043180254, -0.0343306623, 0.0200552102, 0.0289701372, 0.0390468314, -0.0562874712, -0.0622491948, 0.0794651657, 0.0358024389, 0.0310275126, -0.0214279126, -0.0654928759, -0.0881964639, 0.0547624528, 0.0112911472, 0.0457051136, -0.0768494830, 0.0505835563, 0.0374654271, -0.0514700748, -0.0565845817, -0.0776109174, 0.0615986548, 0.0487917140, -0.0131165320, -0.0631256998, 0.0071213972, -0.0470615700, -0.0401406847, 0.0240704119, -0.0191132873, 0.0416362956, 0.0432631411, -0.0124791004, 0.0881201029, 0.0187857877, 0.0194180924, 0.0028895312, -0.0651445985, -0.0578965545, -0.0277958252, -0.0115260994, 0.0379726179, -0.0543673337, -0.0133600309, 0.0064592725, 0.0266882125, 0.0552116483, 0.0117400773, -0.0167077668, -0.0047207908, 0.0480176136, -0.0194661375, -0.0222579949, -0.0250577796, -0.0200679488, -0.0701927617, -0.0270743091, -0.0217096526, 0.0428183936, -0.0419771709, 0.0286979824, -0.0686721504, 0.0091843894, 0.0671302304, -0.0440777615, 0.0687077343, -0.0190780107, -0.0135954805, 0.0321365781, -0.0152679756, -0.0087313093, 0.0333301015, -0.0283048227, -0.0165582243, 0.0579772517, -0.0809651315, -0.0409788154, -0.0531181693, -0.0108437445, -0.0527976006, -0.0296899248, 0.0459324345, 0.0049403049, -0.0596180521, 0.0441004671, 0.0376673713, -0.0251875352, -0.0015598455, -0.0659886003, 0.0066390089, -0.0444321074, -0.0807468891, 0.0359893553, 0.0291039888, 0.0090804314, 0.0496224388, -0.0451899134, 0.0059123943, -0.0304581206, 0.0427461043, -0.0438188985, 0.0415280797, 0.0648982599, 0.0474339388, 0.0576437972, 0.0094368393, 0.0203430466, 0.0130617917, -0.0183941741, 0.0068967077, -0.0071054334, -0.0036745071, -0.0333643891, -0.0671760514, -0.0084355483, 0.0385472700, -0.0136072971, 0.0655929670, -0.0170433242, 0.0058199903, 0.0303119328, -0.0045099170, 0.0459309630, 0.0454338007, -0.0015251219, -0.0326126292, 0.0351069942, 0.0161009450, -0.0713658407, -0.0493628494, 0.0281301048, -0.0492361709, 0.0097788470, -0.0396767370, -0.0373514667, 0.0266624168, 0.0602443293, -0.0282293241, -0.0208873134, 0.0105521325, -0.0140010184, -0.0689860284, 0.0293743573, -0.0667462349, -0.0781045184, -0.0498234183, 0.0505231768, 0.0324710645, -0.0099705020, -0.0299028791, 0.0170075260, -0.0085942280, -0.0113048330, -0.0938531160, -0.0044035967, -0.0867609009, -0.0225570574, -0.0398855619, -0.0198008902, -0.0512592047, -0.0006094436, 0.0383353531, -0.0237090848, 0.0007851250, 0.0008566364, -0.0725291446, 0.0479649156, -0.0022193852, 0.0430696122, 0.0002126423, -0.0192158353, 0.0567933470, 0.0069943788, 0.0310648996, 0.0154532352, 0.0038423210, 0.0185799636, 0.0332376026, -0.0266735572, -0.0447824821, 0.0074236998, -0.0604908578, 0.0058170948, 0.0104306266, -0.0087134195, -0.0481949449, 0.0396617837, 0.0570149347, -0.0085664233, -0.0385719575, 0.0211033970, -0.0763273463, 0.0077229710, -0.0062942421, 0.0344562270, 0.1006390601, -0.0439703427, 0.0594492294, 0.0525029972, 0.0066176341, 0.0213964507, 0.0278985258, -0.0367575958, -0.0063869664, 0.0020809951, 0.0411403105, 0.0188695733, 0.0164841991, 0.0467735566, -0.0867244676, 0.0054650870, 0.0189271048, -0.0476300046, -0.0432035029, -0.0190924797, 0.0321527869, -0.0290591046, -0.0815296471, 0.0546492115, 0.0270407349, 0.0165695380, -0.0259809643, -0.0115985088, -0.0939920321, 0.0265704561, 0.0763189048, -0.0269562397, 0.0511271209, -0.0678920522, -0.0422703512, 0.0272822622, 0.0899794027, 0.0246895924, 0.0582893491, -0.0330464169, 0.0046546180, 0.0030719065, 0.0073280246, 0.0252952892, 0.0377107449, 0.0304512884, 0.0327523388, 0.0884809643, 0.0474076532, -0.0254347865, -0.0071057905, -0.0030647500, -0.0454441831, 0.0133923264, 0.0440868102, -0.0494000427, 0.0040853834, 0.0183781087, -0.0070594186, -0.0051727262, -0.0099012889, 0.0567523502, 0.0300781801, -0.0210556351, 0.0895972699, -0.0497287698, -0.0266648382, 0.0611977912, -0.0744297430, -0.0205144901, 0.0270637237, -0.0370113626, -0.0556736775, -0.0600592941, -0.0045483401, 0.0080253016, -0.0847970694, -0.0505362712, 0.0031756654, 0.0187597182, -0.0780365318, -0.0334935747, -0.0584444068, 0.0169337448, -0.0435340740, 0.0262048431, 0.0386771224, -0.0119102579, -0.0090316795, -0.0831512362, -0.0269429274, -0.0650894195, -0.0897899270, -0.0297233332, 0.0515454561, 0.0382497162, -0.0299608037, -0.0016085888, -0.0407344997, -0.0443118699, 0.0199379269, 0.0318193920, 0.0209358614, 0.0287570599, 0.0368610248, -0.0069794082, 0.0117940577, -0.0405814871, -0.0317271128, 0.0059428606, 0.0285755750, 0.0202398580, 0.0556420051, 0.0343097225, -0.0179832410, -0.0450515859, 0.0128910691, -0.0072418372, -0.0082796263, -0.0840929449, 0.0631399080, -0.0127662700, -0.0704214796, 0.0700003207, 0.0236491468, 0.0842919871, 0.0724676102, -0.0070372438, 0.0242246259, -0.0348061770, 0.0373414904, 0.0728396922, -0.0099337604, 0.0619599596, 0.0153807551, 0.0673884749, 0.0147645567, 0.0140740052, -0.0314716995, 0.0178113971, -0.0110148452, 0.0117675737, 0.0671097785, -0.0178088173, 0.0114188287, 0.0708253905, -0.0138766095, 0.0158164073, 0.0953067467, -0.0210226141, 0.0411899202, 0.0582622662, -0.0227874946, 0.0568616875, 0.0588086694, 0.0387647450, 0.0167099740, -0.0548040979, -0.0140462136, -0.0517887510, -0.0201146770, 0.0875198990, 0.0843278542, -0.0352990925, 0.0065860027, -0.0286992192, 0.0654360577, -0.0284901410, 0.0484620593, 0.0318305641, 0.0507924110, -0.0776727796, -0.0003785205, 0.0812708586, 0.0341326743, -0.0262393039, 0.0255810488, -0.0747140869, -0.0741548762, 0.0314224698, -0.0440609455, -0.0680290014, -0.0476740189, 0.0976886451, -0.0504158549, 0.0022750660, -0.0249580294, -0.0303788446, -0.0773820803, -0.0452916399, -0.0885934383, 0.0815290064, 0.0045484253, -0.0895119011, -0.0439892560, 0.0228117332, 0.0219785385, -0.0447204448, 0.0234215111, -0.0265062228, 0.0296088383, 0.0461229570, -0.0028293463, -0.0611308292, 0.0300039332, -0.0394641310, -0.0519516543, -0.0534630567, 0.0439026617, 0.0468974225, 0.0480223782, 0.0098550422, -0.0030819525, 0.0418202579, -0.0367551856, -0.0090214992, 0.0560445786, -0.0139866499, 0.0072676749, 0.0245360676, 0.0656136200, 0.0129725086, -0.0610785969, -0.0443631820, -0.0586536415, 0.0484976172, -0.0418504514, -0.0538130924, 0.0024294283, -0.0369678140, 0.0048077623, -0.0347404256, 0.0286071524, 0.0521379858, -0.0435136631, -0.0079601035, -0.0119387489, 0.0518209040, 0.0218968857, 0.0205737744, 0.0480358377, 0.0083028683, -0.0341724083, -0.0454141982, -0.0038816887, 0.0291451514, -0.0575794168, 0.0458465815, -0.0003987151, 0.0105489027, -0.0094631799, -0.0103767561, 0.0349273644, -0.0616559088, -0.0314309224, 0.0851751864, -0.0704762936, 0.0146972546, -0.0548930466, 0.0220247004, -0.0263902843, -0.0582564585, 0.0697751194, -0.0207942463, -0.0156588536, -0.0046594478, -0.0721121430, -0.0090657435, -0.0258214865, -0.0187598150, 0.0846857578, 0.0196078382, 0.0231400914, 0.0302856825, -0.0543586314, 0.0558594503, -0.0023260042, -0.0313243493, 0.0405721702, 0.0363998115, 0.0605849959, -0.0515704378, -0.0046596504, 0.0440829173, -0.0408889800, 0.0462421998, 0.0801478922, -0.0585388206, 0.0352936983, 0.1044394895, 0.0409371741, 0.0020695445, -0.0033747964, -0.0574329682, 0.0837759972, -0.0111486427, -0.0258755833, 0.0211121589, 0.0040433072, 0.0619939342, 0.0230957083, 0.0954947546, 0.0180298500, -0.0213684477, 0.0080218753, -0.0495186634, 0.0125715276, 0.0121931620, -0.0239815079, -0.0493698493, 0.0129252737, 0.0496730432, -0.0400729328, 0.0354373679, 0.0489132255, -0.0194553789, 0.0198599342, -0.0675725490, -0.0391516872, -0.0297307707, -0.0384227931, -0.0833104849, -0.0061802394, -0.0110254223, -0.0227856915, 0.0655913055, 0.0039816434, 0.0077944095, 0.0739596635, 0.0766669437, -0.0024814613, 0.0408440270, 0.0257078409, 0.0471223183, 0.0612253100, 0.0161850788, -0.0371567421, 0.0825841725, 0.0595703311, -0.0314847007, 0.0539425537, 0.0672321245, 0.0839819834, -0.0130161885, -0.0477108285, -0.0164819583, 0.0526916459, 0.0503572188, 0.0602134690, -0.0539352037, 0.0461109877, 0.0132466154, -0.0231412128, 0.0124191809, 0.0368689261, -0.0509818047, 0.0000395650, -0.0863379464, 0.0230358373, -0.0346672870, -0.0644061789, 0.0200771801, 0.0838891789, -0.0301770475, 0.0151196262, -0.0653259307, 0.0288959164, -0.0031362195, 0.0195861850, -0.0589929260, -0.0285153836, -0.0153906373, 0.0513239801, 0.0486349128, -0.0206953902, 0.0446898490, 0.0253141820, 0.0637374595, 0.0101856310, -0.0266631432, 0.0548263863, -0.0551348664, -0.0831124038, -0.0020817039, -0.0626576170, 0.0330577902, -0.0587731637, 0.0032549617, 0.0236790311, -0.0243964437, 0.0443044193, -0.0163045861, -0.0466318578, 0.0371378176, -0.0405609459, -0.0477790274, 0.0503671207, 0.0622079298, -0.0109463930, 0.0667617321, -0.0680286735, 0.0067241881, -0.0553529747, -0.0005312501, -0.0002403247, -0.0142505085, 0.0509912670, -0.0488766469, 0.0042248722, -0.0507568307, -0.0321657397, -0.0399005078, -0.0675716773, -0.0127725583, -0.0093159648, 0.0093384795, 0.0094325440, -0.0350081287, 0.0568438321, -0.0258660708, 0.0747426152, -0.0696362853, 0.0511192717, 0.0232770313, -0.0447245017, -0.0358998403, -0.0152888373, 0.0369784273, -0.0090905763, -0.0767404884, -0.0301482864, -0.0127591863, 0.0694910362, -0.0761206523, -0.0343674272, -0.0375898518, 0.0203539208, -0.0548949055, -0.0631262660, 0.0014039403, -0.0317917652, 0.0031854436, 0.0568017885, -0.0059401114, -0.0641826615, 0.0348334536, 0.0142087052, -0.0448437296, -0.0150858760, -0.0067040040, -0.0275972635, -0.0363676585, -0.0105497632, -0.0629491881, 0.0290642139, -0.0092974454, 0.0136198131, -0.0522697046, -0.0844876543, -0.0385451168, 0.0412533619, 0.0230873302, -0.0209389534, -0.0470376797, 0.0162088349, -0.0064051310, 0.0074043758, 0.0301016793, -0.0745139569, 0.0606470406, 0.0635719821, 0.0456193797, 0.0031306627, -0.0391879044, -0.0026003467, 0.0512761027, 0.0131253116, 0.0666604117, 0.0366035886, -0.0475401059, -0.0042174305, -0.0134232426, -0.0379944704, 0.0396406613, 0.0017013296, -0.0104160272, 0.0284326766, 0.0467180088, -0.0313985534, 0.0337949172, -0.0325675905, 0.0061331261, 0.0009161816, 0.0429524146, -0.0525748916, 0.0383937284, -0.0659074262, 0.0312034804, -0.0408135764, -0.0571222864, -0.0191451591, -0.0449351780, 0.0093943020, -0.0251012091, -0.0608980879, 0.0601054169, 0.0154709918, 0.0082304785, -0.0099862814, 0.0416316800, -0.0161682181, -0.0394579582, 0.0381052978, -0.0452087894, 0.0354210585, 0.0223733298, -0.0639060959, -0.0298119802, 0.0699697584, -0.0533856079, 0.0583023988, -0.0445661433, 0.0392613746, -0.0353967361, -0.0098594278, 0.0800095648, 0.0608709566, 0.0221758094, -0.0581447668, 0.0061365319, 0.0545054264, 0.0511435717, 0.0126600442, -0.0071456218, 0.0526283830, -0.0005085549, -0.0059519457, 0.0848949179, 0.0456559360, 0.0699635595, 0.0799732059, -0.0040532597, -0.0708643571, 0.0689652115, -0.0303944238, -0.0028000460, 0.0062181060, 0.0705592856, -0.0576302335, 0.0329655185, 0.0358130448, -0.0160283986, 0.0041164579, -0.0507188141, 0.0437428243, -0.0733801648, 0.0383227579, -0.0834779367, 0.0365423411, -0.0209754277, 0.0244733412, -0.0023005630, 0.0583709478, 0.0582927614, -0.0348550566, 0.0329298489, -0.0682150647, 0.0606307350, 0.0508201197, -0.0502330624, 0.0768840015, 0.0455926470, 0.0400117449, -0.0437862501, -0.0252570119, 0.0505876020, -0.0186560676, -0.0089405552, -0.0460746735, -0.0538262762, -0.0345418081, -0.0292731039, 0.0282487776, -0.0447020903, -0.0169296991, -0.0338845104, -0.0516661964, 0.0062873731, 0.0764643699, -0.0350219607, -0.0550341010, -0.0592053831, 0.0567132272, 0.0253406893, -0.0435004011, 0.0496157482, 0.0340209566, 0.0063349400, 0.0353241712, 0.0405893587, 0.0885626823, 0.0701897591, -0.0373205394, 0.0664691925, -0.0214443523, 0.0230525024, -0.0455522127, -0.0348324813, -0.0576191172, 0.0523224398, 0.0032843619, 0.0346078724, -0.0024610737, -0.0825834647, 0.0515633896, 0.0163643658, -0.0364888646, -0.0533768460, 0.0427901782, 0.0570681021, -0.0779257566, -0.0861385465, -0.0478239655, 0.0412891470, -0.0119615206, -0.0283463821, 0.0641906857, 0.0578934625, 0.0310245119, 0.0588196479, 0.0316742063, 0.0391398743, 0.0107097449, -0.0323704109, 0.0268696658, -0.0471824780, 0.0303950682, 0.0054976437, 0.0556960069, 0.0613430925, -0.0087212799, 0.0532933064, -0.0628137738, 0.0477132946, -0.0274942499, 0.0272145141, 0.0547499284, 0.0025881978, 0.0357871503, 0.0202535372, -0.0322023183, -0.0300167184, -0.0336139463, -0.0637285858, -0.0084303189, 0.0768866464, 0.0391354598, 0.0638791323, -0.0115682334, -0.0207444616, 0.0540846437, -0.0096447356, 0.0736249611, -0.0399129651, 0.0381447785, 0.0509640127, 0.0350378640, 0.0273546372, -0.0317601524, -0.0302304979, -0.0042581651, 0.0282752030, 0.0682518482, -0.0689886138, 0.0566510670, -0.0120638441, 0.0070571778, 0.0101735359, 0.0626969710, 0.0150466096, -0.0509469211, 0.0112681538, -0.0110077886, 0.0496699214, 0.0220185257, -0.0004373502, -0.0695705935, -0.0631456673, -0.0575700030, 0.0118532525, 0.0451381579, 0.0000167539, 0.0011639025, -0.0442489572, -0.0395750999, 0.0162623264, 0.0287999306, -0.0455747806, -0.0296700746, 0.0010491232, 0.0280778036, 0.0393703058, -0.0225767698, -0.0740326941, 0.0443549380, 0.0454461500, 0.0177210607, 0.0119288210, 0.0536230057, -0.0152526516, 0.0497738197, 0.0616662726, -0.0076447977, -0.0298205595, -0.0747762695, 0.0717665032, -0.0286805015, -0.0718117952, -0.0312642567, 0.0601756535, -0.0061556436, -0.0318114050, 0.0523484088, 0.0671572387, -0.0636752322, -0.0210077036, 0.0163704567, -0.0265782177, -0.0603593662, -0.0543279238, -0.0512712114, -0.0227680132, -0.0237454064, 0.0422625616, -0.0319574066, -0.0239079818, 0.0420030355, 0.0050977231, -0.0598514788, -0.0102236839, 0.0614222512, -0.0030249897, 0.0792864636, 0.0593876801, 0.0775465667, 0.0231838189, 0.0279732440, -0.0440851785, 0.0704621896, -0.0319444314, 0.0558218993, 0.0804444179, -0.0061024898, -0.0293527972, 0.0292778946, -0.0603079386, -0.0356753841, 0.0468931012, 0.0420050360, 0.0046652062, 0.0356468782, 0.0654111877, -0.0010506840, 0.0238182694, -0.0135809397, 0.0633058324, 0.0325160287, 0.0321066231, 0.0735367164, -0.0696685389, 0.0044806208, -0.0265734550, -0.0209981874, -0.0219588168, -0.0038715326, 0.0331956819, -0.0467132777, 0.0636516064, -0.0540718175, 0.0226970948, 0.0443692133, -0.0596262813, 0.0382497273, 0.0321625136, 0.0739300624, 0.0409340672, -0.0231504589, 0.0639891177, -0.0379478149, -0.0236693062, 0.0577260964, 0.0558857024, -0.0033578305, -0.0470144749, 0.0193659179, 0.0162041429, -0.0516201928, 0.0136031192, 0.0582855716, -0.0240130238, -0.0121176261, 0.0490425751, -0.0388977751, 0.0047942749, -0.0334737562, 0.0028064512, -0.0048414329, 0.0354079157, 0.0611254610, 0.0540830418, -0.0670546889, 0.0518964976, -0.0238821711, -0.0064940904, -0.0163507760, 0.0424412303, -0.0457582846, -0.0153250108, 0.0663670674, 0.0079063745, -0.0074351374, -0.0410008430, 0.0505698696, 0.0215097442, 0.0127153527, 0.0301727559, -0.0392789952, -0.0017443068, 0.0492152683, -0.0135962600, -0.0171391834, -0.0310160667, 0.0454765037, 0.0039755628, -0.0284581780, 0.0804033726, -0.0698568672, -0.0697484389, 0.0722503662, -0.0729045197, -0.0747960582, 0.0209775642, 0.0411600247, -0.0155936694, -0.0153830657, -0.0745929778, -0.0204983000, 0.0626123101, -0.0536372438, -0.0321582854, -0.0081181861, 0.0746915042, -0.0260265861, -0.0369630568, -0.0908129439, 0.0922226757, -0.0195912588, -0.0031657214, -0.0737624839, -0.0611540526, -0.0993578881, 0.0970933065, -0.0490059145, 0.0466953479, 0.0469660908, 0.0032584209, -0.0429808348, -0.0051645730, -0.0202326421, -0.0209338404, 0.0430839285, -0.0875000879, 0.0617766567, 0.0540701449, 0.0187752768, 0.0690738484, 0.0757436752, -0.0243271943, -0.0149240810, 0.0435147695, 0.0614465699, 0.0315154977, -0.0048315758, -0.0192683972, -0.0023820954, -0.0094331941, 0.0097667733, 0.0144407656, 0.0440193526, -0.0289051551, 0.0074755084, -0.0582121462, 0.0449692868, -0.0230139084, 0.0442388020, -0.0105910022, -0.0239734277, 0.0324123874, -0.0009060652, -0.0381483994, -0.0499535576, 0.0396590494, 0.0145902289, 0.0356826596, 0.0624573901, -0.0263531599, 0.0260900278, 0.0559664182, -0.0654753894, -0.0073780683, 0.0003664902, -0.0245074499, 0.0105919093, -0.0243586507, -0.0069244644, -0.0113668228, 0.0426555574, -0.0003429808, -0.0737338141, -0.0107883690, -0.0384328999, -0.0159718469, -0.0160887055, 0.0469152741, 0.0082244966, 0.0297296606, -0.0601828024, -0.0590658635, 0.0586647317, 0.0021130666, -0.0152914952, -0.0239972062, -0.0238289516, 0.0278796349, 0.0277097113, 0.0148280095, -0.0117443046, 0.0179688316, -0.0785208195, -0.0127271479, 0.0545522161, 0.0510985479, -0.0427020304, 0.0445200950, -0.0530810431, -0.0266399179, 0.0346002132, -0.0466636345, -0.0066007720, -0.0619765073, -0.0391026996, -0.0512754954, -0.0604202449, -0.0186638329, -0.0849330649, -0.0376471318, -0.0405100845, 0.0645117909, -0.0134142824, -0.0560846962, 0.0297004841, 0.0153292017, -0.0102859484, -0.0373515040, 0.0369234197, -0.0039289128, 0.0743261576, -0.0575359501, 0.0389357843, -0.0251852088, 0.0500134081, -0.0014854015, -0.0326635092, 0.0224492215, 0.0242549386, -0.0711789578, 0.0440951809, 0.0098595284, 0.0196280256, 0.0505275838, -0.0277848411, -0.0028403862, -0.0340430662, -0.0336902998, -0.0362121202, 0.0492176749, -0.0473781005, 0.0292865448, -0.0475549027, 0.0451689996, -0.0272622742, -0.0831268951, -0.0385243371, 0.0714003965, 0.0276030749, -0.0353099033, 0.0037770474, -0.0194067080, 0.0712475479, -0.0749789104, -0.0500307791, -0.0409554802, -0.0468748249, 0.0129261939, -0.0063206390, -0.0544745401, -0.0459625497, 0.0318783037, 0.0801690519, 0.0108037684, -0.0732932836, 0.0243937559, 0.0332640372, -0.0235852096, -0.0041513517, -0.0251033381, 0.0107002091, 0.0808579549, -0.0769268796, -0.0354518443, 0.0615281984, 0.0515107550, -0.0550046004, -0.0578330085, -0.0109230699, 0.0361818634, 0.0116694933, -0.0443659425, -0.0460051782, -0.0543598421, 0.0582385138, -0.0202965345, -0.0759853050, -0.0168300550, 0.0235981941, -0.0492388755, -0.0698210821, -0.0446784906, -0.0560675785, -0.0129879778, 0.0724807903, 0.0233882163, -0.0174706262, 0.0533240363, -0.0731096417, 0.0250976291, -0.0506325513, -0.0463721827, -0.0286946092, -0.0406667106, -0.0181519426, 0.0209474415, -0.0276307110, 0.0370909609, -0.0051934808, -0.0177969448, 0.0477102548, -0.0273180343, -0.0453428477, 0.0308110062, -0.0178609639, -0.0175436754, -0.0327373222, -0.0106322989, 0.0550603680, 0.0652473494, 0.0292033423, 0.0327573828, 0.0232734475, 0.0974755734, 0.0160005223, -0.0180452354, 0.0130608445, 0.0428813025, 0.0362738259, -0.0827148035, -0.0643151477, -0.0401042290, 0.0167573243, 0.0608377643, -0.0175241195, -0.0023433780, -0.0440049544, 0.0406537913, -0.0790772736, 0.0311753936, -0.0338627324, -0.0425674282, -0.0400783196, -0.0180944633, 0.0024162410, -0.0198395234, -0.0459279045, 0.0158738233, 0.0040149074, 0.0029325704, 0.0627768114, 0.0517084487, -0.0641801134, -0.0347093791, -0.0692349374, -0.0199594609, 0.0571619421, 0.0202146657, -0.0159220900, -0.0301611684, -0.0378476344, 0.0414264575, 0.0243341029, -0.0411857478, -0.0488486961, 0.0430194996, -0.0449763909, -0.0087284083, -0.0689976364, 0.0137348147, 0.0465761945, 0.0626701862, 0.0155969299, -0.0540176444, 0.0198086333, 0.0505085737, 0.0385164917, -0.0352574550, -0.0295877885, 0.0205989461, 0.0634237826, 0.0494589433, 0.0131077133, 0.0670888573, 0.0079701962, -0.0350387506, -0.0010020542, 0.0761391446, -0.0676162988, 0.0389574170, -0.0542700626, -0.0117338775, 0.0343023688, 0.0509097055, -0.0031881824, 0.0504436083, 0.0257821213, 0.0040966370, -0.0486493781, 0.0770804510, -0.0621491149, -0.0296685137, -0.0298325047, 0.0628281757, 0.0936024338, 0.0015692280, -0.0525184795, 0.0098949960, -0.0559597164, 0.0259011462, 0.0411152393, -0.0262161866, 0.0052443738, -0.0526220985, -0.0512115955, 0.0044120629, 0.0349918753, -0.0652588010, -0.0452043302, -0.0584678613, 0.0158497803, -0.0007303600, -0.0493128598, 0.0078382296, 0.0465230942, 0.0421979539, 0.0450099856, -0.0579128265, -0.0774362385, 0.0331946313, 0.0169642940, -0.0367842466, -0.0284131058, 0.0118240640, 0.0226163398, -0.0353027396, 0.0117835728, -0.0632978231, -0.0648288801, 0.0391429700, 0.0086147394, -0.0287479367, -0.0137648154, -0.0572092496, 0.0684758201, -0.0748012662, -0.0171999149, -0.0116112577, -0.0129058603, 0.0474047512, -0.0237214062, -0.0351252109, 0.0579478256, -0.0326012969, 0.0345453471, 0.0103262123, -0.0692957342, 0.0331195220, 0.0604540855, -0.0357961170, 0.0227536783, 0.0538016185, 0.0203803200, 0.0057843029, -0.0328432955, 0.0676315874, 0.0386709794, -0.0213679299, -0.0312909000, -0.0558316782, 0.0353449732, -0.0492958166, 0.0360254645, 0.0315417051, -0.0380602479, -0.0316806063, 0.0469446108, -0.0474892780, -0.0382173173, -0.0204409193, -0.0378433503, -0.0626146346, 0.0408624671, 0.0195628218, -0.0329279676, -0.0286910571, -0.0401038416, 0.0227100514, 0.0396033265, 0.0173938740, 0.0281781461, -0.0144922668, -0.0801464617, 0.0615114607, -0.0283525698, -0.0518392920, -0.0026023886, -0.0447518155, -0.0660452172, 0.0103425188, -0.0293004233, -0.0146188736, -0.0082116183, 0.0519330613, -0.0223104674, 0.0245337188, 0.0180857293, 0.0013585986, 0.0937619433, 0.0075341826, 0.0643727258, 0.0337160118, 0.0052310741, 0.0786352530, -0.0361282155, 0.0007548086, -0.0379021056, 0.0743673518, 0.0578716733, 0.0514308996, -0.0332618095, -0.0838922784, 0.0794246569, -0.0481983870, 0.0377977863, -0.0615978912, 0.0817723945, 0.0905061364, 0.0140940584, -0.0525578558, -0.0612256080, 0.0855683163, 0.0108722169, -0.0038830631, 0.0265521780, -0.0976491123, -0.0911760256, -0.0107924212, -0.0608452968, 0.0213680286, 0.0874290168, 0.0304055996, -0.0052399463, -0.0559438914, -0.0743532851, -0.0144918021, -0.0308724269, 0.0077493698, -0.0001913786, 0.0429925770, 0.0667695031, 0.0511009991, 0.0306783002, -0.0108768214, -0.0075501963, 0.0065859309, -0.0285554677, 0.0383098014, 0.0395895317, 0.0565500259, 0.0260330569, 0.0368538052, 0.0009225791, -0.0415124074, -0.0073839375, 0.0358160958, 0.0214537289, -0.0807586908, -0.0266915224, -0.0486694761, -0.0035902234, -0.0486271419, 0.0630404875, -0.0113001773, 0.0081016161, 0.0191682726, -0.0313220248, -0.0674400106, -0.0780808777, -0.0051466608, -0.0323861688, -0.0247082170, -0.0133917751, -0.0490408726, 0.0542369783, 0.0772829577, 0.0568424948, 0.0417738594, -0.0367924906, 0.0223844573, 0.0290881954, 0.0421629213, -0.0879912600, 0.0317216106, -0.0206189044, 0.0497478619, 0.0154639976, 0.0689491108, 0.0043580914, 0.0420538448, 0.0027027125, -0.0783185288, -0.0704063848, -0.0725539327, 0.0144377565, 0.0363749377, -0.0642330199, -0.0235431753, -0.0396396294, 0.0104517331, 0.0634530038, 0.0147045488, -0.0479044691, -0.0593530312, -0.0492577292, -0.0527858958, -0.0809465945, 0.0060023996, -0.0543385670, -0.0625174418, 0.0065434263, 0.0293872058, -0.0031189441, 0.0116303163, 0.0387451872, 0.0508141853, -0.0471350625, 0.0378685258, -0.0728935972, 0.0670195445, -0.0394181535, -0.0617619865, -0.0131074451, -0.0434239507, -0.0589188933, 0.0304356217, -0.0127845807, 0.0471931919, -0.0338678844, -0.0605222732, 0.0490282513, 0.0143161183, 0.0011739708, -0.0156190591, -0.0621341057, -0.0342484154, -0.0550488196, -0.0071621505, -0.0199981946, -0.0362304300, -0.0496503077, 0.0383211710, -0.0335541181, -0.0451137386, 0.0109691173, -0.0176969469, -0.0216016509, 0.0249938630, -0.0625637174, 0.0817512795, -0.0390542448, -0.0414276421, -0.0798966587, 0.0552370772, 0.0359785184, 0.0467556454, -0.0658360347, -0.0529666916, 0.0175632630, -0.0374097191, 0.0394276865, 0.0453937128, 0.0432505980, -0.0292324945, -0.0178632159, -0.0119035058, -0.0231485851, -0.0427910537, -0.0678619966, -0.0732148364, 0.0539005846, 0.0075973319, -0.0224070977, -0.0883744285, -0.0163759403, 0.0034272566, -0.0603718422, 0.0160592925, 0.0140323592, -0.0716470778, -0.0620523877, -0.0479603671, -0.0646254420, 0.0379679538, 0.0513695702, 0.0161877517, 0.0315650031, 0.0225429088, 0.0532564484, -0.0378098711, -0.0019850770, -0.0205254145, -0.0368015356, -0.0603744239, -0.0620317422, 0.0281141121, -0.0342436619, -0.0091750780, 0.0063719689, 0.0140223363, -0.0577787980, 0.0061682961, -0.0342505835, 0.0541074462, -0.0590308234, 0.0625381395, 0.0628694594, -0.0927101895, -0.0422565490, -0.0148277432, 0.0666900799, -0.0494632870, -0.0068032797, 0.0617841296, 0.0402787291, 0.0265633445, 0.0036162392, 0.0346817113, -0.0128445355, -0.0490995869, -0.0597774461, -0.0077268877, 0.0107392427, -0.0221359599, 0.0277721640, 0.0027432186, -0.0368965119, -0.0037663949, 0.0144786434, -0.0606826730, -0.0509426706, -0.0100024659, 0.0229428969, 0.0523316525, -0.0047991537, -0.0058126142, -0.0224790983, 0.0665728152, -0.0289801043, 0.0686388835, -0.0428628698, 0.0007951095, -0.0547926277, -0.0525041930, -0.0116786966, 0.0802698061, 0.0333374739, 0.0477071740, -0.0420414992, -0.0209744480, 0.0265096445, -0.0508321151, 0.0790098235, -0.0033559180, 0.0514802039, -0.0327167101, 0.0501412638, -0.0037204612, 0.0344241634, -0.0514663085, -0.0564238280, 0.0015060918, -0.0506891161, 0.0099434946, 0.0613129586, 0.0309461057, -0.0198898055, 0.0064545050, 0.0158688910, 0.0379542038, -0.0043185684, -0.0052041961, -0.0595200844, 0.0479917936, 0.0109676365, -0.0223841611, -0.0242065042, -0.0159124546, 0.0056228060, 0.0106948996, 0.0160309225, -0.0421348587, 0.0247891843, -0.0119183781, -0.0808065087, 0.0734004900, 0.0683376342, -0.0499841273, 0.0189570636, -0.0270560626, 0.0177795459, -0.0150396377, -0.0165233891, -0.0673414394, -0.0606657080, 0.0277074315, 0.0640349686, -0.0060326224, 0.0508382358, -0.0535082929, -0.0238111746, -0.0195446592, -0.0993582681, 0.0132937776, -0.0959607214, 0.0454810821, -0.0831586123, -0.0129193114, -0.0350403525, 0.0125516020, 0.0498649888, -0.0264563039, 0.0000111824, -0.0461187661, -0.0265043862, -0.0357918181, -0.0366945378, 0.0344781876, -0.0087986132, -0.0245959777, -0.0258525573, 0.0312991552, -0.0620638095, 0.0589052066, -0.0485673025, 0.0941570699, 0.0323152356, 0.0159056261, -0.0342062525, -0.0216528699, -0.0453054160, -0.0902959704, -0.0370727219, 0.0036012386, -0.0556966364, 0.0481132567, -0.0488600098, 0.0108267525, -0.0830915421, -0.0895165503, 0.0385035239, -0.0286723375, 0.0553309619, -0.0665860102, -0.0667378828, -0.0803341866, 0.0675415546, -0.0161662009, -0.0375130773, 0.0997838154, 0.0607750304, 0.0255922042, -0.0320136808, -0.0602710545, -0.0630939081, -0.0954344273, -0.0771919787, 0.0260542687, -0.0402740426, 0.0003118648, 0.0411815830, 0.0386472568, 0.0352541879, -0.0659288466, 0.0465791747, -0.0713404492, -0.0876951069, -0.0244258828, -0.0301300827, -0.0718047023, -0.0722328871, 0.0598331988, 0.0177554525, 0.0708599612, 0.0103795575, -0.0510404855, -0.0634104684, 0.0287556909, 0.0425304212, -0.0402040333, -0.0359657891, 0.0934902430, 0.0717943609, 0.0227198750, 0.0162324961, 0.0799233615, -0.0278339908, 0.0638889149, 0.0258957092, -0.0381039791, 0.0599068515, -0.0193722956, 0.0502204075, 0.0625665486, -0.0555544756, -0.0426613502, 0.0649918839, 0.0320336483, -0.0635821670, -0.0214414205, -0.0010805377, -0.1009585783, -0.0680960491, -0.0365708843, 0.0216876529, 0.0287879035, -0.0545977503, 0.0157889817, -0.0555365048, 0.0341656730, -0.0215643998, 0.0869287178, 0.0086887488, 0.0945156664, 0.0845865011, -0.0409241915, 0.0097870529, -0.1270191222, 0.0235642046, -0.0753464028, -0.1089046001, -0.0135969026, 0.0527370721, -0.0589655973, -0.0443078093, -0.0969113782, -0.0450221933, 0.0368115306, -0.0628929436, 0.0625252053, -0.0982541144, 0.0202030316, -0.1059349850, -0.0749112442, -0.1072371006, 0.0411802344, -0.0698027983, 0.0287317690, 0.0155503098, -0.0925533995, 0.0864961147, 0.0608684719, -0.0626579300, 0.0491043776, -0.0154686505, 0.0415303782, -0.0220316108, -0.0566040017, 0.0392138511, 0.0460377112, -0.0964602754, 0.1097641438, 0.0882136077, -0.0175225064, 0.0306505468, 0.0050578341, 0.0756306052, 0.0034354404, -0.0344202891, -0.0489630662, -0.0052789231, -0.0591213964, 0.0653242916, -0.0576634035, 0.0009415741, -0.0159594100, -0.0354233459, -0.0137194963, -0.0238036532, -0.0282038376, 0.0445217602, -0.1054775938, 0.0562320948, -0.1027843729, 0.0169114433, -0.0096074892, -0.0588322803, 0.0538206361, 0.0084414193, -0.0905351415, -0.1119176224, -0.0942854509, 0.0159944352, -0.1046450883, -0.0435616449, 0.0265696254, -0.0312776491, 0.0639008656, -0.0516661145, -0.1033419892, -0.0419998467, 0.0856723934, -0.0588852242, 0.0549596138, -0.0160963405, 0.0074024578, -0.1187049001, -0.0778706148, -0.0557834469, -0.0170345567, -0.0535141826, 0.0059809471, 0.0558691286, -0.0878021792, 0.0514918678, 0.0346778594, -0.0310669504, 0.0006796342, 0.0072317943, 0.1376302540, 0.0513122603, -0.1086005792, 0.0504143350, 0.0899465680, 0.0209490992, 0.0871343464, 0.0688220263, 0.0954211205, 0.0347104631, 0.0755554885, 0.0614104457, -0.0519292019, 0.0147259133, 0.0073451800, 0.0291222613, 0.0176396258, 0.0551834516, 0.0189545117, 0.0716629252, -0.0598131530, -0.0778255165, -0.0770936385, 0.0487836301, 0.0881511346, -0.0025880034, -0.1096031889, -0.0217596721, -0.0506131016, 0.0182384029, -0.0435524695, 0.0504911132, 0.0420584790, 0.0738803968, 0.0552302971, 0.0260093752, -0.0112077547, 0.0559906997, 0.0072396360, -0.0574474856, 0.0239798427, -0.0722144246, 0.0241709072, -0.0755654052, 0.0201212019, 0.0018163164, 0.0445099212, -0.0531981252, -0.0606802739, -0.0647499263, 0.0589423031, -0.0712527260, -0.0488652550, -0.0648227632, 0.0527647659, 0.0239006225, 0.0016172263, 0.0419594944, -0.0047095870, -0.0135763502, 0.0571140125, -0.0936826020, 0.0741900355, 0.0908890218, -0.0030347730, -0.0544624254, -0.0720189735, 0.0243573915, 0.0266687833, 0.0253186524, 0.0834728256, 0.0865054131, 0.0086050648, 0.0398341119, 0.0009199759, 0.0524086282, -0.0145961214, -0.0083179614, -0.0583297797, -0.0226434749, 0.0999601632, 0.0469032004, -0.0185826886, 0.0081721554, 0.0583295934, -0.0137736993, 0.0315059721, -0.0159147941, -0.0157628488, 0.0878863484, -0.0469320044, -0.0328986533, 0.0622011758, -0.0092400685, 0.0496938080, 0.0453041121, 0.0688889697, 0.0041656569, -0.0179715864, -0.0313340798, -0.0580389500, 0.0538201556, 0.0302131493, -0.0645913407, 0.0532198995, 0.0213783812, -0.0276710354, -0.0067854528, 0.0467125364, -0.0696159303, -0.0429201089, -0.0442074798, 0.0070765135, -0.0630602837, 0.0468171611, -0.0968303233, -0.0124346325, 0.0268048905, 0.0203776862, -0.0728074610, 0.0538042001, -0.0706371441, 0.0707703009, -0.0252945833, -0.0244681556, -0.0833090767, 0.0610987507, 0.0433433205, 0.0801995471, -0.0802260041, 0.0263180863, 0.0277703069, 0.0304479860, -0.0253527835, -0.0049050571, -0.0056777173, -0.0033773559, 0.0312542841, -0.0046108407, -0.0472249687, -0.0461959578, 0.0807528198, 0.0261324607, -0.0457483940, -0.0156108318, -0.0156533979, 0.0245137401, -0.0105839428, 0.0135524087, -0.0387165621, 0.0153274545, 0.0427525043, 0.0546213165, 0.0350776166, 0.0017445951, -0.0163728520, 0.0862101018, 0.0333904289, -0.0550309122, 0.0310081523, 0.0388391428, 0.0583721697, 0.0474324524, -0.0826598108, -0.0193883236, 0.0074044396, -0.0641729608, 0.0062377038, 0.0502189286, -0.0123799518, 0.0534604490, 0.0124687944, 0.0156817846, -0.0183520466, -0.0734160095, -0.0373018570, -0.0853891447, -0.0632727370, 0.0472629666, 0.0216546413, 0.0560699813, 0.0052974829, -0.0267855339, 0.0251979530, 0.0510725416, 0.0209459793, 0.0886068493, -0.0413131751, -0.0561785623, 0.0368704535, -0.0201854389, -0.0073483577, 0.0797867924, 0.0065657930, -0.0137250610, 0.0088009089, -0.0127950311, 0.0378009938, -0.0400186144, 0.0463688336, 0.0411725491, -0.0179943908, 0.0180562977, -0.0277256221, -0.0625728518, -0.0259252731, 0.0481347740, -0.0607979894, -0.0146825677, 0.0251167510, -0.0853763223, -0.0611523427, 0.0275959801, 0.0433198586, 0.0256692804, 0.0342360437, 0.0574315377, -0.0089158062, -0.0474331640, 0.0114543978, -0.0191800948, -0.0481701903, 0.0266098939, 0.0641517267, -0.0024692710, 0.0111053623, 0.0076742712, -0.0436237343, -0.0290529169, -0.0398748256, 0.0191773940, 0.0153460009, -0.0143280327, -0.0715735331, 0.0199979823, 0.0219411701, 0.0624416247, -0.0202343874, -0.1020097658, -0.0348176435, 0.0156207662, 0.0472033434, -0.0486575514, -0.0670918524, 0.0088889720, -0.0473618396, -0.0444811732, -0.0196165256, -0.0483076982, 0.0238685142, -0.0362069830, -0.0311702713, -0.1100556999, 0.0578923151, 0.0768603235, -0.0222779140, 0.0267559066, -0.0771492422, 0.0553756058, -0.0611519627, 0.0404350385, 0.0426732451, -0.0103024086, -0.0603600144, -0.0758569390, -0.0064885686, -0.0826542601, -0.0635458678, 0.0574845113, 0.0718246996, 0.0474215150, -0.0505025275, 0.0324052610, 0.0388875827, 0.0223703273, 0.0378399231, 0.0196748469, 0.0564881042, -0.0302914456, 0.0110268500, 0.0340095870, 0.0443213060, -0.0583460070, -0.0012709384, 0.0608974993, 0.0842951164, 0.0146505693, 0.0550855026, 0.0234650820, -0.0052313912, -0.0242949203, -0.0317872353, -0.0950724036, 0.0487741791, 0.0202566665, 0.0634935126, 0.0521195941, -0.0663929284, 0.0487642698, -0.0426143371, 0.0233910028, 0.0079539483, 0.0443321615, -0.0381792709, -0.0623633862, 0.0090260925, 0.0012568280, -0.0956377983, -0.0092088636, -0.0780620277, -0.0610451698, -0.0456783623, 0.0031372502, 0.0622359142, -0.0207241457, -0.0110910004, 0.0282217935, -0.0784698948, -0.0138953356, -0.0232078657, 0.0387674905, -0.0580632687, 0.0336725488, 0.0201706365, -0.0264241472, -0.0654245242, 0.0794760957, 0.0132883992, 0.0040174350, -0.0281680841, -0.0540950000, -0.0209019892, -0.0368358344, -0.0260490123, -0.0499547943, -0.0355449580, 0.0681515932, 0.0610605180, 0.0142908534, -0.0359414518, -0.0479616933, -0.0538716502, 0.0420491807, 0.0327077173, 0.0511700772, -0.0559817590, -0.0476863533, -0.0552470125, -0.0396320894, 0.0090096472, -0.0327216573, -0.0467327349, -0.0185221247, 0.0135361301, -0.0472193547, 0.0183293503, -0.0075211450, 0.0241806246, -0.0533814244, 0.0699652880, -0.0485538319, 0.0207716618, 0.0047390223, -0.0109594483, 0.0007925230, -0.0214682221, -0.0608512498, -0.0354567766, -0.0732178465, 0.0146240322, 0.0292317588, 0.0459825583, -0.0782406330, -0.0077717681, -0.0792033225, 0.0099394117, 0.0517544113, -0.0645232275, 0.0642550290, -0.0574171245, 0.0263168961, 0.0042700563, 0.0276988763, 0.0308603086, -0.0480646677, -0.0153985182, -0.0683300868, -0.0390892103, 0.0348669626, 0.0304751005, 0.0607522093, 0.0061526927, 0.0307673793, 0.0585926026, 0.0566641651, -0.0329074599, -0.0576793998, -0.0395465940, -0.0497442707, 0.0007613414, -0.0534812212, 0.0606849901, 0.0527584068, -0.0231843963, -0.0363014601, -0.0521329008, 0.0230107363, 0.0743717030, 0.0080683688, 0.0310579594, 0.0281494688, -0.0335667022, -0.0242801569, 0.0060514193, 0.0307858996, 0.0345026404, -0.0306986924, -0.0733789727, 0.0516790859, -0.0742344558, -0.0008911762, 0.0659460947, 0.0331747942, -0.0029671954, -0.0035086258, -0.0216915589, -0.0466208979, -0.0820139199, 0.0398178808, -0.0264520273, -0.0486172736, 0.0364305377, -0.0220278725, -0.0627746806, 0.0692037120, -0.0446338430, -0.0094566140, 0.0026422453, 0.0373339877, 0.0594051331, 0.0617500879, -0.0680174381, -0.0337354168, -0.0247754604, -0.0347533785, 0.0429807380, 0.0423318930, -0.0078889178, -0.0073118010, 0.0476585515, -0.0772571638, 0.0524520352, 0.0198986512, -0.0911455154, 0.0564498380, 0.0589254387, 0.0330691300, -0.0801989064, -0.0652493536, -0.0563116819, 0.0082306974, -0.0256231129, 0.0228331760, -0.0683306977, 0.0348662511, -0.0097447215, -0.0496947393, 0.0053847367, -0.0216322504, -0.0375491567, -0.0314102955, 0.0535419136, -0.0424696356, 0.0473284088, -0.0514399670, -0.0468928516, -0.0385777950, 0.0028335201, -0.0412949808, 0.0043888055, 0.0224305969, -0.0181797538, 0.0883600488, 0.0214923881, 0.0084584001, 0.0330299921, -0.0245104078, 0.0482370704, -0.0161183607, 0.0613143146, 0.0299681667, -0.0411323979, 0.0586339235, 0.0431226641, 0.0435713865, -0.0138979480, -0.0074498001, 0.0322382674, -0.0406597555, -0.0774718747, -0.0406635106, -0.0893571824, -0.0626563728, 0.0467022061, -0.0208551306, -0.0180834681, -0.0233410802, 0.0677000359, -0.0260038190, 0.0258659497, -0.0006267286, -0.0311111622, 0.0735643879, 0.0620886013, 0.0116279013, 0.0306885373, 0.0520219952, -0.0438581593, -0.0438015237, 0.0105634220, 0.0392515585, 0.0387613289, 0.0046799551, 0.0561383963, -0.0076498170, 0.0048166243, -0.0722979009, 0.0428180248, -0.0072761741, 0.0136343231, -0.0704817250, 0.0332942680, 0.0425786078, 0.0003897627, 0.0166394506, 0.0056912065, -0.0362056717, 0.0431527570, -0.0687091127, 0.0592316054, -0.0099077411, 0.0267954879, -0.0745915249, -0.0044783275, -0.0008194917, 0.0016204716, -0.0466640703, 0.0124790873, 0.0143446717, 0.0590674132, -0.0386541747, -0.0349946544, 0.0552840754, -0.0410221741, -0.0281180032, 0.0174910836, -0.0438563563, -0.0713568404, -0.0645734519, -0.0229493622, -0.0816344544, 0.0311514381, -0.0185045842, 0.0232697167, -0.0057956064, -0.0814259723, -0.0095215263, 0.0133075025, 0.0428540520, 0.0583880469, 0.0215514619, 0.0254219230, -0.0607715324, 0.0007015306, 0.0268251933, 0.0896589160, 0.0178904515, 0.0365134887, -0.0400692374, -0.0308939554, -0.0489300787, 0.0111309057, -0.0151394103, 0.0188039653, 0.0567506701, 0.0267819986, 0.0107438052, 0.0685293302, -0.0587459989, 0.0344564728, 0.0023845322, -0.0561110079, -0.0154820131, -0.0417496227, -0.0803675205, -0.0800449550, -0.0110590048, 0.0402110368, 0.0206495300, -0.0324248895, 0.0169906355, -0.0362902991, -0.0201370474, 0.0023703349, 0.0381338187, -0.0664816350, 0.0711286515, -0.0699636117, -0.0285192039, 0.0240232293, 0.0786117315, 0.0205141660, 0.0026892261, -0.0539310090, 0.0083306991, -0.0470995791, -0.0666716769, 0.0224795863, -0.0543865226, 0.0151588479, 0.0207059812, 0.0143930754, -0.0518970639, -0.0099207889, 0.0304452144, 0.0562032685, 0.0304799024, -0.0838095993, -0.0080263130, -0.0626402721, 0.0273880269, -0.0115948627, 0.0126348641, -0.0165948570, 0.0090825483, -0.0148074823, 0.0056939553, 0.0339487568, 0.0045982404, -0.0094237244, 0.0344046019, 0.0000232303, -0.0420950726, -0.0098863235, 0.0751163065, -0.0863549039, -0.0053209746, 0.0618394613, -0.0191963948, 0.0187479164, -0.0139899962, 0.0333529748, 0.0206963271, -0.0650044307, -0.0056046797, 0.0546538308, 0.0585877225, 0.0503959954, -0.0584189743, 0.0076621277, -0.0755111873, 0.0113140550, -0.0611047931, 0.0295452494, 0.0006749968, 0.0406343341, -0.0488615595, -0.0329587162, 0.0396152958, 0.0637187138, 0.0068487711, 0.0545907244, -0.0004940121, 0.0044700759, 0.0289382041, -0.0245694984, -0.0008304396, -0.0493348986, -0.0160777569, -0.0343646333, -0.0507862717, 0.0019854843, -0.0692702755, -0.0159987397, -0.0232757591, 0.0193112567, -0.0358038805, -0.0137892934, -0.0202814657, -0.0579580851, 0.0527535044, 0.0527673662, 0.0160717517, -0.0166934691, -0.0472893268, -0.0104348678, -0.0017533177, -0.0253679417, -0.0612669364, -0.0409789048, 0.0371205360, 0.0482803509, -0.0424130335, -0.0047848094, 0.0629812330, -0.0239947978, 0.0417606756, -0.0432324260, 0.0403842442, -0.0302396789, 0.0767928585, 0.0497589447, 0.0053761811, -0.0553518496, 0.0104706679, 0.0609698184, 0.0540690385, 0.0905294865, -0.0541888736, -0.0381657816, 0.0754477531, -0.0487179309, 0.0133488998, -0.0611506850, 0.0366625451, -0.0046874457, 0.0311505497, 0.0798961297, -0.0143153677, -0.0176987052, -0.0691754743, 0.0808108822, -0.0369510539, -0.0050522750, 0.0233249944, 0.0010453085, -0.0417401306, -0.0226286147, 0.0120130917, 0.0037718422, 0.0279752389, -0.0258420538, -0.0092769274, -0.0419042632, -0.0613370873, 0.0378010273, -0.0302711762, -0.0026204761, 0.0558382459, 0.0058712563, -0.0722777024, -0.0434821621, -0.0134878913, 0.0208025910, -0.0373406932, -0.0335263051, 0.0385706052, -0.0320756249, -0.0539825894, 0.0193537176, -0.0653891116, -0.0295394529, 0.0285456367, -0.0152314892, -0.0488114059, 0.0012437851, -0.0083718440, -0.0451956280, 0.0321032405, -0.0345808715, -0.0665280446, -0.0365458690, 0.0749954805, 0.0229774322, -0.0536858030, -0.0598877147, -0.0363760181, -0.0437231585, -0.0323466100, 0.0306719206, 0.0395525508, -0.0385433808, -0.0274559576, -0.0393969379, -0.0380710550, 0.0539739318, 0.0366158038, -0.0420958027, 0.0405132994, -0.0142860878, 0.0301940385, -0.0476521030, 0.0666764304, 0.0236701090, -0.0537506938, -0.0088510886, 0.0218269341, -0.0397883393, 0.0532145537, 0.0118107274, -0.0442448445, -0.0547831580, -0.0667101294, 0.0633486584, 0.0256324764, 0.0016206148, -0.0500036776, 0.0714114904, -0.0735064223, -0.0393947959, -0.0543020628, -0.0363504365, 0.0260021146, -0.0117173921, 0.0653326213, 0.0743648261, 0.0727724731, -0.0101082977, 0.0478120260, -0.0314994119, -0.0083407965, -0.0049834629, 0.0374800935, 0.0662624389, -0.0430025086, -0.0482331589, -0.0335510783, -0.0453817323, 0.0175760314, -0.0033951190, -0.0364533812, -0.0400157161, -0.0163029786, 0.0499353111, 0.0525007136, -0.0430371650, -0.0576854721, -0.0215409156, -0.0733339190, 0.0776972324, 0.0403231084, -0.0402639396, 0.0684720725, 0.0561854020, 0.0145169776, -0.0464816280, 0.0227410216, 0.0625812337, -0.0311688725, 0.0364308022, 0.0529175662, -0.0514690094, -0.0304918960, -0.0096120797, -0.0952736661, -0.0464603342, 0.0099926339, 0.0710298717, -0.0380744413, -0.0083383452, -0.0646059662, -0.0316668339, 0.0054525924, 0.0660097897, 0.0251371935, -0.0467772745, -0.0365286991, 0.0457426161, -0.0095086265, 0.0429780334, 0.0482630916, -0.0072810892, -0.0683225989, -0.0589693449, 0.0087961825, 0.0055336338, -0.0068503423, -0.0220755190, 0.0285877828, -0.0063392133, -0.0833632872, 0.0665603429, -0.0521766469, -0.0242554955, -0.0322801396, -0.0027733657, 0.0553701855, -0.0554961897, -0.0398193523, 0.0142028686, -0.0675211847, -0.0577931404, -0.0931965932, 0.0363255553, 0.0507140420, -0.0244339034, 0.0283845942, -0.0557096377, 0.0056859981, 0.0354138128, 0.0372108445, 0.0554105267, 0.0086565921, 0.0266993325, -0.0320985653, -0.0764625072, -0.0802933574, 0.0276152864, -0.0219308361, 0.0343277641, -0.0171695128, -0.0408271253, -0.0140696559, -0.0539842509, -0.0436305515, -0.0004609429, 0.0392810404, 0.0105302408, 0.0189266335, 0.0607993118, -0.0656013563, -0.0796568617, 0.0045011984, 0.0351794586, 0.0285820905, 0.0961490870, 0.0370323174, 0.0412147231, 0.0066718641, 0.0554387979, 0.0379071683, -0.0669071004, -0.0252629332, -0.0047465744, -0.0194359012, 0.0162359476, 0.0483409464, -0.0458716191, 0.0523297265, -0.0774776861, 0.0783879980, 0.0850775093, -0.0279464144, 0.0642680973, -0.0599354692, -0.0198714323, 0.0387230851, -0.0741651505, -0.0209649708, -0.0716538355, -0.0060290429, 0.0492458530, -0.0404661223, 0.0609124079, -0.0093274256, 0.0577917285, -0.0661295801, -0.0423780605, 0.0289470311, -0.0189083405, 0.0430536456, 0.0200240090, 0.0202974118, -0.0044526849, -0.0486883819, 0.0562952682, -0.0797659755, 0.0663146004, -0.0339632183, 0.0319901370, 0.0253534876, 0.0551166609, -0.0305178724, -0.0646015331, -0.0426583849, -0.0673611537, 0.0060177715, 0.0588472933, -0.0319430642, 0.0228943639, -0.0236782748, 0.0394340865, -0.0007637781, 0.0302248765, 0.0440872386, -0.0898248181, -0.0287131499, -0.0289746951, 0.0160997957, 0.0635834634, -0.0654485077, -0.0081234276, 0.0620790310, -0.0836485326, -0.0496856458, -0.0283521637, -0.0250905827, 0.0430970713, -0.0573210344, 0.0650329664, 0.0162326191, -0.0455891714, -0.0447600894, -0.0413330123, -0.0431200229, 0.0125366403, 0.0526202768, -0.0047939150, -0.0211695675, 0.0335840248, 0.0188755505, 0.0775064602, -0.0451703258, -0.0038161778, -0.0243575331, 0.0199840255, 0.0304139815, -0.0110055078, -0.0347349569, 0.0516290590, 0.0140664373, 0.0624396652, -0.0330721922, -0.0391548835, -0.0374115333, -0.0415466279, -0.0340730585, -0.0220418051, 0.0586657673, -0.0442115664, 0.0118620414, -0.0630319491, -0.0456009284, 0.0182372909, -0.0565009899, -0.0763976648, 0.0293792859, -0.0102021685, 0.0286468863, -0.0033405086, -0.0312920175, 0.0483938567, -0.0431763679, 0.0011475484, 0.0061978772, -0.0422651134, 0.0601739958, -0.0648290664, 0.0578312799, 0.0362756550, -0.0461393595, -0.0370442681, -0.0396640077, -0.0258434042, -0.0689809695, -0.0249593984, 0.0030682664, 0.0103814546, -0.0210570302, -0.0342502147, 0.0472898632, 0.0095603541, -0.0206835177, -0.0108807972, -0.0301040374, -0.0652602762, 0.0438563004, -0.0325186029, -0.0141937016, 0.0627375618, -0.0906010270, 0.0357134454, 0.0454019867, 0.0253963042, -0.0342916809, 0.0114713917, -0.0364895612, -0.0083439825, 0.0066355891, -0.0333444290, -0.0592341200, -0.0697946697, -0.0415881947, -0.0160680376, 0.0265220925, -0.0211190358, 0.0452627800, -0.0508029684, 0.0160229634, -0.0684273839, 0.0176461507, 0.0371342823, -0.0263788458, -0.0272814538, 0.0480034538, -0.0314458981, 0.0339687504, -0.0046692211, -0.0317610502, -0.0058003576, -0.0458582863, 0.0923223943, -0.0142149748, -0.0746653378, -0.0160415526, -0.0529944338, -0.0501969084, 0.0166002475, -0.0058043296, 0.0835872740, -0.0521440096, -0.0148698436, 0.0504289456, -0.0277553778, -0.0306341443, 0.0759461448, 0.0366059951, -0.0374059007, -0.0712281689, 0.0256044623, 0.0290273987, 0.0323000401, -0.0394205749, 0.0585315898, 0.0499829426, 0.0495347567, -0.0442968346, -0.0207846221, 0.0574914701, 0.0256036688, -0.0647903830, 0.0008595039, 0.0764613524, 0.0491474681, 0.0384186767, -0.0237731598, -0.0099672638, 0.0506710969, 0.0404150784, -0.0051166923, 0.0222966727, -0.0016866495, -0.0537281521, 0.0210363474, 0.0275491886, -0.0359678902, -0.0001126115, -0.0465869829, -0.0263043158, 0.0090268850, -0.0428092703, -0.0109725809, -0.0334791578, -0.0198749285, -0.0357800275, -0.0081337569, -0.0271208771, 0.0167750157, 0.0236230083, -0.0069139525, -0.0757265612, -0.0128666796, 0.0500052348, -0.0273287874, 0.0275207795, -0.0010518184, 0.0104254438, 0.0037323697, -0.0734602734, -0.0515168570, -0.0250729807, -0.0440846868, 0.0545088015, 0.0324050300, -0.0587833747, 0.0100350818, -0.1015638486, -0.0192430317, 0.0244151335, 0.0282493085, -0.0403979868, -0.0011752185, -0.0101776384, 0.0315093994, 0.0163419973, -0.0536701195, 0.0570029207, 0.0868558064, -0.0399678908, 0.0034806498, 0.0035536620, 0.0416220874, 0.0094830124, 0.0640000701, -0.0572008006, 0.0061806468, 0.0484165102, -0.0468503386, 0.0540574007, 0.0597918592, -0.0145152360, 0.0685943887, -0.0560824461, 0.0730198398, -0.0247013438, -0.0057767136, 0.0433249734, -0.0179151744, -0.0677626356, -0.0260307714, 0.0943294242, -0.0476804078, -0.0492153130, 0.0755345598, -0.0676561296, -0.0026861602, -0.0566782877, 0.0498651452, 0.0389971361, 0.0035499602, 0.0371681713, 0.0926840156, -0.0422525033, -0.0114485519, -0.0620302707, -0.0198695455, -0.0117280046, -0.0597773865, -0.0661669523, 0.0170212593, -0.0374712572, 0.0225890521, -0.0596256815, -0.0145703871, -0.0646695271, -0.0416748561, -0.0191498306, 0.0441615246, 0.0017503954, -0.0177624114, -0.0583702698, -0.0366473980, 0.0828267410, 0.0424697809, -0.0088640815, -0.0787206367, -0.0576506481, -0.0206008647, 0.0155814234, -0.0057010152, -0.0567262247, 0.0131157171, 0.0442342907, 0.0003835282, -0.0540094823, -0.0545786843, 0.0336605459, -0.0073147900, 0.0152432509, -0.0523537323, 0.0182044450, 0.0411010869, -0.0474726446, 0.0160779376, -0.0162522104, 0.0131693166, -0.0083489101, -0.0398636945, 0.0234509259, 0.0337156504, 0.0104098050, 0.0000878818, 0.0623988360, 0.0311115962, 0.0003053798, -0.0203997418, 0.0110072028, -0.0680522546, -0.0669239685, 0.0494943410, 0.0031183495, -0.0714971945, 0.0111161219, -0.0522275455, -0.0634525269, -0.0052581839, -0.0711853430, -0.0285134614, -0.0033479161, -0.0151744839, 0.0694884062, 0.0192597508, 0.0523651578, -0.0143604511, -0.0497129373, 0.0683794692, 0.0120715545, 0.0579698905, 0.0800048783, -0.0716794431, -0.0120233530, -0.0184904356, 0.0507230088, 0.0194900259, 0.0129732490, 0.0470729731, 0.0587315857, -0.0376040936, 0.0298286267, 0.0199830048, 0.0508291572, -0.0248755272, -0.0597931370, 0.0262141023, -0.0783773065, -0.0700454414, 0.0418298729, 0.0014628177, 0.0733670890, -0.0293012802, 0.0077520460, 0.0197786018, -0.0295721870, 0.0556043610, 0.0145770917, -0.0045812903, -0.0009262228, -0.0111002801, 0.0486636907, -0.0617615432, -0.0510160252, 0.0479940809, 0.0662581846, -0.0276405383, 0.0614834577, 0.0470194332, 0.0107495571, -0.0397074856, 0.0520831272, -0.0315096714, -0.0556674637, -0.0168563686, 0.0138458116, 0.0585071221, -0.0616683438, 0.0284646619, -0.0212354884, 0.0206829514, -0.0721784085, 0.0368634760, -0.0664511099, 0.0376684703, 0.0567716025, -0.0432310589, -0.0300638881, -0.0648542047, -0.0632444546, 0.0561631918, 0.0570171475, -0.0207391940, -0.0279141627, 0.0251143910, -0.0123098744, 0.0219095722, -0.0414404236, 0.0632359684, -0.0118878903, 0.0092481067, 0.0015069394, -0.0612685345, 0.0183484033, 0.0290281698, 0.0482915007, -0.0414157771, -0.0360967144, -0.0101426383, 0.0148209352, 0.0379218645, -0.0358360671, 0.0400218591, 0.0530886687, -0.0650504231, 0.0576197356, -0.0204649866, -0.0173913036, 0.0755950063, 0.0587097071, 0.0055015301, 0.0797679722, 0.0407565795, -0.0763993189, -0.0370308980, -0.0380523540, -0.0059075286, 0.0301713366, 0.0471812971, -0.0589817949, 0.0167514943, 0.0056149065, -0.0304982886, -0.0402205586, 0.0616827384, -0.0058483523, -0.0486857370, 0.0434904769, -0.0739072561, 0.0329819880, 0.0435026847, -0.0240099598, -0.0378564708, 0.0568254367, -0.0004580558, 0.0035552541, 0.0375566073, -0.0521758236, -0.0549024157, 0.0514021479, 0.0705209672, -0.0232931841, 0.0286752153, -0.0288548581, 0.0593001395, -0.0184745379, 0.0710240453, -0.0821223632, 0.0335894823, 0.0219536312, -0.0856963024, 0.0028362605, 0.0146566015, -0.0379454158, -0.0407291874, -0.0776224807, -0.0683205351, 0.0235969517, -0.0458122119, -0.0317343958, 0.0332259014, -0.0077976584, 0.0744229034, 0.0383284651, -0.0511426218, 0.0296761189, 0.0005276895, -0.0660432130, -0.0089348806, 0.0581095032, -0.0426963009, -0.0521727167, -0.0390584841, 0.0236899983, -0.0624427013, 0.0185770039, 0.0280900039, -0.0143868094, -0.0242867805, -0.0520908572, 0.0306321066, 0.0304833371, -0.0385123640, 0.0515205674, -0.0508314148, -0.0527644120, -0.0095896320, -0.0209348556, 0.0475606322, -0.0399825647, 0.0695765838, -0.0706866682, -0.0463194959, -0.0321083292, -0.0071607898, -0.0387417227, -0.0279407762, 0.0042591887, -0.0596377589, -0.0060859537, 0.0585993491, -0.0656015798, -0.0008583271, 0.0392835438, 0.0110513102, -0.0127499141, 0.0387565829, -0.0603805594, 0.0422131680, 0.0132242460, 0.0426597781, 0.0584554933, 0.0588818491, -0.0029915858, -0.0005979368, -0.0307917576, 0.0532940105, 0.0844153538, 0.0145542230, 0.0273929629, -0.0134110209, 0.0328940526, 0.0295138974, -0.0671659261, -0.0115443580, -0.0465744808, 0.0418717898, 0.0455821119, -0.0407050997, 0.0358106941, 0.0544970892, 0.0380210690, 0.0438616797, 0.0251202900, 0.0537680089, 0.0355825461, -0.0397772156, 0.0636384189, 0.0394745730, 0.0694206059, 0.0447911024, -0.0091689508, -0.0115760174, -0.0718925893, -0.0608789623, -0.0186528694, -0.0517753512, 0.0253660064, -0.0335984081, -0.0148995500, -0.0025910651, 0.0047486685, 0.0507224724, 0.0312166661, 0.0173155125, -0.0095076943, 0.0461464077, 0.0327425525, 0.0715888515, -0.0547694489, -0.0777721182, -0.0135905575, -0.0371426977, 0.0391407646, 0.0518753789, -0.0646981224, 0.0657652766, 0.0105604818, 0.0050780354, -0.0041169119, -0.0614122674, -0.0225547682, 0.0683604553, 0.0303979050, 0.0731073245, -0.0296339132, 0.0242453683, 0.0240801387, 0.0309616476, 0.0167141724, -0.0102158217, -0.0431234315, -0.0249636397, -0.0523892008, 0.0103352237, -0.0758614242, 0.0587020628, 0.0233460814, -0.0268132202, 0.0538473278, 0.0373693928, -0.0271689277, -0.0055335099, -0.0019476097, -0.0193596147, 0.0171308946, 0.0254181940, 0.0549938567, -0.0284812860, -0.0413708650, -0.0198129807, -0.0012380759, -0.0667398125, -0.0562085472, -0.0241503567, 0.0055167149, -0.0277538635, -0.0011580836, -0.0131137902, 0.0520154461, 0.0287891589, 0.0040961872, -0.0310274828, 0.0657296851, 0.0405336842, 0.0152083104, 0.0042971196, -0.0565196238, -0.0292704999, 0.0153862648, -0.0685236454, 0.0047410815, 0.0646309480, 0.0348824263, 0.0316116214, -0.0156911425, -0.0386828594, 0.0684493333, 0.0433861353, 0.0646946356, -0.0605979897, -0.0105832331, -0.0696376190, 0.0197545961, 0.0214395970, 0.0052021137, -0.0156104937, 0.0075093843, -0.0673068613, 0.0105345426, -0.0253049675, -0.0402874798, 0.0074784849, -0.0001120740, -0.0027519676, -0.0217720997, 0.0314634778, -0.0055407463, 0.0648611188, -0.0511885621, -0.0208335090, -0.0219809506, 0.0743048564, -0.0495165810, -0.0654840842, -0.0088290516, -0.0378931724, -0.0377562344, -0.0588584691, 0.0391589366, -0.0368545465, -0.0097973663, -0.0144231832, 0.0413031168, -0.0480043590, 0.0476887412, -0.0044174269, -0.0523223467, -0.0079684099, -0.0809256136, -0.0041533103, 0.0309949368, 0.0386752859, 0.0340480395, -0.0749368221, -0.0651847050, 0.0574634671, 0.0541274957, 0.0407930799, -0.0092021395, -0.0603235066, 0.0216785949, -0.0644981638, -0.0862522125, -0.0416220464, -0.0119691929, -0.0262050088, -0.0338982642, 0.0111971749, -0.0408096351, 0.0102805644, 0.0501041040, 0.0404606462, 0.0230257902, -0.0322823226, 0.0513617992, 0.0610956289, -0.0594972372, 0.0226149186, 0.0051480560, -0.0064573069, -0.0206240043, -0.0329598375, 0.0010259388, 0.0125228688, 0.0492890030, 0.0384070426, 0.0581331961, -0.0213766806, 0.0392378643, 0.0024184850, -0.0620432086, 0.0242362097, -0.0473077185, -0.0257852245, -0.0214379970, 0.0012462360, -0.0031204480, 0.0222571250, 0.0547982901, -0.0573066212, 0.0604266897, 0.0186885539, -0.0016509594, 0.0402153172, -0.0186439361, -0.0504333489, 0.0603426248, 0.0128514385, -0.0153125254, -0.0363815129, 0.0211593490, -0.0262559224, 0.0111388201, 0.0205928870, -0.0231173187, 0.0389605276, -0.0045172521, -0.0513978638, 0.0272744112, 0.0339382961, 0.0633375049, -0.0339555554, 0.0088339383, -0.0410339162, 0.0514870398, 0.0616390780, -0.0050267987, 0.0268321075, 0.0398246236, 0.0659381822, -0.0354190841, 0.0082214205, 0.0159555562, 0.0385299139, -0.0190038756, -0.0748661757, 0.0765416473, -0.0387363061, -0.0640335307, 0.0272401348, 0.0382825471, 0.0090129264, -0.0345890820, -0.0600859188, -0.0049796104, -0.0556185953, 0.1005904675, 0.0556734428, -0.0607019179, 0.0240944643, -0.0053280415, 0.0119823692, 0.0354127213, -0.0101782959, -0.0096268654, -0.0031512957, 0.0605186746, 0.0701658204, 0.0133624198, -0.0374424271, -0.0414428376, 0.0786411837, 0.0206882358, 0.0283928625, -0.0264034010, -0.0825076625, -0.0378544033, -0.0173493940, -0.0819644332, -0.0256689917, -0.0087315328, -0.0774881840, -0.0093488311, -0.0192889068, -0.0316192359, -0.0035233987, 0.0188896824, -0.0783791840, -0.0868383572, 0.0006415787, -0.0307858214, -0.0736131892, 0.0325971618, -0.0217158422, 0.0496034734, -0.0407537557, -0.0518427975, -0.0385164805, -0.0020520459, -0.0102752540, -0.0700826123, -0.0363626406, 0.0336778723, 0.0320537537, -0.0187907927, -0.0556078181, -0.0047618803, -0.0186144169, 0.0144371167, -0.0530910380, 0.0752030984, 0.0396646857, 0.0033644764, -0.0044227317, 0.0397236384, 0.0683159083, -0.0191064328, -0.0238436218, -0.0560014844, -0.0046106433, -0.0232941154, -0.0229728557, -0.0025046756, -0.0750290379, -0.0137833273, 0.0575129278, -0.0605923086, 0.0967446268, 0.0579707809, 0.0735058784, 0.0094657391, -0.0200624932, 0.0836237967, 0.0072617154, -0.0382989198, 0.0076827249, -0.0469638295, -0.0706142634, 0.0583055466, -0.0031414372, -0.0065791178, 0.0227736589, 0.0275154747, -0.0266068000, 0.0065948558, 0.0373842157, 0.0102159511, -0.0186720807, -0.0083343154, 0.0625792146, -0.0633683801, -0.0121028377, -0.0371200591, 0.0366855673, 0.0744308308, 0.0442182384, -0.0192030407, 0.0386561230, 0.0434670933, -0.0263780672, 0.0680314228, 0.0549676977, 0.0481847152, -0.0272554606, -0.0959721431, 0.0151768979, 0.0221831724, -0.0098089734, 0.0423690528, 0.0390950963, -0.0050150813, 0.0041826265, -0.0103552081, -0.0577768646, 0.0799620226, 0.0047357981, 0.0548427179, 0.0046110931, -0.0001168421, -0.0218208320, 0.0525887161, -0.0642532036, 0.0128736971, 0.0294444319, 0.0118956547, -0.0211381894, -0.0080960914, -0.0062167770, 0.0155825391, -0.0542956926, 0.0336667784, 0.0558207780, 0.0772463977, 0.0466386825, -0.0376703441, -0.0098589705, -0.0199213028, -0.0232918598, 0.0797100365, 0.0590972342, -0.0068570338, 0.0185164791, -0.0287039280, -0.0388073064, 0.0092844199, -0.0222427752, -0.0367863625, 0.0135672856, -0.0281658825, -0.0172667466, -0.0031197909, 0.0548961051, 0.0387239493, 0.0724401549, 0.0466520153, 0.0230981000, 0.0372445993, 0.0466947258, -0.0200642925, -0.0811608359, -0.0867418200, 0.0348802544, 0.0485780761, 0.0299471412, 0.0088308128, 0.0884008035, 0.0137399677, 0.0774499103, 0.0288248770, -0.0596198477, 0.0508766882, 0.0056865835, 0.0418916382, -0.0388532430, 0.0478141457, -0.0357387513, 0.0031928811, -0.0480831042, 0.0381277502, -0.0460035279, 0.0576803870, -0.0038734304, -0.0119956871, 0.0817319527, -0.0563508868, -0.0109258797, -0.0733475238, -0.0064912573, -0.0474557839, -0.0613172837, -0.0225873850, -0.0678322390, 0.0262885299, 0.0618771650, 0.0002282000, 0.0139215887, 0.0107585499, -0.0480908342, 0.0038206202, 0.0088095665, -0.0260341652, -0.0068489658, -0.0691439956, 0.0168467760, 0.0026958641, 0.0068362947, -0.0137692224, 0.0405122302, -0.0015065039, -0.0378484763, 0.0423296615, 0.0708852336, 0.0178847089, -0.0142386248, -0.0810539424, -0.0546577200, 0.0171885714, -0.0154420780, 0.0542303026, 0.0454739034, -0.0038939377, 0.0261552166, -0.0008410266, -0.0457838029, -0.0376266092, 0.0726332664, -0.0638709143, -0.0186427590, -0.0398811959, -0.0249695014, -0.0604367107, 0.0652286559, -0.0246249195, 0.0166862383, -0.0468618982, -0.0574569739, -0.0362901986, 0.0081576286, -0.0053459634, 0.0280823242, -0.0161558613, -0.0063963742, -0.0151442112, -0.0191840343, -0.0540205613, -0.0389915295, 0.0515164733, -0.0380765572, -0.0371694006, -0.0303491708, 0.0417884700, 0.0526610538, -0.0158748645, -0.0632266477, -0.0883195475, -0.0868583843, 0.0585598983, -0.0348885804, 0.0579654202, 0.0363255329, -0.0736641958, -0.0148605388, 0.0533150546, 0.0635334551, 0.0116142733, -0.0251588728, 0.0194048304, 0.0224641748, 0.0397312678, 0.0528585054, -0.0121336346, 0.0367347375, -0.0125666168, -0.0581155494, 0.0398690701, 0.0440862440, 0.0649847761, 0.0069006896, 0.0631619990, 0.0157865640, -0.0395724997, -0.0761159286, 0.0191908963, 0.0164789930, 0.0242161360, 0.0281228218, -0.0371677168, -0.0637093708, -0.0632025823, -0.0130393393, 0.0238616820, -0.0392603353, -0.0331274457, 0.0641048029, -0.0656736419, 0.0088913431, -0.0532148443, -0.0817202330, 0.0782893822, 0.0270403977, 0.0948891640, 0.0485607535, -0.0077214353, -0.0822515041, 0.0502220877, -0.0979685411, -0.0185515843, -0.0321567766, 0.0395779572, -0.0641974285, 0.0022447391, -0.0112085501, 0.0326045752, 0.0742210075, 0.0305930041, 0.0318601429, 0.0727925003, 0.0363243297, 0.0392528437, -0.0363760702, 0.0059543052, 0.0522386730, -0.0458913147, -0.0403022692, -0.0143379290, 0.0667252615, -0.0558615774, 0.0359971672, -0.0003856927, -0.0220694188, -0.0248627402, 0.0275513772, 0.0779134780, 0.0571611337, -0.0165741090, -0.0862880498, -0.0786650553, 0.0006190334, -0.0164069980, 0.0234874766, -0.0035349794, 0.0694152489, -0.0193568375, -0.0887676701, 0.0400701240, 0.0468643568, 0.0132949250, -0.0455795228, 0.0216856953, 0.0444851629, 0.0679631904, -0.0231328923, -0.0873571113, -0.0588936061, -0.0044197585, -0.0537995175, 0.0345727019, 0.0574193597, -0.0637511760, -0.0066811107, -0.0308855250, 0.0194916464, -0.0083025862, -0.0219358448, 0.0182791688, -0.0105084982, -0.0148322778, 0.0277029835, 0.0466203019, -0.0186557416, 0.0273528229, 0.0861071944, 0.0576622151, -0.0648730025, -0.0186542347, -0.0190121587, 0.0101300711, -0.0537448637, -0.0610102080, -0.0780385882, 0.0895727351, 0.0160431471, -0.0192919038, -0.0217588507, -0.0640344098, -0.0073184366, -0.0502194837, -0.0154062528, 0.0389552042, 0.0570085160, -0.0534344837, 0.0401130132, -0.0164477937, -0.0012257841, 0.0557758138, 0.0248671882, -0.0131419646, 0.0212091226, 0.0881259590, 0.0652402192, 0.0472004749, 0.0138988113, -0.0319287591, 0.0380272828, 0.0132746100, 0.0324365608, 0.0187179968, 0.0437487587, 0.0882623941, 0.0128417285, -0.0554276705, 0.0245301276, 0.0355945490, 0.0411530323, -0.0181083623, 0.0500211120, 0.0767961964, -0.0287873466, -0.0512444489, -0.0540053621, 0.0354745798, -0.0777130574, 0.0521272942, -0.0372846238, 0.0763983727, 0.0277588572, 0.0632219836, 0.0275680441, -0.0012771240, -0.0384822488, 0.0161977243, -0.0742471144, -0.0172485523, -0.0513981022, 0.0158038680, -0.0525631420, -0.0971887633, -0.0282672904, -0.0179184880, -0.0404432453, 0.0314136967, -0.0036457290, 0.0091662789, -0.0415056422, 0.0190200359, -0.0495778546, 0.0166317895, -0.0747798756, -0.0296744257, -0.0359272324, 0.0405774228, -0.0595519021, 0.0202387907, 0.0481522568, 0.0202450790, 0.0325797014, -0.0424730815, 0.0256961919, -0.0211838912, 0.0833833739, 0.0552273504, -0.0498717166, 0.0953428149, -0.0416496024, -0.1094975024, 0.0565195940, -0.0421542339, -0.0331413895, 0.0173984952, -0.0081772907, 0.0299496315, 0.0517775118, 0.0320640169, -0.0001025633, -0.0262382384, 0.0257202219, -0.0832913220, 0.0302621163, 0.0827639401, -0.0997934788, 0.0174100585, -0.0559911653, -0.0014377773, -0.0705465525, 0.0576493330, 0.0319658406, -0.0657406822, 0.0535322763, -0.0124485418, -0.0691763759, -0.0267290082, -0.0061849533, 0.0745594129, 0.0128895510, -0.0098259086, 0.0443521254, 0.0756638348, 0.0040246784, -0.0028496406, 0.0538901500, 0.0254539587, 0.0219957922, -0.0445851162, -0.0279900748, 0.0460540354, 0.0447217748, -0.0034410502, 0.0128367934, 0.0452607051, 0.0526146889, -0.0711373463, -0.0091906404, -0.0912276879, -0.0162473973, -0.0291864816, 0.0219979938, 0.0877847970, 0.0869744197, -0.0309415516, 0.0660235211, 0.0223412737, -0.0367772318, 0.0419772156, 0.0450107083, 0.0666867495, 0.0449069329, -0.0477375463, -0.0247407053, -0.0946234539, -0.0479364060, -0.1007592082, -0.0162300654, -0.0643236265, 0.0355302542, 0.0412928276, -0.0249615423, -0.0457067899, 0.0651710555, 0.0508455634, 0.0242621358, -0.0518777631, -0.0410983376, 0.0973127782, -0.0861203149, -0.0577539355, -0.0198130012, -0.0331733786, -0.0023035305, -0.0162780769, -0.0358309187, -0.0103633869, -0.0581991971, 0.0108852237, -0.0145156803, 0.0016759733, -0.0224429201, 0.0610904135, 0.0598758012, 0.0205190126, 0.0017235175, -0.0391215160, -0.0206939206, -0.0317662545, 0.0260935407, 0.0027159255, -0.0627441257, 0.0351893641, 0.0121685164, -0.0370266810, 0.0622530356, 0.0419011340, -0.0815525800, 0.0070229815, 0.0442881025, 0.0008970886, -0.0573575348, 0.0361243263, -0.0467721745, -0.0412090570, 0.0929827243, 0.0795809329, -0.0503423847, -0.0464726426, -0.0688283220, -0.0661957636, 0.0216608923, -0.0545185469, -0.0236926414, 0.0468298569, -0.0215610843, 0.0098243300, 0.0483346619, 0.0378848910, -0.0280751232, -0.0136779035, 0.0082578324, -0.0076906378, -0.0578257851, -0.0810610577, -0.0710845292, 0.0655628443, 0.0905218050, 0.0023698073, -0.0066816155, 0.0555473305, 0.0714150295, -0.0214846078, -0.0033147230, 0.0729360804, 0.0473108590, -0.0071100695, -0.0164679904, 0.0492681377, -0.0046486780, -0.0572780892, -0.0557444654, -0.0200251658, 0.0206342600, -0.0470318608, -0.0738345832, 0.0219955835, 0.0563612320, -0.0466653220, 0.0044760695, -0.0177516174, -0.0415347219, -0.0433277786, -0.0317483880, -0.0575758927, -0.0002397770, 0.0311036706, -0.0125707714, -0.0113399802, -0.0592461899, 0.0287428405, 0.0652315170, 0.0546464175, -0.0302555747, -0.0748857185, 0.0306567606, -0.0404155254, -0.0625678971, -0.0647211671, 0.0003946606, -0.0500797331, 0.0275482498, 0.0468764305, 0.0607778691, 0.0135444542, -0.0299150161, 0.0242629144, -0.0441338979, -0.0222992878, 0.0451468378, -0.0086467406, 0.0652515590, 0.0500531420, -0.0260613710, -0.0103311269, 0.0520310402, -0.0621148571, 0.0219669305, 0.0210566018, 0.0482705571, 0.0127075603, 0.0189735666, -0.0303491987, 0.0321945138, 0.0175287016, -0.0400725566, 0.0252385996, 0.0234489460, 0.0502831303, 0.0866746977, 0.0267313141, 0.0544241928, 0.0245163441, 0.0252166297, 0.0376981683, -0.0137475813, 0.0861079097, 0.0352939852, 0.0129935592, -0.0693871230, 0.0089922640, 0.0416087434, 0.0819197297, -0.0231838617, 0.0220907200, 0.0797998160, -0.0001111118, -0.0514536761, -0.0430134088, 0.0260099079, -0.0215636939, -0.0431708768, 0.0188916493, -0.0406186767, 0.0305630397, 0.0098071210, 0.0028592087, -0.0580154769, 0.0358079188, 0.0710653886, -0.0549714230, -0.0941143483, -0.0434998050, -0.0536902174, -0.0771510527, -0.0301031265, 0.0314470902, 0.0520397574, -0.0410808213, -0.0807851180, -0.0595712252, -0.0418968648, 0.0024959082, 0.0627951398, -0.0777278990, -0.0609028637, -0.0320478715, -0.0091801723, -0.0112230424, -0.0598441474, 0.0487950556, 0.0585665107, 0.0414650626, 0.0510561503, 0.0145104267, -0.0664825290, 0.0768721327, 0.0246867221, 0.0507629588, -0.0845644176, 0.0427706167, -0.0525076687, -0.0280336328, 0.0344150066, 0.0131498119, -0.0275978372, -0.0575887263, -0.0669919103, 0.0294236727, 0.0519068167, 0.0111065106, -0.0078519331, 0.0269648340, -0.0066685537, -0.0816477090, 0.0351516604, -0.0344634950, -0.0347239561, 0.0704829842, 0.0464417227, 0.0491584614, 0.0382709987, 0.0416674353, -0.0141740246, -0.0413239822, 0.0643717274, -0.0487608723, 0.0448413044, -0.0619439669, -0.0126658557, -0.0533741675, -0.0754208937, 0.0331856608, -0.0350625105, -0.0019896419, -0.0352773890, 0.0127101867, -0.0238488801, 0.0435301885, 0.0514695384, -0.0058356547, 0.0035417767, -0.0257526189, 0.0459841453, 0.0081684794, -0.0717537180, -0.0347697884, -0.0620490685, 0.0079179043, 0.0630495772, -0.0191966575, -0.0186003726, -0.0305601042, -0.0666632056, 0.0517695807, 0.0148986392, -0.0217075776, -0.0076666558, -0.0338243246, -0.0434644222, 0.0435706861, -0.0045504584, -0.0242519621, 0.0323625766, 0.0525339544, -0.0436705537, -0.0781984329, -0.0012470486, 0.0498081148, -0.0209490769, 0.0458264612, 0.0568995439, -0.0045701703, 0.0655418858, 0.0517342351, -0.0531235784, -0.0113422712, 0.0612470098, -0.0688109696, 0.0149774933, -0.0685838535, 0.0621813312, -0.0327372141, 0.0305072349, 0.0463309027, 0.0081971670, -0.0348043106, 0.0659615993, -0.0220330358, -0.0472899750, 0.0256934278, 0.0586519949, 0.0533047356, -0.0200970527, -0.0098458603, -0.0431295633, -0.0322463065, 0.0024917896, -0.0541708954, -0.0847846344, -0.0077292174, -0.0120347021, -0.0653940812, -0.0557132103, -0.0039757127, -0.0607552193, -0.0337152593, -0.0274577439, 0.0392962210, 0.0555000119, -0.0198246650, -0.0079152538, -0.0645010173, 0.0625409037, 0.0831327364, -0.0701760948, 0.0864568576, -0.0238511097, -0.0492086783, -0.0182029232, -0.0616558045, -0.0629676059, 0.0506846979, 0.0360665992, 0.0330380201, -0.0128327459, -0.0086300950, 0.0413241796, -0.0451019332, 0.0148630077, -0.0483958274, 0.0353431702, 0.0564092845, -0.0594211444, 0.0220403913, 0.0485423580, 0.0186716300, 0.0425138772, -0.0188924633, 0.0349772796, 0.0411591306, 0.0048792120, 0.0272154566, 0.0079162978, 0.0296439156, 0.0305759367, -0.0149606643, 0.0362100303, 0.0191285592, 0.0408608504, 0.0502914190, 0.0926518813, 0.0427879691, 0.0127900988, -0.0538836941, -0.0103712268, 0.0233477876, 0.0040659341, -0.0910702869, 0.0256292615, 0.0483318381, 0.0332098566, 0.0527487174, -0.0746959522, 0.0648655072, 0.0090986751, 0.0119751524, -0.0567227080, 0.0301635899, -0.0385795496, -0.0182956252, 0.0669764131, -0.0357351899, 0.0059103044, -0.0416232273, -0.0311601888, -0.0461937003, 0.0464611687, -0.0309290756, 0.0450900421, -0.0472221449, -0.0665090382, 0.0105388798, -0.0698807836, -0.0209808573, -0.0326911546, 0.0406600684, -0.0050364812, 0.0604860820, 0.0014001683, 0.0700664222, -0.0695758164, -0.0441799872, 0.0249125063, 0.0243488327, 0.0574208051, -0.0486126579, -0.0125666289, 0.0277416315, -0.0295268316, 0.0099376095, -0.0529859439, 0.0058352104, -0.0225142967, -0.0225090273, 0.0476203039, 0.0408215709, 0.0060451576, -0.0526832752, 0.0668432117, -0.0613756292, -0.0085099265, -0.0169528034, -0.0779540837, -0.0223975033, -0.0491405986, 0.0142579284, 0.0772207081, 0.0491312705, 0.0501700193, -0.0095738079, -0.0519568734, -0.0579876937, 0.0151253100, 0.0455968678, -0.0013624906, -0.0128756501, -0.0228160881, 0.0372846760, -0.0329252481, -0.0128934514, 0.0289067235, -0.0134599544, 0.0183227453, -0.0468375832, 0.0619694255, -0.0710030869, -0.0825518891, -0.0840190873, 0.0000208647, -0.0652345568, 0.0136639187, 0.0571257658, 0.0490724891, 0.0737790912, -0.0784662813, 0.0451566465, -0.0184103083, -0.0454319715, 0.0364778787, 0.0447828993, -0.0635723248, -0.0226671249, 0.0284951571, 0.0752961859, -0.0568296909, 0.0329220630, -0.0018857643, 0.0098017268, 0.0355112962, 0.0455473624, 0.0275006238, 0.0910568163, 0.0495748594, 0.0215684436, -0.0259686187, 0.0854064301, 0.0506545641, -0.0802544355, -0.0456142351, -0.0572217852, 0.0262013134, -0.0476854593, -0.0181623716, 0.0005596973, 0.0404414497, -0.0479691327, -0.0495417155, 0.0371585749, -0.0208125077, -0.0582550652, 0.0272044521, -0.0218609348, -0.0022812709, -0.0075114169, 0.0330173075, 0.0270942338, 0.0278141275, 0.0142879365, 0.0461525172, 0.0793846548, 0.0604100749, -0.0683750063, 0.0370782278, 0.0265964866, -0.0203135051, 0.0305411369, -0.0425816141, -0.0353158675, 0.0530368648, 0.0411240533, -0.0760473981, 0.0601431988, -0.0517386794, 0.0289310124, 0.0577467978, 0.0429191217, 0.0390646830, 0.0429181233, 0.0375432335, 0.0068178466, -0.0451747477, -0.0258115306, 0.0564790592, 0.0710957795, -0.0040987171, -0.0039435280, 0.0011135519, 0.0282655135, -0.0497254916, 0.0294211879, -0.0201269202, -0.0425698720, 0.0746071413, -0.0147294858, -0.0298475437, 0.0199410878, -0.0632974282, 0.0246978365, 0.0178285073, 0.0370723531, 0.0283307880, 0.0387581550, -0.0236782394, -0.0620278269, 0.0576530769, 0.0650399700, 0.0804015622, -0.0048773596, 0.0449106395, -0.0184603296, 0.0077577732, -0.0010853308, -0.0441601388, -0.0268390607, 0.0276184697, 0.0557959639, -0.0291099213, 0.0529431626, -0.0222101752, 0.0040881094, -0.0820195004, -0.0011024207, 0.0034377133, 0.0275912303, -0.0134885898, -0.0557328425, -0.0077129821, -0.0533503518, 0.0276402887, -0.0015807095, -0.0324740298, -0.0832582191, 0.0146646220, 0.0176489893, 0.0496397242, -0.0053584757, 0.0220039245, -0.0104407603, 0.0591837838, 0.0209374763, -0.0062561627, -0.0370086133, 0.0366559736, 0.0503691435, 0.0531065986, 0.0646346956, -0.0640226156, 0.0079694726, -0.0789212137, 0.0649938285, -0.0480022542, 0.0189012624, -0.0317841284, -0.0061460636, 0.0017758657, 0.0701490045, 0.0841862708, 0.0136223715, -0.0508986562, 0.0722158328, 0.0194079466, 0.0167922881, 0.0353252031, 0.0316561498, -0.0524167307, -0.0040521096, -0.0479202792, -0.0047884877, -0.0448409580, -0.0640657619, -0.0252029933, -0.0072895535, 0.0630221516, 0.0517071113, -0.0538033769, 0.0000994806, 0.0232007988, 0.0536018312, -0.0608093441, -0.0349257551, -0.0466806889, 0.0500585698, 0.0039583268, 0.0401060358, -0.0607310124, 0.0387746729, -0.0337851346, 0.0090560382, 0.0670003071, 0.0202661790, -0.0465698242, -0.0196226574, 0.0649798885, 0.0386363827, -0.0688499212, 0.0429969914, -0.0205377415, -0.0353613012, 0.0416154005, 0.0160687994, 0.0758099407, 0.0040563061, 0.0585139133, 0.0068904730, -0.0797600970, -0.0277221352, 0.0345771164, 0.0555041023, -0.0365275890, 0.0185363479, 0.0583656989, -0.0693236291, -0.0632090196, 0.0827392563, 0.0534970611, 0.0291381367, 0.0400007032, -0.0170768984, -0.0380890593, 0.0334111229, 0.0282536522, -0.0367605351, -0.0259333905, 0.0134700481, 0.0355810151, -0.0664407238, 0.0229592789, -0.0350116789, 0.0123423738, -0.0574216172, 0.0291199740, 0.0213905890, 0.0744506717, -0.0089802789, 0.0727781206, 0.0281377081, -0.0138174780, -0.0166906957, -0.0299278833, 0.0732002854, 0.0563865043, -0.0071429480, -0.0016394007, -0.0701512396, -0.0191011112, 0.0050213155, 0.0417669229, -0.0117223831, 0.0008293228, 0.0538191572, 0.0108538633, 0.0349208266, -0.0299251955, 0.0648421645, -0.0803925842, 0.0319766290, 0.0595407784, 0.0138918050, -0.0650521666, -0.0281495731, -0.0135988751, -0.0212852266, 0.0025125949, -0.0733489692, 0.0318031758, -0.0345559083, 0.0756923258, -0.0639380589, 0.0497695468, -0.0553038530, 0.0419666134, 0.0757898465, 0.0735288486, -0.0048692422, -0.0507575534, 0.0425166748, 0.0807243288, -0.0610545315, 0.0018871531, -0.0670815483, 0.0348533913, 0.0055926191, 0.0755908862, -0.0613819882, 0.0754465908, 0.0311634503, -0.0011237592, -0.0645872504, -0.0360396467, 0.0587399527, -0.0528143458, 0.0696000755, -0.0700240210, 0.0628331304, -0.0482568033, 0.0556833930, -0.0161136370, -0.0529559627, 0.0432506613, -0.0615702458, -0.0260052662, 0.0120273689, -0.0678975955, 0.0330159180, -0.0551117398, 0.0000513651, 0.0398100354, 0.0054450831, -0.0618033744, 0.0175066628, 0.0461274497, 0.0624678060, -0.0085105738, -0.0079323426, -0.0047311764, 0.0493729375, -0.0687294006, 0.0644719228, 0.0711686611, 0.0435107350, 0.0617586412, -0.0103485920, 0.0279795025, -0.0410550609, -0.0738618821, -0.0629300028, -0.0545094162, 0.0257638302, 0.0023264433, -0.0054227198, -0.0105446130, 0.0342075340, 0.0579950809, 0.0389651246, -0.0568203889, -0.0372080766, -0.0579712577, 0.0553925149, 0.0454259776, -0.0574147999, 0.0882595628, -0.0255552344, 0.0003930090, 0.0332905501, -0.0731315315, -0.0018701520, 0.0631378815, -0.0304396432, 0.0685573444, 0.0144137032, -0.0255695060, 0.0526326075, -0.0188564640, 0.0352873951, 0.0625742674, -0.0556724928, 0.0334070548, 0.0290568676, -0.0441564880, -0.0424473286, 0.0463854261, 0.0477311686, -0.0086152488, -0.0034362930, -0.0348649286, -0.0161991585, 0.0395983197, -0.0526050702, -0.0025477381, 0.0688291043, -0.0121324798, -0.0203614961, 0.0132731684, -0.0340720527, -0.0217603557, 0.0271686222, -0.0380081721, -0.0341408737, 0.0370733552, 0.0113185700, -0.0496524647, -0.0525162481, 0.0763651580, -0.0533027612, -0.0193111878, -0.0577324294, 0.0232508648, -0.0050981240, -0.0243427437, -0.0672892034, -0.0192288440, 0.0125674335, 0.0598024875, -0.0080433823, -0.0710121393, -0.0718924254, -0.0550633036, -0.0468567200, 0.0311264973, -0.0014675492, -0.0339770615, -0.0459167212, -0.0242005307, -0.0600961633, 0.0718401670, -0.0011226431, 0.0223262142, -0.0549668558, -0.0253705848, 0.0660534948, -0.0143744778, 0.0052559371, -0.0483836196, 0.0435124524, -0.0609758720, -0.0616225190, 0.0549663752, -0.0546394549, 0.0178785529, -0.0139167579, -0.0449749045, 0.0578421466, -0.0470334403, 0.0218511578, 0.0524320491, -0.0251903478, -0.0299365204, -0.0657565370, 0.0190739445, 0.0120005934, 0.0356381163, 0.0184575710, 0.0184753016, 0.0158582926, 0.0014388263, 0.0519335642, -0.0067348117, 0.0372587852, 0.0463757366, -0.0150190694, -0.0168302655, 0.0471734181, 0.0436033346, 0.0580601655, -0.0320151336, 0.0366609842, 0.0482184403, 0.0634165034, -0.0304832198, -0.0083030667, -0.0450711474, -0.0306669362, -0.0631924793, 0.0659702718, -0.0094914241, -0.0165794976, -0.0115936510, 0.0002595125, -0.0255630873, 0.0372516140, -0.0144862523, 0.0608193614, 0.0348135717, -0.0361411385, 0.0799105018, 0.0341002643, 0.0748986155, -0.0453199036, 0.0804290622, -0.0415426306, -0.0575256683, -0.0118528437, -0.0154277990, 0.0040608151, 0.0622766428, -0.0748596936, 0.0300571192, -0.0505455695, 0.0026140478, 0.0375012234, 0.0032673844, -0.0338923819, -0.0420790501, -0.0384038575, -0.0630328283, 0.0733046085, 0.0397575311, -0.0147373043, -0.0240965746, -0.0648396760, -0.0672223642, 0.0178168695, -0.0732723400, 0.0242534503, -0.0053829397, 0.0667154342, 0.0534710325, 0.0571468920, 0.0134470649, -0.0039036477, 0.0398491696, 0.0651190728, -0.0616838820, 0.0483687446, 0.0364888869, 0.0473415665, -0.0711380467, 0.0609313548, -0.0037776174, -0.0162087213, -0.0218770895, 0.0577750951, 0.0380640328, -0.0415901504, 0.0131193092, 0.0763519108, -0.0207106750, -0.0378895290, 0.0108132530, -0.0205747467, 0.0034616839, 0.0661703199, -0.0350822732, -0.0099118445, -0.0598367564, 0.0374113508, -0.0578529350, 0.0607287772, 0.0116553605, -0.0345974639, 0.0003961922, -0.0361825153, 0.0701038390, -0.0204542950, -0.0937996954, 0.0201125629, -0.0059078741, 0.0427434631, -0.0050325445, 0.0321032517, 0.0227269009, -0.0317224301, -0.0531166457, 0.0068646111, 0.0596186817, 0.0032935804, 0.0498042293, 0.0305962339, -0.0538538061, -0.0272909570, -0.0473041199, -0.0164433345, 0.0285269916, -0.0055112033, 0.0406212136, 0.0622784346, -0.0838314146, 0.0063458853, 0.0356699899, 0.0382373519, -0.0424921177, -0.0333337486, 0.0594216473, -0.0625036284, -0.0068272096, -0.0811539888, -0.0418978259, -0.0813204274, 0.0167908780, -0.0220828466, 0.0131638898, 0.0622726381, -0.0307202861, 0.0434147678, -0.0314745717, 0.0622434169, -0.0228643101, 0.0446760915, -0.0300291460, -0.0369545072, 0.0308317747, -0.0496119186, 0.0470852293, -0.0178900547, 0.0316601135, -0.0509883016, 0.0389811657, 0.0213072114, 0.0414789431, -0.0639963746, -0.0052487710, -0.0466515534, 0.0637089461, 0.0296478681, -0.0119218426, -0.0484614782, 0.0062674405, -0.0099657327, -0.0543051176, 0.0566551797, -0.0316765718, 0.0396555401, 0.0339286961, 0.0381253287, -0.0548162386, -0.0536965244, 0.0352044478, 0.0288974904, 0.0824161321, -0.0500570424, -0.0245011467, -0.0463444218, -0.0410828181, 0.0808565617, 0.0298847929, 0.0495597385, -0.0464057624, 0.0382864811, -0.0085595278, 0.0113697965, -0.0447209813, -0.0300820507, -0.0563842170, 0.0782382190, -0.0417498313, 0.0037259334, -0.0186548010, 0.0439925902, 0.0510115586, -0.0362348743, 0.0174028259, -0.0190728512, 0.0185470022, -0.0446574576, 0.0039106137, -0.0193429329, 0.0357735828, -0.0101599591, -0.0206959080, 0.0255181734, 0.0073198923, 0.0276088640, 0.0826829001, -0.0385640711, -0.0017761966, -0.0348120034, 0.0139623396, 0.0565290488, -0.0412172824, 0.0112379305, -0.0577224977, -0.0762343258, -0.0514963381, 0.0436882116, 0.0250190776, 0.0403610840, 0.0779074281, -0.0263096821, 0.0396888629, -0.0282449014, 0.0474744476, 0.0671240985, 0.0160365514, 0.0185019448, -0.0081960876, 0.0502355620, 0.0680793300, 0.0484165959, 0.0142812226, -0.0564918779, -0.0377896763, 0.0573606417, 0.0417007171, 0.0272178128, -0.0399895012, -0.0167537965, 0.0128155733, 0.0675570965, -0.0336657278, -0.0363365337, 0.0002331429, -0.0225767661, -0.0718991384, 0.0240172278, -0.0011085584, 0.0471012369, 0.0098136291, -0.0054764668, -0.0705649555, -0.0660415813, -0.0330043361, -0.0490022898, 0.0354419239, 0.0259700585, 0.0091070030, -0.0284959283, 0.0189514551, 0.0422953553, -0.0452589169, 0.0161753595, 0.0221396964, 0.0284605101, -0.0576598831, 0.0206623860, -0.0435168594, 0.0453530587, 0.0424519479, -0.0336784124, 0.0472609401, 0.0022359379, 0.0569090210, -0.0178139191, -0.0634971336, -0.0415462554, -0.0425790176, 0.0144838821, -0.0236497968, -0.0036643390, -0.0616005324, -0.0106038116, 0.0274352692, -0.0027210114, 0.0390852913, 0.0356582776, -0.0205942839, -0.0453663096, 0.0134941889, -0.0527243987, 0.0574943312, 0.0356331281, -0.0455930457, -0.0933499187, 0.0223132931, -0.0629267916, 0.0478086658, 0.0708213225, 0.0247936845, -0.0521328077, 0.0709905326, -0.0036213091, -0.0963909701, 0.0376019962, 0.0096033923, 0.0127722416, -0.0593340062, 0.0204901900, -0.0279513784, 0.0083198817, 0.0156587735, 0.0354046114, -0.0590304025, 0.0706606507, 0.0031980849, 0.0252148565, 0.0722403601, -0.0191987623, 0.0112748481, -0.0296079367, 0.0511972457, -0.0279083643, 0.0330439731, 0.0357535146, -0.0174250193, 0.0235603806, -0.0578655973, 0.0138142752, 0.0736162588, 0.0495430157, 0.0181653257, -0.0820476487, -0.0219571106, 0.0023112826, 0.0656968877, 0.0256424844, -0.0123572471, -0.0416766070, -0.0000182334, 0.0382984616, -0.0086108791, 0.0163474493, 0.0196844786, -0.0069700698, 0.0130904438, 0.0211273581, -0.0179314464, 0.0688299835, -0.0593031384, -0.0239519123, -0.0336999856, 0.0909029618, -0.1068845540, -0.0841021463, -0.0497299284, 0.0189067628, 0.0261366647, -0.0696626902, 0.0105651729, 0.0197930858, -0.0245348364, -0.0137071349, 0.0843351334, -0.0043150415, -0.0151837729, 0.0472717285, -0.0130340448, -0.0434181876, 0.0114000374, 0.0290634166, 0.0474944413, -0.0303098839, 0.0158354342, 0.0791894272, 0.0461071581, 0.0974329486, 0.0577195585, 0.0130841574, 0.0250170138, -0.0068193693, 0.0196554400, -0.0436780229, 0.0559783690, -0.0148615912, -0.0746277124, -0.0271667652, -0.0596914589, -0.0171340797, 0.0021820273, 0.0179224852, -0.0037160325, 0.0592112541, 0.0336588696, 0.0616513491, 0.0199756790, -0.0761800855, 0.0603694022, 0.0080606248, -0.0410910398, 0.0387401469, -0.0028277771, 0.0553337112, -0.0141207408, 0.0580410920, -0.0468207076, 0.0433970354, -0.0520866215, -0.0344609655, -0.0088605732, 0.0204625018, 0.0084203305, 0.0475390851, 0.0044439561, 0.0549621247, -0.0404977761, 0.0366166942, -0.0044219107, -0.0198066086, 0.0515987277, -0.0362001993, 0.0201543383, -0.0395164378, 0.0388291664, -0.0174020622, -0.0207385495, -0.0456104428, -0.0699338615, -0.0430030786, -0.0679269359, 0.0162042435, -0.0471923873, 0.0182733927, -0.0498207845, 0.0260536578, 0.0173340496, 0.0115694702, 0.0709781572, -0.0478870794, -0.0386348702, -0.0300638322, 0.0233046096, -0.0615073442, -0.0251052901, 0.0272360407, 0.0485033691, 0.0787401274, 0.0273548216, 0.0232338384, 0.0831585154, -0.0792875886, 0.0290452074, -0.0261785034, -0.0115846209, 0.0632054433, -0.0763919353, -0.0007022839, -0.0263175219, -0.0698077157, 0.0004038018, 0.0632518157, -0.0547618754, 0.0125508746, -0.0616034716, 0.0460825972, -0.0817125738, -0.0439162999, 0.0521839485, -0.0571262836, -0.0316175073, 0.0185732413, 0.0126729701, -0.0542407520, -0.0225905795, -0.0352103934, -0.0229739677, 0.0840922073, 0.0334753655, -0.0432747453, -0.0413402729, 0.0422273651, 0.0327298157, -0.0025738084, -0.0670976266, 0.0100140218, -0.0535674728, 0.0299696624, 0.0294788703, -0.0742553025, -0.0483230464, -0.0463971160, 0.0118351430, -0.0208794922, 0.0000893330, -0.0735443980, 0.0280568823, 0.0311492961, 0.0614522882, -0.0352651440, -0.0373943485, -0.0104976278, -0.0167154670, -0.0131730633, 0.0292950254, 0.0508560166, -0.0414149687, 0.0594765134, 0.0685082749, 0.0321621373, -0.0562582202, -0.0307189804, -0.0470557176, -0.0521484576, -0.0531461090, 0.0240793508, 0.0578632019, 0.0823829994, 0.0768934414, 0.0165764391, -0.0472996049, 0.0569158494, 0.0473547280, -0.0135156428, 0.0085304715, -0.0306155030, -0.0393166915, -0.0263376292, -0.0712449923, -0.0528842509, 0.0569850951, -0.0371177308, -0.0520647652, -0.0658024997, 0.0051672487, -0.0653302893, 0.0310431048, -0.0716207772, 0.0323965438, 0.0381576084, 0.0211341176, -0.0426459014, -0.0363766514, -0.0633897558, -0.0441620909, -0.0478073694, 0.0333448201, 0.0545724630, -0.0594928004, 0.0763662532, -0.0222893544, 0.0466776863, -0.0105699543, 0.0272521768, 0.0357214473, -0.0545385219, 0.0221379735, -0.0687189251, 0.0857113972, -0.0216379222, -0.0275639668, -0.0019028703, 0.0372746773, 0.0326111875, -0.0270148348, -0.0311567876, -0.0610616766, 0.0858319625, -0.0075940434, 0.0734663233, -0.0263067354, 0.0312982947, -0.0191589259, -0.0462752990, 0.0043684356, -0.0611214451, -0.0226018745, -0.0614238940, -0.0560836866, -0.0579194129, 0.0138870133, 0.0523596108, 0.0671509355, -0.0787815228, 0.0270823091, -0.0580647364, 0.0050912565, -0.0011425085, -0.0181432366, -0.0293187853, -0.0553498268, 0.0717990175, -0.0078434339, 0.0676404834, 0.0098806042, 0.0096584028, -0.0636811703, 0.0041283262, -0.0319971666, -0.0463020839, -0.0138471415, 0.0514128320, 0.0087005142, -0.0421283357, -0.0136242351, 0.0088294186, -0.0182796624, -0.0795236751, 0.0464190170, 0.0444319509, -0.0197871849, -0.0239464045, -0.0892611891, 0.0269310381, -0.0417638980, -0.0056489822, -0.0558056459, 0.0216994099, 0.0490129031, 0.0133388322, -0.0087796999, 0.0425710678, 0.0662554502, -0.0011322197, 0.0136757940, 0.0133503918, -0.0445443168, -0.0526754558, 0.0067426926, 0.0017604775, 0.0377166569, -0.0586089082, -0.0615315177, 0.0379762724, 0.0644463822, 0.0843702108, -0.0512796827, 0.0881336257, 0.0571768470, -0.0200891271, -0.0338705182, -0.0741416216, 0.0128370989, -0.0043785730, -0.0880434662, 0.0995263904, -0.0123173334, 0.0721199811, 0.0339171477, -0.0527433939, 0.0380349867, -0.0593891628, -0.0413484350, -0.0536763631, 0.0674566329, -0.0052384697, 0.0346160792, 0.0319781862, -0.0977192223, -0.0340367071, 0.0748653710, -0.0398034006, -0.0777318031, -0.0869164541, -0.0478676371, 0.0710406303, 0.0122558326, 0.0061111310, -0.0657453462, -0.0140729323, -0.0167450756, -0.0103054950, -0.0386187285, -0.0531511381, 0.0334532894, -0.0022185552, 0.0247421227, 0.0528605655, -0.0736979991, -0.0901146010, -0.0691799819, 0.0574474595, 0.0423119888, 0.0879400596, -0.0369619839, 0.0354691446, 0.0536309890, 0.0257912595, -0.0432274565, 0.0134188645, 0.0562401935, 0.0787880868, 0.0091016395, -0.0608764924, 0.0480909459, 0.0598633401, -0.0746075362, 0.0489193238, 0.0161835514, 0.0053314604, 0.0271544158, -0.0362832770, 0.0488087721, 0.0814423561, 0.0422081240, -0.0576085374, 0.0600776114, 0.0302366968, -0.0620597079, -0.0035435804, -0.0025588786, 0.0346946120, -0.0343709998, -0.0288494434, -0.0543354750, -0.0023915330, -0.0363340713, -0.0372665748, 0.0242209956, -0.0387723930, -0.0595184527, -0.0337253436, -0.0330404192, -0.0269065406, -0.0255321618, -0.0470520519, -0.0504786372, 0.0091499994, -0.0251417402, -0.0555369481, -0.0056151450, -0.0425314941, -0.0748515874, 0.0111254361, -0.0510980971, -0.0952375755, 0.0193874910, 0.0312765725, -0.0095436126, 0.0603989698, -0.0700111985, -0.0185311865, -0.0830980018, -0.0157359615, -0.0626572147, -0.0758904964, -0.0457363203, 0.0723511204, 0.0904649943, -0.0473805107, 0.0054861256, 0.0395657495, 0.0205547269, -0.0648673400, 0.0761122629, 0.0580857694, 0.0768029317, 0.0031740239, 0.0222636964, 0.0518576875, -0.0093561690, -0.0367442779, -0.0287469625, 0.0650296807, 0.0256596413, 0.0594580695, 0.0280327518, -0.0265655052, 0.0312787928, -0.1157799885, 0.0215881858, -0.0434600562, -0.0068664197, 0.0535283461, 0.0048162485, 0.0472515225, -0.0438879579, 0.0320500024, 0.0426092222, 0.0740191564, 0.0517387241, 0.0045689768, -0.0024927231, -0.0292053539, 0.0217577219, 0.0227351002, 0.0037375093, 0.0029324328, 0.0939945579, 0.0609192662, -0.1023141891, -0.0024196790, -0.0397810116, 0.0031488198, -0.0346405469, -0.0171550829, -0.0392100774, 0.0285538174, -0.0457291305, 0.0230678171, 0.0331486836, 0.0513450764, -0.0340693258, -0.0352966972, -0.0523249060, 0.0050779432, 0.0187164973, 0.0230472703, -0.0626767799, 0.0624466836, -0.0905195624, -0.0179921053, 0.0733349398, -0.0857663974, -0.0542735122, -0.0129515287, 0.0024189795, 0.0061247656, -0.0311950240, 0.0605773218, -0.0042983112, -0.0902156234, 0.0467584617, -0.0206726231, -0.0873435885, 0.0522256307, 0.0349652506, 0.0804651976, 0.0144489994, 0.0774638802, 0.0661943704, -0.0041267117, -0.0945138484, -0.0306097958, 0.0050513172, 0.0297363475, 0.0415007211, 0.0244515948, -0.0143865738, -0.0134161683, -0.0198871102, -0.0349005237, 0.0253577065, 0.0321450718, -0.0373519249, -0.0222176649, -0.0120203374, -0.0066313250, -0.0255589020, 0.0664095432, -0.0149896285, 0.0620409846, -0.0057155988, -0.0490955189, -0.0323313102, -0.0962395966, -0.0503009781, -0.0537781268, -0.0866652578, 0.0108610168, -0.0418143161, 0.0687524751, -0.0866770521, -0.0566731766, -0.0740398094, -0.0192751363, 0.0048989514, 0.0788313299, 0.0028397539, -0.0060032583, -0.0789957047, -0.0501097254, -0.0538606532, 0.0122504411, -0.1162503287, 0.0258863084, -0.0030973058, 0.0292588864, -0.0299495161, -0.0326606445, 0.0306253023, -0.0215057805, 0.0399890207, -0.0296927225, 0.0185395405, -0.0933747590, 0.0467401780, 0.0553635694, 0.0203600656, 0.0452242903, -0.0500255413, 0.0772901475, 0.0450821444, -0.0078527266, 0.1082913578, 0.0209332723, -0.0306899939, -0.0796919242, -0.0315616243, 0.0345282555, -0.0069107208, -0.0161859412, 0.0162134729, -0.0535065345, -0.0877234638, -0.0822642818, -0.0034545306, 0.0272489488, 0.0342792235, -0.0405277759, -0.0351628438, -0.0716310441, 0.0628793612, 0.0758388862, -0.0516871288, 0.0215458162, -0.0161506031, -0.0623258166, -0.0976616144, -0.0048450646, -0.0609912574, -0.0726567134, -0.0856705457, -0.0747478902, -0.0209908802, -0.0302285515, -0.0568436421, -0.0105404863, -0.0201212373, 0.0488670021, -0.0666353479, 0.0390243381, 0.0200228877, 0.0654920489, -0.1076086015, -0.0120274285, -0.0312089156, -0.0609959774, -0.0719503015, 0.0948951542, 0.0444160923, 0.0099238064, 0.0084960070, -0.0544056855, -0.0409559719, 0.0667376816, -0.0170335323, -0.0066861222, 0.0460401885, 0.0156171909, 0.0669948384, 0.0821087807, 0.0112598855, -0.0117426915, 0.0001582688, 0.0920566395, 0.0319548994, 0.0478299595, -0.0320046954, 0.0574856959, 0.0556845777, -0.1099592969, 0.0000687432, 0.0622503236, 0.0279876199, -0.0706176758, 0.0420302227, -0.0672234222, -0.0082049575, -0.0361393020, 0.0569810346, 0.0713885501, 0.0835130960, -0.0396385640, 0.0149028162, 0.0393256396, 0.0667307973, 0.0383682251, 0.0405556075, 0.0117131909, -0.0058933892, -0.0288157035, -0.0391006880, 0.0445898436, -0.0640190691, -0.0362822413, 0.0355622396, 0.0322384089, 0.0820839405, -0.0712092891, 0.0426012576, -0.0121674966, -0.0120690120, 0.0154755497, -0.0065413346, -0.0035940050, -0.0004278700, 0.0239555780, 0.0250344854, 0.0534195006, 0.0446102135, -0.0175559614, 0.0775759742, -0.0567814931, -0.0221313573, 0.0690986365, -0.0292571746, -0.0505846366, 0.0393716469, 0.0392217934, -0.0398544334, 0.0069485414, -0.0629563406, 0.0724726766, 0.0538397022, -0.0548039377, -0.0177429114, -0.0608644783, -0.0570015609, 0.0072031906, 0.0174456388, 0.0706622377, -0.0733923763, 0.0393303111, -0.0453600623, 0.0562218130, 0.0429317765, -0.0073538781, 0.0110832909, 0.0591665469, -0.0376075655, 0.0322322473, -0.0104381191, -0.0490543135, 0.0466506965, -0.0717247650, -0.0502679534, 0.0286278483, -0.0203292761, 0.0060114213, 0.0521625839, -0.0206477251, 0.0196016449, -0.0018581281, -0.0247041993, 0.0311725996, -0.0035057468, 0.0122365821, -0.0474797562, 0.0582795851, 0.0768067688, -0.0653293133, -0.0199492145, -0.0462223515, -0.0550673753, 0.0793298036, 0.0526156276, 0.0161697529, 0.0555783696, -0.0039636986, -0.0150816459, -0.0770758167, 0.0541027337, 0.0019051575, 0.0513239577, -0.0619781725, 0.0887828171, 0.0510544814, -0.0336778872, 0.0116915302, -0.0822923705, -0.0364172794, 0.0615681596, -0.0285340995, 0.0312503241, -0.0573741458, -0.0002489871, 0.0640925840, -0.0056576598, -0.0354472920, -0.0422441885, 0.0302507523, -0.0559980199, 0.0530151203, 0.0602571517, -0.0211711135, -0.1035978049, 0.0240499787, -0.0771080330, 0.0785317346, 0.0129776960, -0.0091706906, -0.0807511732, -0.0329710282, 0.0383501388, -0.0159516726, 0.0378069505, -0.0043414235, 0.0113920560, -0.0554508455, -0.0171784591, -0.0061736028, -0.0527666099, -0.0140811736, -0.0399022996, -0.0963844284, 0.0171218589, -0.0017347654, 0.0459622890, -0.0196352955, 0.0102636553, -0.0418174490, 0.0506736040, 0.0961646810, -0.0018640565, 0.0271015912, 0.0288836751, 0.0571840331, 0.0483321548, 0.0566184707, 0.0127712600, 0.0684485883, 0.0683563277, 0.0644625947, -0.0568180345, -0.0452917553, -0.0298185553, -0.0069021676, -0.0361968651, 0.0751531795, 0.0720830411, 0.0183588471, -0.0174542591, -0.0136755751, -0.0291994605, 0.0259561520, 0.0665150210, -0.0064602033, -0.0611863658, -0.0354312621, -0.0584852025, -0.0371984877, -0.0228823498, -0.0200449973, 0.0102523891, -0.0316704139, 0.0258156508, -0.0641253591, 0.0954858139, 0.0671189055, -0.0742530897, -0.0134168519, -0.0735180080, 0.0697213039, 0.0355892107, -0.0323655792, -0.0669421926, 0.0093785590, -0.0720396116, -0.0239560939, -0.0358273275, 0.0070159868, 0.0335581563, -0.0155470967, -0.0722252876, 0.0320056528, 0.0440968238, -0.0000853834, 0.0547478795, -0.1145990267, -0.0256621502, -0.0360483937, 0.0657605380, 0.0116214808, -0.0445769615, 0.0156376287, 0.0128445551, -0.0407013707, -0.0198607258, 0.0214439575, 0.0051878816, -0.0370615199, 0.0634838566, -0.0460089594, 0.0348998792, 0.0648776516, 0.0111563047, -0.0350148492, 0.0644702464, -0.0894968957, 0.0567678809, -0.0226560999, 0.0544336550, -0.0166843664, -0.0353960432, 0.0093099941, -0.0013716877, -0.0424631909, -0.0119301314, -0.0050371313, 0.0170544032, 0.0166889373, -0.0539327748, -0.1176311523, -0.0390764698, 0.0392007343, -0.0639848188, -0.0341273956, -0.0221876670, 0.0209867526, -0.0275998544, 0.0067235003, -0.0358593017, -0.0249101445, 0.0371189788, -0.0638883635, -0.0799612477, 0.0837194249, -0.0270586591, -0.0432333499, -0.0178165790, -0.0376194753, -0.0052428073, 0.0385389663, 0.0365825295, -0.0451074988, 0.0102741420, -0.0067071700, -0.0287157726, 0.0693139285, 0.0128291426, -0.0098692635, 0.0540071577, -0.0304881111, -0.0274107363, -0.0537359342, -0.0048981705, -0.0266538560, 0.0051883650, 0.0199461374, -0.0414865799, 0.0048135100, -0.0178963337, 0.0041584303, -0.0367869064, 0.0396258049, -0.0090676174, -0.0553666092, 0.0605688505, -0.0401844978, -0.0016802491, -0.0446720645, -0.0568968393, -0.0092392238, -0.0334849507, -0.0454120003, -0.0414019562, 0.0563486256, -0.0083828652, -0.0512228198, 0.0085835997, 0.0892045498, 0.0413671210, 0.0403809883, 0.0270610023, -0.0245133061, -0.0739101171, -0.0511188582, 0.0388349108, 0.0322549902, 0.0623069480, -0.0691584349, 0.0776914135, -0.0400424935, 0.0278456043, -0.0447989032, 0.0837185681, -0.0596466996, -0.0955594257, -0.0086641870, 0.0276019797, 0.0640307814, 0.0777572989, -0.0683639273, -0.0498795062, 0.0762807354, -0.0372595638, -0.0075714556, -0.0115157235, 0.0626668260, -0.0039591775, -0.0094377482, -0.0449475795, -0.0055110855, -0.0663336515, -0.0229879823, 0.0474220812, -0.0657492653, 0.0607921779, -0.0627957806, -0.0648557246, -0.1028249711, 0.0374621339, 0.0434980355, -0.0175233223, -0.0313125402, -0.0534660965, 0.0501008332, 0.0979942828, -0.0122190388, 0.0142123234, 0.0196731295, -0.0417062715, 0.0681581795, -0.0256446768, 0.0059721344, 0.0032929273, 0.0646540150, -0.0444872715, -0.0138585698, 0.0362654664, -0.0090531912, 0.0480497666, 0.0399509743, -0.0309953839, -0.0020349717, 0.0021023792, 0.0323120728, -0.0645569116, 0.0448563695, 0.0459214859, -0.0796744451, 0.0274132304, 0.0457778163, -0.0317215025, -0.0818978772, 0.0424587317, -0.0203600582, 0.0656555146, -0.0191600677, 0.0455343165, 0.0582221821, 0.0207400247, -0.0132390130, -0.0166327730, -0.0155883078, 0.0285433289, -0.0826369524, -0.0260681398, 0.0140762767, -0.0235492364, 0.0559635721, -0.0319440700, -0.0339355767, 0.0542134009, 0.0259011183, 0.0749315247, -0.0442979075, 0.0172055364, 0.0453558117, -0.0526630767, -0.0045048725, 0.0088266023, 0.0516117513, 0.0064962222, -0.0971433073, -0.0345401727, 0.0437726639, -0.0154154645, 0.0536083430, 0.0053978949, -0.0477574393, 0.0488340110, 0.0438330807, -0.0137392087, 0.0085144946, 0.0106592486, 0.0646576956, 0.0869130343, -0.0544142500, 0.0543279424, -0.0474932119, 0.0418742821, 0.0616791621, 0.0537307411, -0.0118538169, 0.0531770810, -0.0361175016, -0.0608076043, 0.0081552295, -0.0078082038, 0.0459912494, -0.0266085397, 0.0192802958, 0.0127349021, -0.0339678712, 0.0261971038, 0.0114810476, 0.0155714918, 0.0289900061, -0.0064854985, 0.0105326865, -0.0183003079, 0.0343984999, 0.0527927876, -0.0281061921, -0.0730379671, -0.0583157465, 0.0544188917, 0.0760645792, -0.0588644333, 0.0566389486, 0.0092979027, 0.0970259085, -0.0617921352, -0.0408602357, 0.0752320513, -0.0365714468, -0.0287642423, -0.0629807636, -0.0092320172, 0.0277462211, 0.0113956528, -0.0151682161, -0.0221708510, -0.0487306751, -0.0789003447, -0.0616511293, 0.0333339162, -0.0258553997, 0.0418065973, 0.0539757945, -0.0125806639, -0.0147077302, -0.0111120101, -0.0431778617, 0.0391644277, 0.0471904166, -0.0092190439, -0.0044022659, 0.0670114085, 0.0585542917, 0.0584566109, 0.0089827441, 0.0231139660, 0.0522079654, -0.0566270724, 0.0545373261, 0.0114251878, 0.0076988358, -0.0294687357, -0.0363221988, 0.0346097909, 0.0686045364, 0.0510740578, -0.0487998426, 0.0664764792, 0.0418390855, -0.0643755794, 0.0152703961, 0.0309829451, 0.0144584700, -0.0408824012, -0.0714868903, -0.0662247390, 0.0431065448, -0.0148260379, -0.0067889914, -0.0625677705, 0.0413099229, -0.0199246854, 0.0261776596, 0.0469800495, 0.0308952667, 0.0228189677, -0.0070948806, -0.0598137863, -0.0026306231, -0.0683028847, 0.0567828827, -0.0036252006, 0.0123014078, -0.0304637067, -0.0604074746, -0.0063402564, 0.0017928767, -0.0706420839, -0.0481635481, -0.0549733937, -0.0198518950, 0.0388997793, -0.0446524397, -0.0364752039, -0.0900410786, 0.0367639512, -0.0103994869, 0.0765334442, -0.0201022625, -0.0126186442, 0.0010772238, -0.0057001994, -0.0409081429, -0.0644561499, -0.0151269715, -0.0614305027, -0.0394865237, 0.0375192054, -0.0406256020, -0.0285387449, -0.0196619742, 0.0653622150, -0.0196875408, -0.0544855073, -0.0515035428, -0.0085737621, 0.0584038757, -0.0390753821, 0.0614421442, 0.0237564538, 0.0109537896, -0.0204871986, 0.0444201380, -0.0526296496, 0.0370350890, -0.0128523875, 0.0444118641, -0.0191617422, 0.0245359354, 0.0324362516, 0.0316999443, 0.0583171211, -0.0122737987, 0.0342935994, -0.0085525038, -0.0073238444, -0.0146140782, 0.0281395633, 0.0490627736, -0.0203865077, 0.0080631776, -0.0305458661, 0.0533441417, 0.0644887388, -0.0070341574, 0.0223278664, 0.0258734748, 0.0229876209, 0.0136042414, -0.0137176318, 0.0286783911, 0.0129457060, -0.0478035584, -0.0366674177, -0.0150263496, -0.0545361340, -0.0557436049, -0.0071613328, -0.0223887451, 0.0628497526, -0.0010806083, 0.0328852907, -0.0491379872, -0.0435369536, 0.0685289055, 0.0042901048, 0.0724565387, 0.0638198182, -0.0121526886, -0.0685923770, -0.0983275920, 0.0839887783, -0.0551365614, 0.0017660805, -0.0414108001, 0.0289998297, 0.0171644650, 0.0053822724, -0.0118704503, -0.0542949066, -0.0535518117, -0.0841283649, 0.0573822036, 0.0222596712, -0.0512924641, 0.0385175347, 0.0619972385, -0.0075849285, -0.0145225842, 0.0027919672, 0.0653925836, 0.0381350964, -0.0789239556, 0.0364043750, -0.0624579042, -0.0105687948, -0.0260001775, -0.0566837527, 0.0122772437, 0.0465221740, -0.0212249309, 0.0916921571, 0.0066281264, -0.0166419856, 0.0060953344, -0.0518249460, -0.0769096538, -0.0575164258, 0.0409297124, -0.0436752848, 0.0638558120, 0.0192675851, -0.0369221196, 0.0224330965, 0.0440840200, -0.0537185855, -0.0334205553, -0.0076391906, 0.0697097555, 0.0826466605, 0.0129301082, -0.0417210162, -0.0421791673, -0.0053728195, 0.0267224461, -0.0079546543, 0.0010647691, 0.0547896028, 0.0473551378, 0.0892457739, 0.0209095143, -0.0551621318, 0.0294181127, 0.0547099747, 0.0455759019, 0.0202981010, 0.0508223660, 0.0400416814, -0.0014310883, 0.0612085946, -0.0568013303, 0.0654924959, 0.0668006763, 0.0871653110, -0.0453447849, -0.0662930384, 0.0163968895, 0.0358607434, -0.0509065315, -0.0079774382, 0.0472880080, -0.0768133178, -0.0831405297, -0.0032474680, -0.0031547956, 0.0363459587, -0.0484442972, 0.0826100186, 0.0480768569, 0.0437797569, -0.0552095398, -0.0020780596, -0.0645608455, -0.0802143067, -0.0590635724, 0.0552327558, 0.0671213940, 0.0119437939, -0.0197965801, -0.0358799957, 0.0382233262, 0.0031866187, -0.0537168272, 0.0746764317, -0.0440282077, 0.0531486422, -0.0674775988, 0.0339102820, -0.0182933602, 0.0245018322, 0.0146529898, -0.0449237451, -0.0136422329, 0.0740815476, -0.0221491493, -0.0035017969, -0.0688686818, 0.0099789975, -0.0297501255, 0.0541326106, 0.0650769621, 0.0300439615, -0.0515541248, 0.0488357320, -0.0675046071, 0.0062013008, 0.0268512778, -0.0151786534, 0.0571936108, -0.0115149468, 0.0692505017, -0.0152798053, -0.0670107007, 0.0375871621, -0.0499060079, 0.0497678742, 0.0454820618, 0.0764623135, 0.0297068637, -0.0258277282, 0.0156660154, -0.0658286437, -0.0061897147, 0.0675752163, -0.0245205704, -0.0538568795, -0.0772522837, -0.0240245089, -0.0209881458, 0.0503714532, -0.0438867398, -0.0322256647, -0.0710523650, -0.0377219692, -0.0659309700, 0.0250207186, -0.0566355400, -0.0026277364, 0.0282577947, 0.0030809080, -0.0094512813, 0.0607819967, 0.0286966451, -0.0637532100, 0.0674925074, -0.0641519949, 0.0111441081, 0.0541060381, 0.0670892820, -0.0713959858, -0.0483951867, -0.0799698308, -0.0237913262, -0.0026844316, 0.0179689080, -0.0633003935, -0.0301803369, -0.0082016513, 0.0370741412, -0.0159918722, -0.0675821751, 0.0238784757, 0.0902920365, 0.0499150380, 0.0703939945, 0.0074903239, 0.0447095446, 0.0361268744, -0.0376473181, 0.0508818664, 0.0383039042, -0.0007913208, -0.0683381259, 0.0534146093, -0.0505258739, 0.0349429846, -0.0421998389, 0.0153478505, -0.0475914143, 0.0807909444, 0.0175191462, -0.0259290226, -0.0266210567, -0.0611689836, -0.0243204590, 0.0029897613, -0.0466666929, -0.0328818075, -0.0079456568, -0.0365826599, -0.0427446999, 0.0343895555, 0.0596628413, 0.0419960655, -0.0555034317, -0.0492916554, 0.0157494284, 0.0156485438, -0.0198730938, -0.0682962388, -0.0795727670, -0.0165762808, 0.0536782704, 0.0221769847, -0.0097907642, -0.0283946581, -0.0571490154, 0.0598043725, -0.0579995662, 0.0295596663, 0.0371455401, 0.0541135296, 0.0526575632, -0.0447484776, -0.0873559341, -0.0412644818, 0.0248743128, -0.0578559116, -0.0227430630, 0.0435624942, -0.0557270125, -0.0545746423, -0.0640686452, -0.0863252208, 0.0638667420, 0.0302090179, 0.0049052909, -0.0548130088, -0.0464579538, -0.0136918817, 0.0370445810, -0.0411818475, -0.0118996790, 0.0350636281, 0.0400945842, 0.0101778340, 0.0140725430, 0.0449476168, -0.0055141589, 0.0056140493, -0.0740672499, 0.0352373719, -0.0282462724, 0.0777463838, 0.0800573453, 0.0644791871, 0.0111545501, -0.0334929340, 0.0587777011, -0.0400609151, 0.0187725835, 0.0008506661, -0.0536077768, -0.0588292703, -0.0883706436, -0.0809664950, -0.0248992033, 0.0582460202, -0.0837596804, -0.0364253521, -0.0445536748, -0.0555724464, -0.0204980616, 0.0181567464, 0.0425194129, 0.0299018137, -0.0553191751, -0.0258771684, 0.0323683992, 0.0146001875, -0.0070826989, -0.0350494683, 0.0584149659, 0.0480961539, -0.0225124620, -0.0216877386, -0.0568455756, 0.0012982175, -0.0142180417, 0.0307231955, -0.0209939443, 0.0126992352, -0.0765679106, 0.0094865365, 0.0423820578, 0.0810721740, -0.0763018876, -0.0454565920, 0.0396301374, -0.0373636782, -0.0512872003, 0.0393979102, 0.0415316671, -0.0091681303, 0.0636474863, 0.0415789820, -0.0442970581, -0.0243252199, 0.0104571180, -0.0256001148, -0.0703856647, 0.0123115331, -0.0415905043, 0.0380510204, 0.0560416430, 0.0505680442, -0.0281177964, 0.0418555923, -0.0279146656, 0.0288351327, -0.0452065580, 0.0107889967, 0.0425149910, -0.0600683242, 0.0279270113, 0.0705264062, -0.0115291579, -0.0126815019, -0.0905640200, -0.0557432175, 0.0597926974, -0.0199710038, -0.0931552052, 0.0635869429, 0.0036062198, -0.0145989330, -0.0248304829, -0.0073709679, 0.0082530202, 0.0065669287, 0.0267199073, -0.0858794898, -0.0087344591, 0.0750914663, 0.0576380529, -0.0366159603, 0.0391926169, -0.0142752109, 0.0440676920, 0.0921538472, 0.0764863119, 0.0295723546, -0.0286599621, 0.0434172526, 0.0131117245, -0.0056593469, 0.0086775739, 0.0448571220, 0.0396406464, -0.0208776724, -0.0773789734, -0.0037935085, -0.0527224168, 0.0813468620, 0.0916707367, 0.0402119905, 0.1025098711, 0.0997119695, -0.0413132086, 0.0882817134, -0.0148677481, 0.0684860572, 0.0800423101, 0.0162004903, -0.0431627929, 0.0898667350, 0.0178063661, 0.0165017545, 0.0055057551, 0.0742769688, 0.0769550800, 0.1135675609, 0.0524506159, 0.0960430428, -0.0437907539, -0.0445470102, 0.0004252628, 0.0467295647, 0.0182661787, 0.0987535864, -0.0501385778, 0.0258978084, -0.0866189003, -0.0358457603, 0.0968331322, 0.0388283506, -0.1080667675, 0.0674977377, -0.0559522659, -0.0003355178, -0.0950157270, 0.0497937463, -0.0211758688, -0.0583099611, -0.0387165658, 0.0242008977, 0.0765442252, -0.0498340242, -0.0820406079, -0.0047168005, 0.0585575104, 0.0360958576, -0.0480777845, -0.0456866287, -0.0166765526, -0.0759214312, -0.0813816711, 0.0260359533, 0.0707152858, -0.0627746582, -0.0263209939, 0.0161425527, -0.0474902019, -0.0345589705, 0.0409524888, -0.0215948187, 0.0056949565, 0.0610900298, 0.0421403870, 0.0370933674, 0.0207295939, -0.0248157401, -0.0046036635, -0.0454659611, -0.0153333545, -0.0171923172, -0.0249870904, 0.0127641475, 0.0545797497, 0.0325677097, 0.0768984184, -0.0510966331, -0.0070017199, 0.0613498986, 0.0599495322, 0.0385661758, 0.0700051710, 0.0503490381, -0.0148046762, -0.0441171080, 0.0351150185, 0.0007270474, 0.0435729288, 0.0414080992, -0.0124160107, -0.0843935907, -0.0023198696, -0.0749826133, 0.0337297060, -0.0127752833, -0.0932799131, -0.0243105404, -0.0953305066, -0.0640650690, 0.0312247016, 0.0416313782, 0.0309202783, -0.0773101896, -0.0065503004, 0.0376431085, 0.0440763347, 0.0295371674, -0.0463617481, -0.0049880254, 0.0097158644, -0.0518361852, -0.0112137860, 0.0211008936, 0.0028673797, -0.0644011199, -0.0724182427, -0.0108993193, -0.0014675945, 0.0367205702, 0.0139814764, 0.0589212775, -0.0868568644, -0.0404744260, -0.0930525362, 0.0321665108, 0.0341949500, 0.0516294949, 0.0516240709, 0.0134551069, 0.0073720771, -0.0415887721, -0.0175140537, 0.0834231749, 0.0556740798, 0.0652137548, 0.0714918226, 0.0295304954, 0.0251537878, 0.0582116917, 0.0766776502, 0.0600846708, 0.0549057685, -0.0022453230, -0.0255724806, 0.0798752531, -0.0299946330, 0.0013120838, 0.0221818816, -0.0102624670, -0.0129892845, -0.0206324123, -0.0077857813, -0.0254446566, -0.0387808792, -0.0797634646, -0.0072379019, 0.0275349971, 0.0518734045, 0.0581848919, -0.0863033235, 0.0380001515, -0.0274254344, 0.0107140280, -0.0383534953, 0.0676424354, 0.0436968207, 0.0295392182, 0.0093260873, -0.0367274918, 0.0430375971, 0.0808163211, 0.0483777002, 0.0574977398, 0.0350262932, -0.0659427717, 0.0551346652, 0.0611576438, 0.0078226775, -0.0552549697, -0.0725462660, -0.0653889999, 0.0144817093, 0.0199012123, -0.0118231690, -0.0357221402, -0.0795566812, -0.0030460649, -0.0642094985, -0.0596226789, 0.0101216929, -0.0577782840, -0.0584259257, 0.0463778786, -0.0268662646, 0.0308078025, 0.0010514205, -0.0532984696, -0.0887582079, 0.0618651845, -0.0701446310, 0.0299949758, -0.0591272712, 0.0619255863, 0.0252402108, -0.0343243778, 0.0064015612, -0.0596234687, -0.0639398992, 0.0167900380, -0.0505505428, 0.0163801201, 0.0050590225, 0.0754744485, 0.0606726147, 0.0504391119, -0.0968133062, 0.0141008506, -0.0441113859, 0.0691121221, 0.0683018044, 0.0284863673, 0.0503580533, -0.0677332208, 0.0613094792, 0.0118731139, 0.0136601366, 0.0241985116, -0.0083201984, -0.0086499536, 0.0082708150, 0.0546580143, -0.0573657937, 0.0550771095, -0.0258051250, 0.0019825140, -0.0145633854, 0.0685243607, -0.0354403257, 0.0096545620, -0.0664971396, 0.0255729407, -0.0450912043, -0.0127847148, -0.0393792987, -0.0509954095, -0.0602056496, -0.0461835004, 0.0865286216, -0.0179086719, -0.0215351116, -0.0241741706, 0.0653724447, -0.0238332655, 0.0146498838, -0.0034448022, -0.0559838153, 0.0554779917, -0.0637720600, 0.0363367610, 0.0571300536, -0.0103036799, 0.0255634263, 0.0248106420, -0.0352096930, -0.0500846170, 0.0354804397, 0.0350559466, -0.0411821902, -0.0498020276, -0.0849200711, -0.0350697786, 0.0733991563, 0.0437965915, 0.0539418757, 0.0400638394, -0.0529878475, 0.0726056919, -0.0008697166, 0.0395314172, 0.0474061891, -0.0007190980, -0.0329326279, 0.0298866257, 0.0043766871, -0.0200117584, -0.0170863736, -0.0214464683, 0.0185066238, -0.0642968565, 0.0418659449, 0.0207817256, 0.0433142744, 0.0252943020, -0.0092829345, -0.0450718999, 0.0132488087, 0.0392594263, 0.0037358915, -0.0301882233, -0.0458020717, -0.0008726029, 0.0128500247, -0.0142904343, 0.0001966628, 0.0330645517, 0.0309813134, 0.0680820867, 0.0181091335, -0.0747535899, 0.0733623356, 0.0263031274, 0.0003622592, 0.0666712672, -0.0431062430, -0.0166701656, 0.0101372898, -0.0177633092, -0.0094938129, 0.0510493368, 0.0627979338, -0.0919544920, -0.0469231866, 0.0821841061, 0.0005424859, 0.0500439703, -0.0080508851, -0.0336219482, -0.0514671020, 0.0057688411, -0.0441276282, 0.0338795520, 0.0426338948, -0.0521104671, -0.0455473065, -0.0133201350, 0.0729581341, 0.0834530443, 0.0156556889, 0.0450385921, -0.0049307533, -0.0035700866, -0.0220254418, -0.0027354045, -0.0118458448, 0.0285203122, -0.0573311001, 0.0106094051, -0.0346299112, 0.0480937362, -0.0020383601, -0.0636428297, -0.0811723471, -0.0202381518, 0.0239357781, -0.0164420679, 0.0500344783, 0.0648821592, 0.0407437719, -0.0653457642, -0.0532968566, 0.0512218513, 0.0361496881, -0.0484348312, 0.0167035498, 0.0263478998, 0.0720828250, 0.0155758858, 0.0268502366, -0.0005363293, 0.0066046594, 0.0028793546, -0.0006038587, -0.0198414791, 0.0066509633, -0.0115603916, -0.0638024062, -0.0348117314, -0.0610229075, -0.0614675097, -0.0800977275, -0.0664495677, -0.0124460319, -0.0466468930, -0.0453994870, 0.0981778726, -0.0082773408, 0.0149287358, 0.0379208624, 0.0089877686, 0.0473076999, -0.0361821875, -0.0429745428, 0.0013730355, -0.0167623386, 0.0284667332, -0.0422432199, -0.0148901315, -0.0490708128, 0.0718335062, -0.0436126441, -0.0214267336, -0.0619343929, 0.0224927459, -0.0040043895, 0.0242386926, -0.0226006433, -0.0059001301, -0.0452254750, 0.0441349745, 0.0272924658, -0.0162578374, 0.0039378507, -0.0380456075, 0.0592724830, -0.0337260030, -0.0653070956, -0.0504701175, 0.0116245402, 0.0053545353, -0.0465181693, -0.0873585120, -0.0725401342, -0.0574081875, 0.0685622916, 0.0691716820, -0.0070042377, 0.0169554055, -0.0033437978, 0.0793813691, -0.0701599866, -0.0497692563, -0.0289043635, -0.0367293768, -0.0544655956, -0.0305764191, -0.0368362814, -0.0323953070, 0.0555762164, 0.0021852879, 0.1022694558, -0.0279114377, 0.0401559472, -0.0263917986, 0.0694365576, -0.0500095598, 0.0696849674, -0.0071401922, 0.0289009213, 0.0197466407, -0.0310275424, 0.0075569889, 0.0411156937, -0.0632741302, 0.0253864154, -0.0565876178, -0.0031388835, -0.0754476786, -0.0024668877, 0.0814231262, -0.0772646219, 0.0840797052, 0.0466930307, 0.0674839988, 0.0533106327, -0.0116592357, 0.0242159795, 0.0707495958, -0.0664493293, 0.0483441241, -0.0376289338, 0.0597885959, -0.0505858138, -0.0114515359, -0.0216137376, -0.0735380203, 0.0094342418, -0.0376309678, 0.0684459284, 0.0065763290, -0.0736603960, -0.0539457239, 0.0479930639, 0.0333416946, 0.0385546014, 0.0396464355, -0.0179926697, -0.0728825033, -0.0528217368, -0.0695631057, 0.0644597784, -0.0668897778, -0.0157112405, 0.0312178861, 0.0321652889, -0.0632790178, 0.0502341688, -0.0183471795, 0.0322151110, -0.0514810458, -0.0379361175, -0.0564451292, 0.0152071882, 0.0817680582, 0.0810720250, 0.0346145518, -0.0486020371, 0.0022515683, -0.0344929136, -0.0062491116, -0.0200570431, 0.0565345511, -0.0223504063, -0.0516084321, 0.0199368615, -0.0295224711, 0.0197759457, 0.0013927375, 0.0187543631, 0.0574200414, 0.0537060574, -0.0096811429, 0.0144822709, 0.0437112898, 0.0061216867, 0.0047840290, -0.0834323391, 0.0910144299, -0.0068063354, 0.0593625493, 0.0246163104, -0.0175221097, 0.0261174794, -0.0044418322, 0.0740405321, 0.0234756991, 0.0609201752, -0.0420463346, 0.0111256083, 0.0159392692, -0.0707484782, 0.0076457998, -0.0164697263, -0.0305344891, -0.0789855197, 0.0616932213, -0.0868677124, -0.0281935446, 0.0450063124, -0.0402768776, -0.0474142469, -0.0887540281, 0.0477171987, -0.0045943358, 0.0597063750, -0.0379806422, -0.0244819857, 0.0342714041, -0.0662721619, 0.0482011959, 0.0425892323, 0.0219827555, -0.0588601306, 0.0555003323, 0.0547730066, -0.0308587346, 0.0006592168, -0.0421887748, 0.0740046427, 0.0306491386, 0.0283152312, 0.0618155673, 0.0390876085, -0.0652812347, -0.0079359394, 0.0624542572, 0.0233490542, 0.0168851968, 0.0796523765, 0.0060104919, 0.0339180566, -0.0624073222, 0.0306331515, -0.0012861834, 0.0235606097, 0.0652920753, -0.0833993033, 0.0680563375, 0.0043434794, 0.0568273216, 0.0082783774, 0.0368313491, -0.0488190874, -0.0147506166, -0.0452314541, 0.0618790835, 0.0127840880, -0.0009769112, -0.0157293640, -0.0574905276, -0.0182038527, -0.0452498458, -0.0477848835, -0.0301931761, -0.0904873610, -0.0747127309, -0.0475303121, 0.0355667062, 0.0162291080, 0.0466048084, 0.0129858823, -0.0127487443, -0.0891651586, -0.0080979411, 0.0125626065, -0.0375353321, -0.0050657764, -0.0199637283, -0.0170423239, -0.0068496554, 0.0919411555, 0.0651334599, -0.0134166731, -0.0603386462, -0.0071705971, 0.0254530404, -0.0319717862, -0.0008674848, 0.0280311294, -0.0895464793, 0.0546194725, 0.0642500073, -0.0154939499, -0.0289191417, 0.0168665536, 0.0499218255, 0.0342977457, 0.0019426261, 0.1069152430, 0.1110807657, 0.0105255218, 0.0744522810, 0.0366752893, 0.0891210660, 0.0899521112, -0.0576780923, -0.0238678753, 0.0142870406, -0.0025424247, 0.0313416757, -0.0260411818, -0.0075428784, 0.0174764171, 0.0858001634, -0.0212007258, 0.0624707937, 0.0662085116, -0.0214073509, 0.0051848483, 0.0965597928, -0.0778496861, 0.0294512883, 0.0870524123, -0.0006427460, -0.1071213633, 0.0343579762, 0.0577012040, -0.0734733194, -0.0318605900, -0.0505288690, -0.0237121899, -0.0211149566, -0.0117802247, 0.0629948378, -0.0640110821, 0.0240900498, -0.0560381934, -0.0915596858, -0.0709043145, -0.0978780910, 0.0213140137, -0.0363754295, 0.1019678265, -0.0587345921, 0.0466416590, 0.0134110833, -0.0757384449, 0.0093322489, -0.0109264972, 0.0795838535, 0.0091534527, 0.0013978785, -0.0344829671, -0.0798109770, 0.1054056212, 0.0684665069, 0.0556842983, 0.0701202974, -0.1018651351, -0.0256060828, -0.0527374335, -0.0943860263, 0.0794611126, 0.1168957576, 0.0245239325, 0.0047947075, 0.0786073580, 0.0517137088, 0.0343316756, 0.0665746927, 0.0379386954, 0.0348991044, 0.0281101521, -0.0604372434, -0.0948079750, -0.0072026304, 0.0311835315, 0.0880893916, -0.0657472908, -0.0113644088, 0.0576757416, 0.0867131129, 0.0268634520, -0.0045611099, -0.1139832512, -0.0928490236, 0.0964551866, -0.0518409349, 0.0069499579, 0.0492023826, -0.0739743710, -0.1070816070, -0.0186963025, -0.0211241841, 0.0616775118, 0.0291041434, -0.0674060285, -0.0137896985, -0.0367950723, -0.0652516633, -0.0778021067, -0.0518008135, -0.0104702190, -0.1034807265, 0.0040956847, -0.0488308482, 0.0170626827, 0.0039972770, -0.0514422506, -0.0011004863, 0.0007588587, 0.0261829775, 0.0351483449, -0.0206339229, 0.0392189957, -0.0005348535, 0.0392804667, -0.0683390200, 0.0828099400, -0.0560120791, 0.0438902788, -0.0290315077, -0.0823327750, 0.0844330415, -0.0615495518, -0.0451715365, 0.0628499314, -0.0354739428, -0.0305109415, -0.0185718518, 0.0571127757, -0.0523838550, -0.0318093486, 0.0499292053, 0.0539428480, 0.0217040218, -0.0372720174, -0.0714071617, 0.0141841248, 0.0378700942, 0.0166469961, -0.0558102727, 0.0344749503, 0.0314065330, 0.0696892813, -0.0219968930, -0.0269792508, -0.0268522259, 0.0670764744, 0.0040813722, 0.0341987573, 0.0359323993, 0.0118236234, 0.0155742224, -0.0023201648, -0.0086850664, -0.0284093749, 0.0230837408, 0.0291140582, -0.0648328513, 0.0524580032, -0.0296083000, 0.0108596412, 0.0139909415, 0.0143785533, -0.0662173852, -0.0456131175, 0.0550723039, 0.0309381224, -0.0004178080, -0.0599412732, -0.0256390851, 0.0239287447, -0.0452885106, 0.0401425697, -0.0102062291, -0.0478803739, -0.0277612489, 0.0672451928, 0.0256387293, -0.0402656309, -0.0392936319, -0.0255079512, -0.0478982553, 0.0509230159, 0.0366871767, -0.0523488484, -0.0445472188, -0.0496692806, 0.0475250818, -0.0250702836, 0.0472588763, 0.0526710376, 0.0798432752, -0.0118717728, -0.0165238157, -0.0639201179, -0.0658237413, -0.0419516377, -0.0546743497, 0.0223618876, -0.0275271162, 0.0051174290, 0.0191509984, -0.0079080751, -0.0395955928, 0.0787616521, -0.0296072736, 0.0501354299, -0.0142011624, 0.0037444567, -0.0645119920, -0.0374929011, -0.0198917091, 0.0498549230, -0.0607118830, -0.0260285586, 0.0517652966, 0.0056161215, -0.0558313355, 0.0395402014, -0.0310257412, 0.0465190969, -0.0566082001, -0.0382665657, 0.0195055883, -0.0467651151, 0.0038424246, 0.0622792915, -0.0472075902, 0.0080228150, -0.0699414834, -0.0228559654, -0.0459077656, 0.0553094745, -0.0442198142, 0.0002823104, 0.0025235594, -0.0078445207, 0.0569988713, 0.0310681574, -0.0130603556, 0.0039857454, 0.0397102386, -0.0114149470, 0.0116342735, 0.0196046326, -0.0417953506, -0.0405004397, -0.0412162095, 0.0636090338, -0.0372749679, 0.0636121631, -0.0339220539, -0.0244334117, 0.0147751486, 0.0043848027, -0.0083315065, 0.0554059595, 0.0153605184, 0.0136898374, 0.0237561110, 0.0463198386, -0.0665939674, 0.0713421330, 0.0433243811, -0.0113709886, 0.0390782021, 0.0308238603, 0.0582163297, -0.0104027204, -0.0127045503, -0.0019541192, 0.0502110533, 0.0535584912, -0.0185555592, 0.0566657782, -0.0559750050, -0.0079240948, 0.0108741447, -0.0030884205, 0.0563077666, -0.0270537362, 0.0265924223, 0.0297572147, -0.0336223692, 0.0057531395, 0.0444252118, 0.0227010008, 0.0193421673, 0.0642405897, 0.0571952723, 0.0309929084, 0.0613523424, -0.0255955514, -0.0464375243, 0.0677440017, -0.0021676491, 0.0631100088, 0.0048723049, -0.0325297415, -0.0303797834, -0.0487238653, -0.0367872454, 0.0327042192, -0.0313387662, 0.0774993375, -0.0646669194, 0.0352333635, -0.0012570820, -0.0567366108, -0.0098096468, -0.0280395318, 0.0219134167, -0.0609068386, 0.0215283986, 0.0272842348, -0.0703489482, -0.0263598021, 0.0104582608, 0.0446368456, 0.0034962455, -0.0579789430, -0.0461664684, 0.0470549800, -0.0328589901, 0.0512513667, -0.0560605675, 0.0347910784, 0.0316066705, 0.0320499465, 0.0088158101, 0.0018855748, -0.0535038114, 0.0087786159, -0.0540827848, 0.0622770898, -0.0134231802, 0.0121757714, 0.0366293974, -0.0675480589, -0.0498521067, 0.0498520881, 0.0686988384, -0.0492294990, -0.0255992655, 0.0187985264, -0.0053129620, 0.0610444993, -0.0529830419, -0.0062303836, -0.0200670753, -0.0116252815, 0.0680866539, 0.0172200128, -0.0414656028, -0.0266417600, -0.0434815772, 0.0228640214, 0.0188450441, 0.0541421659, -0.0477823094, 0.0024834657, 0.0316201150, 0.0249798838, 0.0819207802, -0.0557648651, -0.0586917289, 0.0064261402, 0.0479256921, -0.0152107999, 0.0130085694, -0.0339163020, 0.0426749513, 0.0089968331, 0.0093271527, 0.0696099401, 0.0069287415, -0.0119753340, 0.0183185451, -0.0463258661, -0.0491667613, -0.0106604751, 0.0415823795, -0.0004492801, 0.0252575409, -0.0007385217, 0.0108539443, 0.0362837687, 0.0575642996, 0.0126638403, 0.0582024939, -0.0256617498, 0.0533978306, 0.0524859577, -0.0219967440, -0.0190864131, -0.0280681308, 0.0183511954, 0.0487527996, 0.0177410766, -0.0643459186, 0.0542159900, 0.0073482897, -0.0546315685, -0.0032593282, 0.0041421908, -0.0356051102, 0.0236472767, 0.0426305905, -0.0352521427, -0.0602864623, -0.0500197448, -0.0278199036, 0.0538452864, 0.0423871465, -0.0009592238, -0.0480978899, 0.0295885056, -0.0046346919, -0.0241193157, -0.0051837163, -0.0219351370, 0.0491981730, -0.0315026119, -0.0515244342, -0.0356976874, 0.0405357629, 0.0076862299, 0.0558560379, 0.0216834843, -0.0240628067, 0.0085477568, -0.0563453175, 0.0598803274, 0.0640304536, -0.0269218925, 0.0642115623, -0.0692919344, -0.0638577193, 0.0295963548, 0.0126698650, 0.0401173979, 0.0251790043, -0.0133970324, -0.0519435257, -0.0482304916, -0.0457013994, 0.0666013584, -0.0330971628, -0.0112169525, -0.0626645833, -0.0434310101, 0.0272115264, -0.0625022203, 0.0007366651, 0.0404401533, -0.0328072384, 0.0105683226, 0.0463271849, -0.0267358366, 0.0478834622, -0.0049256557, -0.0740127936, -0.0474437512, 0.0658993348, 0.0178189296, 0.0553548001, 0.0530284867, -0.0412765965, 0.0227410998, 0.0236853156, 0.0460091755, 0.0502740815, 0.0138033917, 0.0371235535, -0.0659045577, 0.0019337302, -0.0470541976, -0.0601014085, 0.0547529794, 0.0042011533, -0.0112835690, 0.0458661430, 0.0658484474, 0.0459181704, 0.0584591962, 0.0425738171, -0.0070257378, 0.0017639159, -0.0346997790, -0.0147290602, -0.0630589351, -0.0776480138, -0.0117757805, -0.0085980017, 0.0324192010, -0.0209533274, -0.0240897182, -0.0068867328, 0.0557388254, 0.0030293406, -0.0501416326, 0.0283816177, 0.0424253792, 0.0239668246, 0.0172132123, -0.0081415623, -0.0356069207, 0.0704837069, -0.0054425057, -0.0228713043, -0.0309911910, 0.0165775325, -0.0623399690, 0.0711423233, 0.0436657518, -0.0305024441, -0.0377110131, -0.0146896830, 0.0377811231, 0.0129876928, 0.0401919670, -0.0135827679, 0.0082657104, 0.0407025777, 0.0629089996, -0.0543429963, 0.0684076771, 0.0112326276, -0.0132139083, 0.0745616332, -0.0546522103, -0.0461188033, 0.0124679692, -0.0353992358, 0.0636516064, -0.0200443733, -0.0532336347, -0.0604618900, 0.0226653777, 0.0051733730, 0.0075679459, 0.0593779348, 0.0324629918, 0.0154776145, -0.0710097030, -0.0518502705, 0.0504563525, -0.0603663772, 0.0567660071, -0.0690344572, -0.0065236241, -0.0035944309, 0.0499818698, -0.0107485177, 0.0202842243, 0.0281711947, 0.0346667916, 0.0005493810, 0.0352623574, 0.0486502796, -0.0280700270, -0.0663857386, -0.0312200580, -0.0506569669, -0.0099609867, 0.0148328952, 0.0293281619, -0.0097626485, -0.0548810512, 0.0099823000, 0.0011770339, -0.0399226248, -0.0641611740, 0.0735156238, 0.0404165573, -0.0325661600, -0.0442936234, 0.0094071282, -0.0417030863, 0.0186341237, 0.0110954167, 0.0681776330, -0.0261997320, -0.0719322339, -0.0399327800, -0.0426247567, 0.0404824801, -0.0744452402, -0.0658500567, -0.0016943166, -0.0302172862, 0.0662082359, 0.0823501348, -0.0027735941, 0.0353670679, 0.0351362638, -0.0701505914, 0.0200566128, 0.0163351465, 0.0159373805, -0.0488219708, -0.0006516728, 0.0395894647, -0.0328098349, 0.0741019398, -0.0003571618, 0.0130425356, -0.0608510077, 0.0626534820, 0.0060468628, -0.0235335864, -0.0190217253, 0.0669468120, 0.0053444328, -0.0716661066, 0.0714982077, 0.0317565575, -0.0074596568, -0.0520508997, -0.0008291841, 0.0131856631, -0.0532769859, -0.0648796037, 0.0015323630, -0.0733725801, -0.0127778733, -0.0555050001, -0.0163908359, -0.0110530611, -0.0170108397, -0.0413143635, -0.0540509820, -0.0417204872, 0.0178294070, -0.0371316299, 0.0521205999, 0.0198082123, -0.0469797887, -0.0573482700, 0.0018110577, 0.0700955242, -0.0622438267, -0.0805954635, -0.0687375590, -0.0069198613, -0.0093780560, -0.0566518642, 0.0368285850, 0.0322718844, 0.0505798087, 0.0772647113, -0.0433844924, 0.0387732722, -0.0131552480, 0.0620548427, 0.0049625677, -0.0132777113, 0.0670189187, -0.0055216267, 0.0315034203, -0.0452013984, 0.0003329188, 0.0516328812, -0.0065783160, 0.0198891219, -0.0344604403, -0.0858151093, 0.0352451056, 0.0134456987, 0.0548164323, -0.0544416644, 0.0473376438, -0.0696400926, 0.0200813431, 0.0541715920, -0.0181590710, 0.0879402384, 0.0132234907, 0.0235232655, -0.0460655130, -0.0183512140, -0.0096920561, 0.0503034405, -0.0306045394, 0.0041515697, 0.0238468517, 0.0380115062, 0.0162955672, -0.0154624917, -0.0586876012, 0.0528216250, -0.0040071555, -0.0259478707, 0.0093726451, -0.0390792228, -0.0558798201, -0.0508282557, 0.0396909975, 0.0483126342, 0.0058739530, -0.0649854839, 0.0152489683, -0.0050154882, -0.0591654964, 0.0695947781, -0.0201940835, 0.0514151603, -0.0783587992, 0.0062647755, 0.0454895385, 0.0041387230, -0.0166680664, -0.0309132524, -0.0161496587, 0.0471775308, 0.0133229531, 0.0590370595, 0.0223994870, 0.0619870238, 0.0485197082, -0.0211353563, -0.0151781878, 0.0743558332, -0.0187895969, -0.0126013774, -0.0590045415, -0.0438239276, -0.0015546879, 0.0388182588, 0.0674416423, 0.0638441220, -0.0583630092, 0.0135141397, 0.0509487353, 0.0655275956, -0.0340912938, 0.0581461191, 0.0269529354, 0.0569304004, -0.0102711618, 0.0102039706, -0.0599132106, 0.0212173350, 0.0610922612, -0.0205601621, 0.0319001302, -0.0376097299, 0.0516731068, -0.0832810849, 0.0103431419, -0.0021132261, 0.0241164844, 0.0202253703, -0.0284801908, 0.0533459447, -0.0427171737, 0.0556329414, 0.0874562562, -0.0581336021, 0.0124044195, 0.0364334323, -0.0742390305, 0.0516537875, -0.0102797532, 0.0375344157, 0.0695346445, 0.0357906595, 0.0577678531, -0.0148606310, -0.0286587123, 0.0274322126, 0.0270012375, -0.0585951060, 0.0761589408, -0.0684247687, -0.0521269254, 0.0473441444, -0.0055222642, 0.0243174657, 0.0512039810, -0.0785463303, -0.0024076311, 0.0230615046, 0.0692314357, -0.0572064258, 0.0664014816, -0.0738132596, -0.0263281427, 0.0448647216, 0.0586700290, 0.0753165111, -0.0329369828, -0.0756237507, 0.0364120528, -0.0235166084, -0.0036789619, 0.0164056793, 0.0059788092, 0.0402157493, -0.0128957406, 0.0153701687, 0.0000753699, 0.0325941481, -0.0423451923, -0.0546854287, 0.0424815230, 0.0741311237, 0.0748754442, 0.0489152148, -0.0045644962, -0.0464912876, 0.0033090066, -0.0254354291, -0.0072222049, -0.0492149517, 0.0492457710, -0.0243632626, -0.0639775395, 0.0579790920, -0.0605110228, 0.0542240590, -0.0150108179, 0.0301691405, 0.0553761348, -0.0076298318, -0.0466013551, -0.0130931325, -0.0418632701, 0.0584028177, 0.0564082973, 0.0692995712, -0.0688565224, -0.0514638871, 0.0237074625, -0.0064619519, 0.0018955950, -0.0245431904, -0.0032131553, 0.0174594186, -0.0743188336, -0.0161244981, -0.0380349234, -0.0082061933, -0.0567117557, -0.0460455008, 0.0418140590, 0.0042737531, -0.0350368731, -0.0433967113, 0.0332106277, 0.0435681567, 0.0605384223, 0.0310377739, 0.0055440050, -0.0220119245, -0.0084427856, 0.0250747073, 0.0153036322, 0.0066816960, 0.0542051159, -0.0656231418, 0.0314170457, -0.0730117261, 0.0509616174, 0.0260103941, 0.0231239777, 0.0084505854, -0.0154173439, -0.0362730287, 0.0284591652, -0.0615467392, -0.0308107696, 0.0062579014, -0.0325954333, -0.0304227620, -0.0150204636, -0.0398838557, 0.0661749914, -0.0128792906, -0.0397781953, 0.0159503333, 0.0299892779, 0.0508375354, -0.0172576178, -0.0200645030, -0.0261706375, -0.0004938766, 0.0225411169, -0.0606319048, 0.0074665677, 0.0188175999, -0.0029091740, 0.0171110630, 0.0073917476, -0.0007611860, 0.0562528148, -0.0403581224, -0.0119272992, -0.0179682095, -0.0261978600, -0.0669079870, 0.0237872060, 0.0318523832, -0.0049354010, -0.0222865008, 0.0140686873, -0.0245555937, -0.0065053222, -0.0621409789, -0.0255682804, -0.0257223137, 0.0633116141, -0.0191436652, 0.0418730788, 0.0621858016, -0.0515321009, -0.0700795949, 0.0625540689, 0.0106853060, -0.0416835211, 0.0215275772, 0.0203692671, -0.0066718063, -0.0408656672, -0.0211513210, 0.0278798603, 0.0568823293, 0.0383436494, -0.0387423858, -0.0652141571, -0.0507616475, -0.0455117896, -0.0147884889, 0.0229934081, 0.0131942621, 0.0450549535, -0.0491526760, -0.0377206728, 0.0610340312, -0.0368923061, 0.0531388111, 0.0095552448, 0.0529617295, 0.0765989572, -0.0517908968, -0.0624979287, 0.0072432347, 0.0252658483, -0.0497102700, -0.0360357463, -0.0321545154, 0.0581613891, -0.0092957299, -0.0412703529, 0.0379804373, -0.0672214702, -0.0389776640, 0.0037134322, 0.0356526040, -0.0570515543, 0.0626114979, -0.0494673587, -0.0158921275, 0.0276541989, 0.0575835444, 0.0375756957, 0.0347778201, -0.0726483539, 0.0425709859, 0.0983320326, 0.0391974933, 0.0478796065, -0.0349393114, 0.0763873085, -0.0073700543, 0.0154367369, -0.0606039353, 0.0133522647, 0.0293500703, 0.0266553611, -0.0112043153, 0.0528238602, -0.0387508869, -0.0343692452, -0.0182141475, -0.0445774831, -0.1045987606, -0.0550553575, 0.0609652549, 0.0239026546, -0.0117606809, 0.0167195424, -0.0658868849, -0.0508476533, -0.0209435746, 0.0234783720, -0.0048350361, 0.0426602699, -0.0596736930, -0.0466668494, 0.0216855574, 0.0524646938, 0.0221808609, -0.0841061249, 0.0762087852, -0.0102696624, -0.0091337012, 0.0410450101, 0.0710876286, -0.0655234680, -0.0989963934, -0.0210464541, 0.0390670188, 0.0414599851, 0.0159184020, 0.0610065274, -0.0575010851, 0.0517712273, 0.0183360875, 0.0511803441, -0.0524208210, -0.0187405851, 0.0135771930, 0.0131535782, 0.0757446066, -0.0298291817, 0.0175155140, -0.0217441060, -0.0248064417, -0.0286624637, -0.0538985282, 0.0340370014, 0.0197881013, 0.0178561844, 0.0443552583, 0.0641030818, 0.0417532995, 0.0688539073, 0.0132282162, -0.0029321325, 0.0720861405, -0.0246982630, 0.0093190819, -0.0511109531, 0.0517656803, 0.0424044281, -0.0198148005, -0.0118448762, -0.0675614774, -0.0436276011, -0.0472602993, -0.0417255983, 0.0503813513, -0.0265106969, -0.0605167672, 0.0785625055, -0.0829188824, 0.0161931738, 0.0482274368, 0.0658926517, -0.0449530482, 0.0043170643, -0.0046040430, 0.0623557009, 0.0055002980, 0.0638980195, 0.0080763614, -0.0468576849, -0.0075246799, 0.0644437596, -0.0195532646, -0.0048430883, 0.0641050860, -0.0387356915, 0.0349844582, -0.0507359989, 0.0027839418, -0.0339695551, -0.0241870601, -0.0428675115, 0.0568035990, -0.0126057025, -0.0802111924, 0.0566061810, -0.0175920036, -0.0140681239, 0.0279932283, 0.0157064870, 0.0487156808, 0.0468855090, -0.0314786285, -0.0286901407, -0.0082130162, -0.0480396971, 0.0683336258, 0.0560410433, -0.0270921122, 0.0812178701, 0.0218400098, -0.0468116850, -0.0149743259, 0.0681366101, 0.0605615824, 0.0786192119, 0.0616861992, 0.0076437988, 0.0482133329, -0.0060355011, -0.0134868454, -0.0193081666, -0.0372907072, 0.0717901811, -0.0631891489, -0.0306290649, -0.0855769590, -0.0133757619, 0.0050150510, -0.0159208346, -0.0202194043, 0.0227659401, -0.0293894988, 0.0194132216, 0.0328003690, -0.0484862551, -0.0432774685, -0.0765064061, -0.0231449660, -0.0404628702, -0.0447258390, 0.0341944769, 0.0223489553, -0.0000562821, -0.0005884920, 0.0672802627, -0.0061874329, -0.0245496985, 0.0770737305, -0.0852312371, -0.0565455928, 0.0023454877, 0.0223838575, 0.0103645539, -0.0267270859, 0.0521859676, 0.0468215570, -0.0638550669, -0.0304707140, 0.0354020074, 0.0017802261, 0.0609101057, 0.0209571458, 0.0103944568, 0.0798617676, 0.0407786369, 0.0165108182, -0.0498426333, 0.0199457984, -0.0206267238, -0.0392864086, 0.0037140078, 0.0565297417, 0.0084360763, 0.0828288198, 0.0421003923, 0.0305307079, -0.0284975376, -0.0282677077, 0.0431990437, 0.0382459611, 0.0704830214, -0.0527470298, -0.0781281665, 0.0259487834, -0.0355708562, 0.0141120721, 0.0975991413, -0.0606078021, -0.0420698263, -0.0078226468, 0.0119387656, 0.0879946053, -0.0649476051, -0.0028280569, 0.0861660615, -0.0232218355, -0.0598944537, -0.0502357222, -0.0284190476, -0.0146697257, -0.0233713724, -0.0122019872, 0.0211198758, 0.0804201066, -0.0502829142, -0.0728736520, -0.0609198920, -0.0044138143, -0.0681026801, 0.0543082468, 0.0011272642, 0.0659650043, -0.0666712597, -0.0447291695, 0.0540919192, 0.0447490998, 0.0092427498, -0.0438166559, 0.0270145051, -0.0291253719, 0.0018752369, -0.0966166183, 0.0397138596, -0.0439575575, -0.0439106561, 0.0415256545, -0.0715130568, -0.0379840657, 0.0412271805, -0.0298972484, 0.0665078908, -0.0292301383, 0.0523676164, 0.0081430012, -0.0248738043, 0.0410354584, 0.0481704175, 0.0755306408, 0.0142501304, -0.0838388279, -0.0198182799, -0.0081742229, 0.0687068030, -0.0040726168, -0.0313428789, 0.0112600317, -0.0059925797, 0.0737936646, -0.0889966190, 0.0796032697, 0.0786104724, -0.0613940991, -0.0025790150, 0.0398721956, 0.0705125481, 0.0267936625, 0.0574076772, 0.0141888279, 0.0359448493, -0.0941245034, 0.0125092017, -0.0299773570, 0.0598009229, -0.0064993077, -0.0537091829, -0.0121605936, -0.0395701416, 0.0191400014, 0.0055563524, -0.0278719757, -0.0754028857, -0.0058576828, 0.0476336069, -0.0253925975, -0.0108425179, 0.0527949221, -0.0211551860, -0.0989429876, -0.0334937647, 0.0879905373, 0.0004673382, 0.0193994623, -0.0193183832, -0.0423506685, -0.0902360603, 0.0258032642, 0.0238342192, -0.0124756210, -0.0674863160, 0.0718627051, 0.0083504226, 0.0456367508, -0.0280576777, 0.0630951002, 0.0515308976, 0.0370179564, -0.0464131497, -0.0251280069, -0.0082110241, 0.0778867975, -0.0386485644, -0.0099764252, -0.0077949134, 0.0442545339, -0.0387498364, -0.0256561544, 0.0210789330, 0.0400526263, 0.0567150749, -0.0440570526, 0.0048817797, 0.0191921275, -0.0429838933, -0.0125449020, -0.0342083164, 0.0424858108, 0.0776680559, -0.0211033672, -0.0251486897, 0.0407253131, 0.0714846179, -0.0297259558, -0.0259788036, -0.0051469374, -0.0136863282, -0.0265996177, 0.0295937210, 0.0510794111, -0.0490673259, -0.0017080928, 0.0158381201, -0.0166603141, 0.0496223234, -0.0323588699, -0.0160350315, 0.0433902666, -0.0150162606, 0.0099359378, -0.0143935056, 0.0267422702, 0.0430363454, -0.0530928560, 0.0619577095, 0.0686496645, -0.0393176936, -0.0457182936, -0.0058540935, 0.0183440000, -0.0771811903, -0.0079002874, -0.0643924177, 0.0416182429, 0.0545980260, 0.0556106754, 0.0143443989, 0.0230668224, -0.0545433015, 0.0286639910, 0.0501391999, 0.0688496083, -0.0548207387, -0.0315646380, 0.0070072110, 0.0851405859, 0.0004995898, 0.0449701399, 0.0169880074, 0.0193572808, 0.0010546151, -0.0311099626, -0.0350983366, 0.0069352617, -0.0462301970, 0.0364882275, 0.0229554996, -0.0535150506, 0.0571688712, 0.0142454216, 0.0076411976, -0.0089016324, 0.0680155978, -0.0644179434, -0.0361885801, 0.0055372850, 0.0282553211, -0.0302462652, -0.0672751814, 0.0133260945, 0.0188964680, 0.0620585643, 0.0709109604, -0.0545997694, -0.0097230971, 0.0546746291, -0.0141586466, -0.0436591581, -0.0436634459, 0.0581242517, -0.0099066384, 0.0506416894, 0.0570546240, 0.0106995292, -0.0658024997, 0.0021536050, -0.0600619763, 0.0477201119, -0.0391627736, -0.0482409485, -0.0364328958, -0.0274576675, -0.0622038096, 0.0760245472, 0.0164356269, 0.0213305559, 0.0076464014, -0.0053259260, 0.0349452421, 0.0001035231, 0.0426821671, -0.0107197454, -0.0201280620, -0.0481981039, -0.0183836631, -0.0100014675, -0.0030461473, 0.0249198694, 0.0376234613, -0.0466168001, -0.0729182735, 0.0063639143, -0.0603040978, 0.0510040782, -0.0515267551, -0.0100341784, -0.0625440925, -0.0707179308, -0.0983225554, -0.0037570961, 0.0236925166, -0.0790113509, 0.0809660256, -0.0177442562, 0.0315660387, -0.0158167779, 0.0594875365, -0.0335138366, -0.0002572212, -0.0168574229, 0.0232917555, 0.0418993570, -0.0068729315, 0.0009349419, 0.0764195472, -0.0076854229, 0.0009865046, 0.0792085230, 0.0725703239, -0.0194167253, 0.0587185584, -0.0412875824, 0.0534942448, 0.0166190621, 0.0393554978, -0.0216224603, 0.0611041412, -0.0038620175, 0.0439212546, -0.0788580105, -0.0585427098, 0.0510023944, 0.0953008607, -0.0624945946, -0.0399419554, 0.0216990914, 0.0487740338, -0.0114121260, 0.0248461626, 0.0383627452, 0.0409297831, 0.0612845197, -0.0240614396, -0.0588576384, -0.0582618937, -0.0475625806, -0.0195161793, -0.0282935221, -0.0129283695, -0.0113630816, 0.0018745513, -0.0464549474, -0.0227088593, -0.0622219630, 0.0762052089, -0.0406414866, -0.0351168066, -0.0371496156, 0.0699347034, -0.0088048726, 0.0466693863, -0.0260088593, 0.0269364994, 0.0224289410, 0.0028222466, -0.0179340765, 0.0738523528, -0.0480253771, 0.0489148386, -0.0442749038, -0.0392545499, -0.0529538430, -0.0084034987, 0.0282796882, 0.0414944813, 0.0207296386, -0.0116109224, 0.0179992039, -0.0000167455, -0.0078322245, -0.0492400452, -0.0424147397, -0.0610607415, -0.0565780513, 0.0119423252, 0.0080616586, -0.0518106632, 0.0641278699, 0.0101005835, 0.0029487822, -0.0183070172, -0.0351140648, -0.0571652502, -0.0439494886, -0.0521479994, -0.0052487333, 0.0645753443, -0.0215812679, 0.0044804579, -0.0317663662, 0.0704678297, -0.0336180180, -0.0636096075, 0.0394256674, 0.0210468750, -0.0813334510, 0.0025724908, 0.0513447300, 0.0525304563, 0.0185962319, -0.0386077203, -0.0138124572, 0.0124974502, 0.0361678414, 0.0375309139, 0.0450647175, -0.0844397172, 0.0065710535, -0.0264115129, 0.0052990634, 0.0253557507, -0.0281857289, -0.0448123552, -0.0611960515, 0.0581534654, -0.0595195703, -0.0094375163, -0.0192810223, 0.0473680235, 0.0207278989, 0.0583794452, 0.0072873547, 0.0032936740, 0.0211969521, -0.0225433018, 0.0241132043, 0.0230267979, -0.0406582020, -0.0569477491, -0.0584734790, 0.0288649462, -0.0354950093, 0.0419919528, 0.0281636640, -0.0246472973, -0.0091368724, 0.0434239469, 0.0336642154, 0.0630437881, 0.0410709158, 0.0703984946, 0.0175512061, -0.0548528768, 0.0446486920, 0.0451148525, 0.0424998142, -0.0502818488, 0.0732045695, 0.0377321392, 0.0265509412, -0.0189403519, -0.0580938905, 0.0463176966, 0.0451619886, 0.0148920082, 0.0876261294, 0.0693155527, -0.0202332046, 0.0462419912, -0.0200120062, -0.0627748147, 0.0375649482, -0.0146766091, 0.0370926447, -0.0482837893, -0.0154444510, 0.0001512734, -0.0363767073, 0.0659624860, -0.0069330661, 0.0149630196, 0.0611360632, 0.0120630926, 0.0081617767, 0.0681208298, -0.0338702984, 0.0639528409, 0.0311812405, -0.0088159246, 0.0293293446, 0.0029120834, -0.0466305539, -0.0661787912, -0.0037797692, -0.0360322334, 0.0482697189, 0.0493895821, -0.0383175686, 0.0115522854, -0.0366353765, -0.0010052901, -0.0369257629, 0.0020960108, -0.0595316179, 0.0372530594, 0.0335848406, -0.0600804314, 0.0225028004, 0.0234695207, -0.0156046422, -0.0197485555, 0.0469034761, -0.0112498496, 0.0337951481, 0.0502529144, -0.0225650035, 0.0225675628, -0.0831994191, 0.0774075612, 0.0345300063, 0.0376329608, 0.0384501405, 0.0314031355, 0.0631498918, 0.0431851521, -0.0579933785, 0.0651903152, 0.0480428860, 0.0025025234, 0.0192814693, 0.0436783172, 0.0482673720, -0.0446673892, -0.0557677858, 0.0534087047, 0.0500559509, 0.0520664603, -0.0513589792, -0.0239471123, 0.0458446220, 0.0036214322, -0.0460346490, 0.0628953576, -0.0075284950, 0.0523913130, -0.0552817509, 0.0265998039, 0.0510487184, 0.0749371201, -0.0181195885, 0.0440970100, 0.0366482846, 0.0741051137, 0.0176086891, -0.0254613161, -0.0003232096, 0.0245467033, -0.0153758274, -0.0640940592, 0.0334316045, 0.0438488834, -0.0479654968, -0.0138331121, -0.0307809338, -0.0192273799, 0.0017238352, 0.0312143508, 0.0056466702, 0.0821553916, 0.0215140898, 0.0149590606, -0.0159666389, 0.0660076514, 0.0097070392, -0.0392348655, -0.0746018291, -0.0238498282, 0.0148036955, -0.0382094495, -0.0415877774, -0.0431558751, -0.0034063174, 0.0497308634, -0.0394631624, -0.0606111661, -0.0611440241, -0.0090205781, -0.0535199046, -0.0152450325, 0.0870122015, 0.0600544065, 0.0383232683, -0.0678246692, 0.0130670452, 0.0212018695, -0.0791808292, 0.0492071807, -0.0231350083, 0.0468401909, 0.0720244497, 0.0476311967, 0.0559587367, -0.0140350573, 0.0837341771, -0.0457607694, -0.0640579164, 0.0579940528, 0.0424001776, -0.0719981045, -0.0133165484, 0.0242355336, -0.0372311473, 0.0196020119, 0.0151687786, 0.0599975958, -0.0578698069, 0.0079399198, 0.0270586945, 0.0040400554, -0.0710832030, -0.0271523502, 0.0298840459, -0.0035327373, -0.0744914412, -0.0078911576, -0.0501131080, -0.0684872642, -0.0833363608, -0.0513302125, 0.0042267051, 0.0626666844, 0.0530301072, 0.0705645084, -0.0588692836, 0.0186384916, -0.0164425652, -0.0363784730, 0.0574463457, -0.0760762244, 0.0504272431, -0.0529708676, -0.0505044051, -0.0491535999, -0.0410961024, 0.0577288866, -0.0227142889, 0.0472547673, 0.0469131917, 0.0009184484, 0.0067421738, 0.0587543063, -0.0329086222, 0.0210220534, 0.0050629191, -0.0614678375, -0.0354909785, 0.0202591512, 0.0660840422, 0.0295088515, -0.0762860477, -0.0714756101, 0.0267378688, 0.0252489429, -0.0291873403, 0.0186864547, -0.0012242000, -0.0107427863, -0.0572048537, -0.0651320890, -0.0257316008, -0.0232230499, 0.0602991804, -0.0949982479, -0.0286019519, -0.0603674762, 0.0186586492, -0.0036277268, -0.0529606305, 0.0436540991, 0.0764713362, 0.0312843211, -0.0296464823, -0.0003011087, -0.0080772564, 0.0341391936, 0.0498131253, -0.0284406878, -0.0918074846, 0.0394191667, 0.0029094240, 0.0344870649, -0.0594241507, -0.0363649316, -0.0506586917, -0.0608698539, 0.0319764838, -0.0437488183, -0.0656976402, -0.0227414723, 0.0125946701, 0.0065504881, -0.0529414117, 0.0511654168, 0.0239666235, 0.0023917716, -0.0205435585, 0.0152901588, -0.0022068627, 0.0784281120, -0.0294831153, 0.0312893204, 0.0025971532, 0.0450642258, 0.0140891531, -0.0345717147, 0.0583068170, 0.0123277912, 0.0083532464, -0.0567509308, 0.0013361820, -0.0554096401, 0.0405372567, 0.0291731115, 0.0108503988, 0.0322791524, 0.0523011908, -0.0708674416, -0.0373053886, 0.0175320804, -0.0039485940, 0.0432699844, 0.0604413263, 0.0064476081, -0.0031340865, 0.0285735708, -0.0572917685, -0.0783511177, -0.0259806998, 0.0523809791, 0.0335818231, 0.0547311753, 0.0685576424, -0.0276720375, 0.0804231614, -0.0018410176, -0.0753295720, 0.0155839212, -0.0198957920, 0.0481804498, 0.0028967841, -0.0098170843, -0.0463401787, -0.0515154228, 0.0299447142, -0.0381504782, 0.0151532674, 0.0160414763, -0.0224886592, -0.0465291850, -0.0612371452, -0.0172831435, 0.0059255972, 0.0589638315, -0.0518825427, -0.0346461684, 0.0671922490, -0.0108776744, 0.0712711811, 0.0682229847, 0.0660178512, -0.0241931044, 0.0738198534, -0.0170615930, 0.0418023467, -0.0567677096, 0.0017929743, 0.0348373912, 0.0367049463, -0.0289809126, -0.0655148327, 0.0390156247, -0.0178165454, 0.0483228527, 0.0166447666, 0.0428498797, 0.0594963655, 0.0101136789, 0.0248006172, -0.0633430630, -0.0151155964, -0.0294541400, -0.0305804536, -0.0322138667, 0.0143098282, 0.0746354461, 0.0679922402, 0.0414305069, -0.0345688052, 0.0501189344, -0.0456155986, -0.0486491583, -0.0101642106, -0.0213777404, -0.0774691179, -0.0422912203, -0.0726693645, -0.0162262768, -0.0422855839, 0.0508335903, -0.0551260449, 0.0313162729, 0.0151199335, 0.0025484590, -0.0165267121, -0.0605201311, 0.0512402840, -0.0506054945, 0.0188746434, 0.0508595407, -0.0463036150, -0.0158321317, 0.0203162953, 0.0509738140, 0.0529402159, 0.0125359986, -0.0160920992, -0.0692722797, -0.0181684922, 0.0143135237, -0.0585754104, -0.0000475053, 0.0305403806, -0.0616812184, 0.0726598725, -0.0077053620, 0.0635323226, 0.0783887133, 0.0286843572, 0.0292441119, 0.0532846637, 0.0012042020, -0.0120285433, 0.0717033148, 0.0013692204, -0.0514946468, -0.0446950980, 0.0349252447, -0.0642853230, -0.0341850370, 0.0280285142, 0.0574761517, -0.0100948475, -0.0341030583, 0.0483452901, -0.0688726529, 0.0176787134, 0.0629504845, 0.0046552792, 0.0240590647, 0.0043870979, 0.0155119849, 0.0245335344, 0.0141800502, 0.0405111574, -0.0749765635, -0.0350190215, -0.0498317443, -0.0165932942, 0.0793443248, -0.0257600304, -0.0208645128, 0.0757903010, -0.0099353613, -0.0577610917, -0.0334779099, 0.0217515677, -0.0390014239, 0.0635381341, 0.0672469214, 0.0435460880, 0.0333396047, -0.0287246052, 0.0638715923, -0.0081895497, -0.0191539787, -0.0041978979, 0.0417928025, -0.0023935062, -0.0363935865, 0.0066417037, 0.0383469611, -0.0410390869, -0.0698106289, 0.0331099518, 0.0532459877, 0.0124780498, -0.0103371628, -0.0431699604, -0.0470885336, 0.0349028036, -0.0331719071, -0.0259140562, 0.0283011328, -0.0677604899, -0.0643039122, -0.0252360534, -0.0441743210, 0.0281433668, -0.0395373069, 0.0709502175, 0.0601148717, 0.0395395122, 0.0522029512, -0.0447610505, -0.0553911105, -0.0485429168, -0.0448292457, -0.0240009502, 0.0776192024, 0.0765749589, 0.0529852882, -0.0497445688, -0.0422398075, -0.0408585742, -0.0404112637, 0.0036486196, 0.0239094254, 0.0023743780, 0.0238302629, 0.0125126336, 0.0749787390, 0.0311911739, 0.0409895405, -0.0602486283, 0.0556924045, 0.0450605154, 0.0212589465, 0.0512479655, 0.0806176364, 0.0525400750, -0.0968000516, 0.0816915110, -0.0483913831, -0.0455383919, 0.0471874475, 0.0038103918, -0.0528739505, -0.0840775222, 0.0082792426, 0.0297535006, -0.0161297396, 0.0160268880, 0.0698232055, 0.0429623574, 0.0608716160, 0.0122043211, 0.0255052689, -0.0319557711, 0.0057453811, 0.0183078125, -0.0126882950, -0.0027775727, 0.0471670330, 0.0315055475, 0.0247155465, 0.0056974501, 0.0374690369, 0.0101279477, -0.0174296182, -0.0368988812, 0.0320029967, -0.0713681653, -0.0794666484, -0.0399618484, -0.0483100899, 0.0381515883, -0.0245231744, -0.0540744178, -0.0313248374, 0.0076452633, -0.0289591979, -0.0058950838, -0.0304411985, 0.0974136963, -0.0036276875, 0.0197030902, 0.0066647683, 0.0121173095, -0.0231743436, -0.0272635948, -0.0425412282, -0.0520221926, 0.0427463092, -0.0362088680, 0.0695991516, -0.0057197050, 0.0355000570, -0.0396887250, -0.0363666266, 0.0199809130, 0.1040252969, 0.0120311091, -0.0038132167, -0.0477717295, -0.0183652993, -0.0069760741, 0.0114237173, -0.0693706051, 0.0476263836, -0.0348524489, -0.0207147039, -0.0873968899, -0.0698826015, -0.0235727727, -0.0670231134, -0.0674394742, 0.0219006836, -0.0218196660, -0.0829595178, -0.0466620810, 0.0009974898, -0.0647467673, -0.0370078944, -0.0233465768, 0.0324025266, 0.0130771426, -0.0383635089, 0.0207266733, -0.0039512659, -0.0610934533, 0.0474699847, 0.0351806208, -0.0330081508, 0.0445185713, -0.0352186896, -0.0259633604, -0.0636448339, -0.0179864634, 0.0467267707, -0.0409264751, -0.0491193086, 0.0068724193, 0.0402134433, 0.0257936064, -0.0292047746, -0.0311825257, 0.0362157784, 0.0016544862, -0.0109100379, 0.0731135681, -0.0026274030, -0.0141938226, 0.0241527520, -0.0167988036, 0.0098253209, 0.0762983114, -0.0026580922, -0.0469634905, 0.0432951748, 0.0612308420, 0.0971786976, -0.0282446202, 0.0184493493, -0.0438411795, 0.0953063816, -0.0572973713, 0.0508807302, 0.0391612016, 0.0156458113, 0.0611495376, -0.0613520332, -0.0583630055, 0.0483556800, 0.0080447076, -0.0879987553, 0.0281696394, -0.0198056940, 0.0205677338, -0.0186193902, -0.0851169080, 0.0267476086, -0.0180075914, 0.0018891715, -0.0787743926, -0.0482686050, 0.0253193732, 0.0289402753, -0.0287794489, 0.0497436188, 0.0335775316, 0.0492558032, -0.0310739502, -0.0191791225, -0.0737275854, -0.0481502488, 0.0621512271, -0.0552982427, 0.0377119929, -0.0627565235, -0.0152024077, -0.0257157031, -0.0553286932, -0.0739365444, 0.0137787703, 0.0178151075, -0.0621931516, 0.0307994019, -0.0948266834, -0.0661320314, 0.0218845643, 0.0187370647, 0.0106718093, -0.0361907929, -0.0093551502, 0.0289260931, 0.0115995044, 0.0308764223, 0.0602147169, 0.0396330990, 0.0791061670, -0.0613818131, -0.0684605092, 0.0027584895, -0.0449590422, 0.0420137122, -0.0672672167, 0.0471703298, 0.0722008869, 0.0365294255, 0.0319245085, 0.0858577192, 0.0107796835, 0.0030032634, -0.0261017065, 0.0278858244, 0.0279859826, -0.0122272959, -0.0657041892, -0.0895583332, -0.0011213560, 0.0512967259, 0.0430924669, -0.0502514802, -0.0488614775, -0.0245758053, 0.0211900249, -0.0572582223, -0.0799029619, 0.0555883534, 0.0003673503, -0.0917609110, -0.0557479225, 0.0251986478, -0.0146019449, -0.0298581775, -0.0785488784, 0.0543319918, 0.0233835354, 0.0700741634, -0.0125704650, 0.0000471036, 0.0605697408, 0.0060569434, -0.0897491723, -0.0941637456, 0.0717885047, -0.0091407793, -0.0504231676, 0.0087272795, -0.1035069227, -0.0612321869, -0.0054406184, -0.0573574379, 0.0245476048, 0.0438427255, 0.0657004490, -0.0227969941, -0.0215580966, -0.0010999679, -0.0628029183, -0.0526766814, 0.0045367423, 0.0522867441, 0.0849803686, -0.0289342552, -0.0119709242, 0.0281551220, -0.0536954068, -0.0039508906, -0.0264415406, -0.0126397163, 0.0679707602, 0.0058658090, 0.0287767164, 0.0105271703, -0.0027849183, -0.0699709579, 0.0487310849, 0.0216375645, 0.0688189268, 0.0065039648, -0.0834466591, -0.0982528031, 0.0141735878, -0.0132580698, 0.0338336453, 0.0540453196, 0.0297671966, 0.0610425733, 0.0166599508, -0.0634541437, -0.0363533609, 0.0847247988, 0.0352556221, -0.0903770328, -0.0036843794, -0.0693051741, -0.0274509676, 0.0242123008, -0.0522474349, 0.0116559528, -0.0333235525, 0.0784653798, -0.0431516953, -0.0863713622, -0.0640487596, -0.0548510589, -0.0124391913, -0.0816646218, -0.0181492735, 0.0359329060, -0.0781056136, 0.0159803368, 0.0298321173, 0.0263613816, -0.1116747558, 0.0138416952, -0.0266010500, 0.1083725169, 0.1085219756, -0.0351781696, 0.0612894073, -0.0526116081, 0.0425121114, 0.0153915957, -0.0581493266, 0.0095990393, 0.0823621303, 0.0020447215, -0.0317173265, 0.0080216322, -0.0558809564, -0.0506329313, -0.0249515586, -0.0130564878, 0.0437147208, 0.0493005924, -0.0379705168, 0.0614346452, -0.0149945030, 0.0098640099, 0.0595515333, 0.0558484793, 0.0063213231, 0.0457552634, -0.0567549765, -0.0289692637, -0.0429835506, -0.0711692050, -0.0344185047, -0.0102647562, 0.0083213085, -0.0315197073, -0.0234624315, 0.0020704344, -0.0608604029, 0.0131639792, 0.0376810469, 0.0120143238, -0.0597013794, -0.0299018100, 0.0710926205, -0.0478366725, 0.0009610096, -0.0287418626, 0.0624590404, 0.0393180065, 0.0656957030, 0.0298362840, -0.0337075852, 0.0336627066, -0.0238344260, 0.0746868998, 0.0297073014, -0.0917045549, -0.0189457275, -0.0517209955, -0.0329960138, 0.0686031133, -0.0621709935, 0.0267833360, 0.0391342416, -0.0067453082, 0.0106741507, 0.0506519899, -0.0502373762, -0.0040164106, 0.0449312739, -0.0309837703, 0.0064565795, -0.0585861206, -0.0244854949, -0.0370105878, 0.0340226032, -0.0225599334, -0.0224196427, -0.0625981763, -0.0297383219, 0.0187320281, -0.0304762609, -0.0444231257, -0.0347619653, 0.0787946805, -0.0701478496, -0.0356885009, -0.0514833331, -0.0029544120, -0.0196297001, 0.0157219693, -0.0181823503, 0.0503602512, 0.0132638458, 0.0062654037, 0.0161949135, -0.0732902735, 0.0357508846, 0.0502638407, 0.0056976797, 0.0369372927, 0.0053488417, -0.0472285673, -0.0205554776, 0.0476358607, 0.0866546929, 0.0841804817, 0.0051299958, 0.0017095349, -0.0447974466, -0.0408506133, -0.0107649220, -0.0047683679, 0.0306141060, -0.0087796049, -0.0538968220, -0.0454637185, 0.0339707844, 0.0425873213, 0.0703267455, -0.0661396682, -0.0330237374, -0.0224161800, 0.0354768150, 0.0488471873, -0.0156383943, 0.0148142604, -0.0598153509, -0.0693356395, -0.0739606544, 0.0064099827, -0.0461946204, -0.0410764217, 0.0693216175, -0.0086061480, -0.0464949645, -0.0325952992, -0.0610939711, -0.0136957970, -0.0571165308, -0.0402873717, -0.0428426750, 0.0232658628, -0.0238952376, -0.0645380691, -0.0691474453, 0.0407744646, -0.0538405217, 0.0440029241, -0.0486936346, 0.0167647880, 0.0492396057, -0.0468732268, 0.0296484455, -0.0404450521, 0.0657112747, 0.0167821497, 0.0160694141, 0.0668773204, -0.0082096998, 0.0573154427, -0.0661455691, 0.0428981967, -0.0081777992, -0.0040413490, 0.0775372833, 0.0377925746, -0.0092149097, -0.0207939744, -0.0125578782, -0.0470994599, -0.0530484393, -0.0680870637, 0.0543383472, 0.0214157477, 0.0519689284, 0.0598306842, -0.0548119806, -0.0566031560, -0.0286904499, 0.0916815028, -0.0282760188, 0.0667696968, -0.0770047531, -0.0170792602, 0.0360604897, 0.0030560633, 0.0712039322, 0.0518174991, -0.0381045975, 0.0119872233, 0.0449419282, 0.0628245845, -0.0779292285, -0.0202078000, 0.0492544360, -0.0534043536, 0.0315386951, -0.0259230565, 0.0361447111, -0.0306717996, -0.0383518860, -0.0833936632, 0.0525544882, -0.0481191315, 0.0051905476, -0.0430718325, 0.0744109973, 0.0623623393, -0.0326742120, -0.0422614962, -0.0786270872, 0.0079742195, 0.0068817316, -0.0559101701, 0.0322933346, 0.0043259943, -0.0298590828, -0.0249007512, 0.0094682323, 0.0561339520, -0.0448895134, 0.0200272035, 0.0352613069, -0.0028590874, 0.0173536390, 0.0344444439, -0.0414188281, 0.0818501338, 0.0232571289, -0.0310805067, 0.0432868563, 0.0366703644, -0.0178239010, 0.0228524059, -0.0072907601, -0.0785593614, 0.0524609573, 0.0784459263, 0.0389583483, 0.0434505604, -0.0089386022, -0.0116555886, -0.0707835034, 0.0141342003, -0.0282590240, 0.0168872178, 0.0428223573, -0.0246021282, -0.0138809104, -0.0128865335, -0.0542531759, 0.0203125607, -0.0605437681, -0.0639186576, 0.1079648063, 0.0401409380, -0.0378194675, 0.0412530079, 0.0077832397, -0.0661157221, -0.0586454272, -0.0634950772, -0.0010351936, -0.0291727353, -0.0430319533, -0.0186884087, 0.0430107415, -0.0265990328, -0.0339563191, -0.0022740278, 0.0052729030, 0.0368316062, 0.0240352340, 0.0468591824, 0.0678473487, -0.0428368784, -0.0623297021, -0.0349826403, 0.0012998522, 0.0672401860, -0.0619025119, -0.0170547888, -0.0705961585, 0.0051735975, -0.0270769242, -0.0369141959, -0.0690782964, -0.0219081175, -0.0078736758, 0.0269894768, 0.0427093655, 0.0207491964, 0.0478038564, -0.0245256945, -0.0121442536, 0.0291557517, 0.0830888599, 0.0158212036, 0.0262972955, 0.0446338840, -0.0111370655, -0.0217163507, -0.0519280471, -0.0672829747, -0.0072094100, 0.0298853647, -0.0525626056, 0.0097316345, -0.0384491645, 0.0191189535, -0.0478509814, 0.0264922548, -0.0746094733, 0.0352092534, 0.0254700761, -0.0664139315, 0.0234020706, 0.0179250222, 0.0209615063, 0.0513274185, 0.0407140926, 0.0479232110, 0.0237637497, 0.0634343326, 0.0422840938, 0.0562640987, 0.0377236232, 0.0175243728, -0.0224803109, 0.0409610607, 0.0135789597, -0.0600988790, -0.0619204119, 0.0100707682, -0.0058372472, 0.0240170788, -0.0251639392, -0.0393674858, 0.0590402633, 0.0180438720, -0.0449568443, 0.0506433137, -0.0229777545, -0.0399122536, -0.0240505021, -0.0112528931, 0.0538887195, -0.0210367367, 0.0841904208, 0.0732022524, 0.0659868121, -0.0130421557, 0.0369152203, -0.0085958755, 0.0333072171, 0.0306438785, 0.0453323536, -0.0029128636, 0.0013904981, 0.0163505003, -0.0337688215, 0.0217925571, -0.0251912940, 0.0581151322, 0.0657463297, 0.0308483485, 0.0251834206, 0.0354480781, 0.0297011472, 0.0117454203, 0.0149649130, 0.0796762109, -0.0308801476, 0.0715613365, -0.0439631045, 0.0262860097, -0.0029779759, 0.0554203689, 0.0815401301, -0.0153041510, 0.0275538210, 0.0743445903, 0.0598904975, 0.0472666733, 0.0018009358, -0.0343290865, 0.0327511504, -0.0631883442, 0.0277294368, -0.0841797292, 0.0329011939, 0.0670104548, 0.0086294878, -0.0240020696, 0.0529876053, -0.0370612890, 0.0115828067, 0.0406522416, 0.0620106608, 0.0406383015, 0.0620143376, -0.0217183232, -0.0101932017, 0.0032073485, 0.0152125275, -0.0583314598, 0.0435560569, 0.0452201888, -0.0113877896, 0.0158680174, 0.0429634266, 0.0403568670, 0.0240147877, -0.0557214320, 0.0722722262, -0.0563160330, 0.0511333756, -0.0336787701, 0.0561803356, 0.0726011246, -0.0264034159, -0.0737810582, -0.0452315770, 0.0505113825, 0.0863398463, -0.0268042460, 0.0472989939, -0.0765195563, 0.0289040897, 0.0197102912, -0.0320242755, -0.0391196869, -0.0533097237, 0.0454890989, -0.0659436285, 0.0453830846, 0.0471343771, 0.0261413436, -0.0192772225, -0.0593573004, -0.0364464931, 0.0749037862, 0.0850872546, 0.0129910279, 0.0253685880, 0.0763073117, -0.0424169339, -0.0076007345, -0.0071609025, -0.0424763672, -0.0734101236, 0.0038550575, 0.0098470422, -0.0267258305, -0.0479623750, 0.0476302020, 0.0147110298, 0.0161557794, 0.0463478714, 0.0429444239, 0.0046042758, 0.0089899544, 0.0246678106, 0.0595512688, -0.0720080808, -0.0211098567, -0.0486541204, -0.0270622354, 0.0598008074, -0.0279779751, -0.0251874384, -0.0270222686, -0.0315959714, 0.0211912245, 0.0091914646, -0.0443236679, 0.0255291052, -0.0552831590, 0.0634651557, 0.0610758774, -0.0012072884, -0.0407352373, 0.0433600843, 0.0281052720, 0.0907503068, 0.0612594821, 0.0207801592, -0.0141177094, -0.0195331685, -0.0350995325, 0.0375895463, -0.0602076985, -0.0269501638, -0.0102586532, 0.0559083149, 0.0311153363, -0.0066123409, -0.0793864354, -0.0042325184, 0.0645791516, 0.0728129074, 0.0922325924, -0.0140917301, -0.0389180779, -0.0425224639, -0.0040832008, 0.0919876620, -0.0058850986, 0.0004414113, -0.0321066976, -0.0590012632, -0.0297894068, 0.0219667759, 0.0560750552, -0.0071462630, 0.0638096482, 0.0581944138, -0.0395053029, -0.0490851402, 0.0465902612, 0.0379997082, 0.0110575799, 0.0676105469, 0.0285411812, 0.0501868948, 0.0487608872, -0.0211349800, -0.0094441408, 0.0388549343, -0.0365379006, -0.0196589120, 0.0311868899, 0.0238193255, 0.0788492709, -0.0786722377, 0.0593579821, 0.0081689674, 0.0545978919, 0.0333951041, 0.0601963997, 0.0583787896, 0.0229948033, -0.0411534719, 0.0710731521, 0.0056884778, -0.0694409534, 0.0234193038, -0.0301964618, 0.0060632438, -0.0610270202, -0.0024476084, 0.0225343201, -0.0429787971, -0.0517870300, -0.0126230828, -0.0189135578, 0.0768340155, 0.0364435352, -0.0228436291, -0.0020608201, -0.0265554618, -0.0727484375, 0.0065572471, 0.0674274638, -0.0394568518, 0.0574320592, -0.0390298851, 0.0040645949, -0.0313929804, 0.0295555461, -0.0315398164, 0.0636407137, 0.0031992609, 0.0405034535, -0.0632691309, 0.0422046594, 0.0337654091, -0.0255838186, -0.0560243241, 0.0163118914, 0.0579878576, -0.0096517950, 0.0664687529, -0.0040719090, 0.0127756149, -0.0618402250, 0.0363122486, -0.0159648955, -0.0323564298, 0.0439604037, -0.0083714025, -0.0165075380, -0.0618517026, -0.0731605366, 0.0293482020, 0.0401234627, -0.0354718342, -0.0651092976, -0.0047810618, -0.0460317098, -0.0679746121, 0.0473783500, 0.0100001199, -0.0025168173, -0.0013087165, -0.0414917395, -0.0374345295, -0.0065051224, -0.0436915271, -0.0593701527, 0.0769212022, 0.0446310639, -0.0030191622, -0.0018838252, -0.0339405686, 0.0478557646, 0.0841786861, 0.0475125350, 0.0036700659, 0.0570234656, 0.0811185986, -0.0253324099, 0.0581682958, 0.0295299292, 0.0120532550, -0.0735550970, 0.0153679568, -0.0466809645, 0.0421230197, -0.0213987064, 0.0568914004, 0.0257623177, 0.0074482625, -0.0088673150, 0.0034642022, -0.0174567681, 0.0533538982, 0.0217991732, 0.0681889430, -0.0229583941, -0.0015944181, -0.0597770251, -0.0283933915, -0.0115030045, 0.0629936382, -0.0067494283, -0.0315605663, 0.0552074984, 0.0458059162, 0.0314705446, -0.0406545885, 0.0772174597, 0.0487084538, -0.0487374812, -0.0783450007, 0.0639542267, 0.0643191710, 0.0071479394, 0.0446821079, -0.0566546954, 0.0407815687, -0.0537657924, 0.0338639058, -0.0384280570, 0.0658959299, -0.0033369616, -0.0512302965, -0.0561087094, -0.0277352370, -0.0489858277, 0.0606977381, -0.0379917137, 0.0336307958, -0.0489755087, 0.0078958925, 0.0312337764, -0.0262563359, 0.0717574954, -0.0494022071, -0.0740180686, 0.0329019204, -0.0118239168, -0.0459083915, -0.0234711282, 0.0439071395, -0.0267660804, 0.0760007873, -0.0048733945, -0.0013549667, 0.0416306742, 0.0097444793, 0.0293985978, -0.0749048814, 0.0004416522, -0.0331408232, -0.0609155446, 0.0232174713, 0.0039330050, 0.0177472290, 0.0734323859, -0.0028193425, -0.0100712674, 0.0549687147, -0.0202978216, -0.0516776890, -0.0043312269, -0.0106633250, -0.0622016154, 0.0509897545, -0.0319331251, 0.0608094856, -0.0501276068, 0.0092976298, -0.0682914630, -0.0205723587, 0.0087155048, 0.0154436799, -0.0880877748, 0.0634902790, 0.0596619733, -0.0284197778, 0.0001165207, -0.0390971042, 0.0097505255, -0.0245018378, 0.0053335037, -0.0260764658, -0.0657058805, 0.0241847243, -0.0012977828, -0.0311341919, -0.0009500886, 0.0625783876, -0.0325841233, -0.0334848240, 0.0005559377, -0.0149502223, -0.0520379394, -0.0386935733, 0.0078824330, 0.0212036483, -0.0004978984, 0.0408839993, -0.0768748894, -0.0130090434, -0.0212067701, -0.0054518515, -0.0612144247, 0.0248042233, 0.0535502136, 0.0520945117, -0.0206335671, 0.0362018384, -0.0284359045, -0.0068802182, -0.0293569751, 0.0055763000, 0.0386999808, 0.0233252123, -0.0712194219, 0.0222865250, -0.0024701261, -0.0305135492, -0.0065926029, 0.0672256202, 0.0465350635, 0.0353661887, -0.0513657629, 0.0336562544, -0.0386098735, 0.0159303527, 0.0121696182, -0.0405344591, 0.0494259112, 0.0065236501, 0.0371602103, 0.0657357350, 0.0032252220, -0.0335047580, 0.0526749380, -0.0102714077, 0.0267287064, 0.0350562930, -0.0378894471, 0.0053906632, 0.0412398614, 0.0365481637, -0.0198170803, 0.0647123232, -0.0258335546, -0.0625242814, -0.0253288969, 0.0679989457, 0.0224152803, 0.0456170551, 0.0613862202, -0.0363073014, -0.0279204901, -0.0113852583, -0.0267300270, -0.0085964976, 0.0064398642, -0.0442086980, -0.0638877600, 0.0337603725, 0.0737025440, 0.0794379860, -0.0165534522, 0.0461107641, -0.0237303302, -0.0640513524, -0.0176281501, -0.0170922000, 0.0126382671, 0.0593113527, -0.0365934819, 0.0630602911, 0.0181673989, -0.0455058664, -0.0479266569, 0.0191702750, -0.0244560465, -0.0074737505, -0.0335444696, -0.0155998291, 0.0555362143, 0.0506360941, -0.0746315271, -0.0634632111, 0.0368118398, 0.0271090567, 0.0200547334, -0.0514973477, -0.0381461643, -0.0540239774, 0.0632623434, -0.0313545167, 0.0231299046, 0.0766945481, 0.0352050252, 0.0461666472, 0.0707242042, 0.0107629569, 0.0075776065, 0.0105707971, 0.0547486469, -0.0058091916, 0.0584191568, 0.0374548212, -0.0152145894, 0.0215136372, -0.0411705822, 0.0176645983, -0.0620181598, 0.0441548526, -0.0099024354, 0.0243351553, -0.0810227171, -0.0036707518, 0.0078242626, -0.0521424338, 0.0323543251, -0.0395539328, -0.0664397106, 0.0247121640, -0.0250111762, -0.0480623394, -0.0526220649, 0.0765955597, -0.0242825486, -0.0289425682, 0.0071976599, -0.0098974686, 0.0268429797, -0.0657840297, -0.0168344844, 0.0145947412, 0.0155625902, -0.0016633506, -0.0254849717, -0.0278036818, 0.0483374223, -0.0732533708, -0.0479641780, 0.0279132966, -0.0429362133, -0.0482929014, 0.0525965020, 0.0383412018, -0.0259570703, 0.0631852075, -0.0177078545, -0.0101291901, -0.0700966716, 0.0547256097, -0.0433839820, -0.0556438714, -0.0022005693, -0.0038249434, -0.0437498130, 0.0062591312, 0.0070048133, 0.0246693566, -0.0395471938, -0.0040298332, -0.0249316972, -0.0069596092, -0.0869663358, 0.0588778630, 0.0322120413, -0.0257878434, -0.0517953523, 0.0100588119, -0.0267750788, 0.0654866993, 0.0086153354, -0.0225521475, 0.0537299626, 0.0197400097, 0.0424879640, -0.0053442442, 0.0531550385, -0.0257629137, -0.0380619802, 0.0224303212, 0.0478801355, 0.0156311858, -0.0053012040, -0.0531692430, 0.0070098713, -0.0422547050, -0.0391190164, -0.0181544907, 0.0605699718, 0.0786975399, 0.0470982380, 0.0596680269, -0.0545244776, 0.0525242053, 0.0731874928, -0.0282023717, 0.0497218855, 0.0135325976, -0.0044893660, 0.0548177920, -0.0098906243, -0.0082918685, 0.0005119486, 0.0949483961, 0.0485555530, 0.0421134047, 0.0782467797, 0.0504496433, -0.0074203480, 0.0765318200, 0.0732168779, -0.0114061953, -0.0508335829, 0.0368279740, -0.0746152997, 0.0167540219, -0.0320380926, -0.0787964165, 0.0214499105, -0.0446318835, -0.0787223652, -0.0027068083, -0.0616274849, -0.0693335161, 0.0288000945, 0.0333954208, -0.0757650360, 0.0594786182, -0.0056733685, 0.0495286062, -0.0150915850, -0.0042908955, -0.0180142093, 0.0476970077, -0.0713213831, 0.0443637595, -0.0152329309, -0.0067755026, 0.0305210277, 0.0815294906, 0.0617988892, -0.0329651088, 0.0025011739, 0.0882279873, -0.0386332832, 0.0568941794, 0.0665917248, 0.0818911716, -0.0024856792, -0.0447726212, -0.0189133938, -0.0055316361, -0.0462651215, -0.0336508304, -0.0251767468, -0.0359284915, -0.0820546225, 0.0262015220, 0.0572258234, -0.0348216332, 0.0197834950, 0.0089853350, 0.0388301797, 0.0712737367, -0.0340065286, 0.0561317317, 0.0349053033, 0.0731332749, 0.0026820723, 0.0077143637, 0.0020358094, -0.0384580344, -0.0197383910, 0.0883384719, 0.0251228437, -0.0205374900, 0.0927586108, -0.0456804410, 0.0407515503, 0.0530312993, 0.0508770943, -0.0422111042, 0.0417623818, 0.0476574786, -0.0571179688, 0.0267948955, -0.0296176746, 0.0626597777, -0.0454000570, 0.0416114591, -0.0767709017, 0.0398974754, -0.0667636171, 0.0363732390, 0.0629975945, -0.0236164592, -0.0691259801, 0.0196852759, 0.0551998354, -0.0123338355, -0.0763734356, -0.0162299294, 0.0176765956, -0.0055872402, 0.0009509596, 0.0359030664, -0.0679474026, -0.0422333442, 0.0007408921, 0.0749607086, 0.0179188903, 0.0660699010, 0.0048475224, -0.0271317344, -0.0272253975, -0.0439065881, 0.0654677525, -0.0118647860, 0.0035110130, 0.0390027426, 0.0425173976, 0.0137528460, -0.0227820277, 0.0382852331, 0.0395566449, -0.0308041200, 0.0236350354, 0.0256596394, 0.0438516252, 0.0069878455, 0.0149763189, -0.0213505253, -0.0142447799, 0.0516584590, -0.0456832796, 0.0343481191, -0.0008173513, 0.0314758308, -0.0092185652, 0.0244766828, 0.0007777262, -0.0467697270, -0.0634775013, -0.0022092247, -0.0729498565, -0.0706856102, 0.0471623577, 0.0599648803, 0.0578244179, 0.0389715470, -0.0522208661, 0.0341850743, 0.0138083063, -0.0012507809, 0.0373397768, -0.0504057854, -0.0342594907, 0.0108142942, -0.0350806378, -0.0032352346, -0.0045006787, -0.0675312132, 0.0363901928, 0.0242473166, -0.0639666989, -0.0029555920, -0.0221016519, 0.0344409645, -0.0743397325, -0.0193152986, 0.0686489269, -0.0367939323, -0.0293783620, 0.0258393884, -0.0427539870, 0.0530134887, 0.0546392016, -0.0290633049, -0.0610924251, 0.0602386855, 0.0200858191, 0.0218242183, 0.0528653376, -0.0452758297, -0.0022816260, -0.0228499416, -0.0017301980, -0.0501116626, -0.0153823830, 0.0605069697, 0.0199630558, 0.0309057236, -0.0255204085, 0.0264395196, -0.0205733832, 0.0859774724, 0.0631816238, 0.0356537737, 0.0566790625, -0.0630088598, -0.0262617487, -0.0338299684, 0.0367503315, -0.0576339699, 0.0586173832, -0.0612796731, 0.0177694466, 0.0288291834, -0.0704164878, -0.0798161328, 0.0004909643, -0.0561903417, 0.0399024375, 0.0122610992, 0.0220323559, -0.0231431108, -0.0247457176, -0.0400110744, 0.0331594944, -0.0039313817, -0.0588455908, 0.0051125288, -0.0242039040, 0.0413556919, -0.0186401531, -0.0233630706, -0.0281693619, 0.0712885708, -0.0308601856, -0.0848871171, 0.0613874421, -0.0654378459, -0.0377581641, 0.0198357273, 0.0634618625, 0.0098960502, 0.0730491504, -0.0700536594, 0.0700827017, 0.0569737442, -0.0614836290, 0.0050430265, 0.0321940966, 0.0365352817, -0.0212023966, 0.0235704556, 0.0280660018, 0.0880057216, 0.0765715912, -0.0598112307, -0.0261373967, -0.0400624536, 0.0442089140, -0.0178146660, -0.0333013833, 0.0606927015, -0.0690371096, 0.0189002603, -0.0333029106, 0.0513871759, 0.0446696766, -0.0219482258, 0.0745380446, 0.0093792370, -0.0199267585, -0.0012852709, 0.0165095739, -0.0093457866, -0.0501047149, -0.0595958605, 0.0009110736, 0.0551794209, -0.0059676315, 0.0109562408, 0.0408451781, -0.0256032869, 0.0014227798, -0.0494549423, -0.0284806043, 0.0469841696, 0.0037268009, -0.0061415983, 0.0487173088, -0.0073478762, -0.0177893769, 0.0737658590, -0.0362554751, -0.0428155363, 0.0348570682, 0.0559899919, -0.0265409909, -0.0528644882, 0.0256590154, 0.0143628288, -0.0036903021, 0.0213041920, -0.0514657572, 0.0638612360, 0.0535243526, -0.0371751189, -0.0194767639, 0.0057499763, 0.0162083004, -0.0502303988, 0.0607647039, -0.0027177103, -0.0130527606, -0.0422520265, -0.0354085453, -0.0360393971, -0.0314339586, 0.0770483315, -0.0428466238, 0.0288332049, -0.0639811307, 0.0206557456, 0.0888077915, -0.0701862201, 0.0469166450, 0.0197655763, 0.0142408814, 0.0243708212, 0.0861750767, -0.0295798443, -0.0255261417, 0.0058608050, -0.0527901836, 0.0820503384, 0.0706963167, 0.0343809761, 0.0594918914, -0.0510387532, -0.0300701298, 0.0164504293, -0.0316550694, -0.0440866612, -0.0061970376, -0.0456726588, 0.0704423413, 0.0272812955, -0.0627366453, -0.0591772050, -0.0272258613, -0.0684909970, -0.0802874863, -0.0521070100, 0.0545439497, -0.0547567569, 0.0643593892, 0.0479914732, 0.0147492895, 0.0183146968, -0.0338593908, 0.0140140895, 0.0107679935, -0.0119322576, -0.0434624292, 0.0059888274, 0.0517345145, -0.0810676664, 0.0355508476, 0.0546923913, 0.0547716580, 0.0694619641, -0.0739967376, -0.0520783775, -0.0167672355, 0.0093648667, -0.0546152666, 0.0090643764, 0.0048668915, -0.0682507232, 0.0056809732, 0.0319744162, 0.0215368718, 0.0348492861, 0.0743500069, -0.0267632902, 0.0446443222, 0.0839030221, 0.0547921434, -0.0013221983, 0.0043626237, -0.0703042671, 0.0576003678, 0.0049669128, -0.0302120280, 0.0710353777, -0.0099771945, -0.0259003937, 0.0056878501, 0.0811652392, 0.0176625177, 0.0525900126, -0.0556894094, -0.0572983734, -0.0250803791, 0.0794964805, 0.0297728051, -0.0501328446, 0.0258527547, -0.0302704107, -0.0563186780, -0.0171016678, -0.0015457885, 0.0506130345, 0.0156566426, -0.0118352687, -0.0260212496, -0.0860570744, -0.0602821968, 0.0136639941, -0.0349989422, -0.0124972370, -0.0597642921, 0.0459376127, 0.0501259714, -0.0334015861, -0.0377126858, 0.0375198610, -0.0267922841, -0.0354553424, 0.0372739024, -0.0810237452, 0.0119804973, 0.0296156872, 0.0450539067, 0.0528666824, -0.0452536009, -0.0574214533, -0.0359358713, -0.0708891898, -0.0286589488, -0.0686083138, 0.0022520409, -0.0796646103, -0.0233646426, -0.0671354458, -0.0169635490, 0.0201002397, 0.0103139207, -0.0227903016, 0.0154058989, -0.0062847808, -0.0256393030, -0.0330182984, -0.0479120575, 0.0235993695, -0.0001952339, 0.0422714129, 0.0905220136, -0.0013067649, 0.0411549211, 0.0709752217, -0.0171348844, 0.0295801256, 0.0112948902, 0.0849289149, 0.0172201358, -0.0172098670, -0.0864064023, -0.0058446638, -0.0345064737, -0.0695764869, -0.0347679928, -0.0132935140, 0.0371991619, 0.0408722721, -0.0452632010, -0.0396212004, -0.0655922592, -0.0677403361, -0.0217966698, 0.0201527663, 0.0358635560, -0.0524280369, -0.0620025657, 0.0255350675, -0.0457042344, 0.0095830141, 0.0093558300, 0.0291829556, 0.0168155190, -0.0110101243, -0.0796993226, -0.0307565965, 0.0239434969, -0.0576147437, -0.0600531884, -0.0650108680, -0.0082578883, 0.0480850376, 0.0401881486, -0.0236438848, 0.0349621475, -0.0480589047, 0.0530189499, 0.0075351028, 0.0620592944, 0.0454346426, -0.0034099389, -0.0144330384, 0.0189096835, -0.0307064690, -0.0499582216, 0.0567680411, -0.0443743765, 0.0565184206, 0.0737200752, -0.0420145765, 0.0085661029, 0.0268269852, -0.0386597402, -0.0281776488, 0.0372489057, 0.0425568558, 0.0344463177, -0.0447603539, -0.0026751289, -0.0736169368, 0.0519893989, 0.0455234572, -0.0683523342, -0.0031681629, 0.0572985224, -0.0231737830, -0.0019317092, 0.0035013147, -0.0374475084, -0.0592796095, 0.0636137053, 0.0125131495, 0.0399940908, 0.0530541837, -0.0201911759, -0.0457812808, -0.0197096020, 0.0511260442, 0.0405521095, 0.0340235755, 0.0284179952, 0.0484168120, -0.0654312596, -0.0339585729, -0.0405791253, -0.0090773785, -0.0421802439, 0.0219122432, -0.0171803143, -0.0633154511, -0.0817310438, -0.0567762442, -0.0620334968, -0.0368453190, 0.0577390231, 0.0398580097, -0.0426651351, 0.0038396621, -0.0225106683, 0.0034180398, -0.0079016844, 0.0389122628, 0.0571572445, -0.0204730090, -0.0498884767, -0.0239107721, -0.0580407456, 0.0344790369, 0.0558088422, 0.0212243553, 0.0476521142, -0.0647771060, 0.0737534538, 0.0933677182, -0.0428886451, 0.0124227777, 0.0161438081, -0.0723962635, 0.0521870889, -0.0384500138, 0.0140171200, 0.0064264415, 0.0044132313, -0.0440698229, -0.0304213502, -0.0115592284, 0.0266970135, 0.0579535514, 0.0408000201, 0.0410058834, -0.0746070668, -0.0598007143, -0.0211696643, -0.0235898215, 0.0509313829, 0.0430547968, 0.0546544045, 0.0456140935, -0.0161668416, 0.0283697266, -0.0099049322, -0.0104794269, -0.0600555092, -0.0492338054, -0.0102614248, 0.0437115580, 0.0678375214, -0.0556169860, -0.0350230150, 0.0597705692, -0.0127367610, -0.0635318756, 0.0537992120, -0.0396171063, 0.0380399600, -0.0820597112, 0.0271926560, -0.0458295718, -0.0245940797, -0.0147357695, 0.0069350819, -0.0329760537, -0.0537938736, -0.0270027183, 0.0232831165, -0.0526738316, 0.0041555436, -0.0267813485, -0.0190409180, -0.0171129555, 0.0442510098, -0.0593590103, 0.0649615154, 0.0402798615, 0.0337874703, 0.0139491875, -0.0310594235, 0.0835988075, -0.0784064159, -0.1010204107, -0.0588070862, -0.0302913878, -0.0324436091, -0.0640138313, 0.0663581192, -0.0257736109, 0.0168628413, 0.0882749110, 0.0342749469, 0.0667545795, -0.0332355313, 0.0644593760, 0.0232580695, 0.0475033522, 0.0394778252, -0.0191500075, 0.0094727278, 0.0045807697, 0.0343988948, -0.0342139453, -0.0074638384, 0.0233415384, 0.0258917548, 0.0325175412, 0.0333769619, -0.0620996691, 0.0355533175, -0.0305569153, 0.0523183160, -0.0037552039, -0.0364814587, 0.0530915931, 0.0747883245, 0.0490108021, 0.0109020928, 0.0158752054, -0.0082351165, -0.0438303575, -0.0191329066, 0.0413515307, -0.0346548408, -0.0406660475, -0.0549321212, -0.0016377220, 0.0045650024, 0.0071460670, 0.0394166969, 0.0790572613, 0.0736643225, 0.0493354872, 0.0456085317, 0.0122060319, -0.0189942643, 0.0100262472, 0.0618245862, 0.0156165920, -0.0248659197, -0.0439142324, 0.0173221398, -0.0008526017, -0.0403503701, 0.0067012822, 0.0665933341, 0.0586667471, 0.0265531559, -0.0730059892, 0.0129295336, -0.0770233721, 0.0235029142, 0.0238946229, -0.0703709945, 0.0204995405, -0.0468104295, 0.0499031283, 0.0372162014, 0.0357201658, -0.0352198668, 0.0219724197, -0.0390129089, -0.0792596042, -0.0154926013, 0.0046740142, 0.0114279259, 0.0608440042, -0.0162230656, 0.0211305674, -0.0358214341, -0.0003403838, 0.0090751890, 0.0087327613, 0.0007042785, 0.0452666134, 0.0342136659, 0.0045236354, 0.0207599103, -0.0141193215, -0.0392672084, -0.0578140728, -0.0464960225, -0.0304317195, -0.0516936183, 0.0595522933, 0.0154171307, -0.0682458133, 0.0104864491, 0.0430264138, 0.0069560669, -0.0122510819, -0.0617470630, 0.0580138937, -0.0419954546, 0.0097604226, -0.0243940428, -0.0218611602, -0.0978532434, 0.0267736353, -0.0630164221, -0.0106831109, 0.0167153701, 0.0543407388, 0.0901455805, 0.0284901131, -0.0389029533, -0.0461325347, 0.0396613814, 0.0490799695, 0.0537721105, -0.0300829820, 0.0389968082, -0.0142188733, -0.0475495197, 0.0017498402, 0.0768173039, 0.0142347096, 0.0131155662, -0.0618237928, 0.0198229942, -0.0401691012, 0.0194757953, 0.0293643605, 0.0653576404, -0.0292663835, 0.0074131172, 0.0189898759, -0.0162059665, -0.0132551752, 0.0136217568, -0.0235038307, -0.0550447330, 0.0167160332, -0.0364636183, -0.0714319646, -0.0664496347, -0.0427750088, -0.0773058161, -0.0759262145, 0.0541073084, -0.0154650630, -0.0340264626, -0.0178817324, -0.0546573624, 0.0566930212, -0.0142161455, -0.0275826901, 0.0186649859, 0.0057681235, -0.0614431612, 0.0023284024, 0.0599692613, -0.0376616530, -0.0007452689, -0.0194221921, 0.0010086680, -0.0482291654, 0.0126127098, 0.0794346705, -0.0064420388, 0.0049475855, 0.0214864407, -0.0044992594, 0.0626978129, 0.0775226951, 0.0659262985, -0.0426364392, 0.0127242412, -0.0742910802, -0.0297651291, -0.0418844074, 0.0698359534, 0.0461016968, -0.0416890979, -0.0115481690, 0.0205910541, -0.0583994538, 0.0561412983, 0.0100581944, 0.0312156342, 0.0291416869, -0.0446074791, 0.0323369876, 0.0000153947, 0.0891934559, -0.0653213784, 0.0214367975, 0.0280416608, 0.0404969230, -0.0154278539, 0.0615130961, 0.0191887226, -0.0760614574, 0.0398062058, -0.0570454933, -0.0128482236, 0.0281916782, -0.0484162010, -0.0594849326, 0.0489136465, -0.0525360927, 0.0556680895, -0.0544144325, 0.0153910955, -0.0177346822, -0.0452753194, 0.0518974029, -0.0457073376, -0.0615962930, -0.0592372939, -0.0087510059, -0.0298461560, 0.0608973689, 0.0699651241, 0.0196124278, -0.0357849821, -0.0615521632, -0.0568527468, -0.0430635847, -0.0411891602, 0.0663353726, -0.0711900145, -0.0711974278, 0.0842303112, -0.0625008047, -0.0176316444, 0.0583834797, 0.0148112364, 0.0516185239, -0.0480582379, 0.0521044396, -0.0488360152, 0.0078257769, -0.0407558009, -0.0601253808, -0.0218095444, 0.0718296394, 0.0425931551, 0.0480788387, -0.0125036156, -0.0217523333, -0.0116980392, 0.0681595951, 0.0393686481, 0.0722871646, 0.0418773480, 0.0556911118, 0.0150674582, 0.0269219130, 0.0150900520, 0.0223546643, -0.0601139143, 0.0228841137, -0.0837192461, -0.0507508256, 0.0149978241, 0.0149991037, -0.0600204878, 0.0793007612, -0.0155125344, 0.0377368480, 0.0545776673, 0.0412160680, 0.0127325282, 0.0384092517, 0.0025457572, -0.0503762476, -0.0492995232, -0.0017810004, 0.0196700543, 0.0522189140, 0.0590478256, -0.0611805581, 0.0167500935, 0.0427529998, -0.0551388338, -0.0375298448, 0.0817884579, 0.0491907485, -0.0606590994, -0.0051579764, -0.0139891328, -0.0329054855, 0.0346371643, 0.0356779471, 0.0226372406, 0.0195820220, -0.0641392991, -0.0296447687, 0.0307062641, -0.0264764894, 0.0362778008, 0.0553591028, 0.0039527486, -0.0382224061, -0.0354537182, 0.0533604026, -0.0665044561, 0.0533577614, 0.0699222535, 0.0158193018, -0.0366780087, -0.0258027297, 0.0482011065, -0.0545399673, 0.0564057976, -0.0304202773, 0.0263616499, -0.0440313965, -0.0325764641, -0.0104512693, -0.0729091167, 0.0911965594, 0.0687824041, 0.0356125198, 0.0018309422, 0.0636325777, 0.0176928341, -0.0524024256, 0.0669076666, -0.0824694410, 0.0068501271, -0.0518670082, -0.0455827862, 0.0047009671, 0.0144177871, -0.0334636755, 0.0118040480, 0.0492006987, -0.0820289701, -0.0268831979, -0.0792796388, -0.0207029656, -0.0672247931, -0.0849801525, 0.0061440393, -0.0279379431, -0.0232450292, -0.0196564905, 0.0637286976, -0.0641677305, 0.1091791391, -0.0615944564, -0.0123027014, 0.0663943216, 0.0755425915, 0.0917365253, -0.0248028450, -0.0761871040, 0.0222394336, 0.0812377632, 0.0309695043, 0.0154737942, -0.0409832560, 0.0255479459, -0.0474625491, 0.0204412621, -0.0269252751, -0.0215120241, 0.0762263536, -0.0669276491, 0.0088827368, 0.0598662309, -0.0363507681, -0.0256993175, 0.0642645359, -0.0652977750, 0.0128966458, -0.0182007030, 0.0744153857, -0.0400030911, 0.0223862752, 0.0062010349, 0.0449238159, -0.0559057295, -0.0477451831, 0.0606941991, 0.0320499279, 0.0789983571, -0.0552596450, -0.0340612642, 0.0123929596, -0.0249653887, -0.0102478098, -0.0565346219, 0.0089681456, 0.0130681237, -0.0321191214, -0.0388932601, 0.0658523738, -0.0709722638, -0.0585792996, 0.0530694313, 0.0193708036, 0.0473963544, 0.0162628181, 0.0291254818, 0.0182414558, -0.0521677956, -0.0059986999, -0.0246600378, 0.0322227553, 0.0334488079, 0.0555778928, -0.0582437962, 0.0295708049, 0.0054839952, 0.0227872748, -0.0476030968, -0.0043875189, -0.0146720912, 0.0229472313, 0.0301443450, 0.0593126602, 0.0583225526, -0.0071811271, -0.0094437618, -0.0459388606, -0.0170617644, -0.0096442485, 0.0577920079, 0.0680175349, 0.0136862993, -0.0027511818, 0.0316045508, 0.0491931438, -0.0065418272, 0.0497761555, -0.0344968699, -0.0510109551, 0.0534720756, -0.0671668351, -0.0506913252, -0.0676267147, -0.0581698269, 0.0045669288, 0.0727114975, 0.0078459028, -0.0375569314, -0.0047899517, -0.0050649177, -0.0079200212, -0.0078902310, -0.0659974292, -0.0756567195, -0.0763767734, 0.0217826311, 0.0474273078, -0.0231276881, 0.0592473485, 0.0236203764, -0.0261021480, 0.0290654637, -0.0632709563, -0.0286038909, 0.0262169391, 0.0220298003, 0.0034016573, -0.0184150524, -0.0034388509, 0.0368602611, 0.0494391546, -0.0477529466, 0.0330327302, -0.0024945610, 0.0036798168, -0.0178019498, 0.0146282250, -0.0187770873, 0.0787364766, 0.0298893694, -0.0249997675, 0.0172561519, 0.0125734052, 0.0045702495, -0.0642833635, -0.0149668101, -0.0590998791, 0.0713836029, -0.0124027552, 0.0172027703, -0.0182258245, -0.0519590341, -0.0755291283, -0.0475958176, 0.0159001034, 0.0700390190, -0.0716884136, -0.0113321533, 0.0268936194, -0.0449807197, 0.0476487540, 0.0031806370, -0.0189821590, -0.0047871871, -0.0767048299, 0.0491145253, -0.0117249778, 0.0219565034, 0.0429263525, -0.0176499933, -0.0361501314, 0.0150526715, 0.0634046867, -0.0193158351, -0.0631306097, 0.0326832533, -0.0260537099, -0.0275845528, -0.0205545165, -0.0937738046, -0.0069183004, -0.0468162559, 0.0124695739, -0.0369382203, 0.0454746038, 0.0308012590, -0.0498011708, 0.0418911874, -0.0672358200, -0.0524510629, -0.0319429189, -0.0457024388, -0.0521320589, 0.0551443882, -0.0411952101, 0.0264098588, -0.0086065168, -0.0087672807, -0.0437050499, 0.0229865685, -0.0392266847, -0.0529829375, -0.0345910080, -0.0131460233, -0.0668769851, 0.0817761794, -0.0244186427, 0.0555211417, -0.0173338968, -0.0068060281, -0.0030520842, 0.0668756217, 0.0238281526, -0.0234790426, 0.0765407532, 0.0264579952, -0.0982682705, -0.0654680505, 0.0899108350, -0.0331260376, -0.0278750937, -0.0510693491, -0.0024189916, 0.0538556054, -0.0390676521, -0.0127674937, -0.0263584256, -0.0639226884, -0.0780140236, 0.0460837819, -0.0480511039, 0.0133875757, 0.0601460300, 0.0346821547, 0.0057402886, -0.0460025072, 0.0576145947, 0.0920975879, 0.0668940097, 0.0653622225, 0.0524867624, 0.0382352918, 0.0288764071, -0.0698475987, 0.0218951553, -0.0130920550, 0.0346078090, -0.0504969507, -0.0493356511, 0.0192529652, 0.0544348359, 0.0585997887, 0.0674387068, -0.0590245910, -0.0001779729, 0.0464247167, 0.0097560901, 0.0247555505, -0.0596840046, -0.0231250077, -0.0378269516, 0.0390577540, -0.0356318504, -0.0554389693, 0.0170079228, -0.0080285165, -0.0520672761, 0.0243251249, -0.0050292639, -0.0068363738, 0.0750962868, 0.0655637830, 0.0226705950, -0.0592930354, -0.0434096493, 0.0655771941, 0.0526943468, -0.0403168313, 0.0866693929, 0.0341238417, 0.0208296143, -0.0037561138, -0.0515483357, 0.0489005446, -0.0464881808, -0.0138259707, -0.0183647908, -0.0357440040, 0.0584737249, 0.0692969859, -0.0221630149, 0.0558781363, -0.0021874516, 0.0357663184, 0.0717319772, 0.0146651994, 0.0047542918, 0.0130185289, 0.0781863779, 0.0444587544, 0.0495699011, -0.0435830951, -0.0533465631, -0.0537181832, -0.0537165664, -0.0582758561, 0.0426200107, 0.0390585698, 0.0705457106, -0.0452381521, -0.0442765802, 0.0335844345, 0.0002642187, -0.0159408189, 0.0619669594, -0.0736254901, 0.0009556751, -0.0003248405, 0.0412934534, 0.0340959132, 0.0101468973, 0.0896530449, 0.0208389089, 0.0328391604, -0.0871676952, -0.0132821053, 0.0327542946, 0.0048864256, 0.0674138665, -0.0075002401, 0.0063920831, -0.0719693601, -0.0147904009, -0.0352800861, 0.0298251659, 0.0474714376, 0.0039425334, 0.0232840572, -0.0679467395, 0.0795908719, -0.0415936559, 0.0253384560, 0.0356150270, 0.0160051156, 0.0288741887, -0.0238410793, 0.0149003258, -0.0656850040, -0.0351173803, 0.0155310668, -0.0170666613, 0.0028800818, -0.0202345811, -0.0487258285, -0.0529662035, 0.0406850316, -0.0154366493, 0.0495155267, -0.0324812755, -0.0151269697, 0.0501015373, -0.0189897418, 0.0400308892, -0.0372309238, -0.0241263192, 0.0358431824, -0.0277740788, 0.0275369827, 0.0593617968, -0.0163486097, -0.0538912825, -0.0695013404, 0.0731204972, 0.0041365209, -0.0252275933, -0.0052531790, -0.0127929347, 0.0545425005, 0.0077635734, -0.0675165653, -0.0346038602, -0.0739478320, 0.0276329033, 0.0397074670, 0.0163295660, 0.0449672006, 0.0382674448, 0.0203417912, -0.0095610684, 0.0097784791, -0.0440175533, -0.0407786518, 0.0635622665, -0.0008466257, 0.0588831715, 0.0032956949, -0.0225171801, 0.0300499853, 0.0038460591, 0.0033801696, -0.0580567755, -0.0333472751, 0.0391657948, -0.0371991843, -0.0250174012, 0.0323803239, 0.0642777085, -0.0153221646, -0.0075440537, 0.0220071450, -0.0435402244, 0.0527591296, 0.0492875092, 0.0246724095, 0.0596947372, 0.0384089500, 0.0071770884, 0.0050543519, -0.0040692929, -0.0661147386, -0.0281602349, 0.0171204973, 0.0678222552, 0.0364811197, -0.0148904026, -0.0262547173, 0.0755997822, -0.0263375677, 0.0247892514, 0.0513460115, 0.0611062013, -0.0336925797, 0.0405319594, -0.0355427191, -0.0192581862, 0.0245733298, 0.0233313981, 0.0323739238, 0.0035918006, -0.0097719645, -0.0417937003, -0.0719225332, 0.0419430435, -0.0018370678, -0.0146236047, -0.0359661691, -0.0679659620, -0.0502610765, -0.0075246496, -0.0393247232, 0.0560022257, 0.0250835456, 0.0448107421, 0.0501710251, 0.0516659915, 0.0218680687, 0.0395987518, 0.0675249025, -0.0314995088, -0.0841811299, 0.0342352279, -0.0508505255, -0.0774532259, 0.0212213770, 0.0325476080, -0.0376337096, 0.0499272980, 0.0517990403, 0.0178843345, -0.0133171342, -0.0426712967, 0.0068336050, 0.0144172292, 0.0156401321, -0.0357844532, 0.0509221554, -0.0181079134, -0.0612666309, -0.0216692351, 0.0238499455, -0.0130781736, -0.0062207412, 0.0414098352, -0.0295192562, 0.0063495291, 0.0362925306, -0.0322776437, 0.0382572301, 0.0371850580, 0.0346693695, 0.0243202951, -0.0329302549, 0.0733947530, 0.0022429845, -0.0102957664, -0.0446808226, -0.0751631781, -0.0515678003, 0.0862273201, 0.0052070078, 0.0201131906, -0.0243324749, -0.0257243142, 0.0232848600, 0.0199291185, -0.0370826535, -0.0020996130, 0.0000606493, -0.0349200144, -0.0318753049, 0.0294794627, -0.0651052222, -0.0069334023, -0.0274980143, -0.0181120653, 0.0842783377, 0.0603019744, -0.0347183086, 0.0472222678, -0.0881863236, 0.0017529002, -0.0525411032, -0.0727419555, -0.0386460721, 0.0488804318, 0.0225539245, -0.0645203665, 0.0444233380, -0.0467402451, 0.0868369490, 0.0025063709, -0.0101520233, 0.0811187252, -0.0401785746, -0.0714771748, 0.0596617348, -0.0340797752, 0.0762129501, -0.0575766228, 0.0930321813, -0.0797929838, -0.0531988852, -0.0280552916, -0.0665635765, 0.0033559403, 0.0527579747, -0.0266884528, -0.0616917908, 0.0215993728, -0.0139893293, 0.0495932177, 0.0152964462, -0.0575093292, -0.0357895754, -0.0647736862, -0.0340993740, 0.0296920221, 0.0423580073, -0.0675929487, -0.0456074886, -0.0844949186, -0.0186861120, 0.0746739805, 0.0631058365, 0.0001294137, 0.0501457825, -0.0540494174, 0.0154842110, 0.0575599000, -0.0424000174, 0.0267678555, 0.0808999687, -0.0304655377, 0.0105171157, -0.0248459410, 0.0021974412, 0.0447107814, -0.0250313468, 0.0740534365, 0.0885207430, 0.0444605276, 0.0035377475, 0.0485893041, -0.0700254962, -0.0822065175, -0.0384447165, -0.0430958271, 0.0112691903, 0.0301360041, 0.0267661214, -0.0817954019, -0.0697959438, -0.0654165074, 0.0926705450, 0.0056597083, -0.0273257885, -0.0507224239, -0.0136043914, -0.0373687185, 0.0257172398, 0.0865811855, -0.0436262116, 0.0305583347, 0.0197133143, 0.0282806363, 0.0150852408, -0.0183187742, -0.0369002074, 0.0278182328, -0.0264577456, -0.0329402387, -0.0218047146, 0.0651474148, 0.0499489382, 0.0377747267, -0.0475465395, -0.0311858784, -0.0311608296, 0.0390773527, -0.0248099379, 0.0035481504, -0.0241501797, 0.0065813954, -0.0017477975, 0.0536861867, -0.0458426699, -0.0152956648, 0.0757533386, -0.0147875156, 0.0001424314, 0.0198212638, -0.0287513975, -0.0147110363, -0.0817246139, -0.0090204393, -0.0126835275, -0.0384526365, -0.0493227541, -0.0400089659, -0.0235747155, -0.0023367167, 0.0206268001, 0.0659910962, -0.0191409402, 0.0260571018, -0.0726135448, -0.0236571934, 0.0154248336, 0.0232203715, 0.0305861309, 0.0268447232, -0.1059670076, 0.0345352143, -0.0773309320, -0.0601572543, -0.0114954971, -0.0231563542, -0.0092278011, 0.0030232323, -0.0595823564, -0.0371886343, -0.0592615083, 0.0361774303, -0.0100692390, 0.0286214873, -0.0140282642, -0.0470183231, -0.0639976561, 0.0421516672, 0.0792528018, 0.0358198695, -0.0302449372, 0.0113253249, -0.0603002384, 0.0736152157, 0.0271814112, -0.0334468111, 0.0595764853, 0.0316534936, -0.0589658134, -0.0408902057, 0.0063523846, 0.0226198304, -0.0232580118, 0.0019930806, -0.0214439686, 0.0178652573, 0.0481801815, -0.0111990003, 0.0415598862, -0.0343204960, 0.0755715966, 0.0551817492, 0.0392097756, 0.0240509640, -0.0637699291, -0.0322583430, -0.0150165409, 0.0819648579, 0.0592038073, -0.0252294708, -0.0498846695, 0.0206652153, 0.0293541159, 0.0066121765, 0.0156464130, -0.0315223709, 0.0869638622, -0.0270661730, 0.0165658239, -0.0245763361, -0.0152996192, -0.0323276669, -0.0256447252, -0.0051000724, -0.0703436211, 0.1014686301, -0.0498923175, 0.0130563173, -0.0493218042, 0.0312873349, 0.0727761984, -0.0413612388, -0.0635183528, 0.0425300784, 0.0587868579, -0.0573202483, -0.0107119912, 0.0186660308, -0.0446733795, -0.0622461736, 0.0052776048, -0.0029507657, 0.0679557770, -0.0522872321, 0.0354502797, -0.0545600094, 0.0260149762, 0.0183549765, 0.0526196323, 0.0488761961, -0.0031601281, -0.0753847286, -0.0466358662, -0.0584220923, 0.0542926975, -0.0783869177, 0.0425415374, -0.0730771944, -0.0715457648, -0.0631413907, -0.0544404946, -0.0643276125, -0.0578568168, 0.0645437986, 0.0410083719, -0.0792402178, 0.0458514392, -0.0372513346, -0.0676043853, 0.0444660969, -0.0204352066, 0.0121507300, 0.0433063619, 0.0187904760, 0.0378575474, -0.0447868444, 0.0498043895, 0.0055162315, -0.0423963405, 0.0391288474, 0.0305912215, 0.0566252694, 0.0528292432, -0.0258087795, 0.0198293254, 0.0009253006, -0.0242892019, -0.0826602280, -0.0537156425, 0.0472188294, -0.0142223584, 0.0284365676, -0.0247033946, 0.0429068394, 0.1011896059, -0.0522335619, 0.0048824786, 0.0619407743, -0.0399247631, -0.0036093942, -0.0038342392, 0.0746891201, 0.0538728759, -0.0380938016, -0.0165288858, -0.0322147906, 0.0994561240, 0.0179586541, -0.0222284980, -0.0367576294, 0.0021686142, -0.0293335840, -0.0493855700, 0.0397263654, -0.0488787927, -0.0805142000, 0.0104164788, -0.0460624322, 0.0548999235, -0.0617479533, -0.0787866563, -0.0682910010, 0.0474435613, -0.0591290034, 0.0219838992, 0.0369214378, 0.0197932590, 0.0633768067, 0.1053249538, 0.0728392601, 0.0880938321, 0.0335993841, -0.0436737873, -0.0590339862, 0.0016570208, 0.0753581747, 0.0163990241, -0.0704052597, -0.0358260833, 0.0729286373, -0.0097467946, 0.0935298949, -0.0586677454, 0.0601169653, -0.0169783998, 0.0081769433, -0.0028475993, 0.1025649235, -0.0104689067, -0.0138811162, 0.0598444641, -0.0085916482, -0.0018440670, -0.0069364347, -0.0469482988, -0.0025445626, -0.0566830300, -0.0478265099, 0.1011023894, -0.0675674304, 0.0085194409, 0.0907497779, -0.0580449216, 0.0074865511, -0.0990448371, 0.0351367854, -0.0301012043, -0.0513832085, 0.0513083339, 0.0509686545, 0.0688080639, -0.0447194763, -0.0003690355, -0.0435208902, -0.0326073803, -0.0320298076, -0.0153627619, -0.0177456867, -0.0263727829, 0.0656904131, -0.0524605699, 0.0086088963, -0.0121724010, -0.0625954792, 0.0311209131, -0.0291537903, -0.0724874139, 0.0545919612, -0.0011603204, -0.0543599911, 0.0076243156, 0.0124519989, 0.0804513767, -0.0232651588, 0.0496288538, -0.0175560061, 0.0010927414, -0.0501185767, 0.0449809358, -0.0187513027, 0.0159599129, -0.0400621705, 0.0076315845, -0.0036634919, 0.0033601876, 0.0989665464, -0.1079514474, -0.0278496109, 0.0780520216, 0.0871424675, 0.0192278232, 0.0589278005, -0.0141577674, -0.0098332120, 0.0691414773, 0.0199849866, -0.0486576222, 0.0358810388, 0.0512031503, -0.0266924500, -0.0543815233, -0.0636316165, 0.0112847723, -0.0410873070, -0.0842403024, 0.0722609907, -0.0350223258, -0.0642943904, 0.0169959981, 0.0595670864, 0.0180472452, -0.0034871732, 0.0665101483, -0.0330766328, 0.0127501795, 0.0475771613, -0.0430499688, -0.0604494214, 0.0251269806, -0.0053735557, -0.0566433258, 0.0008456941, 0.0003267992, 0.0393238068, -0.0971287787, -0.0778931826, 0.0909983739, -0.0588756502, -0.0569172278, 0.0283259489, -0.0549562089, 0.0226344671, -0.0318749212, 0.0313058645, 0.0092380997, 0.0218313690, 0.0455445237, -0.1016566083, 0.0413223878, 0.0079010613, -0.0340709165, 0.0592910089, -0.0499879569, 0.0056525408, 0.0543692745, -0.0808939412, 0.0516772978, 0.0185646918, -0.0043359362, 0.0310507510, -0.0800212473, -0.0043234201, 0.0140330726, 0.0369801074, 0.0232967157, -0.0181391444, 0.0458946787, -0.0616416782, 0.0283585265, -0.0854846239, -0.0288850870, 0.0919463634, -0.0503357425, 0.0340573229, -0.0343161300, -0.0523286425, -0.0266505573, -0.0302170329, -0.0757440254, 0.1000832915, -0.0506859310, -0.0664916933, -0.0326503552, 0.0596200973, 0.0193885211, -0.0997912213, 0.0550324768, -0.0384473763, 0.0534241386, 0.0673895180, -0.0410402790, -0.0503821373, 0.0591559820, 0.0494286828, -0.0499123670, 0.0079070255, -0.0570036024, -0.0146284793, 0.0211313982, 0.0039148880, 0.0645210966, 0.0002512911, 0.0126467766, 0.0049860347, -0.0183808189, -0.0674002916, -0.0196671747, -0.0046262364, 0.0354523547, 0.0207037758, -0.0332001485, -0.0061401743, 0.0052323896, -0.0255205184, 0.0339712910, 0.0189167969, -0.0061094351, -0.0076742643, -0.0484540872, 0.0156926755, 0.0045304056, -0.0635780171, 0.0300072078, -0.0233781841, 0.0322140902, 0.0002942467, 0.0588594042, -0.0245338809, 0.0004393626, 0.0039931708, 0.0712160990, -0.0022135759, 0.0314106122, 0.0456740409, -0.0180030763, 0.0676440075, -0.0420324430, -0.0452537537, -0.0326643847, -0.0404490270, 0.0456425212, -0.0461353138, -0.0431500562, 0.0628301278, -0.0242838934, -0.0563014075, 0.0149043696, 0.0203308593, 0.0669489577, 0.0547523424, -0.0223571546, -0.0340880677, 0.0158116464, -0.0688678697, 0.0428225808, 0.0283820145, -0.0579311848, 0.0239194296, -0.0715313107, 0.0472800620, 0.0024175581, 0.0796407089, 0.0537873022, -0.0227513053, 0.0245344788, 0.0240493473, -0.0482583344, 0.0477479436, 0.0491588786, -0.0233503077, -0.0028403273, 0.0578897297, 0.0298539307, 0.0660835132, 0.0515523255, -0.0742061734, 0.0490555614, 0.0249264501, -0.0432481989, -0.0125504676, -0.0386597998, -0.0482763164, -0.0393204503, 0.0218683239, 0.0490886755, 0.0516335033, -0.0314501077, 0.0070797293, -0.0508860461, -0.0538738631, 0.0134485411, 0.0109858224, -0.0453808494, 0.0621363744, -0.0013741868, 0.0582253672, -0.0644015223, 0.0369766466, -0.0448306575, 0.0544904210, 0.0264468621, -0.0660763830, -0.0081102187, 0.0743668303, 0.0274838265, 0.0620460473, -0.0624925457, -0.0516364612, 0.0068559851, 0.0892377496, 0.0487056561, 0.0547684245, -0.0414140187, -0.0611735694, -0.0399745665, 0.0221778937, -0.0416697003, -0.0351447873, 0.0694881454, 0.0909674987, 0.0218911860, -0.0016680375, 0.0451593660, -0.0458047539, 0.0098389760, 0.0594675951, -0.0297140107, 0.0690755025, -0.0207763221, -0.0372448824, 0.0241210628, 0.0196292251, 0.0462452173, -0.0488970913, -0.0338675864, 0.0456684008, 0.0002249008, 0.0501829833, 0.0615470856, -0.0842263997, 0.0133435298, 0.0656557083, 0.0350367464, -0.0113226576, -0.0634520650, 0.0518993624, 0.0408961251, -0.0499045216, -0.0721843615, 0.0020692560, 0.0480174236, -0.0003745070, 0.0522136725, 0.0356700271, 0.0027778179, 0.0242339075, 0.0431992672, 0.0322595350, 0.0486729853, 0.0384175852, 0.0112896869, 0.0243814513, 0.0030296117, 0.0886789709, -0.0031377529, -0.0105290478, -0.0157138109, -0.0661707669, 0.0380346514, -0.0240124967, 0.0267539080, 0.0364337191, 0.0421723425, -0.0502135195, -0.0108279167, -0.0044901683, 0.0583642982, -0.0583564378, 0.0995366648, -0.0075725997, -0.0128033366, -0.0015358177, 0.0093927626, 0.0774565190, -0.0309261139, 0.0109824771, 0.0425272994, 0.0248817466, -0.0550879277, -0.0040504816, -0.0413675793, 0.0318534337, 0.0454899780, 0.0507354923, -0.0373918079, 0.0377380364, 0.0500065498, 0.0465226620, -0.0835777819, -0.0487504192, -0.0577968881, -0.0260871127, -0.0328000635, 0.0195164680, -0.0280688461, 0.0336634256, 0.0640627369, 0.0282666944, 0.0618811585, -0.0561368465, 0.0348778814, -0.0224847645, 0.0238746386, -0.0288730096, 0.0187464580, -0.0179161541, 0.0006211949, 0.0684764609, -0.0250185132, -0.0134378439, 0.0369847193, 0.0631840453, -0.0521254875, -0.0011281278, 0.0677900836, 0.0202844236, -0.0631252155, -0.0327148773, 0.0677334592, -0.0655850917, -0.0520053767, 0.0187004637, -0.0261089839, 0.0592484362, 0.0538150035, 0.0415770002, 0.0036174976, 0.0045259921, 0.0166656002, -0.0704834014, 0.0120532513, 0.0410886817, 0.0534637570, 0.0718374476, -0.0596628487, 0.0165803265, 0.0779451579, 0.0679010749, -0.0674302876, -0.0654691309, -0.0592396632, -0.0071738809, -0.0230890512, 0.0106642675, -0.0723241568, -0.0604219474, -0.0124387247, -0.0046925331, 0.0469495133, 0.0726377368, 0.0317516625, 0.0354632437, 0.0081915455, 0.0274103303, 0.0044440096, 0.0204069149, -0.0047916905, 0.0490989573, 0.0294767357, 0.0596887432, 0.0574493185, -0.0161701739, -0.0362080336, 0.0227637328, 0.0556089580, -0.0724892393, -0.0829987451, 0.0738702863, -0.0506385639, -0.0357202142, -0.0794617161, 0.0351216532, -0.0084947422, -0.0422585495, 0.0010405424, 0.0130042024, -0.0551575646, -0.0670117736, -0.0168991908, 0.0156840812, -0.0125373490, 0.0931783542, -0.0204068236, -0.0747321099, -0.0547383353, 0.0622880496, -0.0074357712, 0.0138228741, -0.0386029370, -0.0289560221, -0.0161353443, 0.0364387333, -0.0611957088, -0.0609232113, -0.0641724095, -0.0214183927, -0.0017732413, -0.0472075343, -0.0051023704, 0.0367813595, 0.0241432041, 0.0689968616, 0.0161373466, 0.0416462496, 0.0435602292, 0.0310837999, -0.0272383671, -0.0585787371, -0.0593175702, -0.0134559590, 0.0287890863, 0.0719219595, -0.0264414158, 0.0737808421, 0.0231460426, -0.0364313014, -0.0515501425, 0.0032853177, -0.0585031323, -0.0357026905, 0.0668877065, -0.0085930433, 0.0270453431, -0.0271641240, -0.0318334885, 0.0352538563, -0.0559633337, -0.0113455355, -0.0233381595, -0.0137605974, -0.0279717036, 0.0119448118, 0.0436200202, 0.0422810018, -0.0226827487, 0.0331654027, -0.0241930783, 0.0497820862, -0.0422186814, 0.0893728733, -0.0538405515, -0.0154287033, 0.0275726970, -0.0883032009, 0.0145373465, -0.0137001453, 0.0585337952, 0.0178710297, -0.0636064559, 0.0121259531, -0.0090358537, -0.0001946119, -0.0197181758, -0.0310868435, 0.0138342613, 0.0371895321, -0.0351828337, -0.0589912198, -0.0340191275, -0.0154238967, -0.0343789086, 0.0112663917, -0.0095170988, -0.0493949391, -0.0241775103, -0.0374327898, -0.0310105290, 0.0163127352, -0.0137684904, 0.0545454994, 0.0248031095, -0.0482974201, -0.0028028514, 0.0016648376, -0.0449883156, 0.0345361345, 0.0379979871, -0.0284853186, -0.0361399353, -0.0242769662, -0.0818442330, -0.0773596242, 0.0653308108, -0.0491287373, 0.0112478202, 0.0102865025, -0.0568481646, 0.0568410046, -0.0084753288, -0.0525623858, -0.0871238858, -0.0510858297, -0.0702960566, 0.0323679820, -0.0641066432, 0.0074127624, -0.0884917825, -0.0043868814, -0.0882643089, -0.0090837795, -0.0472496748, 0.0259698369, 0.0034559583, 0.0243267231, -0.0080837561, -0.0162550770, -0.0479641818, -0.0677317679, -0.0077363187, -0.0386903919, 0.0431914702, -0.0516136400, 0.0215667468, 0.0383598395, -0.0245589223, -0.0293819495, -0.0737165138, 0.0307981893, 0.0065754172, -0.0246011764, 0.0454512909, -0.0170114487, 0.0317053795, -0.0149035258, 0.0784571618, -0.0263705757, 0.0119463038, -0.0570667908, 0.0392453410, -0.0449918881, -0.0253511257, -0.0085974373, -0.0708618462, -0.0144892214, 0.0286213085, 0.0126844663, -0.0090341661, 0.0623703822, 0.0492469966, 0.0738650411, 0.0739850551, -0.0394036621, 0.0654473007, 0.0141779091, 0.0489770211, -0.0871259272, 0.0781809315, 0.0867886618, 0.0627828315, -0.0122997835, -0.0461428650, 0.0077365371, 0.0418527462, 0.0276406296, -0.0160985179, 0.0024730654, -0.0316733904, -0.0241900608, 0.0218978617, 0.0734431520, 0.0310503095, -0.0057505881, -0.0535364300, 0.0093491022, -0.0341968052, 0.0353581458, 0.0462050736, -0.0154020777, -0.0909198970, -0.0223046094, 0.0272154789, -0.0174073409, -0.0715198517, 0.0760772154, -0.0040894910, -0.0669594109, -0.0662530884, -0.0798558742, 0.0549129918, -0.0183635112, 0.0105957147, -0.0120658176, -0.0727864131, 0.0443057530, -0.0753733441, 0.0337041095, -0.0773599595, -0.0412757471, 0.0403472893, -0.0504057184, 0.0187979750, -0.0868928358, -0.0528455488, 0.0654065385, -0.0392486751, -0.0282349084, -0.0066248183, 0.0345890895, 0.0740293339, -0.0059308312, 0.0219062977, 0.0312684551, 0.0294395853, -0.0368575044, 0.0103645204, -0.0277582686, 0.0299759228, 0.0165124424, -0.0811396912, 0.0161792226, 0.0529139861, 0.0602778867, 0.1073607653, 0.0710603595, -0.0189546682, 0.0470212474, 0.0115910405, 0.0319473967, 0.0455705263, -0.0575931445, 0.0256006401, -0.0590473674, -0.0135654258, 0.0207450632, 0.0527046360, 0.0126583846, -0.0892382562, -0.0035639552, -0.0045119850, 0.0545245148, 0.0052046664, 0.0238323640, 0.0060746735, -0.0461234562, -0.0033379726, -0.0450819470, -0.0131116193, -0.0196209922, -0.0712801442, -0.0470427461, -0.0737588257, 0.0221195891, 0.1209296361, -0.0242479518, -0.0695488006, 0.0966288522, -0.0742256492, -0.0136548076, 0.0447557457, 0.0544326417, 0.0572594777, -0.0751847699, 0.0489020199, -0.0443046167, -0.0092247995, -0.0021133919, -0.0686207190, -0.0155469356, 0.0351363905, 0.0407318622, 0.0588252321, -0.0153127480, 0.0063938336, -0.0090222666, -0.0039623426, -0.0329108201, 0.0883131772, -0.0310880914, 0.0958209187, -0.0106855100, 0.0439698212, 0.0200282019, -0.0777822584, -0.0616287142, -0.0454794243, 0.0627683997, 0.0002900213, -0.0493777022, 0.0044050217, 0.0022190302, 0.0752083436, 0.0556186736, -0.0018965601, -0.0528054349, 0.0112396339, 0.0646853969, 0.0006109578, 0.0676709935, -0.0734308958, 0.0107419156, 0.0040651709, 0.0541145615, -0.0078863343, -0.0004970997, 0.0200407673, -0.0618971996, -0.0078073298, 0.0293069165, -0.0716235414, -0.0516722351, 0.0146603575, 0.0422310941, -0.0661472604, 0.0556843802, -0.0718270168, 0.0634203926, 0.0351072066, -0.0392245166, -0.0503427796, -0.0243228469, -0.0645708516, 0.0445116013, -0.0575159676, 0.0240153223, 0.0023961018, 0.0531908982, -0.0440134034, 0.0321753845, -0.0532135703, -0.0513752438, -0.0386401527, 0.0558824353, -0.0001907973, -0.0225167274, -0.0343476310, 0.0154272523, 0.0052623176, 0.0676870272, 0.0221257173, 0.0021513605, -0.0150683708, 0.0168796368, 0.0002324992, 0.0680411458, 0.0016051498, -0.0352558643, -0.0173299201, -0.0242625438, 0.0127074886, 0.0041876095, -0.0580445156, 0.0616970956, 0.0216718074, -0.0122054871, -0.0204336867, 0.0578689985, 0.0364050679, -0.0736498758, -0.0349429548, -0.0025711404, -0.0146951238, 0.0449506491, 0.0568286441, 0.0129433824, 0.0261368826, 0.0725353360, 0.0594772846, -0.0402617715, 0.0512372144, 0.0070496276, 0.0377800092, 0.0056062397, 0.0295250341, 0.0466319397, 0.0146052083, -0.0701605827, -0.0053912350, -0.0674260110, 0.0309102219, -0.0551339388, 0.0030805380, 0.0285387468, -0.0653550476, -0.0151078599, -0.0498465337, 0.0398530178, 0.0381693132, -0.0522113405, -0.0627952740, 0.0533924103, 0.0506421439, 0.0496777780, -0.0051350547, 0.0458175912, 0.0379072540, 0.0700113922, 0.0193833206, -0.0150543302, -0.0478620008, 0.0171664692, 0.0462034009, -0.0407339521, -0.0387669429, 0.0617340915, -0.0580000952, 0.0772400647, -0.0494081564, 0.0683534741, -0.0247215312, 0.0795508549, -0.0063332855, 0.0253874976, -0.0247060582, -0.0216541681, 0.0436337590, -0.0577221140, 0.0465722382, -0.0121651050, 0.0270775575, 0.0283196960, 0.0341828167, 0.0312305968, -0.0211597048, -0.0036303650, 0.0764385760, 0.0055316770, -0.0250580832, -0.0353702754, -0.0445831418, -0.0147837522, -0.0297880769, 0.0547192208, -0.0276224036, -0.0389489494, 0.0204956401, -0.0020530340, -0.0463157259, -0.0015156782, 0.0478307344, -0.0203926340, 0.0569650568, -0.0118213659, 0.0003757749, -0.0322186761, -0.0354648158, 0.0300807562, 0.0729457960, -0.0557848103, -0.0325174518, 0.0449537411, -0.0149916951, 0.0757910088, 0.0705534667, 0.0066333292, 0.0526539721, 0.0207659304, 0.0173187926, -0.0381330997, 0.0650393888, -0.0799877495, 0.0216629952, -0.0011860244, 0.0002482765, -0.0267759934, -0.0281125028, 0.0487510525, 0.0741216019, 0.0834198892, -0.0727711916, 0.0514151789, -0.0086980723, -0.0113197202, -0.0028501099, -0.0550152175, -0.0411610603, 0.0370843485, -0.0665058419, -0.0171623118, 0.0218266379, 0.0605115779, -0.0557340123, 0.0018097493, -0.0145401526, -0.0301676039, -0.0459077619, 0.0085402615, 0.0012210641, 0.0127557106, -0.0725603551, 0.0344854407, -0.0562561974, -0.0397933684, -0.0553826727, -0.0272213165, -0.0155212451, 0.0216439180, -0.0331551358, 0.0470926166, -0.0408745743, 0.0555584878, 0.0334118381, -0.0575123243, -0.0093004815, 0.0262710638, -0.0438548140, 0.0287293401, -0.0540883355, -0.0041773305, -0.0323073529, -0.0238778628, 0.0564142950, 0.0057787350, -0.0374431536, -0.0259898547, -0.0403207280, -0.0611904338, 0.0705017522, 0.0080441907, 0.0110939816, 0.0764695257, -0.0794807002, -0.0548264906, -0.0425714217, -0.0497950315, 0.0543413870, 0.0340866819, 0.0614607558, -0.0459327362, 0.0511654280, -0.0201585721, -0.0665323734, -0.0164367799, 0.0503244251, -0.0548099205, 0.0119426074, -0.0535805710, 0.0731519833, 0.0238866583, 0.0087513663, 0.0590956695, -0.0552208312, -0.0386582240, -0.0165251456, -0.0562788434, -0.0522866584, 0.0064876075, -0.0305609535, -0.0631603524, -0.0366893411, 0.0005059599, -0.0339754336, -0.0088630384, 0.0076601212, -0.0368646495, -0.0453824103, -0.0023053612, -0.0251537934, 0.0703235641, 0.0095364060, 0.0303442683, 0.0472236685, 0.0600160547, -0.0661149547, -0.0449741557, 0.0312253740, 0.0145408176, 0.0256799087, 0.0104637705, 0.0112170316, 0.0736481100, -0.0211120527, -0.0071165529, 0.0111792758, -0.0137223396, 0.0522867218, 0.0750140548, 0.0021440808, 0.0709579885, -0.0341219604, -0.0124820648, 0.0025067597, 0.0529642440, -0.0459279940, 0.0390706398, 0.0521566495, -0.0339529403, -0.0455654748, 0.0021490268, -0.0383144580, -0.0464977399, 0.0577541143, -0.0244913995, 0.0433355868, 0.0405643992, -0.0542638190, -0.0419843346, 0.0655396879, -0.0488321744, 0.0084936498, 0.0497589111, -0.0734084472, -0.0565306433, 0.0492951646, 0.0382643491, -0.0509057939, -0.0828173831, -0.0517579541, -0.0517666861, 0.0094393529, 0.0599978827, -0.0300314035, -0.0081850830, -0.0306463651, -0.0231566634, 0.0412001237, 0.0249874573, 0.0670860261, 0.0168508720, -0.0699088052, 0.0148949791, -0.0094615882, -0.0289436933, 0.0507598892, 0.0304127634, -0.0241755322, -0.0647523254, 0.0070629409, 0.0218053255, 0.0387415998, 0.0430784784, 0.0878956616, 0.0289106090, -0.0071221450, 0.0653590485, -0.0001487971, -0.0348887444, -0.0193547532, -0.0000213880, -0.0576698557, -0.0586679280, 0.0284127463, 0.0262512919, -0.0190766379, -0.0047711902, -0.0382147357, -0.0393029191, -0.0775915012, -0.0092105698, -0.0193320774, -0.0634590536, -0.0146452384, -0.0261492245, -0.0216719024, 0.0375110880, -0.0312824324, -0.0593643896, -0.0286743063, 0.0247852001, -0.0058294395, -0.0517778732, -0.0702652931, 0.0234184563, 0.0164324213, 0.0040793871, 0.0487125143, 0.0122242654, -0.0316228382, 0.0744437575, -0.0529830679, -0.0424275063, 0.0725365803, 0.0517653637, 0.1113287657, 0.0648555979, -0.0566011593, 0.0732966810, -0.0426587723, -0.0285161138, -0.0493108705, 0.0049429820, -0.0353613906, -0.0332764946, 0.0468078852, 0.0808416605, -0.0251492094, 0.0964397937, 0.0674058795, 0.0215383358, 0.0370029472, 0.0799733549, -0.0105809579, -0.0732178316, 0.0796962976, 0.0520672649, -0.0334617756, 0.0527904779, -0.0157057010, 0.0179571994, -0.0283850711, -0.0110245822, 0.0248215608, -0.0313108936, -0.0716970935, 0.0153714754, 0.0259948317, -0.0791477337, 0.0055511887, -0.0050406633, 0.0681558400, -0.0634905994, 0.0028225202, 0.0067714290, 0.0838526785, -0.0214219317, -0.0243511945, 0.0341936983, -0.0179771166, -0.0293339975, 0.0735225827, 0.0455435254, 0.0101241153, -0.0430054851, 0.0067204405, -0.0302650649, 0.0366302319, 0.0271094088, -0.0258822739, 0.0136045422, -0.0110908011, 0.0502605177, 0.0380401872, 0.0268119741, -0.0312182028, 0.0262045041, -0.0178852025, -0.0127795441, 0.0674328431, 0.0795510486, -0.0158462357, 0.0265462920, 0.0605778880, -0.0132468306, 0.0495573469, -0.0149487453, -0.0003032514, 0.0759006888, -0.0223487727, -0.0008380712, 0.0138994725, 0.0606334656, -0.0274659283, 0.0046097054, -0.0353907533, -0.0336716995, 0.0168362875, -0.0923722833, 0.0866584033, 0.0266285315, -0.0332967974, -0.0178837124, -0.0228364673, -0.0719779506, -0.0842440128, -0.0360906124, 0.0783851743, -0.0319639929, -0.0469316095, -0.0276441071, 0.0084135216, 0.0071440665, -0.0686017424, 0.0697210208, -0.0382935964, -0.0530190505, -0.0406758003, -0.0383131094, 0.0096827960, 0.0250296276, -0.0938168168, 0.0077499314, -0.0633761510, 0.0095857177, 0.0130814994, -0.0599300601, -0.0719978437, 0.0355783440, -0.0589972883, -0.1028587595, 0.0164671298, -0.0592045002, 0.0416215919, -0.0431884006, -0.0774646774, -0.0272581894, -0.0685128793, -0.0224882830, -0.0708900690, -0.0085626561, 0.0355772339, -0.0855217353, 0.0864529312, 0.0450763553, 0.0484204851, -0.0237646848, -0.0148564121, -0.0339211784, 0.0342026167, 0.0393075570, 0.0110499421, 0.0997051522, 0.0625686198, 0.0602169074, -0.0094204312, 0.0172309205, 0.0901088417, 0.0921090394, 0.0659558848, 0.0764421299, -0.0224849507, 0.0118875680, 0.0693435222, 0.0445220694, 0.0592837445, 0.0013709825, 0.0339478366, 0.0380156375, -0.0772859529, -0.0125859398, 0.0154567994, -0.0302908570, 0.0182720777, 0.0623508915, -0.0297825001, 0.0166192781, -0.0183588602, 0.0161428265, -0.0090265777, -0.0028644488, -0.0618070550, 0.0073322174, 0.0116881812, -0.0436536148, 0.0398300551, 0.0090608653, 0.0621275268, 0.0222091675, -0.0035602276, -0.0535285585, 0.0524174683, -0.0272843800, -0.0062067579, -0.0980656594, 0.0299889650, -0.0839404538, -0.0179010350, -0.0055014580, -0.0300791040, -0.0102949813, -0.1023081467, -0.0699421614, 0.0163455289, -0.0300349854, 0.0333826430, 0.0108159212, 0.0132265436, 0.0597405694, 0.0442091599, -0.0470483340, 0.0761470571, 0.0123118572, 0.0418381840, -0.0701501667, 0.0118456893, -0.0161490832, 0.0001020180, 0.0575154088, -0.0079729995, -0.0432769246, 0.0287275482, 0.0426821895, -0.0298359264, 0.0071573700, -0.0569358878, -0.0621665120, -0.0284349062, 0.0002988504, 0.0307389051, -0.0432820432, 0.0433451422, -0.0077590095, -0.0115745002, -0.0808648318, 0.0253349338, -0.0694684461, 0.0161579065, 0.0535036102, 0.0347970165, -0.0330874622, -0.0764729902, -0.0380025543, 0.0133346533, 0.0462302715, 0.0013688364, 0.0394605622, 0.0422526225, -0.0452081785, 0.0078910263, -0.0745320246, 0.0320196934, -0.0315882675, -0.0173621122, -0.0621827915, 0.0144338328, 0.0348740444, -0.0491617136, 0.0202476569, 0.0506295785, -0.0175753310, -0.0352533273, 0.0468583070, -0.0049324348, -0.0261360668, 0.0029827254, 0.0527290776, -0.0114833573, 0.0012801046, 0.0112483921, -0.0031105818, 0.0125586372, 0.0697144568, 0.0040651457, -0.0043485328, 0.0263748448, 0.0092816483, -0.0150412871, -0.0793433785, -0.0177837387, -0.0299371742, -0.0104182456, 0.0647670850, 0.0753263906, -0.0551600195, 0.0701385364, -0.0435784943, -0.0352813788, -0.0099265622, -0.0293888003, -0.0840678439, 0.0326820277, -0.0618972741, -0.0667076483, -0.0421136208, 0.0393746831, -0.0586384647, -0.0584504418, 0.0377606601, -0.0376498587, 0.0497011617, -0.0284575727, 0.0439495631, 0.0034642932, 0.0560896881, -0.0267793685, 0.0119498847, 0.0084779467, -0.0496675670, -0.0328834839, 0.0110893250, -0.0475088544, -0.0594819449, -0.0344028659, -0.0251184851, 0.0650330558, 0.0471996665, -0.0210008435, 0.0246768892, -0.0338573046, -0.0051017608, -0.0292832069, -0.0575597659, 0.0187258516, -0.0730585530, 0.0317862593, -0.0433719605, -0.0031869807, 0.0653372109, 0.0753529891, 0.0228014011, 0.0048833075, -0.0662664995, -0.0767589733, 0.0330963694, -0.0679766238, 0.0044796839, 0.0470761508, -0.0638495609, 0.0811038613, 0.0492712036, -0.0656155497, 0.0505005941, 0.0347988605, -0.0234391838, -0.1179786474, 0.0651366934, 0.0874280035, 0.0307197515, -0.0349216461, -0.0832457319, -0.0213344600, -0.0397143774, 0.0242333207, -0.0025134739, -0.0344636776, 0.0005827334, -0.0994999260, 0.0486313477, 0.0047144224, 0.0543867424, 0.0972790495, 0.0056443014, 0.0103151249, -0.0152798304, -0.0444614924, 0.0133029195, 0.0582409352, 0.0676053762, -0.0454430692, 0.0027782463, 0.0085895546, 0.0640854537, 0.0168993976, 0.0756490231, -0.0604412369, 0.0427043587, 0.0599897802, 0.0439178832, 0.0089893816, -0.0155246919, -0.0861592665, -0.0450356267, 0.0249314439, 0.0285589397, 0.0492762700, 0.0051772748, 0.0435829982, -0.0219706576, 0.0108369691, -0.0515028872, 0.0047856993, 0.0234319866, 0.0626706108, 0.0145868296, 0.0777186379, -0.0250542834, -0.0116114058, -0.0088323317, -0.0501044691, -0.0026316447, -0.0315653048, -0.0521033630, -0.0676816255, -0.0120869298, 0.0093618669, -0.0119194267, 0.0277609974, -0.0440402925, -0.0082246866, 0.0624566786, -0.0714230835, 0.0509196185, 0.0299021471, -0.0113285575, 0.0334767178, 0.0438884944, -0.0850604922, -0.0459251478, 0.0130495382, -0.0055852504, -0.0238435194, -0.0147192013, 0.0449795388, 0.0148576880, 0.0151068047, 0.0494559780, 0.0769536644, 0.0044048424, -0.0127397282, -0.0176711865, 0.0064689186, 0.0001161429, 0.0022417319, 0.0259525478, 0.0072643417, -0.0172293093, 0.0347297862, 0.0191309061, 0.0683909580, 0.0166138243, -0.0207872875, 0.0291633550, 0.0189959742, 0.0124302916, -0.0053249784, -0.0447500013, -0.0065737856, -0.0016547133, -0.0282174647, -0.0021696982, 0.0809178427, -0.0066638156, 0.0431670770, -0.0488271527, -0.0187168680, -0.0636658370, 0.0069634095, -0.0717274547, 0.0405060686, -0.0059767566, 0.0044154851, 0.0080642318, 0.0427368097, 0.0395524278, -0.0129213920, 0.0151163302, 0.0594373234, 0.0039381827, -0.0527614206, -0.0212017819, -0.0469634272, -0.0490945987, -0.0787757784, -0.0149808405, 0.0374618061, -0.0613190681, -0.0204740595, 0.0165665690, -0.0494599901, -0.0627763718, -0.0542670935, 0.0093665067, 0.0573372021, -0.0006930155, -0.0304999463, 0.0102899168, 0.0398533754, -0.0420970432, 0.0367092453, 0.0112683289, 0.0209933035, -0.0463334471, -0.0377757810, 0.0640814528, 0.0008244171, -0.0274994839, 0.0452815332, -0.0373110771, 0.0061749574, 0.0073644826, 0.0157154407, 0.0591478385, -0.0591293909, 0.0028507055, 0.0407079533, 0.0474025458, 0.0190166105, 0.0504972450, 0.0068241116, 0.0038640159, -0.0261153318, -0.0094203027, 0.0745950267, -0.0022588330, 0.0619849265, 0.0162500534, 0.0526701659, -0.0305703934, -0.0335867368, 0.0473098047, -0.0007057174, -0.0305792037, 0.0400678553, -0.0458454750, -0.0407875367, 0.0032780783, 0.0130929705, -0.0143401548, 0.0422085114, -0.0119716162, 0.0378265232, -0.0645609125, 0.0464999452, 0.0234328546, -0.0342233852, 0.0150581580, 0.0025541517, 0.0617654547, -0.0239033680, 0.0183623265, -0.0358177274, -0.0742321759, -0.0417059138, 0.0451644398, 0.0560899377, 0.0445837416, -0.0516784489, 0.0105432207, -0.0752136111, 0.0406646766, 0.0475726612, 0.0399822518, 0.0401675180, -0.0651200339, -0.0721282437, -0.0101829320, -0.0588880219, -0.0722549036, 0.0185926389, -0.0300524887, -0.0150941191, -0.0210875235, 0.0413990915, 0.0277861115, -0.0669037700, 0.0011113738, -0.0585626066, 0.0517261475, -0.0113078710, 0.0779261291, 0.0549748130, 0.0158166979, 0.0268985834, 0.0661229193, -0.0176894590, -0.0255202297, 0.0532423705, -0.0795018524, -0.0155388722, 0.0166219324, 0.0566713959, 0.0033825270, 0.0247834567, 0.0035254490, 0.0257338081, -0.0391799323, -0.0478740856, -0.0351508036, -0.0216525421, -0.0353516601, 0.0114981802, -0.0534177572, -0.0088307243, 0.0501078404, -0.0112953419, -0.0860518739, -0.0519267544, 0.0455135703, -0.0377136357, -0.0307950824, -0.0185639560, -0.0040250183, 0.0204796121, -0.0796062797, -0.0030363379, 0.0583076552, 0.0466472320, 0.0373111889, 0.0238937121, 0.0280540194, -0.0162243880, 0.0655611828, -0.0568528250, -0.0306825042, -0.0207695886, 0.0204021968, -0.0155228460, -0.0478170775, -0.0312523469, -0.0226854123, 0.0709844083, -0.0463465452, -0.0351858698, -0.0111428630, -0.0708348751, 0.0233982578, -0.0221399311, -0.0503268428, -0.0754870698, 0.0405318514, -0.0597479120, 0.0352088027, -0.0531827100, -0.0447608046, 0.0343301520, -0.0018085332, 0.0695013031, 0.0296917800, -0.0499225147, -0.0197779145, 0.0583241470, 0.0218339805, 0.0201139767, 0.0209331959, 0.0074386327, -0.0221092328, -0.0613825880, 0.0582569055, 0.0533364192, -0.0072523053, 0.0319700725, -0.0397185273, -0.0654736236, 0.0529610775, 0.0382139161, -0.0619542561, -0.0527632609, 0.0744641647, 0.0734817237, -0.0638984740, -0.0551040135, 0.0373684838, 0.0145537909, -0.0498803817, -0.0025585594, 0.0454411842, 0.0790036768, -0.0006760182, 0.0277550649, 0.0263086595, -0.0721217990, -0.0566102080, 0.0008231193, 0.0295288377, -0.0501491763, -0.0560903810, 0.0332124457, 0.0279545076, -0.0562157929, -0.0306161437, 0.0371692367, 0.0389721207, -0.0511314906, 0.0084075462, -0.0154599641, 0.0675750971, 0.0576275960, 0.0084044887, 0.0582243986, -0.0619298071, 0.0470052361, 0.0480485745, 0.0535411574, -0.0206362773, -0.0435034186, -0.0197457373, -0.0427205302, -0.0741024837, 0.0544808879, -0.0336619876, 0.0657928586, 0.0178355910, -0.0410553738, -0.0020084423, -0.0157165881, 0.0446106493, 0.0366259739, 0.0411042720, -0.0080133909, 0.0296756551, -0.0386267826, -0.0434316956, 0.0523493923, -0.0681790113, 0.0618669540, -0.0373845026, -0.0218118690, -0.0209438503, -0.0554035045, -0.0083245980, 0.0481931269, 0.0280526727, 0.0034134260, -0.0114330817, 0.0018042678, 0.0460965782, 0.0421900377, -0.0304095447, -0.0604326837, 0.0410062075, 0.0747657269, 0.0105331056, -0.0723573267, -0.0858376995, -0.0150731988, 0.0032359294, 0.0711530149, 0.0607727505, 0.0716710836, 0.0886948630, 0.0222589951, -0.0572850965, 0.0211853832, -0.0003034630, -0.0404429920, -0.0474033542, -0.0512837172, -0.0220537782, -0.0233322959, 0.0003087807, 0.0446218029, 0.0289916154, 0.0265590884, 0.0251519103, 0.0410288796, 0.0918079764, -0.0693076700, 0.0140193254, -0.0014915791, -0.0153415604, 0.0153211914, -0.0679079890, -0.0538645983, 0.0413299240, -0.0188505370, -0.0396838002, 0.0204260107, -0.0381764472, -0.0294663049, 0.0280344989, 0.0510609746, -0.0062704738, -0.0620523468, -0.0036111376, 0.0178711731, 0.0104060071, 0.0210775267, 0.0601253398, 0.0360391103, 0.0022894174, -0.0155889513, -0.0807274058, -0.0396006480, -0.0013817254, -0.0700137094, 0.0566328093, -0.0642357096, -0.0024105923, -0.0019281108, -0.0550540015, 0.0704059750, -0.0653767735, -0.0440807194, 0.0412119403, 0.0641473234, -0.0350647680, -0.0098830285, 0.0015457949, -0.0416993424, 0.0203862190, 0.0772415623, 0.0075010690, -0.0716528296, -0.0082876766, -0.0504631177, -0.0063360780, -0.0039714845, 0.0457408167, 0.0420415550, -0.0152109228, -0.0328090452, 0.0353359245, -0.0269601606, 0.0531827398, -0.0672564283, 0.0595921837, -0.0052544312, 0.0135664986, -0.0520795994, 0.0544772856, 0.0032017429, -0.0393307768, -0.0464561060, -0.0244847368, 0.0214612912, -0.0152297914, 0.0228542071, 0.0403749906, 0.0711245462, -0.0408558883, -0.0531137958, 0.0381957181, 0.0339603983, 0.0316843353, -0.0012832255, 0.0143813323, -0.0191672146, 0.0547161289, 0.0657245442, 0.0283692367, -0.0040338254, 0.0184870288, 0.0870023668, -0.0376574993, -0.0275882725, 0.0485664271, 0.0700868815, -0.0716327876, -0.0138324695, -0.0582733676, 0.0053314790, -0.0498319380, 0.0023006070, 0.0687030405, 0.0506221578, -0.0092941271, 0.0396328755, 0.0727226064, -0.0795006678, 0.0218381640, -0.0673150495, -0.0540188849, -0.0598451309, 0.0408578143, 0.0669327527, -0.0448372476, 0.0665652752, -0.0047651608, -0.0306168087, 0.0134380376, -0.0002514497, -0.0823664442, -0.0757358149, -0.0507928431, 0.0554825962, -0.0639763325, -0.0308719333, 0.0299955569, -0.0113341678, -0.0262902323, -0.0307897665, -0.0556153655, -0.0094381720, -0.0030580815, 0.0556807630, -0.0104142278, -0.0337000713, 0.0286593866, -0.0257240329, 0.0432992131, 0.0156353842, 0.0515179373, -0.0114185791, 0.0703141019, 0.0198870562, -0.0769590884, -0.0555683635, 0.0416098461, -0.0335087813, -0.0312280562, -0.0184920598, -0.0299388207, 0.0094419084, 0.0159602594, -0.0609666109, -0.0135801854, -0.0135553591, -0.0452829301, 0.0024883398, 0.0748298317, -0.0342195444, 0.0732540563, -0.0388776287, -0.0048494884, -0.0200108811, 0.0395678058, -0.0540014692, 0.0312703513, 0.0038918483, -0.0305809267, 0.0504053533, 0.0334870145, -0.0425049327, 0.0576013364, 0.0652583316, -0.0396414623, 0.0008722426, -0.0544932336, 0.0222037602, 0.0010719126, 0.0164590627, -0.0623700768, -0.0360185616, -0.0422187783, 0.0223588012, 0.0434297249, 0.0469716415, -0.0500245132, 0.0511474945, -0.0565101765, 0.0367033221, -0.0407914035, -0.0908584744, -0.0603457429, 0.0480900891, 0.0755618438, 0.0305399578, 0.0022166062, -0.0231920611, -0.0336551555, 0.0638624057, 0.0379831083, -0.0602639280, 0.0429501384, -0.0119021181, 0.0450121537, -0.0407174155, 0.0060288133, -0.0292295087, -0.0776716620, -0.0219019204, 0.0497728661, 0.0677135140, -0.0255430862, 0.0248741284, 0.0071981563, 0.0291926842, -0.0223133136, -0.0250597913, 0.0455470271, -0.0131181125, -0.0599316284, 0.0720824450, -0.0259849951, -0.0046694116, 0.0587582998, -0.0477651097, -0.0299789105, -0.0435382836, 0.0050789393, -0.0122099929, 0.0097198216, -0.0419154279, -0.0096603539, 0.0042508421, -0.0270190444, 0.0367399752, 0.0421569571, 0.0274828896, 0.0454547070, -0.0608830862, -0.0121275941, -0.0337154754, 0.0560078472, -0.0498561785, 0.0505718440, -0.0166629702, 0.0171493161, 0.0278345495, 0.0547900349, 0.0533006564, -0.0019146425, 0.0179383159, -0.0410073623, 0.0804524347, -0.0801360235, 0.0612070225, 0.0394749679, 0.0813402534, -0.0451217331, -0.0505508371, 0.0275024213, 0.0135991406, -0.0380690247, -0.0901200250, 0.0744383857, 0.0700122491, -0.0738392472, 0.0305111185, -0.0173356161, 0.0209148899, 0.0801777169, -0.0666339695, 0.0143521745, 0.0070893513, 0.0127758160, -0.0370908044, -0.0347073711, 0.0017772266, -0.0031634574, -0.0145503553, 0.0033503468, 0.0360976569, -0.0090019843, -0.0495637283, 0.0056782044, 0.0729133114, 0.0334289409, -0.0592459366, 0.0388559885, 0.0337065235, -0.0248088799, -0.0398913473, 0.0203458685, -0.0498235188, -0.0414103568, -0.0426863916, -0.0432061069, -0.0389120765, 0.0431574173, -0.0549000837, -0.0391777381, 0.0043965522, -0.0433864892, 0.0659439713, 0.0000164025, -0.0439331345, -0.0224556252, -0.0343227014, -0.0619566664, 0.0567558669, -0.0121122468, 0.0381463394, 0.0227078497, 0.0452030003, 0.0346483551, 0.0517272577, -0.0158713292, 0.0351817720, -0.0165221244, -0.0097045768, -0.0686165318, 0.0373115353, -0.0582898632, 0.0599822849, -0.0376184285, 0.0731811598, 0.0384173356, -0.0673749149, 0.0577204525, -0.0743400827, -0.0580487922, 0.0038907824, -0.0499543510, -0.0065021608, 0.0674904659, -0.0461793542, -0.0309561472, -0.0361705869, 0.0467248373, -0.0269917902, -0.0560494214, -0.0333985649, -0.0222499948, -0.0046323328, 0.0036222672, -0.0051547848, -0.0732290819, 0.0672291964, 0.0491809882, 0.0129482774, -0.0415510722, -0.0475029647, -0.0099916272, -0.0204035789, -0.0293556638, 0.0533562675, -0.0304864384, 0.0417582430, 0.0010175621, -0.0276483558, 0.0138686299, -0.0548026152, 0.0456807837, 0.0225353446, 0.0232653674, 0.0576175228, 0.0021832418, -0.0541801974, -0.0026359076, -0.0399308167, -0.0520580523, 0.0353765637, -0.0602185093, 0.0307986308, -0.0085591869, -0.0767874941, -0.0467101634, -0.0672042742, 0.0628358871, -0.0159522481, -0.0475150682, 0.0452000014, 0.0684737638, 0.0112675736, 0.0099422643, 0.0448061489, 0.0775017887, 0.0042277551, 0.0247750971, -0.0626145303, 0.0547769517, 0.0445653573, -0.0118664037, -0.0016296224, 0.0429376066, 0.0078645917, 0.0150254508, -0.0592140518, -0.0445975699, -0.0217860080, 0.0416155271, -0.0745758936, 0.0487860180, 0.0909787491, -0.0461851358, 0.0202206299, 0.0501737073, 0.0107386597, -0.0521265976, -0.0583077595, 0.0487303697, 0.0441853330, -0.0716304407, 0.0487328507, 0.0316247940, 0.0005433398, -0.0418314636, -0.0314933583, 0.0280005448, 0.0824774802, -0.0035679089, -0.0810158029, 0.0548907593, 0.0875661373, -0.0698026791, 0.1081845164, -0.0885894820, -0.0183427501, -0.0248412751, 0.0453557819, -0.0956136808, 0.0612646043, 0.0247023385, -0.0122733340, 0.0678453967, -0.0724502206, -0.0696161464, 0.0300816149, 0.0454498082, 0.0549824126, 0.0640278459, 0.0243601985, 0.0418558940, -0.0793974623, -0.0112060010, -0.0233743899, -0.0149907134, -0.0425268635, -0.0119953714, 0.0645937100, -0.0167999957, -0.0175069068, -0.0080332262, 0.0817207620, -0.0443147421, -0.0846313089, 0.0804115906, 0.0106539465, -0.0684655830, -0.0134059079, 0.0227645691, -0.0349759944, -0.0686156079, -0.0908714235, 0.0015222165, 0.0444417931, 0.0254541431, 0.0583303422, 0.0684685186, -0.0001284398, -0.0421405844, 0.0738024116, 0.0158574916, 0.0146036744, 0.0506573506, -0.0392812714, -0.0155737577, -0.0106605701, 0.0122950291, -0.0619052090, -0.0076196813, -0.0189631637, -0.0315624028, -0.0187632088, 0.0069652628, -0.0294643585, -0.0014519264, -0.0688499063, -0.0714823157, 0.0891578421, -0.0712938234, 0.0565731376, -0.0661082342, -0.0333194882, -0.0267257839, 0.0394224338, -0.0483286791, 0.0946916267, -0.0542288795, -0.0677349493, 0.0649543107, 0.0814448148, -0.0754791349, 0.0221879259, -0.0552517623, 0.0135732498, -0.0219516885, -0.0364409126, 0.0564893298, 0.0597943552, -0.0377768427, 0.0256399978, 0.0035443977, 0.0139591191, -0.0199802760, 0.0316233151, 0.0498248525, -0.0195808485, -0.0621166565, -0.0537442528, -0.0258067306, -0.0583819598, -0.0209389124, 0.0935185328, 0.0064328327, 0.0173047297, 0.0157535672, 0.0631997809, -0.0567940176, -0.0516486801, 0.0451216735, -0.0411187448, 0.0167289432, 0.0062446082, -0.0348083228, 0.0417950675, -0.0200234875, -0.0772412643, -0.0099483458, -0.0697714910, 0.0736340061, 0.0047722175, -0.0507696830, -0.0568956062, -0.0484578870, 0.0279755965, 0.0276195537, -0.0303427167, 0.0421740673, -0.0671282187, 0.0627193749, -0.0238924995, -0.0038760491, -0.0234168321, 0.0107498830, -0.0100031877, -0.0295985211, 0.0539456308, -0.0412739590, 0.0598442107, 0.0723313093, 0.0073111169, 0.0549864173, -0.0264310781, -0.0670431703, 0.0293587595, 0.0228571035, -0.0662562400, -0.0220261719, 0.0353997201, 0.0282488000, 0.0531437360, 0.0098639987, -0.0175911356, -0.0598329231, 0.0318508781, 0.0333225727, 0.0228578951, 0.0453974530, -0.0555405989, 0.0762457252, -0.0424580760, 0.0348827429, -0.0503839217, 0.0493442416, 0.0756477639, -0.0004300227, 0.0609999709, 0.0302724764, -0.0558884777, -0.0225081556, -0.0357806832, -0.0609529018, -0.0252813045, 0.0247509424, 0.0724293441, 0.0214535818, 0.0789424703, 0.0108193634, 0.0593710691, -0.0478542894, 0.0238736011, 0.0342673585, 0.0681610256, 0.0018255608, 0.0233440120, 0.0145073710, 0.0766823441, -0.0747652650, 0.0196742285, 0.0507732220, 0.0508475155, 0.0574348122, 0.0058664856, 0.0293495283, -0.0364776179, 0.0121114440, 0.0088327993, 0.0528259277, 0.0138008026, 0.0412081741, -0.0064618709, 0.0347790346, 0.0673990697, 0.0575036705, -0.0380908884, -0.0272826701, 0.0272159148, 0.0301663689, -0.0366802998, 0.0235232804, -0.0144934375, -0.0528331734, 0.0503079183, -0.0154153341, -0.0705494508, 0.0579853393, -0.0158140641, -0.0195521004, -0.0161880944, -0.0028422025, -0.0483497269, -0.0550704971, -0.0589884147, 0.0699839592, 0.0196777284, 0.0156848282, 0.0183444172, 0.0755603388, -0.0804625899, -0.0952006727, -0.0293653104, -0.0054033604, 0.0742663071, -0.0699463785, 0.0346006677, -0.0352806449, 0.0229621325, -0.0157943498, 0.0525136739, 0.0355905704, -0.0587517060, -0.0077056205, -0.0738255382, 0.0499424376, -0.0702521726, 0.0316304117, 0.0321449563, -0.0283137765, 0.0620068274, 0.0527755246, 0.0525911190, -0.0699408948, -0.0048209475, -0.0189134926, -0.0318919905, -0.0166203678, -0.0523590110, -0.0090610152, 0.0004014000, 0.0582961328, 0.0013964155, -0.0179099627, -0.0116693061, 0.0514756143, -0.0332075842, 0.0164194144, 0.0000300605, 0.0089209285, -0.0232001618, -0.0115599195, -0.0190837346, -0.0259335004, 0.0108097689, 0.0662635788, -0.0651181564, 0.0518421866, 0.0507808998, -0.0220989250, -0.0523217767, -0.0025276849, 0.0218772069, -0.0518523678, 0.0617852584, 0.0546342060, 0.0017983866, -0.0518419780, 0.0644770563, 0.0520842969, -0.0552507900, 0.0415133685, -0.0137335565, -0.0363302119, 0.0526765957, -0.0230242368, -0.0357567929, 0.0099198511, 0.0403595865, -0.0033832705, 0.0180705618, 0.0468214639, -0.0211547259, 0.0438199677, -0.0072863572, 0.0045730416, -0.0146039929, -0.0687920973, -0.0605012365, -0.0714962557, -0.0115986047, 0.0284648016, -0.0412714556, 0.0526888780, 0.0121411476, 0.0269900840, -0.0138318753, -0.0543593653, 0.0549953580, -0.0157075096, 0.0641608909, 0.0193743370, -0.0776458308, -0.0969559550, -0.0301463865, 0.0314325392, 0.0130722346, 0.0240098741, 0.0541072153, -0.0468899235, -0.0018926776, 0.0747680739, 0.0442684628, 0.0133534502, 0.0122932717, 0.0510523021, -0.0631642714, 0.0767292902, -0.0376453288, -0.0351618454, 0.0265524480, 0.0795458108, -0.0300420057, 0.0704273134, -0.0045561125, -0.0055491952, -0.0267236792, 0.0188285038, -0.0409135707, 0.0003999123, 0.0181315951, -0.0676605776, -0.0114253554, -0.0196462628, -0.0028436400, 0.0887209475, -0.0595801622, -0.0023892804, -0.0660098866, -0.0065585971, -0.0267331786, 0.0464404486, 0.0709718093, -0.0305233058, 0.0091249337, 0.0343225598, 0.0619778521, 0.0047394861, -0.0103315245, 0.0349337086, -0.0571527407, 0.0020061338, -0.0103405332, -0.0707365125, 0.0030103512, -0.0579317883, 0.0142804161, 0.0047832569, -0.0417517051, 0.0303429551, -0.0373261347, -0.0799914375, 0.0411110483, 0.0607621223, 0.0599759147, -0.0200568512, -0.0705724582, -0.0152511140, 0.0405668765, -0.0067785154, 0.0932326168, 0.0090468992, -0.0138031207, 0.0397560224, 0.0425880812, -0.0633564591, -0.0564899594, 0.0088702468, -0.0382306799, 0.0588020980, -0.0296603665, 0.0493171513, -0.0154580558, 0.0042867297, -0.0276493635, 0.0287706777, 0.0743800923, 0.0196164548, -0.0216351375, 0.0416522175, -0.0066197650, -0.0602426529, -0.0488384999, 0.0777166113, 0.0394959636, -0.0169215519, 0.0139535442, 0.0145655014, -0.0097664604, -0.0765665099, 0.0334956422, -0.0320925601, 0.0614980944, -0.0231788438, 0.0444829315, 0.0110388575, -0.0545864031, 0.0219538752, 0.0037889539, -0.0573602282, -0.0474183001, -0.0311547387, -0.0592973791, -0.0283536445, 0.0069985725, -0.0481965765, -0.0562616102, 0.0130677270, 0.0511071980, 0.0315216295, 0.0369887315, -0.0288997572, -0.0139314141, -0.0820071772, 0.0722252280, 0.0099732857, -0.0132317822, 0.0233027507, 0.0357996710, -0.0350197367, 0.0039699250, -0.0855951086, 0.0741905570, 0.0379041694, 0.0566559918, 0.0146380933, -0.0657714605, -0.0096948389, 0.0602662414, 0.0335379317, -0.0377503484, -0.0630246401, -0.0261585061, 0.0050948923, 0.0448854938, -0.0038423752, 0.0516018458, -0.0331991874, -0.0634060949, 0.0339576937, -0.0457831956, -0.0497981980, -0.0501725599, -0.0488607027, 0.0591120869, 0.0431338623, -0.0185153428, -0.0383749194, 0.0321748219, -0.0311921556, 0.0570809878, 0.0050925924, -0.0185163934, -0.0536662377, 0.0282483995, 0.0595452078, -0.0641381592, 0.0008013496, 0.0049740383, 0.0268172659, 0.0646326765, 0.0543283708, -0.0718744844, 0.0319455676, -0.0019107037, 0.0235433113, -0.0213125404, 0.0027796312, -0.0133011201, 0.0449199416, -0.0262130052, -0.0732415393, -0.0463995934, -0.0524664968, -0.0622873083, -0.0087450454, 0.0009484641, -0.0337596089, -0.0675340667, -0.0134806046, 0.0332842134, 0.0459007621, 0.0405417308, 0.0549740419, -0.0176098365, -0.0509755388, 0.0255167931, -0.0300636012, 0.0668737218, 0.0037340592, -0.0271082632, -0.0082109161, -0.0651549622, 0.0252621118, -0.0105827535, 0.0296417456, -0.0008040557, -0.0379464105, 0.0091945939, 0.0592572168, -0.0168372076, 0.0217283014, 0.0044333935, 0.0832694843, -0.0255876798, 0.0543721542, -0.0097844657, 0.0478661433, -0.0375270769, -0.0208724532, 0.0533556305, -0.0625027940, 0.0337080769, 0.0267555434, -0.0215720683, -0.0426986329, -0.0406375043, 0.0605675913, -0.0411046296, 0.0552650392, -0.0533462204, 0.0327858254, 0.0325192921, -0.0453143567, 0.0320712849, 0.0047152494, -0.0474034026, -0.0538163297, 0.0313686095, 0.0635287389, -0.0552654415, 0.0085839555, 0.0336607955, -0.0484572649, -0.0037318438, 0.0483307466, 0.0321488902, -0.0035448871, -0.0616519004, 0.0576481037, 0.0397172794, -0.0651195720, -0.0361291952, -0.0450981148, -0.0813103989, -0.0025233324, 0.0569356382, -0.0100833541, -0.0495427959, -0.0627786145, -0.0030797038, -0.0653297827, 0.0121604204, -0.0879708976, -0.0380147956, -0.0741955116, -0.0394458361, 0.0479331873, 0.0487625897, 0.0042436933, -0.0364124812, 0.0196288768, 0.0382952876, 0.0239798315, 0.0795920938, 0.0327938460, 0.0434028246, 0.0589739457, -0.0075127399, -0.0061221016, -0.0437979326, -0.0010631562, 0.0832512304, -0.0009643558, 0.0321145281, 0.0169216879, -0.0506779589, 0.0385767743, -0.0451326668, -0.0078393510, 0.0532318912, -0.0015570124, -0.0090156980, 0.0163091253, -0.0512574911, 0.0341801047, 0.0468529314, -0.0082122656, 0.0084415516, -0.0049715620, -0.0309640635, -0.0775711834, 0.0246848296, 0.0661642030, -0.0300675016, -0.0560917109, -0.0151452273, 0.0546325073, -0.0067142001, 0.0017785298, -0.0539111681, 0.0367961191, -0.0623306036, -0.0663695633, -0.0429806076, -0.0221465733, -0.0066525452, -0.0557576977, 0.0155212525, 0.0213169884, -0.0174016692, 0.0289252903, -0.0459528193, -0.0037459985, 0.0132517563, -0.0572667345, -0.0005464816, -0.0428416654, 0.0078684073, 0.0293739084, -0.0418830775, -0.0161545742, -0.0173508301, -0.0551660471, 0.0308373664, -0.0478885025, -0.0432559550, 0.0018066305, -0.0613125749, 0.0603607297, 0.0258216877, 0.0125000933, 0.0481734276, 0.0034175948, 0.0285482984, -0.0710366741, 0.0783090070, -0.0670271143, -0.0145340739, -0.0518177971, 0.0097523630, 0.0577393696, -0.0611582100, -0.0261108801, -0.0488513932, 0.0876204222, 0.0072735562, -0.0105915247, 0.0043170732, -0.0036524395, -0.0056336462, -0.0217185114, -0.0022041330, 0.0584945492, 0.0689256936, 0.0517058000, -0.0020270101, 0.0867185891, -0.0470545441, -0.0160069149, -0.0129689584, -0.0447907858, 0.0023126605, -0.0163475685, 0.0452164784, -0.0516785830, 0.0096009811, 0.0681764781, -0.0356613658, -0.0726850852, 0.0473175794, 0.0506523773, 0.0026872919, 0.0202863030, -0.0153758070, -0.0700989217, -0.0421320125, -0.0138915908, -0.0520100929, 0.0160170421, -0.0298322905, 0.0177443139, 0.0716058984, 0.0449320823, 0.0695823506, 0.0238700397, -0.0189742111, -0.0682090595, 0.0635648593, -0.0459715687, -0.0245559569, 0.0340959840, 0.0039847796, 0.0114557147, 0.0651951656, 0.0373681001, -0.0328237452, -0.0585424304, -0.0790351331, -0.0381502770, 0.0504078008, 0.0443341509, -0.0101210643, 0.0753942207, 0.0534741543, -0.0639264062, -0.0245409925, 0.0744301081, 0.0025128322, 0.0624358468, 0.0484473780, -0.0630337149, -0.0384473428, 0.0623377524, -0.0046212901, -0.0542526953, -0.0356572643, -0.0084941769, -0.0142126326, 0.0118138222, 0.0269200187, 0.0225428101, -0.0644154921, -0.0031084572, 0.0018909503, 0.0633962750, -0.0319593661, -0.0599310771, -0.0021984526, 0.0255297683, 0.0222520139, -0.0639672875, -0.0598969385, -0.0345379785, 0.0389910974, 0.0048647691, 0.0194387361, 0.0237142406, -0.0660175830, 0.0375641733, 0.0407103971, 0.0509157367, -0.0650438443, -0.0095354449, 0.0226650946, 0.0197423752, 0.0065226960, -0.0495585017, -0.0698514804, 0.0064294101, -0.0081854444, 0.0269491039, 0.0253458284, 0.0069147334, -0.0788846835, -0.0099291904, -0.0201602913, -0.0340170786, -0.0271512270, 0.0618134178, -0.0624350570, 0.0128623694, 0.0194933321, 0.0240851194, -0.0740395114, -0.0392143689, 0.0421799310, -0.0326969139, 0.0188924037, -0.0179386586, -0.0658761486, -0.0793136433, -0.0459729880, -0.0671415702, 0.0547652915, -0.0625367612, -0.0122462735, -0.0473571047, -0.0191558748, -0.0273240134, -0.0435476974, -0.0364649855, 0.0687806010, -0.0785664618, -0.0272457860, 0.0594764352, 0.0124678193, -0.0442612581, 0.0451743081, 0.0366750509, -0.0226678997, -0.0408979654, -0.0361196846, 0.0565602370, -0.0049014995, -0.0143476576, 0.0432531945, 0.0254966002, -0.0525751226, 0.0750498325, -0.0260739736, -0.0647934377, -0.0727241710, 0.0398507304, 0.0197381657, -0.0238561910, -0.0552448370, -0.0359371938, 0.0250680130, -0.0565260686, 0.0005930725, -0.0561722964, 0.0134667242, -0.0392168835, -0.0532679372, -0.0297052264, -0.0893038288, 0.0358392410, -0.0179411639, 0.0546355918, 0.0609776527, -0.0540293939, -0.0085719833, 0.0381668210, 0.0501640737, 0.0062460979, 0.0684468150, 0.0172899310, -0.0007539865, -0.0345560387, 0.0574904606, 0.0657911226, 0.0157098752, 0.0476834960, -0.0296885185, 0.0409688540, 0.0338191763, 0.0332500339, -0.0620833263, 0.0219187662, 0.0665509626, -0.0213604346, -0.0175843760, -0.0361315347, 0.0305223670, 0.0327714346, -0.0061861691, -0.0200100467, 0.0194261950, -0.0697463974, -0.0253362358, 0.0562000424, 0.0576585978, -0.0045364052, -0.0462592877, -0.0508642122, -0.0182944760, 0.0309383925, 0.0476012565, -0.0482006967, 0.0792737007, 0.0140939578, 0.0621171184, -0.0573994331, 0.0592085458, -0.0373811573, 0.0333023928, -0.0517329425, 0.0640593618, 0.0131726954, 0.0283961501, 0.0417465344, 0.0597679503, 0.0217961296, -0.0587061495, 0.0759515241, -0.0268399362, 0.0784922689, -0.0007367081, -0.0508259535, -0.0922558829, -0.0342258625, 0.0422291309, 0.0339180380, -0.0019295388, -0.0467322245, 0.0492182672, 0.0326657705, -0.0069283992, -0.0426395051, 0.0048854412, 0.0332354009, -0.0364975519, -0.0313723534, 0.0319133885, -0.0373973511, 0.0433389507, -0.0375364386, 0.0252762772, 0.0287023578, -0.0121720983, 0.0203719828, -0.0325746872, -0.0092198504, -0.0175333526, -0.0360326320, 0.0192662608, -0.0761976391, -0.0197882727, 0.0832944736, 0.0682756007, -0.0237309821, -0.0766760930, -0.0680405498, -0.0302244164, -0.0273675937, 0.0013115522, -0.0151584465, -0.0505615249, 0.0462012067, 0.0058527715, 0.0058207992, 0.0476081371, -0.0189169701, -0.0014822516, 0.0079902858, -0.0742847398, 0.0356126465, -0.0611868687, -0.0364429429, -0.0333190672, 0.0456868261, -0.0673660412, 0.0425634421, 0.0064121098, -0.0610809997, 0.0252664685, -0.0849959627, 0.0549247898, 0.0176019035, -0.0403931625, -0.0170442201, -0.0138066038, -0.0255423710, -0.0062273038, 0.0654611215, 0.0463639796, 0.0559013374, 0.0407836065, -0.0550384633, 0.0498415902, 0.0555518344, -0.0072668684, 0.0405809358, 0.0270039681, -0.0284982659, 0.0500114672, 0.0348084904, 0.0317250304, 0.0604256801, 0.0779795051, -0.0061050160, -0.0725282282, 0.0743957534, -0.0556875132, 0.0239025522, -0.0517450571, -0.0098021654, 0.0077661695, 0.0407702439, 0.0587113388, 0.0314699225, 0.0109379226, 0.0618582033, -0.0691858083, -0.0236289185, -0.0536140427, 0.0303144958, -0.0300107952, 0.0228958130, 0.0384403504, 0.0132735763, -0.0509020388, -0.0757063553, 0.0568203926, 0.0055588032, 0.0118991006, -0.0578815863, -0.0713322386, 0.0169017725, 0.0271966849, -0.0587325916, -0.0334339663, 0.0219102316, 0.0001543856, 0.0218638536, -0.0244110674, 0.0099844448, -0.0047687460, -0.0530844964, -0.0555751137, -0.0567832626, 0.0538311452, -0.0324968845, -0.0556643046, -0.0456389040, -0.0035984432, 0.0439777300, -0.0410594381, 0.0606973693, 0.0561820827, 0.0196686406, 0.0035149178, -0.0086502293, -0.0055327821, 0.0723369494, -0.0075998111, -0.0299831238, 0.0644396618, 0.0242835525, -0.0096477168, -0.0038200477, 0.0715369731, -0.0568859391, 0.0644276217, -0.0269578435, -0.0036671972, 0.0545002520, -0.0689213946, -0.0677514449, -0.0707754791, -0.0248487517, 0.0359493010, 0.0550896712, -0.0013192648, 0.0074073053, 0.0354044735, -0.0298877545, 0.0538056083, -0.0301698335, 0.0363368839, 0.0292503461, -0.0392902456, 0.0084360940, 0.0608218499, 0.0541367792, 0.0153309228, -0.0384231880, -0.0353133418, -0.0303668398, 0.0005964239, -0.0210815854, -0.0292610023, 0.0714283362, 0.0483084545, -0.0603944547, -0.0213972088, -0.0301629398, -0.0641157851, -0.0840573534, -0.0284524355, 0.0597128309, -0.0312021039, -0.0161253382, 0.0297609493, 0.0297621004, -0.0198583417, -0.0353897251, -0.0404525921, 0.0557458885, 0.0203123782, -0.0154296374, -0.0331305936, -0.0023030539, 0.0517282933, -0.0399759971, -0.0561101809, -0.0359045565, -0.0279967431, 0.0583521500, 0.0521596000, -0.0297252517, -0.0454079099, 0.0108990744, 0.0217551608, -0.0330665223, -0.0204422642, 0.0548671037, -0.0516287573, -0.0638931766, 0.0472557545, 0.0727713779, -0.0573732518, 0.0040046265, -0.0730946660, -0.0755239502, -0.0000751334, 0.0576631464, 0.0492209345, 0.0378051475, 0.0564893931, -0.0023965011, 0.0078889597, -0.0267069917, 0.0510196500, -0.0011320361, -0.0329706930, -0.0024785148, -0.0289596915, -0.0097504919, -0.0336545296, -0.0143787684, -0.0226174798, -0.0255437195, 0.0532860309, -0.0515465513, 0.0065950518, 0.0040692845, -0.0542334914, -0.0335775986, 0.0521061346, 0.0279654413, 0.0171381868, 0.0042786603, 0.0575297512, -0.0111828651, 0.0678675100, -0.0977031440, 0.0303319208, -0.0083935689, 0.0521528497, -0.0315610506, -0.0738223270, 0.0110018700, -0.0629738569, -0.0675942972, 0.0754234269, 0.0783158392, -0.0388853326, -0.0267784279, -0.0554626025, -0.0778177157, 0.0293833893, 0.0403413698, 0.0029265061, 0.0302988701, 0.0063458611, 0.0694637001, -0.0321389548, -0.0656026304, 0.0581864566, -0.0260748938, 0.0216990467, -0.0319310389, 0.0642161667, -0.0245542154, 0.0081277061, -0.0033338950, -0.0486796573, 0.0574874990, -0.0078339288, 0.0429947972, 0.0455486067, -0.0578031763, -0.0123624066, -0.0782766044, -0.0691100582, 0.0123086702, 0.0782701224, 0.0603766665, 0.0221325587, 0.0800340325, 0.0400052294, -0.0245869067, 0.0145158302, 0.0234444775, 0.0648239031, 0.0850130022, -0.0412612632, -0.0718038902, 0.0063723880, -0.0003232415, 0.0243130289, -0.0109838825, -0.0102610551, 0.0080573233, 0.0121944882, -0.0174177382, 0.0410006903, -0.0229229182, -0.0025578528, -0.0741922036, 0.0323118679, -0.0691567883, 0.0617921464, 0.0413478389, -0.0764288828, 0.0543818362, -0.0785408020, -0.0256586056, -0.0021696039, 0.0252465047, -0.0464635938, 0.0025058966, -0.0350736305, 0.0276801717, 0.0633854195, -0.0517522804, -0.0100574242, 0.0246468317, 0.0596764348, 0.0128699839, 0.0353149846, 0.0032880623, 0.0682043582, -0.0296139307, -0.0516962260, 0.0395962894, 0.0620880127, 0.0071041621, -0.0098041641, 0.0516550988, -0.0934753865, -0.0647309646, 0.0280282982, -0.0189568102, -0.0619022287, 0.0340107456, -0.0013286157, 0.0252807923, -0.0124839358, -0.0384808332, 0.0262700841, 0.0765141770, -0.0729015172, 0.0808388367, 0.0057260231, 0.0621036440, 0.0210870169, 0.0052322340, -0.0135434521, -0.0415559597, -0.0045727808, 0.0506877862, 0.0499646366, -0.0528513789, -0.0515316464, -0.0015164431, 0.0073195649, -0.0484923534, -0.0399698764, -0.0046003275, -0.0125260921, 0.0662901476, -0.0625083745, -0.0070816884, -0.0775693059, 0.0648222044, -0.0238413196, 0.0320521593, 0.0489285886, 0.0382715277, 0.0529730506, -0.0259095095, -0.0672038794, 0.0414206348, -0.0400920659, 0.0087084454, -0.0821200907, 0.0368131250, 0.0497474633, 0.0353181697, 0.0337143056, -0.0220294315, -0.0566939339, -0.0324542448, -0.0147861438, -0.0674462095, 0.0005861918, 0.0676019713, -0.0166435484, 0.0198928751, 0.0426425561, -0.0201433860, -0.0009204268, 0.0678163394, 0.0044719856, -0.0701417401, 0.0503867492, 0.0342355892, -0.0109497402, 0.0621853843, 0.0150784692, -0.0233447179, -0.0652458891, 0.0116689792, -0.0367956460, -0.0290777329, -0.0009388272, 0.0592486188, 0.0337786227, 0.0274518449, 0.0144707235, -0.0630802363, 0.0325345360, 0.0552716404, 0.0314487591, -0.0010918361, -0.0207376964, -0.0721304193, 0.0843060911, -0.0589019023, 0.0261528566, 0.0311014857, -0.0339470804, -0.0533225760, -0.0189785697, 0.0131755574, -0.0617668927, 0.0084134499, -0.0218045264, 0.0322248787, 0.0191895328, 0.0697393641, 0.0184505954, 0.0277163573, 0.0163585525, 0.0306162331, -0.0269097965, 0.0233040676, -0.0347918868, 0.0069763591, 0.0509550869, -0.0051231226, 0.0177548826, 0.0529211611, 0.0350232460, 0.0006046833, -0.0516039878, 0.0563914813, 0.0335510783, 0.0061243018, 0.0297854301, 0.0410042144, -0.0189978443, -0.0361492969, 0.0133880377, -0.0337862037, 0.0649410784, 0.0375973880, 0.0273685735, -0.0473514907, 0.0503763594, 0.0114173964, 0.0186540801, -0.0293426588, -0.0182908401, 0.0440391265, 0.0098754317, -0.0541457199, 0.0365971476, 0.0236390289, 0.0270883031, -0.0287635028, -0.0026629965, -0.0430857986, 0.0122385817, 0.0493695475, -0.0659112632, 0.0370762534, 0.0284824539, -0.0733986571, 0.0561465509, 0.0034510917, -0.0092548439, 0.0321807675, -0.0039669690, 0.0152092287, -0.0247946214, 0.0576650500, -0.0068966337, -0.0227333717, 0.0437554605, 0.0342782475, -0.0820079669, 0.0259887129, -0.0202305168, -0.0615948029, 0.0598932765, -0.0168148465, -0.0280342717, 0.0389525034, 0.0071207732, -0.0608986169, 0.0452130511, -0.0353314057, -0.0048510083, 0.0228994992, -0.0349793248, 0.0602852255, 0.0088651376, -0.0444764830, -0.0251423214, 0.0207394678, -0.0729178786, 0.0600241348, -0.0721823201, 0.0210241079, -0.0216847844, 0.0613012984, 0.0298715085, -0.0030046040, -0.0576895252, -0.0245060269, 0.0004494952, 0.0444661602, -0.0397952572, -0.0545020886, 0.0500387363, 0.0338741317, -0.0376861915, -0.0754795074, -0.0113348821, -0.0626907200, -0.0627774447, 0.0444748029, -0.0178513229, -0.0589561090, -0.0595303960, -0.0704409182, 0.0500184186, -0.0811366811, -0.0639849678, 0.0368926898, -0.0201429557, 0.0594998449, -0.0183583349, -0.0632462129, 0.0433532298, -0.0456970707, 0.0617575683, -0.0721239373, 0.0420629680, -0.0714101642, -0.0099093067, -0.0194188114, -0.0443116166, -0.0098571442, -0.0078513091, 0.0424803235, 0.0030824190, -0.0634402856, 0.0250960495, -0.0153507218, -0.0802599564, 0.0137618314, 0.0437877066, 0.0322330035, -0.0629541352, 0.0302081183, -0.0328838974, -0.0280200616, -0.0683840737, -0.0544615686, 0.0530208312, -0.0622696690, -0.0200560428, -0.0520442575, -0.0334704854, -0.0081860889, -0.0684744939, -0.0607668497, -0.0583198816, -0.0574426651, -0.0309957191, 0.0660541281, -0.0099780206, 0.0685840473, 0.0102123953, 0.0489085428, -0.0290069841, -0.0252687521, -0.0401854925, 0.0409430861, -0.0167628434, -0.0481567718, -0.0222241972, 0.0654887334, -0.0498597436, -0.0093691070, -0.0402682722, 0.0142262969, 0.0177477412, -0.0512885936, 0.0436110497, 0.0050148987, 0.0274868961, -0.0564223938, 0.0749194920, -0.0276993979, 0.0009874179, 0.0418115333, 0.0296918955, -0.0557640791, -0.0760262907, -0.0282042548, -0.0322288424, 0.0266776923, 0.0371974856, -0.0003404881, -0.0036880772, -0.0532199591, 0.0116992733, 0.0187532678, 0.0125695039, 0.0756355599, -0.0329004079, -0.0326559283, 0.0149554349, -0.0158313625, 0.0021840779, 0.0446299203, -0.0009403921, -0.0083630029, -0.0130447811, -0.0320561752, 0.0326989032, -0.0171195902, -0.0043485430, -0.0588600524, 0.0230120942, 0.0569657497, -0.0135882040, -0.0128506832, 0.0509692393, -0.0367823169, 0.0305284634, -0.0474502072, -0.0291865729, 0.0283549577, 0.0049505131, -0.0547952317, -0.0044886437, -0.0015457678, 0.0432915501, 0.0140693048, 0.0541047230, -0.0322477184, 0.0152569516, -0.0903315991, -0.0204893220, -0.0497340597, -0.0275733694, 0.0524055660, 0.0443125442, -0.0312486384, -0.0659700632, 0.0013949156, 0.0189756900, 0.0175434705, -0.0285263117, -0.0218232218, -0.0184953194, -0.0069382139, 0.0153941903, 0.0023751070, 0.0609930232, 0.0476691648, -0.0796501413, -0.0148268128, -0.0790317059, -0.0360266156, 0.0640878752, -0.0971954465, -0.0229285210, 0.0013838009, -0.0539949499, -0.0264207106, -0.0532735549, -0.0402808189, 0.0601834692, 0.0614417009, 0.0021281666, -0.0462567471, 0.0418174863, -0.0403466187, 0.0634110197, -0.0294293780, 0.0122195734, -0.0346501619, 0.0047251210, 0.0389763601, 0.0068134209, -0.0412016697, 0.0020475562, 0.0829244033, 0.0589803495, -0.0307110474, 0.0253901165, -0.0924693495, 0.0472992398, 0.0827036798, 0.0689270794, -0.0544928610, 0.0313659683, 0.0344085321, -0.0436450019, -0.0712064654, 0.0506484509, 0.0562965684, -0.0422403440, -0.0614344962, -0.0043948656, 0.0134673929, -0.0799520686, -0.0640033334, 0.0405918062, 0.0131926443, -0.0296090506, -0.0629974231, -0.0545659624, -0.0521335639, 0.0662270263, -0.0234221257, -0.0428151898, 0.0841306597, 0.0414404050, -0.0341935195, -0.0159460455, -0.0448228531, 0.0020938148, -0.0367316753, -0.0590654612, 0.0041769650, -0.0235946495, 0.0260307621, 0.0164466519, -0.0245668869, 0.0042712367, -0.0324040428, -0.0581850410, -0.0276656970, -0.0019288511, 0.0153780608, -0.0365404896, -0.0427250825, 0.0561575480, 0.0542267077, 0.0291081611, 0.0219194796, -0.0686200634, 0.0015682332, -0.0171601884, 0.0640935823, 0.0492254198, 0.0626686066, 0.0389767773, 0.0612808019, 0.0261920709, 0.0037117607, 0.0573838241, -0.0303423591, 0.0536279567, 0.0180176850, 0.0290483404, 0.0744023174, -0.0267274473, 0.0247895569, 0.0739266425, 0.0281363912, -0.0736804083, -0.0803786963, -0.0082347021, -0.0611115731, -0.0612283237, 0.0188569240, -0.0114218490, -0.0132758012, -0.0051450823, -0.0824844018, 0.0601615459, 0.0536270887, -0.0527049787, 0.0625813380, 0.0147592500, 0.0098342393, 0.0154947946, -0.0227565914, -0.0008103448, 0.0501242131, 0.0330272503, 0.0259973910, 0.0015136334, -0.0316943489, 0.0096313134, 0.0377597138, -0.0103878500, -0.0060994471, 0.0258278064, 0.0163800810, 0.0567974560, -0.0422404222, -0.0471895337, -0.0180254709, 0.0734095350, 0.0080803223, 0.0125864763, 0.0072278897, 0.0647680759, 0.0509908274, -0.0134194661, -0.0648976117, 0.0271875616, -0.0541949980, -0.0061722235, -0.0467797518, 0.0191595405, 0.0674817264, -0.0643275753, -0.0470461175, -0.0302106272, 0.0817872733, -0.0234081782, -0.0238316916, 0.0488085747, -0.0098024458, 0.0713999420, -0.0664263740, -0.0510148630, 0.0615983531, -0.0276919063, 0.0481599495, 0.0749288797, -0.0353485793, -0.0625469536, 0.0000283250, 0.0379414633, 0.0053075249, -0.0330196656, 0.0152738206, 0.0191389211, 0.0322704427, -0.0580452830, -0.0705285668, 0.0446336903, -0.0415683798, 0.0310481805, 0.0070537999, -0.0547155440, -0.0605976582, 0.0145598482, -0.0328188315, 0.0041303667, 0.0632510483, -0.0508830585, -0.0054837507, 0.0002689369, 0.0643080696, 0.0162260886, 0.0524030775, -0.0369477086, -0.0124764554, 0.0368631445, 0.0556929447, -0.0011907031, -0.0572282895, -0.0470002927, -0.0146924602, 0.0238477308, -0.0210967101, 0.0261879377, 0.0221284498, 0.0277030300, -0.0207312163, -0.0113234939, -0.0183534361, -0.0512421988, -0.0238408335, 0.0494848303, 0.0725064352, -0.0102560520, -0.0057304208, 0.0601845011, 0.0862008035, 0.0010791763, -0.0377280265, 0.0212186780, 0.0758070275, 0.0728606433, 0.0405136757, 0.0495597832, 0.0160779934, 0.0441702269, -0.0021793470, 0.0815797672, 0.0112745604, 0.0371697247, -0.0270340610, -0.0467521809, 0.0217809211, -0.0330397673, -0.0551024750, -0.0916474164, -0.0348333567, -0.0323671252, -0.0521549918, 0.0103552202, -0.0082941484, 0.0428778306, 0.0874524415, -0.0161123555, -0.0473846197, 0.0159054250, -0.0205442365, 0.0074910913, -0.0225234814, 0.0287290793, 0.0063623255, 0.0442719944, -0.0072812336, -0.0269956030, -0.0623870268, -0.0122813564, -0.0636423454, 0.0472786687, -0.0647291020, 0.0548788123, 0.0098750452, -0.0050344770, 0.0256333705, 0.0378286242, 0.0451232083, 0.0351870209, 0.0023953805, 0.0817761943, 0.0171948466, 0.0552297309, 0.0519578084, 0.0531438701, -0.0127040753, -0.0022117654, 0.0475004315, -0.0687095746, -0.0300293751, -0.0334159248, 0.0164765157, -0.0493492484, 0.0637696758, -0.0250177402, 0.0331550799, -0.0082892962, -0.0104585672, 0.0609117411, -0.0398988500, 0.0430476554, 0.0668348894, -0.0634231269, -0.0101156924, 0.0392895490, 0.0407326370, 0.0034895979, 0.0370837823, -0.0708828121, -0.0236511622, 0.0011733511, 0.0547521599, -0.0686848685, 0.0130814323, 0.0368703455, 0.0131006250, -0.0264841896, 0.0576985776, -0.0475917719, 0.0855081901, -0.0839993060, -0.0440807417, 0.0173374563, 0.0133468984, 0.0211088099, -0.0717405304, -0.0366536155, 0.0878923982, 0.0704625547};
# 28 "./parameters.h" 2
# 1 "./weights/b9.h" 1
# 12 "./weights/b9.h"
conv2d_2_bias_t b9[64] = {0.0077983914, 0.0166100152, -0.0160231832, 0.0191579498, -0.0105886953, -0.0181362983, -0.0069178338, 0.0207736529, 0.0147942221, -0.0172134787, -0.0185710080, -0.0181836020, -0.0151005425, -0.0168719217, -0.0178549234, 0.0192559008, 0.0167573038, 0.0162584186, -0.0187522639, 0.0075536859, 0.0163704827, -0.0192142185, -0.0221919306, 0.0176788308, -0.0117784860, -0.0035717529, -0.0157723483, 0.0151006309, -0.0204687491, 0.0192915276, -0.0187046286, 0.0140893292, -0.0216174200, -0.0184901785, -0.0076616155, 0.0207896344, -0.0142689142, -0.0218921136, -0.0154761095, 0.0277165249, -0.0021651054, -0.0142231537, 0.0121383658, 0.0086698402, -0.0181406140, 0.0162831433, 0.0178743675, 0.0172506291, 0.0167467762, 0.0086440556, 0.0138874194, 0.0212360919, 0.0212951098, 0.0209667720, 0.0099000689, -0.0193504374, 0.0146786300, 0.0256629884, 0.0155057553, -0.0161218401, 0.0108857807, -0.0115182828, -0.0183570590, -0.0198637713};
# 29 "./parameters.h" 2
# 1 "./weights/w12.h" 1
# 12 "./weights/w12.h"
conv2d_3_weight_t w12[18432] = {-0.0483517274, -0.0135888839, -0.0533309653, -0.0828230008, -0.0769828558, -0.0321850814, -0.0018432708, -0.0593782291, -0.0425995030, 0.0400624350, 0.0591106899, -0.0294780210, 0.0061832713, -0.0045740074, 0.0890479311, -0.0276280772, -0.0239323676, -0.0558891557, -0.0036538588, -0.0223601963, -0.0777689815, 0.0443073623, 0.0113798492, -0.0329936966, -0.0268280674, 0.0123927360, -0.0715602189, 0.0029465654, -0.0323752835, -0.0816144422, 0.0709555373, -0.0801804587, 0.0505362116, 0.0628143027, 0.0608497411, -0.0332361758, 0.0865298584, 0.0564223789, 0.0075713024, 0.0073984219, 0.0650658235, 0.0261244029, -0.0406587385, -0.0440006964, -0.0413615890, 0.0479539670, -0.0168668609, 0.0277853943, -0.0291041806, 0.0015811009, -0.0514510311, -0.0401490219, 0.0088326456, -0.0853420720, -0.0594327636, 0.0354620032, -0.0533086844, 0.0496200398, -0.0775629655, 0.0912909284, -0.0354024023, 0.0748080239, 0.0219568629, 0.0790603161, -0.0528442711, -0.0331705362, -0.0279583037, 0.0256377887, 0.0843503624, -0.0057718032, 0.0854918659, 0.0454767272, -0.0403349437, 0.0096351458, 0.0385541655, -0.0430469289, 0.0774350911, -0.0680911019, 0.0706507117, 0.0428768769, 0.0491855070, -0.0766157955, 0.0691165999, 0.0679329857, -0.0214446876, 0.0474983752, 0.0566342287, 0.0185534656, 0.0713282973, -0.0562266819, 0.0798320770, -0.0021568518, -0.0246596634, -0.0997820571, 0.0175452698, -0.0554509126, 0.0237111915, 0.0395680927, 0.0644474775, -0.0562472306, -0.0482213162, 0.0778631046, -0.0140017113, 0.0975511447, 0.0387259461, -0.0530179404, -0.0560393855, -0.0862853676, 0.0243983213, 0.0164100267, -0.0597079732, -0.0741079524, -0.0322565660, -0.0229289196, -0.0626399964, -0.0254765153, 0.0650357902, -0.0523339361, -0.0380002968, -0.0398404635, -0.0490076132, -0.0316773243, -0.0770449415, 0.0409144983, -0.0106325978, 0.0303136595, 0.0868059620, -0.0448602065, -0.0193738043, -0.0636064857, 0.0738242194, 0.0111929132, 0.0864873007, -0.0066308356, -0.0479616523, 0.0594973788, -0.0267745219, 0.0387844555, -0.0205682535, 0.0442835093, -0.0842975304, -0.0057972469, 0.0821157545, 0.0662647262, -0.0728054494, -0.0052618082, -0.0567992963, -0.0835072026, 0.0627125576, 0.0169058274, -0.0317302085, 0.0305782706, -0.0683298558, -0.0243048202, -0.0183638725, 0.0646738708, 0.0249371100, -0.0298414323, -0.0239981227, 0.0283281542, 0.0343583487, 0.0374356695, -0.0615057796, 0.0519457348, -0.0697411373, 0.0615927801, 0.0460769199, -0.0304320659, 0.0335263200, -0.0437463596, -0.0137694487, -0.0430008471, -0.0855121836, -0.0708509088, -0.0733725280, 0.0901999176, -0.0752279013, -0.0591928363, -0.0359214991, 0.0631204695, -0.0689871684, 0.0074042832, -0.0127656609, -0.0024308220, 0.0068666101, -0.0683735162, -0.0418432131, -0.0304055363, -0.0615930632, -0.0682236552, 0.0416058078, -0.0077240211, -0.0523260981, -0.0760643035, 0.0973723903, -0.0485217087, 0.0618968494, -0.0376643799, -0.0312176216, -0.0174640976, 0.0239768233, 0.1010679826, 0.0545061082, 0.0841799900, 0.0404659882, 0.0535366908, 0.0362586342, -0.0828670785, 0.0327951945, -0.0448268354, 0.0269586369, 0.0614213869, -0.0793124288, 0.0675901994, -0.0704361126, -0.0563778244, 0.0312192664, -0.0154797360, 0.0174333416, 0.0565000884, -0.0330551825, 0.0392238572, 0.0808839351, -0.0830295533, 0.0753692687, 0.0243951324, 0.0611821711, 0.0198235605, -0.0656233877, 0.0224820636, 0.0653030351, 0.0577827059, 0.0037602833, 0.0286415033, 0.0090811541, -0.0927610174, 0.0558009669, 0.0248915106, -0.0329099707, -0.0798055083, -0.0636959374, -0.0575540513, 0.0402014032, 0.0228540245, 0.0019158749, 0.0525577664, 0.0072679603, 0.0098149832, -0.0395610854, -0.0261828694, -0.0499414355, -0.0517765395, -0.0605513602, -0.0103774918, 0.0087943831, 0.0098125851, -0.0637707040, -0.0648915544, 0.0096013937, 0.0107469894, 0.0011040900, -0.0086379573, 0.0054310285, -0.0799787417, 0.0097547546, 0.0160223991, -0.0709328055, 0.0325153805, 0.0270901509, 0.0095960647, -0.0701159015, -0.0015429605, -0.0446290374, -0.0433307551, 0.0416033790, -0.0529190525, 0.0136490269, -0.0393737480, 0.0119722364, -0.0018046849, -0.0709851682, 0.0749796927, -0.0314126387, 0.0663073659, 0.0448427908, 0.0099776080, -0.0189415030, -0.0269232783, 0.0097056599, -0.0270978343, -0.0361401550, -0.0876407698, 0.0678869113, 0.0195275005, 0.0429398939, -0.0483547635, 0.0390907452, 0.0006046466, -0.0669189095, 0.0155245299, 0.0581236295, -0.0651204064, -0.0612021089, 0.0024643417, 0.0437000729, -0.0180787854, -0.0706552193, -0.0917008296, -0.0243108142, 0.0088301580, -0.0169924237, -0.0048485999, -0.0505393706, -0.0377770849, -0.0697629675, 0.0460127443, 0.0713321567, -0.0029369663, 0.0410752147, 0.0152951172, -0.0414828174, -0.0950478241, 0.0392829999, 0.0642352477, -0.0052124788, 0.0269459188, 0.0082388008, 0.0016054439, 0.0292559322, 0.0226334911, -0.0147961322, -0.0074699200, -0.0313154832, -0.0432859808, -0.0012228130, 0.0558744147, 0.0421045534, 0.0563059449, 0.0339111350, -0.0423190556, 0.0075201569, 0.0542303696, -0.0946734175, -0.0021439632, -0.0324533693, 0.0528772175, 0.0965669900, -0.0861941501, 0.0193790030, 0.0001159998, -0.0715434328, -0.0458981618, -0.0512589253, -0.0112301921, 0.0772631615, 0.0053763986, 0.0365460217, 0.0587463975, 0.0875813663, -0.0753768310, -0.0207534656, -0.0817762241, -0.0200876500, 0.0058412836, -0.0842832997, -0.0826100484, 0.0495668985, -0.0226368010, 0.0532924682, 0.0060182209, -0.0558373556, -0.0051547075, 0.0042183762, 0.0237092841, -0.0159030203, -0.0295663234, 0.0064801537, -0.0109386174, 0.0326737016, 0.0714895055, 0.0163507909, -0.0308629386, -0.0442417674, 0.0636125356, -0.0753777921, 0.0398643017, 0.0687163994, 0.0015765461, -0.0653978884, 0.0627107844, -0.0934409425, 0.0370075665, -0.0020348968, 0.0632289425, 0.0591505058, 0.0266582333, -0.0037960627, -0.0057520717, 0.0692287683, 0.0456604250, 0.0909155235, 0.0117617492, -0.0538444109, -0.0355015844, 0.0005889664, 0.0374482498, 0.0779160485, 0.0055281031, -0.0920890346, -0.0613708347, -0.0000001206, 0.0520582870, 0.0160971191, -0.0670524761, 0.0347917937, -0.0038599037, -0.0475996099, 0.0386752300, 0.0757258907, -0.0107264044, 0.0005213642, 0.0406296402, 0.0025244069, -0.0143620586, 0.0038454658, 0.0090353973, 0.0213056281, 0.0295949336, -0.0547552519, 0.0360473394, 0.0144595634, -0.0022005178, -0.0151155386, 0.0042128540, 0.0023964983, 0.0312829055, -0.0273971725, -0.0222552214, 0.0834550485, -0.0323128887, -0.0035861926, -0.0459258743, 0.0144972662, -0.0076159844, 0.0632175282, 0.0542181619, -0.0247931406, 0.0276198387, -0.0113463951, -0.0476010554, 0.0807008669, -0.0769862384, -0.0053961519, 0.0207270663, -0.0720771253, -0.0208821036, -0.0492685996, 0.0866105855, 0.0727616325, -0.0094808666, 0.0641099066, -0.0144826826, -0.0053419699, -0.0159505457, 0.0000101431, 0.0050452929, -0.0080225654, -0.0854528919, -0.0913688317, -0.0128098009, -0.0288898200, -0.0780549124, 0.0149788382, -0.0085760597, -0.0535832308, 0.0070740520, -0.0249925703, 0.0321892686, -0.0475834161, -0.0670580417, -0.0601151809, -0.0206172727, -0.0080136098, -0.0740583614, 0.0673873052, 0.0384645350, 0.0689692870, 0.0558729097, -0.0042515788, 0.0433261953, 0.0007364512, 0.0426365882, -0.0032739833, -0.0362374447, 0.0315388553, -0.0092316093, 0.0297451280, -0.0449434146, -0.0547562018, 0.0324458331, -0.0351769999, -0.0256550889, 0.0371639803, -0.0344427973, -0.0294082556, -0.0040759183, -0.0292964187, 0.0191571116, 0.0379311219, 0.1093802452, 0.0004371890, -0.0253809448, -0.0341168493, -0.0103152990, 0.0888064057, -0.0361581147, 0.0714312270, 0.0691416636, -0.0818008110, -0.0864366367, 0.0079059647, 0.0286833253, 0.0538836792, 0.0785595253, 0.0139893731, -0.0516256094, 0.0732150227, -0.0501110666, -0.0060202507, 0.0711680353, 0.1122794151, 0.0532408878, 0.0307594109, 0.1040422097, 0.0193791520, 0.0272003599, 0.0872754306, -0.0428543799, 0.0625233501, -0.1035182402, 0.0448273160, -0.0197636951, 0.0972592458, 0.0397821218, -0.0129399356, 0.0394499712, -0.0351216495, -0.0146979261, -0.0204401892, -0.0073832138, -0.0235058945, -0.0700385049, -0.0712760240, 0.0766396150, -0.0443311781, -0.0744836777, 0.0910840705, 0.0306559149, -0.0347674154, -0.0921589732, -0.0744858086, 0.0013894069, 0.0469793752, -0.0875689015, -0.0131102335, -0.0274799168, 0.0182398595, 0.1021455526, -0.1021677107, 0.0136649469, 0.0181430690, 0.0764245689, 0.0706639886, 0.0822625756, 0.0047624982, 0.0077582728, -0.0841496512, -0.0456991307, -0.0606966093, 0.0073785391, 0.0159242600, -0.0309230313, -0.1125887856, -0.0712684095, 0.0731835067, -0.0475313663, -0.0007211823, 0.0102974009, 0.0609008409, -0.0533823408, 0.0453392528, 0.0048295427, 0.0617424771, 0.0571096353, -0.0856948122, 0.0578802750, -0.0305061098, 0.0642901734, -0.0272239838, 0.0420039482, 0.0175967943, -0.0357795842, -0.0049103252, -0.0012874852, 0.0700431988, -0.0302429404, -0.0466326289, -0.0615795329, 0.0708956122, 0.0586513802, 0.0728886276, -0.0248025078, 0.0128587680, -0.1023076177, -0.0527393147, 0.0395525023, 0.0555339232, -0.0784866884, -0.0356252678, 0.0510536768, 0.0269816723, 0.0454222523, 0.0340830237, -0.0594672710, 0.0086387461, 0.0411027558, 0.0824371353, -0.0051735910, -0.0163042378, 0.0486240089, -0.0705463812, 0.0311245099, -0.0236922521, -0.0574838333, -0.0109571628, -0.0890901759, -0.0410492681, 0.0560439229, -0.0733076334, -0.0740928873, -0.0911001191, -0.0064564524, -0.0439566299, 0.0892128423, -0.0568538122, -0.0395999700, -0.0022340554, 0.0154139930, 0.0254584104, -0.0324452780, -0.0787135214, -0.0532296561, 0.0243580788, 0.0052282419, 0.0243087579, 0.0883869082, 0.0537979193, -0.0906336904, -0.0298359599, -0.0391378291, 0.0375224538, 0.0211702641, 0.1027813330, 0.0305773802, 0.0625424907, 0.0282838698, -0.0986863151, 0.0308904089, 0.0061015598, 0.0774788335, -0.0227182209, -0.0263996199, 0.0563531779, -0.0637860447, -0.0110954205, 0.0553736314, -0.0051440108, -0.0107213510, 0.0245775860, -0.0140493037, 0.0321628116, 0.0270763095, 0.1248132288, -0.0421776026, -0.0427121259, 0.0098826615, -0.0510351583, -0.0553358346, 0.0256630536, 0.0348921977, -0.0304446742, 0.0413949788, -0.0332576483, -0.0328263827, -0.0832479149, -0.0106187705, -0.0326468162, 0.0746636540, -0.0544259213, -0.0280442294, -0.0187558457, -0.0599085055, -0.0416129977, -0.0918847695, 0.0119903516, 0.0296118613, 0.0464228280, 0.0582783408, -0.0245641712, 0.0154259410, -0.0417860821, -0.0084823770, 0.0856467634, -0.0035673548, -0.0611533448, 0.0178057998, -0.0250819866, 0.0284112711, -0.0775147676, -0.0560816452, -0.0551618412, 0.0166125223, 0.0010099430, 0.0208783727, 0.0850871280, 0.0579410009, 0.0616992563, -0.0349186249, 0.0853368044, -0.0370714664, 0.0383533426, -0.0075693396, -0.0773775801, -0.0171449687, 0.0730347782, -0.0309469756, 0.0662680566, -0.0901308060, 0.0027786293, 0.0320291631, -0.0694763437, 0.0017167445, 0.0222539511, -0.0321066901, 0.0471457317, -0.0535184816, -0.0186999403, 0.0664732382, -0.0638569444, 0.0491032116, -0.0513027459, -0.0025265680, 0.0166286342, 0.0777441189, -0.0173264202, 0.0655715019, -0.0329569392, -0.0170105845, 0.0181915853, 0.0641085804, -0.0588225722, 0.0615266152, 0.0135659268, 0.0282072183, -0.0160122905, 0.0599965639, -0.0311884545, 0.0678525344, -0.0852806196, 0.1011123881, -0.0660354197, -0.0250505060, 0.0501807109, 0.0666669831, -0.0172337107, 0.0309998821, 0.0150229745, 0.0230339486, 0.0525842607, 0.0255912449, 0.0287595429, 0.0465499125, -0.0316308402, 0.0150793288, 0.0179936048, -0.0565369539, -0.0074402303, 0.0351497419, 0.0004849245, 0.0564497970, 0.0092714466, 0.0778164938, 0.0908693895, 0.0338844471, 0.0419975817, -0.0254807584, -0.0664175525, 0.0832058266, -0.0499438718, 0.0019229089, 0.0713564456, -0.0363709778, 0.0435230024, 0.0865304321, 0.0553495139, 0.0123479217, -0.0571220145, 0.0160709172, 0.0293130204, -0.0704435334, 0.0747364834, 0.0154808937, 0.0315961502, -0.0267857332, -0.0598459989, 0.0181677341, -0.0621151738, -0.0221732650, 0.0199602321, 0.0222751461, -0.0477581322, -0.0244563241, -0.0543857031, -0.0678795427, 0.0326132998, -0.0215421375, 0.0510352626, -0.0930239707, -0.0775620863, 0.0456245877, 0.0063386643, 0.0593894050, 0.0538312048, 0.0173958428, -0.0523829572, -0.0499415323, 0.0281664655, 0.0374603681, 0.0423536412, 0.0150094777, 0.0820090026, -0.0670469776, 0.0257275905, -0.0303620286, -0.0576961897, -0.0567809381, -0.0913220942, 0.0308748838, 0.0967760235, 0.0212132372, 0.0366239250, 0.0392079093, -0.0451521240, 0.0666613728, 0.0458391830, 0.0406554639, 0.0709616914, 0.0801919773, 0.0591920540, -0.0453040488, 0.0191919804, 0.0192064438, -0.0234018266, 0.0553432629, -0.0569915213, 0.0400085077, 0.0193711575, 0.0816007704, -0.0899317786, -0.0773372576, -0.1011639163, 0.0827319026, 0.0426076800, -0.0341706313, 0.0368907303, -0.0071143061, -0.0842486173, 0.0102520781, 0.0008396063, 0.0664504096, -0.0366467647, -0.0097006718, 0.0003274409, -0.0935312510, 0.0445216298, 0.0057741818, 0.0338083431, 0.0329737291, -0.0690121129, -0.0280438513, 0.0917112678, -0.0096745985, 0.0290097520, -0.0385925993, -0.0696506351, -0.0214757584, -0.0393371060, -0.0403139666, -0.0288349763, -0.0447669104, -0.0280710272, 0.0141604962, -0.0002946169, -0.0527859442, -0.0684803650, 0.0387031436, -0.0294929296, -0.0005015018, -0.0771811306, -0.0518153571, 0.0108859800, -0.0413428061, -0.0105469367, 0.0723269433, 0.0019311602, -0.0324122310, -0.0375359096, -0.0646778494, 0.0284396913, -0.0265899114, 0.0803665668, -0.0480362251, 0.0214421153, 0.0623355769, 0.0799678266, -0.0144397365, -0.0570581406, -0.0076293778, 0.0902195498, 0.0534751639, -0.0545159839, -0.0571876466, 0.0720197633, -0.0214609765, -0.0467969142, 0.0016842610, -0.0230516661, -0.0614524968, 0.0496666692, 0.0214225706, -0.0446629301, 0.0545707271, 0.0163000207, 0.0325902291, 0.0847880095, 0.0127806729, 0.0474644639, 0.0649162829, 0.0043856604, 0.0627807602, -0.0702269599, -0.0486169457, 0.0526913926, 0.0432042219, 0.0118806288, 0.0184321906, 0.0323012583, 0.0298460070, 0.0675635785, -0.0262586325, -0.0832785815, 0.0000615470, 0.0371950306, 0.0177728646, -0.0099468967, -0.0828459114, -0.0882202610, 0.0480850264, 0.0116983745, 0.0353801809, 0.0385153256, 0.0716169402, -0.0506757274, 0.0250727069, 0.0731767863, -0.0099968994, 0.0895146430, -0.0361014605, 0.0669292584, -0.0373808593, 0.0044989930, -0.0433901250, 0.0286355373, 0.0185370147, -0.0395842455, -0.0348747484, -0.0833661929, 0.0158935506, 0.0224843733, 0.0502430946, -0.0605758615, 0.0580883026, -0.0119614070, 0.0058130794, 0.0845732987, -0.0579253919, -0.0560803674, 0.0356107280, 0.0049003265, -0.1089884415, -0.0613650493, -0.0581094772, 0.0721812695, 0.0601773746, -0.0172774419, 0.0592390522, 0.0084887035, -0.0596110970, 0.0501111932, -0.0635208338, -0.0442037694, -0.0609591343, -0.0237136334, 0.0517078079, 0.0032726005, -0.0450802818, -0.0366671532, -0.0807051361, 0.0041519571, -0.0353663787, 0.0529266149, -0.0232142322, -0.0152054792, 0.0792843997, -0.0380511172, 0.0848175883, -0.0359669104, -0.0033929767, -0.0318554603, -0.0544528998, 0.0594248772, -0.0324365422, -0.0939594507, -0.0971173793, 0.0507367849, 0.0218483806, 0.0288461391, -0.0406056121, -0.0137331421, -0.0506248698, 0.0599294193, -0.0548408143, -0.0960910246, -0.0946113914, -0.0538725704, 0.0301866289, 0.0708400458, -0.0444200076, -0.0728127584, -0.0615101755, 0.0640697777, 0.0688406974, 0.0289743692, -0.0136559457, -0.0577892922, 0.0724098831, 0.0107122520, -0.0949191079, 0.0100307874, -0.0769111738, -0.0543681383, 0.0576434098, 0.0396859907, -0.0277127698, -0.0435690954, 0.0502519272, 0.0710616186, 0.0253677573, -0.0455861464, -0.0163332876, 0.0947903395, -0.0355737023, -0.0606777593, -0.0164364874, 0.0423070602, 0.0299890544, -0.0257243104, -0.0899200812, -0.0741322935, 0.0287152026, 0.0303157233, 0.0764228702, 0.0151741952, -0.0263108201, -0.0697080940, -0.0553393997, -0.0366003662, 0.0449541584, -0.0499879606, 0.0267443601, -0.0676809698, -0.0073353993, 0.0747857019, 0.0458827056, -0.0190866776, 0.0157722346, 0.0430981889, 0.0122009963, 0.0193919726, -0.0722083300, 0.0265304241, 0.0093626296, -0.0655201823, 0.0662349686, -0.0519070327, 0.0295695160, -0.0802699178, 0.0489205159, 0.0286822822, -0.0196093619, -0.0063689561, -0.0113469744, 0.0446692631, -0.0452980287, -0.0335373282, 0.0699534938, -0.0353946909, -0.0722125471, -0.0644321665, 0.0118254935, 0.0040329620, 0.0647192001, -0.0606337152, -0.0170562472, -0.0396628417, -0.0564240888, 0.0033621355, 0.0309693720, -0.0473894514, -0.0748881921, -0.0209214017, -0.0094296923, 0.0222276039, 0.0765767917, 0.0486834385, 0.0631082132, -0.0013247031, 0.1016927212, -0.0280085374, 0.0469475389, 0.0304739829, -0.0253094565, 0.0770957619, 0.0831906646, 0.0672850534, -0.0310603417, 0.0690255985, -0.0055894400, -0.0399016179, -0.0848905891, -0.0666345581, -0.0346679166, -0.0386092179, 0.0356230102, -0.0307515115, 0.0709304959, -0.0014631912, 0.0365848951, -0.0973977372, 0.0279979743, 0.0006783660, -0.0387885310, -0.0566878431, 0.0606119856, -0.0809208453, -0.0415836424, -0.0127256000, 0.0745569617, 0.0280628428, 0.0376838967, -0.0743552223, 0.0290082116, -0.0197217204, -0.0068032132, -0.0251242407, 0.1168953255, -0.0073406752, -0.0791390389, 0.0331808701, -0.0173405185, -0.0510271750, 0.0722477511, 0.0101541867, 0.0716321245, 0.0405989289, 0.0169722959, 0.0402922481, 0.1121012792, 0.0319824778, 0.0619254075, 0.0270248726, -0.1040464044, 0.0328221694, -0.0573801324, 0.0529034436, 0.0813192800, 0.0694777369, 0.0876299888, -0.0160889793, 0.0195493530, 0.0470261425, -0.0279536303, 0.0559331253, 0.0096453987, 0.0221120808, 0.0106409276, -0.0262923650, 0.0012017887, 0.0386580154, -0.0777902156, 0.0679932386, 0.0390170813, -0.0505034588, 0.0015738836, 0.0134698749, 0.0409107432, -0.0270739030, -0.0097697712, 0.0087106023, 0.0658931062, -0.0289270505, -0.0440647118, -0.0779251754, 0.0391889550, 0.0226000305, -0.0427874327, 0.0368749350, 0.0174413305, -0.0290247761, -0.0548505113, 0.0837324336, 0.0103059607, 0.0247490890, 0.0324092507, -0.0079758726, -0.0075932019, -0.0229829531, 0.0112758530, 0.0915489271, 0.0583376065, 0.0230211243, -0.0285322014, -0.0096407970, -0.0176603943, -0.0388938114, 0.1023480594, -0.0306446590, -0.0405758284, 0.0620347187, -0.0201459713, -0.0634127930, -0.0156627465, 0.0717037171, 0.0158551838, -0.0440814197, -0.0545055978, -0.0246204380, -0.0188227016, 0.0692897663, -0.0049301414, 0.0835404694, 0.0024033859, 0.0725090280, -0.0107718464, 0.0358832665, -0.0077697793, 0.0500886738, 0.0208810065, 0.0116022704, 0.0734283477, -0.0708410293, -0.0430157930, 0.0262569934, 0.0599297583, 0.0447368920, 0.0293193627, -0.0296458229, -0.0229631439, 0.0376102068, -0.0635392889, -0.0156269167, 0.0477397107, -0.0511028133, -0.1013088524, -0.0426214635, 0.0681806505, 0.0358216986, -0.0664964840, 0.0991090760, 0.0614661612, -0.0195383392, 0.0678289831, -0.0656994656, 0.0389490798, 0.0848547891, 0.0055131088, -0.0457038172, -0.0378416069, -0.0002691505, -0.0519011468, 0.0133480858, 0.0275693107, -0.0453766435, -0.0126385866, 0.0086014308, -0.0137938848, 0.0481207706, -0.0291106012, 0.0372161716, 0.0873943940, 0.0683785230, -0.0099194795, -0.0326282866, -0.0467148870, -0.0203044526, 0.0511383377, -0.0181288086, -0.0217824727, 0.0759609416, -0.0575581640, -0.0453979522, 0.0335638225, 0.0554281026, 0.0169862360, 0.0908129737, -0.0751527995, 0.0307243485, -0.0227252729, -0.0943046361, 0.0124580236, 0.0331030414, 0.0185669065, -0.0235769153, -0.0765060261, 0.0484679304, 0.0884247795, -0.0828633830, -0.0675938278, -0.0682976395, 0.0268723238, -0.0476723351, 0.0648615658, 0.0764389783, -0.0380298048, -0.0307176393, 0.0677762255, -0.0713182315, 0.0211407002, 0.0485229082, -0.0445305109, 0.0511644185, 0.0230175965, -0.0020366539, 0.0038290871, 0.0971726924, 0.0588879474, -0.0331597291, -0.0850380808, 0.0340950750, -0.0335414149, -0.0485139899, 0.0247380696, -0.0307315625, 0.1075297743, -0.0125549454, 0.0802148730, 0.0312747881, -0.0523222089, 0.0926256180, -0.0221900530, -0.0571555123, 0.0483807735, 0.0636320263, -0.0275114588, -0.0224444754, 0.0654176399, 0.0417659618, 0.0374958403, 0.0643125772, 0.0060876701, 0.0459876172, -0.0153857488, 0.0566385128, -0.0638993308, -0.0034769615, 0.0787368715, -0.0020972993, 0.0367368981, 0.0973528847, -0.0651552230, 0.0441999845, -0.0397248939, -0.0711093172, 0.0412969738, 0.0320711024, -0.0623859018, -0.0102525689, -0.0032831428, -0.0138790403, 0.0512907617, -0.0287704337, -0.0941851288, 0.0359658822, -0.0521861240, -0.0677375346, 0.0900534317, 0.0555546694, -0.0344889574, 0.0276543461, -0.0444147363, 0.0055086217, -0.0227191076, 0.0193478763, 0.0080811074, -0.0185945276, -0.0770402253, -0.0309913345, 0.0725854188, 0.0555772893, 0.0229250640, -0.0042517339, -0.0376571044, 0.0548324473, 0.0165223889, -0.0311680641, 0.0410733372, 0.1028189063, 0.0386148021, -0.0934413821, -0.0071022077, -0.0434198827, 0.0597780049, 0.0125858523, 0.0633468181, 0.0786853582, 0.0292210970, 0.0562313795, -0.0640604049, 0.0257994402, -0.0915770456, 0.0632492527, 0.0734591708, -0.0232837107, 0.0426211767, 0.0860216692, 0.0098511772, 0.0547867715, -0.0403908081, 0.0019384306, 0.0814722776, -0.0611083210, 0.0816968530, 0.0351543278, -0.0974228978, -0.0219979938, -0.0138408309, -0.0188857615, -0.0960052758, -0.0580602102, -0.0471051894, -0.0016504050, 0.0228387024, 0.0724077597, 0.0663527921, -0.0911317542, -0.0110644968, -0.0079372153, -0.0514820851, -0.0228855368, -0.0237556305, -0.0409627520, -0.0384675376, 0.0393211693, -0.0225601029, 0.0570726767, 0.0742098242, -0.0028311128, -0.0180744976, -0.0878070369, 0.0025536509, -0.0262265168, 0.0261760205, 0.0132042691, -0.0589851439, 0.0283189248, 0.0726096779, 0.0420955084, 0.0538615622, 0.0300965682, -0.0250414703, -0.0414100476, -0.0376231633, 0.0475331657, 0.0559828021, 0.0418387167, -0.0041892077, -0.0598145649, 0.0419071652, -0.0385918729, 0.0017293950, -0.0439885780, 0.0085860873, -0.0005356102, -0.0753086433, -0.0627951548, -0.0317104720, 0.0256188214, 0.0111180814, 0.0741760954, 0.0703246444, 0.0315832496, -0.0134300506, -0.0142775076, 0.0274334550, -0.0130538503, -0.0613871515, 0.0489250682, -0.0731005520, -0.0678746626, -0.0203847978, 0.0797077268, -0.0385789089, 0.0365664735, -0.0902762339, 0.0047585275, 0.0629080310, 0.0914213136, -0.0155742839, 0.0626730099, 0.0289031342, -0.0800662041, 0.0025533026, 0.0039003766, 0.0455231108, -0.0154221449, 0.0425480045, 0.0321599916, -0.0585288517, -0.0925484076, -0.0098619778, -0.0054628057, -0.0957736745, -0.0824443921, -0.0400735959, 0.0747470111, -0.0423761122, -0.0809027106, -0.0273619071, -0.0613187328, 0.0038700574, -0.0221264679, -0.0541554056, 0.0438960083, 0.0184353814, 0.0761319846, -0.0180005617, -0.0076096319, 0.0261116773, 0.0769777074, -0.0029126322, -0.0621809401, 0.0101479329, -0.0942300260, 0.0387814306, -0.0693007559, -0.0248323604, -0.0179191642, 0.0248819236, 0.0872999728, 0.0271675438, 0.0987071544, 0.0421509929, 0.0144724352, 0.0268265586, -0.0603096560, -0.0881856307, -0.0695110410, 0.0642589107, -0.0124128312, -0.0064755450, -0.0201443899, -0.0605255738, -0.0461425409, -0.0241673775, 0.0408935994, -0.0232356954, 0.0495001599, 0.0544759817, -0.0744419917, 0.0448752269, -0.0433974750, 0.0185763855, 0.0092656640, 0.0008199945, 0.0314506292, 0.0198919829, 0.0946267992, -0.0310112964, 0.0150109725, 0.0027515194, 0.0441502444, 0.0302974656, -0.0218432210, 0.0359490030, 0.0068273977, -0.0519561134, -0.0560779274, 0.0204807445, 0.0292458199, -0.0906010866, 0.0047357474, -0.0684140101, -0.0075541059, 0.0605061650, -0.0478762537, 0.0454582237, 0.0986407772, -0.0918424875, -0.0300084613, -0.0110837230, 0.0452554636, 0.0624202825, -0.0118180132, 0.0934127122, -0.1013808027, 0.0230401084, 0.0269678608, -0.0813964158, -0.0293660462, 0.0026176875, -0.0224224478, -0.0731212720, -0.0844932348, -0.0308803022, -0.0586057082, -0.0554255843, 0.0135890786, -0.0865051746, -0.0703648180, 0.0182882939, -0.0497397557, -0.0274886023, 0.0175478775, -0.0724756867, 0.0100094825, -0.0038270431, -0.0486974269, 0.0135166226, 0.0914802924, 0.0983530357, -0.0265328307, 0.0565762371, -0.0820816681, -0.0723221973, -0.0451426990, -0.0740946978, 0.0099423034, 0.0824974477, 0.0730235651, 0.0469863266, 0.0683191344, -0.1099844351, -0.0568211526, -0.0712257028, 0.0953361318, -0.0452939756, -0.0924126133, 0.0595981292, -0.0436223298, 0.0367153101, 0.0253827907, -0.0441052206, 0.0159554500, -0.0585649833, -0.0347619690, -0.1001235992, -0.0789591596, -0.0208747108, 0.0367562845, 0.1045118794, 0.0732728392, 0.0440032482, -0.0209619999, -0.0556347854, 0.0133136827, -0.0536139645, 0.0207259208, -0.0101511972, -0.0372152887, 0.0457655527, 0.0642873049, 0.0271277502, -0.0705457032, -0.0394048244, 0.0331195630, 0.0045141978, -0.0931666046, 0.0118903378, 0.0346605368, 0.0341436416, -0.0498464890, -0.1110150665, 0.0230956487, 0.0652208552, -0.0015667743, -0.1176471412, 0.1188131645, -0.0437851809, -0.0931934640, 0.0812043324, -0.0429003350, 0.0485647321, 0.0528885275, -0.0266935620, 0.0455681048, 0.1007328182, -0.0166652128, -0.0504106767, -0.0118880672, 0.0635866150, 0.1065643355, 0.0462787002, 0.0942238942, -0.0268004760, -0.0066321306, -0.0599238388, -0.0936883315, -0.0501782708, -0.0625465959, 0.0605740361, 0.0343201682, -0.0489623323, -0.0464829430, -0.0709683523, -0.0204504374, -0.0077772741, 0.0431351066, -0.0255696326, -0.0149544906, 0.0104327695, -0.0429306775, -0.0381894037, 0.0023012999, 0.0641040504, 0.0740685090, -0.0609523356, -0.0030440511, 0.0919621736, -0.0019501788, 0.0441000946, -0.0607278533, -0.0443332307, 0.0482717305, -0.0625493005, -0.0040776539, 0.0709149912, 0.0086257318, -0.0375824384, 0.0222505499, 0.0345190950, 0.0826970786, -0.0063307136, 0.0742626935, 0.0067924890, 0.0750565380, 0.0636783540, -0.0016318018, -0.0549932979, 0.0088204127, -0.0366425589, 0.0719111413, -0.0492352396, -0.0588932671, 0.0806920305, 0.0869629383, -0.0593520887, -0.0011164688, -0.0824994668, 0.0649373010, 0.0707970485, -0.0897593498, -0.0190598331, -0.0071762446, -0.0112745212, 0.0345257446, 0.0371215455, -0.0044628810, -0.0036536870, -0.0640109554, 0.0623787902, -0.0263455249, -0.0237485655, -0.0391681679, -0.0643644705, -0.0770140365, 0.0280318744, -0.0126847597, -0.0581815392, -0.0961278528, 0.0105085149, 0.0617475174, -0.0741339177, 0.0289813019, -0.0428571105, -0.0320489593, 0.0062212306, 0.0554081388, -0.0617414191, 0.0150783202, 0.0057523684, 0.0746840239, 0.0872602463, 0.0843731463, 0.0433734730, 0.0525229797, 0.0976380482, 0.0410224162, 0.0461074822, 0.0269967299, 0.0104365163, -0.0360645317, 0.0708147362, -0.0335620157, 0.0711588338, 0.0028998703, 0.0260691866, 0.0747120306, 0.0445786007, 0.0352456197, -0.0326730311, -0.0633729547, -0.0739393607, 0.0165261310, 0.0479755104, 0.0197914150, 0.0322441161, 0.0142639596, -0.0608752742, -0.0645295307, 0.0493221916, -0.0412729196, 0.0382730365, 0.0397178009, -0.0466425456, -0.0010585061, -0.0355070606, -0.0685097575, -0.0128250821, -0.0301662795, -0.0186882485, 0.0391743556, 0.0283388216, 0.0522761345, -0.0267546605, -0.0197802838, -0.0595914572, -0.0364296697, -0.0837711543, 0.0540925525, -0.0562225617, 0.0108625237, -0.0526705384, 0.0293364841, -0.0493578985, -0.0773636997, -0.0404212959, -0.0343806669, 0.0347812921, -0.0159223899, 0.0562504269, 0.0023156418, 0.0936404690, -0.0087426826, 0.0294091478, 0.0494384430, -0.0094410572, -0.0349939875, -0.1012462005, 0.0675895587, 0.0050125974, 0.0807694048, -0.0369460136, -0.0011392733, 0.0763735399, 0.0183369946, -0.0169438086, -0.0450944379, -0.0499953479, 0.0616616234, 0.0260557774, 0.0672414601, -0.0905818120, 0.0209572241, -0.0005842797, 0.0227572210, 0.0443268828, -0.0307930522, 0.0544742867, 0.0177710913, 0.0579684600, -0.0550766215, -0.0774216875, 0.0033508239, -0.0392415524, 0.0604877733, 0.0629215613, 0.0353737138, 0.0530349761, 0.0334682204, 0.0026991677, -0.0116906660, -0.0564625710, -0.0221337005, -0.0364553668, -0.0608440787, -0.0457788222, -0.0400817357, -0.0024397178, -0.0461169332, -0.0676851347, 0.0256075338, 0.0524683371, -0.0016123150, -0.0339143425, 0.0257885680, -0.0225887895, 0.0639405474, 0.0949842930, 0.0154390754, 0.0310545228, -0.0696377456, -0.0600351803, -0.0556157418, 0.0055136918, -0.0092996545, -0.0434609093, 0.0026582945, 0.0201282781, -0.0812258050, -0.0289085321, -0.0050587035, -0.0049074069, 0.0521871112, 0.0446548983, 0.0293503460, -0.0355490558, -0.0295437016, -0.0655195341, 0.0079219928, -0.0551075041, -0.0841944590, -0.0657396764, -0.0320841856, 0.0658933371, 0.0102818077, 0.0435781516, 0.0513902120, -0.0011485781, 0.0059703426, 0.0283282939, -0.0406048819, -0.0515955985, 0.0843537375, 0.0299594998, 0.0725002289, -0.0490335077, -0.0586227290, 0.0600714758, 0.0627150610, -0.0779601485, 0.0491319820, -0.0149671985, -0.0440374464, -0.0325766653, 0.0447954610, -0.0529554076, 0.0858791918, 0.0151062487, 0.0081067961, -0.0608673953, -0.0285587721, 0.0222627725, 0.0091935983, 0.0842880830, 0.0037165522, 0.0367352478, 0.0169324838, -0.0116733080, 0.0254549906, -0.0202790741, -0.0075765946, -0.0300116688, 0.0767453834, -0.0806217417, -0.0312188976, -0.0247969124, 0.0290136281, -0.0157863386, -0.0355151370, -0.0016609675, 0.0747179762, -0.0674933940, -0.0372205004, 0.0536514185, 0.0405292921, 0.0266818590, -0.0511519760, 0.0857769921, -0.0155964307, 0.0274799559, 0.0391502753, -0.0034918629, -0.0449402183, 0.0646342337, 0.0078863148, 0.0229250975, 0.0471760929, -0.0347201452, 0.0087880064, 0.0561753884, -0.0480960980, 0.0689177439, -0.0545122959, -0.0868202224, -0.0527581684, -0.0706720576, 0.0416449830, -0.0467081964, 0.0145237353, -0.0373713672, -0.0307501368, 0.0432660058, -0.0374037027, -0.0273602717, 0.0487598553, 0.0581148267, 0.0424852632, 0.0595429279, -0.0683068782, -0.0531367734, -0.0123836836, -0.0449915715, 0.0400607288, 0.0473600253, -0.0737314224, -0.0759948120, 0.0331318341, -0.0687721446, -0.0237924643, 0.0209940486, -0.0691700727, 0.0864003748, 0.0101636797, -0.0696767420, -0.0164458361, 0.1006043926, -0.0081451265, -0.0996385366, -0.0552985854, -0.0028028823, -0.0677155480, -0.0647479966, -0.0829567984, 0.0077756080, -0.0519969203, 0.0395779461, -0.0290032886, -0.0552502796, 0.0329955108, -0.0706300437, 0.0216932707, -0.0150638865, 0.0261483882, 0.0061584879, -0.0238529537, 0.0178145133, -0.0403404757, 0.0142541211, 0.0233211201, 0.0511747338, -0.0313057601, 0.0269059781, -0.0005116293, -0.0137495426, -0.0225602556, -0.0988039151, -0.0874550194, -0.0475761183, 0.0035121213, -0.0586877540, -0.0392984338, -0.0722491592, 0.0608384088, -0.0415390991, 0.0331360064, 0.0706234500, 0.0445043445, -0.0203589797, -0.0075352234, -0.0153772188, -0.0869963765, -0.0124438787, -0.0167529937, -0.0182799753, -0.0174467228, -0.0641327426, 0.0796608850, -0.0668625608, -0.0630312264, -0.0130709838, 0.0603002273, 0.0358480215, 0.0130642988, -0.0230207853, 0.0251601674, 0.0137151908, -0.0184108112, -0.0186702069, -0.0169295669, -0.0651249364, -0.0001669252, 0.0221519880, -0.0578519925, 0.0373969860, 0.0451653004, 0.0725002736, -0.0227714106, -0.0669647083, -0.0485007688, 0.0271233395, 0.0746297017, -0.0602107905, 0.0534836650, -0.0406145751, -0.0360882729, -0.0238244142, -0.0891241059, 0.0561725721, 0.0111058578, -0.0115849525, 0.0267570838, -0.0078023504, -0.0737756565, -0.0618874803, 0.0560885258, -0.0097508840, 0.0485321246, -0.0104011623, 0.0561523736, 0.0269336719, -0.0021039308, 0.0057667666, -0.0615405813, -0.0673713312, 0.0120098563, -0.0732551664, 0.0192438662, 0.0027253442, -0.0035860864, -0.0517927557, 0.0013777213, 0.0145020345, -0.0868062153, 0.0484591983, 0.0353965051, 0.0638104081, 0.0568750799, 0.0182002988, -0.0351562575, -0.0591364875, -0.1017238721, -0.0454889908, -0.0070432564, -0.0463095345, -0.0715731755, 0.0270820223, 0.0442518368, 0.0945397094, 0.0476744659, 0.0876921788, -0.0131243458, 0.0515693314, 0.0052565206, -0.0083080316, 0.0677960813, -0.0331851393, -0.0697910562, 0.0583020747, 0.0338167027, 0.0465731993, 0.0215369072, -0.0866460875, -0.0324465744, 0.0328461416, -0.0609229803, -0.0403317772, 0.0045877690, 0.0030742029, -0.0014617109, -0.0338178463, -0.0140739046, -0.0251945853, -0.0220304728, -0.0577682927, -0.0738610774, -0.0493133329, -0.0673458576, 0.0623475276, -0.0233392511, 0.0451115035, -0.0000236483, 0.0348088555, 0.0701894835, 0.0682348832, 0.0171268303, -0.0282160919, 0.0054956791, -0.0416057259, 0.0862171277, 0.0720949247, 0.0321702696, 0.0121640731, -0.0152058983, 0.0249469616, -0.0505994745, 0.0514136516, -0.0338066854, 0.0134455608, -0.0384610444, 0.0631249025, 0.0181708261, -0.0701560900, 0.0140203089, 0.0530350842, -0.0301476754, -0.0932444483, 0.0644274056, 0.0142591577, 0.0711534619, 0.0423334353, 0.0692938641, 0.0222286228, -0.0586695634, -0.0089881960, -0.0064171911, -0.0253300220, 0.0209061839, 0.0864587501, -0.0375776775, -0.0991142914, -0.0111349309, -0.0916296765, -0.0207969099, 0.0462841243, 0.0036375488, 0.1050347611, 0.1009144709, -0.0580732897, -0.1033431962, 0.0702548772, 0.0572674237, -0.0856101885, 0.0254190620, 0.0135969510, -0.0601628684, 0.0055441158, 0.0298549533, 0.0487685129, -0.0299901869, 0.0878738537, 0.0147949262, -0.0245984532, -0.0409372002, 0.0575114004, -0.0457308032, -0.0038944723, 0.0548074804, 0.0216536894, -0.0754025057, -0.0835978165, -0.0168446265, -0.0414875671, 0.0911506787, -0.0277878307, 0.0677561760, 0.0893723667, 0.0691361204, 0.0809839815, -0.0021432061, 0.0684187263, -0.0155970445, -0.0530306511, -0.0051773917, 0.0598311052, 0.0393794104, 0.0630598292, 0.0030396851, 0.0650371835, -0.0331219994, -0.0772565976, -0.0124824690, -0.0185246728, 0.0405615270, -0.0204508901, 0.0487521216, 0.0538705103, -0.0754238814, -0.0272809509, -0.0825848207, -0.0308472104, -0.0154135479, -0.0196888056, 0.0952721015, 0.0295886360, 0.0255631153, 0.0040131020, 0.0480585471, -0.0791927949, 0.0011380333, 0.0282989591, 0.0267338697, 0.0422022492, 0.0521452576, 0.0767762288, -0.0397608019, 0.0235133637, 0.1004548222, 0.0100854952, 0.0378769226, 0.0400091559, -0.0823932812, 0.0508554988, -0.0604780465, -0.0346985050, -0.0741867647, 0.0965702534, 0.0081831906, -0.0333813652, 0.0348615833, -0.0428448617, 0.0590037555, 0.0028525023, -0.0238954443, 0.0687348396, 0.0064739557, 0.0499484204, -0.0077221110, -0.0041321525, 0.0071912110, -0.0257210080, -0.0368707813, -0.0828469396, 0.0406875759, 0.0445447452, -0.0605473630, 0.0035091608, -0.0934633315, -0.0064732623, -0.0872257650, 0.0526036918, -0.0488711409, -0.0256343186, -0.0216676015, -0.0149939964, 0.0026162728, 0.0404375605, 0.0413783863, -0.0450219698, -0.1013452038, -0.0562578402, -0.0669863522, -0.0827149749, -0.0269794315, -0.0303286258, 0.0495275073, -0.0739964768, -0.0075095529, -0.0188800357, -0.0385547727, -0.0069630076, -0.0555410646, -0.0850105956, 0.0632199869, 0.0010233688, 0.0592724271, -0.0782152265, 0.0153159536, -0.0580946133, -0.0592853576, 0.0711804107, 0.0593214817, 0.0453308076, 0.0581555553, -0.0037603676, -0.0290073249, 0.0575351715, -0.0548653379, 0.0333678573, -0.0005658381, -0.0565188490, 0.0022308030, 0.0469230488, -0.0347550251, -0.0760068521, -0.0159890708, -0.0758004189, -0.0110130766, -0.0373913087, 0.0533250459, -0.0110777840, 0.0494974628, -0.0203324389, 0.0518448800, -0.0138063524, -0.0475436971, -0.0212064199, -0.0422736220, -0.0031613305, 0.0007521543, 0.0271874294, 0.0040507489, 0.0521974154, 0.0276729390, 0.0243022684, -0.0899270326, 0.0105753606, 0.0626229420, -0.0317768082, 0.0810338780, -0.0472811647, 0.0699638203, -0.0279295892, -0.0788736045, -0.0664444864, -0.0531734452, -0.0104916357, 0.0573275574, 0.0779239163, -0.0725617856, -0.0767656490, -0.0339645743, -0.0097304676, 0.0584640726, -0.0294284858, 0.0608896427, -0.0512821972, -0.0306732506, 0.0074633914, 0.0495658815, -0.0034346762, 0.0581694171, -0.0226488784, 0.0109039834, -0.0202053860, 0.0695779920, 0.0447678119, 0.0268282648, 0.0198987126, -0.0263949763, 0.0685484707, 0.0555781387, -0.0164808091, -0.0425561965, -0.0132876402, -0.0089468779, 0.0090082921, 0.0109907733, 0.0082909232, -0.0263953116, 0.0611469299, -0.0392837785, 0.0359183401, -0.0015338988, 0.0354715586, 0.0208725408, 0.0064702267, 0.0597889461, 0.0226683971, 0.0521760546, -0.0482603349, -0.0522622503, -0.0021512462, 0.0463655666, 0.0728648752, -0.0547671728, 0.0512007549, 0.0071869250, -0.0096035926, 0.0300129745, 0.0605873019, 0.0293503627, -0.0440798961, 0.0455932207, 0.0472659245, -0.0258409157, 0.0677519068, -0.0312321782, 0.0672120824, 0.0667385310, 0.0018039665, -0.0776836276, 0.0473078862, -0.0926121026, 0.0490522087, -0.0046386593, 0.0900859907, 0.0379438698, 0.0909238309, -0.0762760788, 0.0252567250, -0.0121155679, 0.0481707789, -0.0189391039, -0.0850247890, -0.0715092272, 0.0646387562, -0.0753218308, 0.0601198077, 0.0374711156, -0.0336140580, 0.0650296584, -0.0776474774, 0.0636542588, -0.0316139460, -0.0428197421, 0.0868169516, -0.0427382626, 0.0213970169, 0.0471675731, 0.0224454608, -0.0017495811, 0.0239843596, 0.0119192833, -0.0175180510, 0.0106746862, -0.0524672307, -0.0406199805, 0.0846861228, 0.0170943644, -0.0581064411, -0.0111786714, -0.0463835858, -0.0442536436, -0.0667590350, -0.0353346616, -0.0895599350, 0.0423022695, -0.0019479485, 0.0582096800, 0.0204559360, -0.0787145570, 0.0404160321, -0.0231892243, -0.0252872761, 0.0262474287, -0.0806449354, 0.0650989637, -0.0075452328, -0.0734400824, -0.0268760994, 0.0530576557, 0.0244660284, 0.0225470532, 0.0388758183, 0.0018251543, 0.0282826237, 0.0710182786, 0.0254900530, 0.0190868266, 0.0107460562, -0.0496254601, -0.0659862906, -0.0652551651, -0.0407237634, -0.0290216226, 0.0723573789, -0.0624029562, -0.0352639109, 0.0114245079, 0.0382544808, 0.0443626456, 0.0470838286, 0.0013081257, 0.0125549100, 0.0062525151, -0.0366835557, -0.0439745970, -0.0029534367, 0.0460253023, -0.0051766229, 0.0360776782, 0.0260334872, 0.0615100600, 0.0065974989, 0.0460363999, -0.0011257334, 0.0036009748, 0.0538746044, 0.0484533384, -0.0071729384, -0.0650406033, 0.0751711056, 0.0404549949, 0.0572756715, -0.0160885714, -0.0913612098, -0.0555382371, 0.0110593475, -0.0599411242, -0.0343768373, 0.0751622617, 0.0241038371, -0.0147179961, 0.0445120223, 0.0403082259, -0.0793334395, 0.0024508368, -0.0361491144, -0.0718301907, 0.0250744186, 0.0774742663, -0.0243255887, 0.0885334462, -0.0120555349, -0.0052368860, 0.0352410190, -0.0509233400, 0.0543253422, 0.0363409333, 0.0608023964, -0.0516375341, -0.0658574849, 0.0805035830, -0.0339032076, 0.0621403120, -0.0009145305, 0.0149461348, 0.0664025694, 0.0802084506, -0.0554854125, 0.0565413125, 0.0428178310, -0.0111380536, -0.0377250612, 0.0021593301, 0.0027501446, 0.0698541179, 0.0156960897, -0.0416520685, 0.0109309349, 0.0222918484, -0.0084761651, -0.0566738471, 0.0461130999, -0.0336222313, 0.0143640237, -0.0247510392, 0.0457988642, 0.0813415125, 0.0242565069, 0.0317941979, 0.0675996467, 0.0033653490, 0.0124557195, -0.0625372007, -0.0372477323, 0.0555135533, 0.0101147620, -0.0640183315, -0.0095136147, -0.0332352854, 0.0448893122, -0.0599190518, -0.0831269771, -0.0511986092, -0.0675785318, 0.0091585210, -0.0554666556, -0.0192145519, -0.0666317269, -0.0148024932, -0.0010675099, 0.0290064085, -0.0106099825, -0.0196614899, 0.0477488786, 0.0857966393, 0.0123262275, 0.0404698178, -0.0202196538, 0.0234762970, -0.0761959553, -0.0303920936, -0.0219368767, -0.0223878529, -0.0629155859, -0.0358645022, -0.0050770543, 0.0204662196, -0.0162274651, -0.0235517975, -0.0006247273, -0.0132617867, -0.0546068661, 0.0580177121, 0.0032800364, -0.0362885892, 0.0198571738, -0.0454104953, 0.0169664659, -0.0634500757, 0.0379010811, -0.0566212572, 0.0606715046, 0.0201819260, 0.0303606857, 0.0680800527, 0.1054267958, -0.0642687753, 0.0816847086, -0.0005043064, -0.0590743199, 0.0165060591, -0.0740932152, -0.0510415323, -0.0500540659, 0.0833816901, -0.0011577205, 0.0356467254, 0.0634641424, -0.0833073333, -0.0490467623, -0.0195486024, 0.0480555966, -0.0737538710, -0.0901129991, -0.0313490927, -0.0867572203, 0.0348142125, 0.0230353009, 0.0095883664, -0.0057641510, 0.0257437415, 0.0139287598, -0.0872375220, 0.0519659854, -0.0403446071, -0.0893793032, 0.0097197527, 0.0237781536, 0.0029929853, -0.0397823900, 0.0817385763, -0.0442616940, -0.0303245299, 0.0336049348, -0.0772939920, -0.0083335955, -0.0580143109, 0.0614562556, -0.0039653699, -0.0542213544, 0.0785244703, 0.0470835529, -0.0574945770, 0.0642419383, -0.0548448414, -0.0197849311, -0.0040746438, -0.0193901453, -0.0153949149, 0.0453607813, -0.0589769334, 0.0204393249, -0.0775715932, 0.0496296622, 0.0694295317, 0.0489701703, -0.0351320617, -0.0146212820, -0.0241757594, 0.0610297136, 0.0549124591, -0.0682770833, 0.0607953481, 0.0247494150, 0.0844992995, 0.0036633713, 0.0349710770, -0.0534729138, 0.0361664891, -0.0355993658, 0.0681339651, -0.0109884292, -0.0033292668, -0.0386494659, -0.0228377599, -0.0273228232, 0.0378531627, 0.0126504451, 0.0583053194, 0.0001505631, -0.0475873388, -0.0468651541, 0.1026071459, 0.0603536814, -0.0214689299, 0.0077117714, -0.0830377042, -0.0575564913, -0.0311674364, -0.0771621615, -0.0341121480, 0.0425258502, 0.0124336118, -0.0140347751, 0.0032838508, -0.0309252124, -0.0570639484, -0.0417828299, 0.0642373711, -0.0580635555, 0.0372598618, -0.0364830531, 0.0765871108, 0.0835752413, -0.0501365177, 0.0595510788, -0.0606348887, 0.0776717737, 0.0771390647, -0.0244405214, 0.0296047051, 0.0665647537, 0.0879128054, 0.0342057496, 0.0228447989, 0.0047258185, 0.0514869392, -0.0011949303, 0.0199744869, -0.0497466773, -0.0756362975, -0.0526397862, 0.0038777576, 0.0795016140, -0.0193951186, -0.0151509326, 0.0654560626, -0.0391928405, 0.0063548679, 0.0257663168, 0.0412638970, -0.0126951970, 0.0397988521, -0.0231679380, -0.0430374667, -0.0250649732, -0.0837433040, -0.0366002992, -0.0519223362, 0.0476089455, 0.0207809787, -0.0034478016, -0.0130071742, -0.0212530624, -0.0547290780, -0.0734776258, 0.0688256621, 0.0585616902, -0.0047044349, -0.0017016572, 0.0141891334, -0.0697752163, -0.0261620469, -0.0361100659, 0.0411986969, 0.0280449875, -0.0304518342, -0.0575240962, 0.0224987660, 0.0907040834, 0.0324506499, -0.0163085666, -0.0812798887, -0.0209931061, 0.0000345912, 0.0092368182, 0.0128608784, 0.0411338359, -0.0256727058, 0.0959932432, -0.0861803666, -0.0147699444, 0.0500233322, -0.0824161246, 0.0041385852, -0.0276094023, 0.0109337764, -0.0001676226, -0.0074871769, -0.0055469032, 0.0785061494, 0.0879122615, -0.0269962084, -0.0225161649, -0.0550347306, -0.0607600510, -0.0508943796, 0.0368187018, 0.1046612933, -0.0537346303, 0.0714642927, 0.0750497952, 0.0251377169, 0.0660510585, -0.0314829648, 0.0896371007, 0.0343848541, -0.1095155850, 0.0600552484, 0.0704132617, 0.0436278582, -0.0637868047, 0.0219143834, 0.0743270963, -0.0503107756, -0.1063906103, 0.0476086549, -0.0065311706, 0.0225786716, -0.0288885478, -0.0495243557, 0.0703493208, -0.0730896220, 0.0830750689, -0.0235736631, -0.0723148063, -0.0316734836, -0.0284243505, 0.0438805856, -0.0686572790, 0.0148327937, 0.0743294656, -0.0965253636, 0.0064132786, -0.0632948950, -0.0746964738, -0.0265511554, -0.0325889178, 0.0685885698, -0.0556183383, 0.0084273620, 0.0647353828, 0.0182905626, 0.0527707674, 0.0866302997, 0.0545137227, -0.0117984526, -0.0541914217, 0.0791118070, 0.0267630126, 0.0323846638, -0.0053672679, -0.0556513555, -0.0524192899, 0.0724097565, -0.0391208120, -0.0609929599, 0.0662443042, 0.0400224589, -0.0365217477, 0.0106910262, 0.0290001724, 0.0394048169, 0.0324693806, 0.0779406503, 0.0776204541, 0.0864020959, 0.0771939158, 0.0891997665, 0.0112874359, -0.0702989325, -0.1016146541, -0.0546311140, 0.0376240909, 0.0238710884, 0.0091521908, 0.0343454182, 0.0701318607, -0.0942596719, -0.0737838447, 0.0568335541, -0.0778829083, -0.0160941165, 0.0397137813, -0.0037837147, -0.0456694700, -0.1067316309, -0.0680310875, -0.0751379207, -0.0019625465, -0.0608824492, 0.0169343296, 0.0423975661, -0.0535671674, 0.0563682914, 0.0017049673, 0.0019718229, 0.1153506562, -0.0993759111, -0.0410796478, 0.0235220809, -0.0151767628, -0.0761929601, -0.0351945125, -0.0059187086, -0.0020977031, 0.0540425368, 0.0973783210, -0.0274090972, 0.0690566227, -0.0121194376, 0.0664160922, -0.0545536987, -0.0437739752, 0.0615410134, 0.0755356848, -0.0608288683, -0.0497553647, 0.0344649851, 0.1025885493, 0.0031208098, 0.0009848473, -0.0605790205, -0.0446843877, -0.0427767821, -0.0475296713, -0.0208601635, 0.0023212451, -0.0643486902, -0.0385007933, -0.0498360135, -0.0694911107, 0.0511486679, 0.0743076578, -0.0563040674, -0.0144170746, 0.0253752861, 0.0694473684, 0.0283505060, -0.0027970043, 0.0929551944, 0.0191107988, -0.0438749194, -0.0924120098, 0.0701394528, 0.0546358563, -0.0325529724, -0.0436926186, -0.0449700318, 0.0209982432, 0.0761852190, 0.0814575404, -0.0191479977, 0.0280347299, 0.0198646430, 0.0246801879, 0.0541422665, -0.0249709208, 0.0560232252, -0.0189373214, -0.1139643565, -0.0462214537, 0.1067895070, -0.0937261805, -0.0414772294, -0.0616630130, 0.0336717963, -0.0569464117, 0.0560628138, 0.0913370028, -0.0350569636, 0.0323576517, 0.0067559010, 0.0123512838, 0.0546754785, -0.0638825968, 0.0330445282, -0.0489833876, 0.0243998710, 0.0634467378, -0.0842918828, 0.0618999749, 0.0820463151, -0.0716202557, 0.0678118020, 0.1078606546, 0.0474160910, -0.0721165389, -0.0114692459, 0.0847392455, -0.0080362987, 0.0059408480, -0.0553264543, 0.0403505377, 0.0389727689, -0.0751683116, 0.0201422479, -0.0362034254, -0.0278924610, 0.0321142264, 0.0451205596, 0.0440424606, 0.0111307353, -0.0135846492, 0.0415011495, -0.0475012995, -0.0095118918, -0.0472847819, 0.0427837633, -0.0428841971, 0.0093922513, -0.0927226990, 0.0262396131, 0.0608407371, -0.0293498002, -0.0260838829, -0.0626422912, -0.0968176723, -0.1123476550, 0.0810118467, 0.0198979117, -0.0736882314, 0.0048413696, -0.0067846766, 0.0439376645, 0.0134676164, 0.0910713226, -0.0918909609, -0.0165833179, -0.0388354808, -0.0591601767, 0.0126393773, 0.0498228148, 0.0562709980, -0.0071343216, -0.0134137217, -0.0676853731, 0.0529057346, -0.0332674012, 0.0110147521, 0.0911759809, -0.0708303228, 0.0185158141, 0.1154769138, -0.0780805424, -0.0305657238, 0.0251089223, -0.0442455038, 0.0069621471, 0.0369337872, 0.0499401167, -0.0700370893, 0.0854974762, 0.0402393229, 0.0107210856, -0.0762723088, -0.0013668292, 0.0141408620, 0.0622184984, -0.0812656134, 0.0625934005, 0.0633123964, -0.0601972714, 0.0181235112, 0.0602440462, 0.0469838493, -0.0006031580, 0.0765568614, 0.0101607228, -0.0121920845, -0.0488438159, -0.0832103789, -0.0289037116, -0.0901807100, -0.0996901169, -0.0791987479, -0.0525486469, 0.0508707836, -0.0742384270, -0.0808434039, -0.0865502656, 0.0585351102, -0.0673959851, 0.0662541538, 0.0789046958, 0.0491175652, 0.0650302023, 0.0602803752, -0.0212103687, 0.0251667779, -0.0682076514, -0.0753562450, 0.0123116085, -0.0049990006, -0.0452152193, -0.0018908037, 0.0672436655, -0.0582882203, -0.0539037324, -0.0441032797, 0.0493135378, 0.0798557103, -0.0732130632, -0.0820568800, 0.0205649622, 0.0533072352, -0.0623027384, 0.0610642210, -0.0130834170, -0.0181824621, -0.0235117991, 0.0190209523, -0.1043435559, 0.0607031174, -0.1007565707, -0.0805146694, 0.0122336764, -0.0051566218, 0.0661735684, -0.0308412593, -0.0272184461, 0.0212897509, 0.0168866310, 0.0556075685, 0.0624636821, -0.0664462671, -0.0772615969, -0.0641070604, -0.0620124564, -0.0183640029, 0.0431315638, 0.0457285233, -0.0203137193, -0.0231128186, -0.0079857698, -0.0212220568, -0.0128656747, 0.0109372530, 0.0316231027, 0.0151144639, -0.0172439944, -0.0339078642, -0.0918516889, -0.0631047487, -0.0438164137, 0.0480416119, -0.0764939487, 0.0534581132, 0.0235479809, 0.0148031814, -0.0623268448, 0.0785900354, 0.0115523264, 0.0200336911, -0.0094196666, -0.0168211143, 0.0133144874, 0.0888208523, -0.0835276246, 0.0323977917, 0.0167748705, 0.1343300790, -0.0250589885, 0.0270814244, -0.0059500625, 0.0398943350, 0.0089852437, -0.0887212977, -0.0487244874, 0.0564106181, 0.0514557846, -0.0484957658, -0.0820971802, 0.0774271935, 0.0145820547, -0.0014506724, -0.0347022600, 0.0452486612, -0.0169130415, 0.0127637656, 0.0679523200, 0.1013462320, -0.0063488977, -0.0120758070, -0.0551168770, 0.0112558156, 0.0138032483, -0.1133889109, 0.0823544189, 0.0776980445, 0.0549288355, -0.0061656348, 0.0030184861, -0.0309301820, -0.0439540260, -0.0464382619, -0.0290201586, -0.0949364156, -0.1101081222, -0.0054107066, -0.0265773311, 0.0008944924, 0.0520544425, 0.0252538286, 0.0931481123, 0.0532699786, 0.0552540384, 0.0733331740, -0.0439591222, 0.0382226966, 0.0339896120, -0.0347179398, -0.0306004826, -0.0286463816, 0.0430713110, -0.0359924845, 0.0404520631, -0.0529739074, 0.0528344810, -0.0509972982, 0.0359282047, -0.0203916784, 0.0358418003, 0.0014903676, 0.0098984949, 0.0835970268, 0.0474648327, 0.0457855538, -0.0288501401, 0.0438241325, -0.0405332372, 0.0343124010, 0.1013283506, 0.0703718513, -0.0480412655, 0.1015766785, -0.0390579067, 0.0013609205, -0.0527750812, 0.0282362849, -0.0459810868, -0.0471271798, 0.0353263766, 0.0423508659, 0.0635246262, 0.0658089593, 0.0945563167, 0.0222927053, -0.0572135597, 0.0395754762, 0.0719723031, -0.0462948568, 0.0323424824, 0.0492083207, 0.0139038656, 0.0614881553, -0.0204687547, 0.0553949066, 0.0022252218, 0.0029392710, -0.0045238826, -0.0405030362, 0.0481659174, 0.0420782529, 0.0105186906, 0.0362652726, -0.0931392163, -0.0764006153, -0.0275383554, 0.0593138784, 0.0583110973, 0.0834011436, -0.0612693951, -0.0012051325, -0.0970434919, -0.0503981896, 0.0271172728, 0.0659506917, 0.0911184624, 0.0318748541, -0.0006392190, -0.0245681461, 0.0407706350, 0.0300411340, 0.0160751119, -0.0208311118, -0.0433894470, 0.0598210581, 0.0594413802, 0.0739598572, -0.0315763429, 0.0548313037, -0.0053456314, 0.0079745594, -0.0444008186, 0.0500212349, -0.0307136066, -0.0599593110, -0.0268558059, -0.0470074378, 0.0107601080, -0.0735545233, 0.0761309788, 0.0843014792, 0.0582914427, -0.0531090572, 0.0153437462, -0.0836428702, 0.0488266349, 0.0440894775, -0.0216521733, -0.0766297430, 0.0602494814, 0.0364551209, -0.0678363740, 0.0477672629, 0.0056175049, -0.0131669790, -0.0490880348, -0.0595421046, -0.0350058079, -0.0291264355, 0.0139612490, 0.0197659638, -0.0088022081, -0.0584790148, -0.0281423610, -0.0777987689, 0.0723372996, -0.0072035431, -0.0571257770, -0.0217917729, 0.0196484327, 0.0063325842, -0.0613331646, 0.0685131699, -0.0482331179, -0.0638160929, 0.0110656004, -0.0915077105, 0.0587254241, 0.0236351229, 0.0036210481, -0.0235385597, -0.0187946428, -0.1126893461, 0.1059685796, -0.0404486209, 0.0568341166, 0.0372655839, 0.0556293130, -0.0531324148, -0.0915330425, 0.0455539525, 0.0399387404, 0.0743900463, -0.0430307239, -0.0292278323, -0.0523969717, -0.0388703719, -0.0478458144, -0.0647586510, -0.0669193119, -0.0029133218, -0.0732277259, -0.0172926448, -0.0622741729, 0.0366864465, -0.0872912183, -0.0096368454, 0.0478476398, -0.0530382507, -0.0507749319, 0.0050201360, -0.0573295243, -0.0440396927, 0.0371199287, -0.0314221233, 0.0484332331, -0.0330721252, 0.0472450778, -0.0484965369, -0.0546684451, 0.0826930776, 0.0288312528, 0.0108553953, -0.0265059732, 0.0043456145, -0.0099345082, 0.0243945271, 0.0624155737, -0.0079651736, 0.0738117248, -0.0427103750, -0.0493042395, 0.0653206557, 0.0072596730, -0.0812223330, -0.0806136206, 0.0207388699, -0.0957739204, -0.0657236725, -0.0713207945, 0.0521167293, 0.0138679417, 0.0011041830, -0.0515729003, 0.0023513739, -0.0295678303, -0.0010676301, -0.0469453037, -0.0148512237, 0.0178118777, -0.0802439302, 0.0649009496, -0.0858180076, 0.0188344419, 0.0806777179, -0.0610846244, -0.0535726175, -0.0308256000, 0.0658059493, 0.0669686496, -0.0394391008, -0.0251305699, -0.0809308439, -0.0570407957, 0.0210695341, 0.0163508300, 0.0511089526, 0.0333139710, 0.0346537158, 0.0535493828, -0.0754037127, -0.0524778701, -0.0575380363, 0.0227949731, -0.0121061243, 0.0543924086, -0.0225489289, 0.0572241135, -0.0641715601, -0.0359985791, 0.0079946928, 0.0464962423, -0.0723907277, 0.0029061779, -0.0396209583, -0.0291031543, 0.0844060257, -0.0265393909, 0.0848695412, 0.0525418445, -0.0052282093, 0.0175785590, -0.0315742306, 0.0093124826, 0.0671507269, -0.0121406373, 0.0485531613, -0.0313267745, -0.0438307822, -0.0446561910, -0.0840685815, -0.0754877925, 0.0446850173, 0.0660760775, 0.0150950644, -0.0438555367, -0.0263605397, 0.0942031890, -0.0338377208, -0.0103263399, -0.0638843849, 0.0105381319, 0.0284030698, 0.0167660397, 0.0434356555, -0.0388473272, 0.0202640649, -0.0243159831, -0.0600186773, -0.0735134855, -0.0713108629, 0.0641405657, 0.0411739163, 0.0445964150, 0.0004109395, -0.0517371483, -0.0602607615, 0.0595619902, -0.0154403737, 0.0756308511, 0.0614772551, 0.0655215383, -0.0225327108, -0.0384858847, 0.0414678007, 0.0149991885, -0.0533205047, -0.0594104677, 0.0073312754, -0.0572865903, -0.0056391130, 0.0449822955, -0.0402629860, 0.0075344886, 0.0464138724, 0.0108359158, -0.0750817358, -0.0264039189, 0.0309086088, 0.0117129292, -0.0505641662, 0.0849704817, -0.0384861082, 0.0507795438, -0.0075276350, -0.0222256407, -0.0777646303, 0.0618887208, 0.0949959233, 0.0427165553, 0.0334983319, -0.0236759540, 0.0193782225, 0.0606813394, -0.0360742845, -0.0560789853, -0.0580490828, 0.0172824450, 0.0906741768, 0.0498600118, 0.0326532759, 0.0039267298, -0.0587912761, -0.0760968998, 0.0544616766, -0.0867631659, 0.0186221916, 0.0769079700, 0.0660077929, -0.0633868724, 0.0105977571, -0.0144183151, -0.0186082479, -0.0301712509, -0.0353847370, 0.0635144338, 0.0657872111, -0.0642346889, 0.0830862001, 0.0160891078, -0.0332013480, -0.0002633103, 0.0723711103, -0.0043755919, 0.0279921480, -0.0614383928, 0.0816483498, -0.0163866896, 0.0536585972, -0.0527085923, 0.0570398122, -0.0449914970, 0.0249295793, -0.0299978387, -0.0686898977, -0.0761119425, -0.0144896572, 0.0789819360, 0.0347713418, 0.0030635169, -0.0341742784, -0.0328362398, 0.0356452875, -0.0690127015, -0.0085692229, 0.0767574683, -0.0184366293, -0.0403789394, 0.0365787037, 0.0561693385, 0.0058370824, 0.0486383252, 0.0760386586, 0.0024602218, -0.0164691359, -0.0093882624, 0.0285240430, -0.0022528216, -0.0840755627, -0.0276033096, 0.0150755337, -0.0595149212, -0.0758841634, 0.0210577007, 0.0257536378, -0.0300143324, 0.0206073150, -0.0301674288, -0.0079544745, -0.0903517380, 0.0028830562, 0.0678772926, -0.0110758925, -0.0705886856, 0.0106957918, -0.0441988409, 0.0580016747, 0.0282150079, -0.0548491664, -0.0424513333, -0.0426552072, 0.0406608395, -0.0488955900, 0.0482407473, -0.0189700685, -0.0947166383, -0.0431650281, 0.0332906507, -0.0468549579, 0.1039779261, -0.0028239316, -0.0080511682, -0.0327874385, -0.0102263680, 0.0594898090, -0.1023842767, 0.0824052468, 0.0195860323, 0.0755696297, -0.0486434326, 0.0739281252, 0.0112435818, -0.0462040752, 0.0336751975, -0.0878912956, 0.0180784315, -0.0827259645, 0.0394082554, -0.0373982973, 0.0223250128, 0.0334301926, 0.0503872074, 0.0566281006, -0.0575104728, -0.0333618708, 0.0988051966, 0.0347436666, 0.0361042656, -0.0581141859, -0.0944486707, 0.0520755164, 0.0257179234, -0.0513379127, -0.0342207141, -0.0564068891, 0.0139962630, 0.0392093174, 0.0111744516, 0.0004998261, -0.0659487993, 0.0481015742, -0.0740206540, 0.0206909385, -0.0507641695, 0.0655056909, 0.0186547227, 0.0660866275, 0.0237476584, 0.0637881234, 0.0249705017, 0.0604386367, -0.0017413525, 0.0170338601, 0.0719542950, 0.0346558318, -0.0899950042, -0.0356723256, 0.0832878724, -0.0398761258, 0.0530907102, -0.0258034058, -0.0366099253, -0.0820686743, -0.0589913465, -0.0306736734, 0.0325713009, -0.0420847423, 0.0103020705, 0.0337882377, 0.0375567004, -0.0257257707, 0.0194387026, 0.0129766092, 0.0480111651, 0.0638558492, 0.0760617927, 0.0503503866, -0.0400483422, 0.0468033589, 0.0461540483, -0.0597328767, 0.0394867584, -0.0029527706, 0.0307135992, -0.0715607405, -0.0138104400, -0.0608310774, 0.0343241654, -0.0475403033, 0.0709265172, 0.0684600547, 0.0503274538, 0.0143171875, -0.0559050255, -0.0675254837, 0.0135725653, -0.0239223372, 0.0306655914, -0.0153108723, 0.0070148292, -0.0765632465, 0.0989200696, -0.0363749377, -0.0457199812, -0.0692853406, -0.0041002957, -0.0302729588, -0.0378675088, 0.0434111767, 0.0675172880, 0.0300383847, 0.0387538485, 0.0566822886, 0.0481228940, -0.0243341830, 0.0970201716, 0.0078915963, 0.0299024936, -0.0322938040, 0.0587106347, 0.0008921985, -0.0416808128, 0.0774516836, 0.0021846651, -0.0130876126, 0.0563006178, -0.0429725125, -0.0195130389, 0.0291680247, -0.0261621568, 0.0712057650, -0.0142061282, -0.0351034626, -0.0625740588, 0.0821204931, 0.0082968483, 0.0556753650, 0.0928223580, 0.0135909636, -0.0265020039, 0.0181653649, -0.0767967626, 0.0817589089, -0.0200868100, -0.0221183319, 0.0705901533, 0.0420760177, 0.0568951331, 0.0840092301, 0.1002751291, 0.0656851307, -0.0238278378, -0.0939242169, -0.0052748392, -0.0131074302, -0.0556709617, -0.1187080443, 0.0431587622, 0.0094964206, 0.0062634451, 0.0127309086, -0.0079011498, -0.0342705622, 0.0301185958, 0.0022042696, 0.0513443127, 0.0265692864, -0.0545065552, 0.0717478767, -0.0299312826, 0.0817284659, -0.0723727793, 0.0622440539, -0.0233879015, 0.0499597825, 0.0219606664, -0.0201893505, 0.0821571797, 0.0099339699, 0.0174834449, 0.0270359032, -0.0563635193, -0.0177040081, 0.0420548432, -0.0693800822, 0.0761509091, -0.0067788390, -0.0065251049, 0.0134808160, -0.0628826991, -0.0029649707, 0.0220996141, 0.0679387748, -0.0362058878, -0.0607174225, -0.0671137795, 0.0360120721, -0.0518474877, 0.1105656102, 0.0384112224, -0.0182593111, 0.0966553390, 0.0085475985, -0.0212578829, 0.0237446167, 0.0504767485, 0.0842952803, 0.0204661172, 0.0523351543, 0.0006849835, -0.0265461020, 0.0248794947, -0.0454502851, 0.0844284743, 0.0545456335, -0.0030496845, 0.0424597487, -0.0498189442, -0.0486694686, -0.0175979100, -0.1039140821, 0.0308744777, 0.0958412066, 0.0296787191, -0.0036984596, 0.0241414178, -0.0395736918, -0.0912706032, 0.0506411158, 0.0390608273, 0.0547369644, -0.0142961638, -0.0699607059, -0.0216399208, -0.0483379178, -0.0637111440, 0.0282874256, -0.0291482788, 0.0009729957, -0.0854834318, 0.0658815205, 0.0194874760, 0.1156691462, 0.0322470404, 0.0046549849, -0.0364481471, 0.0029009401, 0.0346726850, -0.0279527809, -0.0263340659, -0.0541641153, -0.0310935322, 0.0578330420, -0.0638259277, 0.1032935530, 0.0504369624, 0.0747378245, 0.0521103777, 0.0048390292, 0.0506718531, -0.0733550489, 0.0847933218, 0.1077196226, -0.0040818918, 0.0248709340, -0.0207673460, 0.0541243963, 0.1009055153, -0.0077778166, 0.0795946419, 0.0982275307, 0.0737745166, 0.0044765989, 0.0406633317, -0.0248696152, 0.0542202741, 0.0967484042, 0.0666481555, -0.0489227697, -0.1030079648, -0.1207105890, 0.0125583941, 0.0085609229, 0.0224755201, -0.0309736468, 0.0637755543, -0.0617083013, 0.0109273093, 0.0262435749, -0.0619346276, -0.0933141485, 0.0276728179, 0.0078648413, 0.1291799396, 0.0777274668, -0.0072650304, 0.0254206099, 0.0310046077, 0.0404423624, -0.0046477015, -0.0645722151, -0.0979316831, 0.0472436510, 0.0139839519, -0.0380861759, 0.0282218754, 0.0308912229, -0.0188683886, -0.0503903627, -0.0945165455, 0.0282374565, -0.0575020798, 0.0069248392, -0.0217837505, -0.0231826138, 0.0630471259, 0.0055332375, -0.0788161904, 0.0003812574, -0.0529695116, 0.0253624264, -0.0298930351, 0.0571849868, 0.0633692294, 0.0538198501, -0.0436427593, 0.0743930191, -0.0395671614, -0.0873096287, 0.0838961974, -0.0462163724, 0.0120302914, -0.0349538662, 0.0677313879, -0.0667172894, 0.0669142306, -0.0111815371, -0.0147708040, -0.0054936889, -0.0053047207, -0.0327765644, 0.0560479611, -0.0829499885, -0.0586419888, -0.0188194811, -0.0205625873, -0.0361913517, -0.0607804023, 0.0227214433, -0.0328434967, -0.0007027620, 0.0638908744, 0.0994240269, 0.0818123370, -0.0577091612, 0.0183564834, -0.0604132414, 0.0504099540, -0.0261181109, -0.0668065697, -0.0569822155, 0.0503644384, 0.0208959766, -0.0330036357, -0.0365309268, 0.0572563671, 0.0321327709, 0.0610518157, -0.0094272709, -0.0481963940, 0.0072520729, 0.0319992267, 0.0566140711, 0.0051987921, -0.0236032642, 0.0380205065, 0.0321353339, -0.0919558033, 0.0644878075, -0.0118518593, 0.0102196522, 0.0005609667, -0.0132828709, -0.0483825877, 0.0703961998, -0.0892760605, 0.0737357363, 0.0289669503, -0.0030705989, 0.0153670991, 0.0079216780, -0.0257568713, 0.0217805188, -0.0272415057, -0.0467650741, 0.0010479518, 0.0357662551, 0.0038974700, -0.0131042497, 0.0161819216, -0.0812215656, 0.0195464343, -0.0112550249, 0.0739826038, -0.0309741646, -0.0564639494, -0.0769593865, -0.0673199296, -0.0668429136, 0.0130550219, -0.0952126458, 0.0096597914, -0.0101564834, 0.0446601026, 0.0320407338, -0.0096557895, -0.0566777475, -0.0409539975, 0.0590081885, 0.0303798541, -0.0039310153, -0.0099183936, 0.0612207539, 0.0395145565, -0.0140081244, -0.0706870407, -0.0205669310, -0.0279847495, 0.0290795173, 0.0071887970, 0.0190586261, -0.0854073241, 0.0286240894, 0.0045145145, 0.0226374939, -0.0140202232, 0.0110584069, -0.1256180853, 0.0981372893, 0.1056912616, 0.0044808597, 0.0150791258, -0.0592047237, 0.0330343954, -0.0400105678, -0.0784794018, 0.0479731895, 0.0342194997, -0.0314428918, 0.0115968036, 0.1055097058, -0.0373614393, 0.0238282271, -0.0419689454, 0.0722220466, 0.0440618582, 0.0566196293, -0.0513307899, 0.1009994373, 0.1117926463, 0.0524335802, 0.0405108631, 0.1129338592, 0.0247345828, -0.0026271648, 0.0485349111, 0.0631066859, -0.0511075966, 0.0052296268, -0.0400888063, -0.0184712540, -0.0955763757, 0.0317933187, 0.0161512103, -0.1189605817, 0.0384909213, -0.0417661592, 0.0097114705, 0.0000014344, -0.0181062277, 0.0390718132, 0.0238688253, -0.0641252249, -0.0103178946, -0.0154481390, 0.0607758425, -0.0249604154, 0.0838284269, 0.0697686449, 0.0452271439, 0.0732225925, -0.0535036512, -0.0641544610, 0.0153217679, -0.0676150918, 0.0191494934, 0.0099383602, 0.0749267638, 0.0952161998, -0.0314577781, -0.0433320925, 0.0368800201, -0.0193365756, 0.0196720604, 0.0660841987, 0.0170094520, 0.0584608205, 0.0369540416, 0.0294274185, -0.0036422226, -0.0253819693, 0.0343630463, -0.0231915433, 0.0626269579, -0.0151262516, 0.0308377631, -0.0588910021, 0.0023218940, 0.0886658654, -0.0571619384, -0.0047057769, -0.0284210984, 0.0141593218, -0.0268984586, 0.0228308551, -0.0646280348, 0.0959241912, 0.0486445762, 0.0285587441, 0.0817236006, -0.0079480801, -0.0200375300, 0.0534617566, 0.0306931753, -0.0054979576, 0.0188232791, 0.0347896628, 0.0336856134, 0.0385583527, 0.0746134222, 0.0085043935, 0.0559680052, 0.0785571933, 0.0328988731, 0.0650194809, -0.1069655865, -0.0150011405, -0.0304765087, 0.0447820686, 0.0953038260, 0.0225684363, 0.0384961143, 0.0189555436, -0.0693027005, 0.0257401131, 0.0144769223, -0.0131001733, 0.0169353206, -0.0231389347, -0.0048056799, -0.0788853317, 0.0426426157, 0.0273808632, 0.0893720090, -0.0097119287, -0.0225813445, 0.1013869196, 0.0001430630, 0.0211213827, -0.0558381155, 0.0532119721, 0.0137841525, -0.0043387492, -0.0259393863, 0.1101281568, 0.0392097570, -0.0015564316, -0.0815174058, 0.0419693775, -0.0733408555, 0.0504198931, 0.0231052916, 0.0456924178, -0.0489976853, -0.0638756901, -0.0001500554, 0.0069907089, 0.0579306819, -0.1042219028, 0.0422581695, 0.1133467853, 0.0765442029, 0.0329240635, 0.0780838802, 0.0217552520, 0.0238046721, 0.0633282214, -0.0374298170, -0.0818345994, -0.0113239419, 0.0143460454, 0.0632700399, -0.0877750292, -0.0660844743, -0.0769451037, 0.0203258377, -0.0660976171, 0.1029689610, 0.0436820537, -0.1182843894, -0.0073356228, -0.0452147387, -0.0341034792, -0.0358898640, -0.0167868827, -0.0387376435, 0.0981271937, -0.0727626830, 0.0725816190, 0.0652348399, 0.0072004283, -0.0424300656, -0.0612498522, 0.0338830873, -0.0328164287, -0.0553484820, 0.0481237471, 0.0032384037, 0.0253192522, -0.0489647873, 0.0326371528, -0.0112186773, -0.0777056888, -0.0408702828, 0.0848190337, 0.0900224522, 0.0790889487, -0.0946305916, 0.0653314516, -0.0004673563, -0.0395617113, -0.0562697127, 0.0750050694, -0.0591066368, -0.0338617563, 0.0956651270, 0.0429178327, 0.0950061530, 0.0401507281, -0.0195834339, 0.0317970626, 0.0134614110, -0.0656912848, 0.0760782957, 0.0821064040, -0.0504074953, 0.0374473557, -0.0365880504, -0.0655772239, 0.0495625585, 0.0111984638, 0.0401677378, 0.0513102114, -0.0270565655, -0.0596672446, -0.0625596941, 0.0315126926, -0.0448601060, 0.0005470678, 0.0790363103, -0.0380130485, -0.0460993573, 0.1115531102, -0.0496900827, -0.0512570217, -0.1043782681, 0.0152726984, 0.0797764584, -0.0409231707, -0.0303347819, -0.0670395792, -0.0415011011, 0.0480188876, -0.0741541088, -0.1007413790, -0.0490250103, 0.0060214009, -0.0883343592, -0.0033679795, 0.0437306613, 0.0415485129, 0.0399592407, 0.1204946041, 0.0166784804, -0.0622497872, 0.0124655524, -0.0737131089, 0.0562338158, 0.0288671087, 0.0039423197, 0.0374374390, -0.0698681325, -0.0458995514, 0.0354660824, 0.0688008666, -0.0126604373, 0.0829422027, -0.0653012171, -0.0956628695, -0.0072117159, 0.0031414346, -0.0019201894, 0.0421065129, 0.0088967392, 0.0586938411, 0.0877527148, -0.0540488288, 0.0461605377, 0.0215852056, 0.0504381433, -0.1117035151, 0.0865062773, -0.0188530888, 0.1043140143, -0.0290018842, 0.1072863862, -0.0854200348, 0.0348056182, -0.0818255395, -0.0624597408, -0.0671157613, 0.0353588723, -0.0689829290, 0.0650761276, 0.0315669551, -0.0229670350, 0.0887767524, 0.0445327312, 0.0195921976, 0.0181234591, 0.0033701865, -0.0820044279, -0.0244012289, -0.0111762341, 0.0103485389, 0.0002818776, -0.0103028510, 0.0743869916, 0.0249536335, -0.0084346207, 0.0597224832, -0.0794352144, -0.0122801587, 0.0176055841, 0.0690492839, 0.0100040343, 0.0124127697, 0.0635034069, 0.0984097272, -0.0177335627, -0.0910309479, 0.0690067485, -0.0407488719, -0.0227147304, 0.0961536244, -0.0268580765, -0.0041566603, 0.0213623885, -0.0544518642, -0.0722433180, -0.0600509495, -0.0647735223, -0.1019893512, 0.0060044387, 0.0242389422, 0.0340655483, 0.0056857839, 0.0416735709, -0.0139512215, 0.0748243928, -0.0468315296, 0.0634853616, 0.0964734927, 0.0900598019, -0.0619758964, 0.0120937936, 0.0020635780, 0.0002338790, 0.1004059017, 0.0554663949, -0.0378083326, -0.1016564742, 0.0509976186, -0.0056978893, -0.0611921735, -0.0450716615, -0.0181557927, -0.0631868169, 0.0511439294, 0.0363650024, -0.0473533496, -0.0797044039, -0.0782189444, 0.0212529507, -0.0214992967, 0.0278497059, -0.0582787655, -0.0075211446, 0.0666105449, -0.0273522064, -0.0804822594, -0.0004923643, -0.0415920019, 0.0509632565, 0.0641379058, 0.0398863405, -0.1022000909, -0.0341057107, -0.0013180474, -0.0256425478, 0.0785658732, -0.0810343325, 0.0580226928, 0.0043130051, -0.0387542732, 0.0636944398, 0.0773019344, 0.0444159061, 0.0768946558, 0.0236961655, 0.0980414301, 0.0575519875, 0.0342487879, 0.0395229943, -0.0405580029, 0.0157062560, -0.0945598036, 0.0139401108, 0.0428260863, -0.0241611190, 0.0366278067, 0.0297969040, 0.0216769762, 0.0829730555, -0.0200945567, 0.0057976418, 0.0121004926, 0.0490556508, -0.0678647310, 0.0435798205, -0.0269268248, -0.0810206160, -0.0211287942, 0.0101658870, 0.0638558418, -0.0298528410, -0.0210198537, 0.0130346548, -0.0843714625, -0.0878810212, 0.0264407471, -0.0254240911, -0.0070659867, -0.0505916439, 0.0934242755, -0.1142104715, 0.0023292287, -0.1319912970, -0.0423058197, 0.0777814612, -0.0126588298, 0.0265516564, -0.0263728760, -0.0298354551, -0.0697488785, -0.0248603448, -0.0388317779, -0.0424842462, 0.0094895903, 0.0001140790, 0.0549975298, 0.0082344292, 0.0123267770, 0.0417868532, -0.0072622830, 0.0199400224, 0.0203661397, 0.0436334498, 0.0755043998, -0.0808297023, 0.0726210400, 0.0257052965, 0.0555726700, 0.0344029367, -0.0733792633, -0.0495504364, -0.0757697299, 0.0705768615, 0.0977885500, 0.0493644923, -0.0139047811, -0.0265890285, 0.0321715102, -0.0426607914, -0.0587401353, 0.0140352100, -0.0482060239, 0.0727889910, 0.0391721353, -0.0755157918, 0.0178498942, -0.0307541825, 0.0426568873, -0.0257631689, 0.0669494122, -0.0020121904, -0.0193399098, -0.0608887225, 0.0156386662, 0.0103906067, 0.0111242915, -0.0593839437, -0.0262678023, -0.0277291816, -0.0792565942, 0.0230628513, 0.0429660939, 0.0630073175, 0.0236210264, 0.0637844279, 0.0253823288, -0.0247325674, -0.0621385500, 0.0438155644, -0.0505290255, 0.0928453356, -0.0431299545, 0.0050095352, 0.0020970767, 0.0447165072, 0.0079227621, 0.0455415212, 0.0201892685, -0.0213527065, 0.0415342674, -0.0531278737, -0.0830866024, -0.0254381932, -0.0987668559, -0.0738034323, -0.0336562358, -0.1015299261, -0.0550009012, 0.0082506631, 0.0079581123, -0.0623142496, -0.0493861847, 0.1012478471, -0.0375642739, 0.0109592360, -0.0293362793, -0.0657852069, 0.0548375323, -0.0327502638, 0.0579831265, -0.1052537486, 0.0179348942, -0.0376204811, 0.1110025048, -0.0186830293, 0.0275284033, 0.0252172742, -0.0199057646, -0.0327185057, 0.0616912916, -0.0072441553, -0.0214217957, -0.0723126680, 0.0069648172, 0.0038084590, -0.0946084112, 0.0364454463, -0.0093114153, 0.0682606846, 0.0562054403, -0.0760260224, 0.0712772906, -0.0390135013, 0.0618986934, 0.0377585925, 0.0447538458, -0.0755574778, 0.0641797706, 0.0380136408, -0.0103404243, -0.0615737624, -0.1054991931, 0.0750189126, 0.0371498764, 0.0072610183, -0.1011476368, -0.0532839000, 0.0458572358, -0.0024819858, -0.0386648551, -0.0339586623, 0.0316467285, -0.0201012436, 0.1010727882, 0.0316893868, -0.1039532498, 0.0088630700, 0.0300293267, -0.0347950868, -0.0980530977, -0.0481756590, 0.0059169526, -0.0587704554, -0.0644170567, -0.0125896577, -0.0190990865, 0.0460155308, -0.0950397104, -0.0526313744, 0.0751230493, 0.0267974082, 0.0380901583, 0.0633571893, -0.0044992752, -0.0301711038, 0.0868557841, -0.0498754866, 0.0759479180, 0.0331699513, -0.0819837674, -0.0895181224, 0.0544923991, -0.0817916244, -0.0889226943, 0.0486900210, 0.0635083169, -0.0294039138, -0.0279329624, -0.0389063321, -0.0264739469, -0.0792932957, 0.0092523806, -0.0474700630, 0.0572501943, 0.0594896413, -0.0561799034, -0.0309318211, -0.0353077762, 0.0211491231, -0.0050017727, -0.1038398221, -0.0155778853, 0.0789196566, 0.1084314883, -0.0070869871, 0.0074319867, -0.0137611497, 0.0462300703, -0.0600769371, 0.0410142019, -0.0521761551, -0.0170459114, 0.0993385166, -0.0509059615, -0.0832595602, -0.0052676024, 0.0559793301, -0.0672016740, -0.0771414936, 0.0579901785, 0.0767641813, -0.0371560156, -0.0600690097, 0.0472435728, 0.0402519740, -0.0214723293, 0.0928321034, -0.0211213101, 0.0336809233, -0.0151386121, -0.1067335680, -0.0312630385, -0.0716657043, -0.0227341801, -0.1060580686, 0.0132432450, -0.0606026873, -0.1112449914, -0.0156339556, -0.0047946759, -0.0173499044, 0.0277929325, -0.0413615890, 0.0723783672, 0.0402195789, -0.0664432943, 0.1079944223, -0.0301627200, 0.0192710198, -0.0306227021, 0.0268477462, 0.0138576506, -0.0135839684, 0.0755114853, 0.0306399316, -0.1056525186, 0.0045092013, -0.0243583079, -0.0256877206, -0.0663025081, 0.0388228185, -0.0890026465, 0.0464664772, 0.0463171303, 0.0955820382, 0.1062690392, -0.0555830114, -0.0257093459, -0.0257700142, -0.0120138898, -0.0108917663, -0.0371952094, 0.0727292821, 0.0666998401, 0.0615609698, -0.0183244292, 0.0873902515, 0.0584899075, -0.0188132580, 0.0929469541, -0.0252415258, -0.0365031697, -0.0425439999, -0.0645439401, 0.0922133327, -0.0071142660, -0.0136760641, -0.0139961354, -0.0129803065, 0.0300791543, 0.0793691725, -0.0762762949, 0.0689623579, -0.0021500441, -0.0575512424, 0.0148181906, 0.0417932123, -0.0270397160, -0.0454233252, 0.0628635511, 0.0714316145, 0.0600498393, -0.0137305763, -0.0393590108, -0.0107340617, 0.0371625349, 0.0212179553, 0.0740390867, 0.0840177834, -0.1054884717, -0.0696700215, 0.0827998519, -0.0137720807, -0.0421010256, 0.0303366724, 0.0420151465, -0.0582302213, -0.0635676309, 0.0816705599, -0.0596769638, -0.0006385004, -0.0134767424, 0.0087260716, 0.0171171296, -0.0143857161, 0.0023333218, 0.0878954753, 0.0094716242, 0.0747424290, -0.0512433350, 0.0807628259, 0.0555202514, -0.0272846501, 0.0471011288, 0.0745689571, 0.0271858815, -0.0138179222, 0.0024665585, 0.0058509447, 0.0215337016, -0.0469731130, 0.0522896200, 0.0343092345, -0.0478290059, 0.0423804522, 0.0363244265, 0.0037412187, 0.0330227092, -0.0276968423, -0.0431010276, 0.0157594923, 0.0316188894, -0.0706939101, -0.0347498581, 0.0749629587, -0.0169526413, -0.0626758486, -0.0312848501, 0.0180813912, -0.0586088859, -0.0239528976, 0.0288846605, -0.0480422564, -0.0475307293, 0.0021824257, 0.0540705062, -0.0404922627, 0.0151262870, 0.0405868553, 0.0617319383, 0.0479482450, 0.0502619855, 0.0169201829, -0.0197999384, 0.0507307537, -0.0657209009, -0.0371209309, 0.0358614475, -0.0887113288, 0.0361638628, -0.0237262528, -0.0024275600, -0.0267625004, 0.0147050042, -0.0341572240, 0.0945182219, 0.0984223709, 0.1002097800, 0.0322752595, 0.0097108614, 0.0642806515, 0.0269800741, -0.0679784045, -0.0574458763, -0.0376178212, -0.0069809468, -0.0130756777, 0.0266665630, 0.0644906387, 0.0214032270, 0.0344665237, -0.0648633316, -0.0735370293, -0.0394237228, 0.0299710575, 0.0670898706, -0.0272880886, -0.0308982469, 0.0331601463, 0.0401448421, 0.0304723550, -0.0170930717, -0.0661320835, -0.0167787690, -0.0561353490, -0.0680006519, 0.0177997127, -0.0492191911, 0.0025212506, -0.0775686726, -0.0474594645, -0.0353124924, 0.0753298551, -0.0791187882, 0.0085223299, -0.0135208964, -0.0103264106, 0.0531882420, -0.0587976649, 0.0243728608, 0.0696239397, -0.0332215242, -0.0573400892, -0.0589370094, -0.0016664456, -0.0732240081, 0.0106104156, 0.0260273777, 0.0843555480, -0.0107579734, -0.0684745312, 0.0121416729, -0.0068734563, 0.0299874470, 0.1135382652, 0.0340185314, 0.0845880806, -0.0628375262, 0.0645823479, 0.0028137194, -0.0086360592, 0.0745760724, 0.0771269500, 0.0710419640, -0.0672133937, 0.0031549849, -0.0017899449, 0.0719830021, 0.0038823716, -0.0527220666, 0.0372201540, 0.0070136064, 0.0365382358, 0.0290695988, -0.0923105106, -0.0607765540, 0.0138311060, 0.0642314181, -0.0575767644, 0.0102790985, -0.0368281268, 0.0331057794, -0.0373515598, 0.0140343001, 0.0697201714, -0.0040138536, -0.0455075316, -0.0278364625, -0.0031001011, -0.0599721298, 0.0478427969, 0.0830969214, -0.0251037776, -0.0921884924, -0.0310675465, -0.0241884291, 0.0316426344, 0.0313279927, -0.0338685438, 0.0755924359, -0.0212419648, 0.0623076335, -0.0589628294, 0.0581868514, -0.0105877174, -0.0052880677, 0.0136213237, -0.0490485914, -0.0904398710, -0.0105554145, -0.0599930361, 0.0881046802, 0.0856711417, -0.0265820380, 0.0521456227, -0.0178710837, -0.0587766059, -0.0379161462, 0.0171353836, -0.0429898091, -0.0823309049, -0.0508855768, 0.0825123116, 0.0771321878, 0.0306341797, 0.0717647746, -0.0050001666, 0.1026051939, 0.0527948253, 0.0086987978, -0.0406510346, 0.0030661805, 0.0963524058, -0.0467950627, 0.0174234528, -0.0146499733, 0.0111751966, -0.0870182887, -0.0230264366, -0.0959372818, 0.0871492326, 0.0020518308, 0.0467515662, -0.0307593513, 0.0179322194, -0.0473763794, 0.0509837233, 0.0816797167, 0.0342182890, -0.0241564531, -0.0928196460, -0.1275999546, 0.0619882941, -0.0723678917, -0.0544318408, -0.0071912697, -0.0065837791, 0.0150400335, -0.0252626296, -0.0692346469, 0.0835234597, 0.0250278730, 0.0214803796, 0.0619788431, -0.0551816151, -0.0663353801, -0.0538515598, 0.0937429070, -0.0017699745, 0.0379305705, -0.0331628658, 0.0468673185, -0.1159142926, 0.0215847027, -0.0561440066, -0.0147148492, -0.0393946171, -0.0656527877, -0.1178095341, 0.0000498845, -0.0130978432, 0.0413670912, -0.0493347272, -0.0148325870, -0.1275448203, 0.1199766099, 0.0336700864, -0.0395374931, -0.0316857062, 0.1170184687, 0.0048749158, 0.0249580741, -0.0804416016, 0.0823023766, -0.1042844951, -0.0802839175, 0.1019357219, 0.0359773487, 0.0341200717, -0.1413923353, -0.0007698206, 0.0584182516, 0.0144381681, -0.0874750018, 0.0058900691, -0.0815512240, 0.0059338473, -0.0278018657, 0.0750307366, -0.0680208579, 0.0141815888, 0.0349211991, 0.0693021417, -0.0603553802, -0.0318084545, 0.0667841583, -0.0059479806, -0.0538362674, -0.0360954478, 0.0375642814, 0.0114625702, -0.0207825284, 0.0732857883, -0.0521424040, -0.0783832297, -0.0294458698, -0.0391966328, -0.0672183856, 0.0115256524, 0.0653538257, -0.0172961019, 0.0548778586, -0.0582058914, 0.0379246324, -0.0435309298, -0.0766187310, -0.0652266145, 0.0540923178, 0.0051900065, -0.0206906237, 0.0329963043, 0.0227523297, 0.0588656142, 0.0203905907, -0.0471607409, -0.0192818064, -0.0650442988, -0.0198866855, 0.0477663465, 0.0078465072, -0.0799640864, 0.0622791722, -0.0501657687, 0.0884889513, 0.0292309523, -0.0204215925, 0.0077811782, -0.0840941742, -0.0197387766, -0.0341465808, -0.0344765820, -0.0053610923, 0.0153032336, 0.0266096443, -0.0678822026, -0.0478633270, 0.0571643189, 0.0192786343, 0.0313096419, -0.0822783634, -0.0653139129, -0.0490132160, -0.0278168228, -0.0675223246, 0.0420534275, 0.0715298504, -0.0291235223, 0.0215087328, 0.0633141845, -0.0011023132, 0.0544222146, 0.0188938044, 0.0418434888, 0.0028667105, -0.0382576510, -0.0620020814, -0.0551809929, 0.0501401164, -0.0019353798, -0.0183772128, -0.0656636730, -0.0278578158, 0.0236601457, -0.0519202575, 0.0345304236, 0.0214836709, -0.0550944917, -0.0309050735, 0.0230890252, 0.0496591553, -0.0346883573, 0.0468090810, -0.0588048883, -0.0107368641, -0.0691473037, -0.0256460253, 0.0068682069, 0.0564890802, -0.0024187283, 0.0248110089, -0.0260007158, 0.0540757030, -0.0074763810, 0.0181660354, -0.0011736167, 0.0344233699, -0.0291568134, -0.0346513428, -0.0350870937, -0.0358030871, 0.0736854151, 0.0518459566, 0.0931434482, 0.0515392981, -0.0536105148, -0.0667063221, -0.0639582723, -0.0246704426, -0.0142822387, 0.0463763215, -0.0367341526, -0.0745395347, -0.0142129725, -0.0538456291, 0.0639532357, 0.0103836861, -0.0437300317, 0.0008331359, 0.0192113370, -0.0811684430, 0.0699649081, 0.1040582955, 0.0959014446, -0.0221166778, -0.0267386958, -0.0447100326, -0.0432748161, 0.0252754036, -0.0000361866, -0.0007352845, -0.0288667493, 0.0041057495, -0.0241679586, 0.0782260746, -0.0744834691, 0.0601102673, 0.0462828130, -0.0349886902, 0.0543270297, -0.0154966377, 0.0282234717, 0.0357425958, 0.0621935055, 0.0127029251, 0.0657444447, 0.0971658006, 0.0896866396, 0.0007463420, 0.0091657750, 0.0041667428, -0.0256062783, -0.0645678937, 0.0772842020, -0.0440858603, -0.1057104245, 0.0626078025, -0.0194460824, -0.0875907466, -0.0750695765, -0.0411361083, -0.0457763895, 0.0021317801, 0.0406583436, 0.0285365302, -0.0156705864, 0.0401343480, 0.0029574153, -0.0304072667, -0.0703676492, -0.0199625120, -0.0759310648, -0.0148485098, 0.0279112756, -0.0100053549, 0.0280187000, 0.0351237394, -0.0170848425, -0.0082861623, -0.0380466282, 0.0923091993, -0.0393125638, -0.0787991807, 0.0909006521, 0.0895023644, -0.0700343177, -0.0312336143, -0.0510068350, -0.0282923393, 0.0596555658, -0.0370804109, 0.0644529313, 0.0728335306, 0.0009456138, 0.0012180918, -0.0036294395, -0.0285636913, -0.0603103712, 0.0247729551, 0.0591759868, 0.0280616358, -0.0555770323, 0.0347543769, -0.0840051770, -0.0538926683, 0.0697983950, -0.0074724331, -0.0417769141, 0.0359427817, -0.0141454134, -0.0047985502, -0.0264766440, 0.0559339300, 0.0102630844, 0.0270073619, 0.0414003059, -0.0360961668, 0.0446534678, 0.0616887882, -0.0676910356, 0.0292874184, -0.0434469841, 0.0126255322, 0.0578290820, -0.0633763149, 0.0399928093, -0.0460785814, -0.0073849638, 0.0715347603, -0.0729592890, 0.0718162134, 0.0627187192, -0.0548889227, 0.0001802469, 0.0542422198, 0.0198709704, -0.0152543411, 0.0065830392, -0.0444264896, 0.0266914405, 0.0179107785, -0.0566129722, 0.0978672579, 0.0250563268, 0.0407517105, -0.0687009245, 0.0459092520, 0.0011392405, 0.0846017674, -0.0355837382, -0.0334684849, 0.0491769351, -0.0090278806, -0.0293112155, 0.0105953095, -0.0683228523, 0.0648910031, 0.0566870570, 0.0479331426, 0.0165467858, 0.0692484081, 0.0873775855, -0.0244892556, -0.0274275616, 0.0153842857, -0.0333736986, -0.0131675228, -0.0350330435, 0.0572541282, 0.0447708145, 0.0262148846, 0.0437338538, -0.0135179134, -0.0642137155, 0.0170133766, 0.0310145952, 0.0938451216, 0.0691637397, -0.0775003880, -0.0348956324, -0.0179028790, 0.0845580623, -0.0601744540, -0.0161863882, -0.0446260348, -0.0300857332, 0.0018489691, 0.0246854704, -0.0866838470, -0.0160790812, -0.0030107242, 0.0579709820, -0.0091997655, 0.0220662784, 0.0015222704, -0.0115576731, 0.0373600163, -0.0296892338, 0.0015155873, 0.0126031898, -0.0361048654, 0.0589114800, -0.0447219238, -0.0005280674, -0.0496881455, 0.0027171003, 0.0089107510, 0.0673569888, -0.0314585567, 0.0788856447, -0.0339524932, -0.0748818815, -0.0621424355, 0.0739916414, 0.0260749552, 0.0486173593, 0.0520047136, -0.0516164303, 0.0418185033, 0.0222096052, -0.0697911456, 0.0091274343, 0.0242407229, 0.0850849152, -0.0343730487, -0.0931845084, -0.0166100804, -0.0634539872, 0.0466973893, -0.0146430358, -0.0389889628, 0.0621821880, -0.0376860239, 0.0191540569, -0.0245131981, 0.0668006986, 0.0081810551, 0.0863381326, 0.0179824904, 0.0891062990, -0.0462259054, -0.0528576262, -0.0144449202, -0.0564656593, -0.0085266652, 0.0760294050, 0.0726943016, -0.0899441317, 0.0006331597, 0.0353644677, 0.0264176801, 0.0480515808, -0.0305972323, -0.0059617623, -0.0617069267, -0.0160550941, 0.0756177902, 0.0752529055, -0.0273176339, 0.0538115874, -0.0104611292, -0.1041381806, -0.0773678273, -0.0495314524, 0.0472053029, -0.0509327762, -0.0541848019, 0.0660259426, -0.0241451915, 0.0447516292, 0.0375097133, -0.0408165231, -0.0342511646, -0.0386927240, -0.0552503616, 0.0661953539, 0.0026549622, 0.0475792028, 0.1035402417, 0.0237293392, 0.0191167854, -0.0463185422, 0.0511964895, 0.0555042438, -0.1080091968, -0.0349693820, -0.0362120159, 0.0913293883, 0.0202757120, 0.0389735140, 0.0558201335, 0.0451425649, -0.0081617339, 0.0709522814, 0.0674262643, -0.0083503798, 0.0478209034, -0.0399109907, 0.0743331090, -0.0313406289, -0.0811845437, -0.0291849673, 0.0900932923, 0.0317818187, -0.0931711569, 0.0701055378, 0.0663944855, 0.0999734551, -0.0873011276, 0.0802912563, 0.0315885283, -0.0616714582, -0.0142757287, 0.0769550428, 0.0087607838, -0.0376058780, -0.1011196822, -0.0467010699, -0.1206458285, 0.0099264318, -0.1133645028, 0.0548993871, 0.0690547675, 0.0716055408, -0.0596215688, 0.0098908972, 0.0533339605, -0.0933313593, 0.0589466132, -0.0440650769, 0.0978745818, -0.0162300821, 0.0045598480, -0.0182103142, 0.0107408827, -0.0689534768, 0.0271041989, -0.0852833763, 0.0026767633, -0.0042903279, 0.0242378693, 0.0513722636, 0.0286864098, -0.0112275118, 0.0632650033, 0.0117799351, -0.0078164646, -0.0406942703, 0.0227578767, 0.0067823566, 0.0540797003, 0.0738439262, -0.0013376018, 0.0209014006, 0.1008929983, 0.0645308942, 0.0891543925, -0.0217641611, 0.0601976588, -0.0498399511, -0.0027386656, 0.0397115685, 0.0915489569, 0.0463113822, 0.0077120895, 0.0601095967, 0.0991005898, 0.0884685367, 0.0467619114, -0.0277880654, -0.0068622627, 0.0985180512, 0.0044197403, 0.0959362090, 0.0357775688, 0.0214873962, -0.0291805454, 0.0388503708, -0.0712382868, -0.0279621240, 0.0279893987, -0.0447299257, 0.0445029065, -0.0078850649, -0.0175683741, -0.0090373196, 0.0722646788, -0.0242087003, -0.0175175406, -0.1013843343, -0.0021558451, -0.1048334762, 0.0754207149, 0.0726099759, 0.0570839755, -0.0157523043, 0.0952372849, -0.0855878219, 0.0154464096, -0.0701210126, 0.0215407535, -0.0323101170, -0.0232532788, -0.0275326744, -0.1026030034, 0.0446715765, 0.1087367833, 0.0954048410, 0.1054340005, -0.0511008911, 0.0109184990, 0.0694069043, 0.0240783338, -0.0194862317, 0.0537843406, 0.0186529551, -0.0473409779, -0.0115733650, 0.0460262932, -0.0374688283, -0.0629590154, 0.0754874423, 0.0258051306, 0.0161195081, -0.0212864503, 0.0410154946, 0.0460906811, -0.0129252989, -0.0873789340, 0.0021865044, 0.0807851478, -0.0130538130, 0.0326465443, -0.0428806059, 0.0609474294, 0.0900859162, -0.0735192299, -0.0240870696, 0.0095144575, -0.0146630891, -0.0789833814, 0.0093224058, -0.0371082239, 0.0290474948, -0.1135852635, -0.0151434382, 0.0137257194, 0.0430400707, -0.0248647444, 0.0590323098, -0.0922738537, -0.0240796823, 0.0753941759, -0.0124300309, 0.0088754157, -0.0827522576, 0.0810786635, -0.0017296821, 0.0195194464, 0.0803772658, 0.0451929793, 0.0154429330, -0.0845471025, -0.0219693892, -0.0544037372, 0.0118624829, -0.0032011438, -0.0366750732, -0.0649751276, 0.0493830293, -0.0722891018, -0.0967794880, -0.0006676022, -0.0827243850, 0.0538238324, -0.0696966574, -0.0566336177, -0.0140324226, 0.0183172859, -0.0176050887, 0.0050111506, 0.0619867034, -0.0103699910, 0.0221795961, -0.0722746849, -0.0704362318, 0.0342688784, 0.0946134701, -0.0205124095, -0.0019690401, 0.0167717524, 0.0213525444, -0.0570008010, -0.0969533697, -0.0594974160, 0.0581425987, 0.0751763210, -0.0516501814, -0.0204168726, 0.0070720483, 0.0436041057, 0.0181845166, -0.0586936995, 0.0629196316, -0.0911431164, 0.0304994658, 0.0170581676, 0.0782784447, 0.0424827673, -0.0428166017, 0.0370069705, 0.0337963030, 0.0793428421, -0.0545688495, -0.0248205382, 0.0009781006, 0.0112717263, 0.1155180708, 0.0620227791, -0.0154786892, -0.0842178762, -0.0005423703, 0.0603299215, -0.0163912848, -0.0763057247, -0.0037264999, -0.0360529684, 0.0210833047, 0.0768481120, -0.0174698550, -0.0679259524, -0.0221553724, 0.0663664341, -0.0965152532, -0.0866665542, -0.0908036977, -0.1189573556, -0.0495900624, 0.0232829228, -0.0447374545, 0.0301118828, 0.0555520952, 0.0036264032, -0.0413126536, -0.0576568097, -0.0292770769, -0.0384042412, -0.0036514006, 0.0070398808, -0.0260098502, -0.0249350742, -0.0644813552, 0.0652294531, 0.0317968614, 0.0076484093, -0.0429714434, 0.0525285602, 0.0355960466, -0.1172276437, -0.0157027934, 0.0465620793, 0.0286415629, -0.1016275883, 0.0127726700, -0.0817053318, 0.0023175268, 0.0573817939, -0.0504127219, 0.0488375761, 0.0217615217, 0.0440170579, -0.0080446210, 0.0130525082, 0.0200153291, 0.0037627551, 0.0061489800, 0.0714288577, -0.0947070718, -0.0565904938, -0.0176022388, -0.0778432116, 0.0375269949, 0.0708506256, 0.0506681092, 0.0501983836, -0.0069179968, -0.0077296519, -0.0083947433, 0.0086577777, 0.0435324013, 0.0710622892, -0.0940154791, 0.0344083123, 0.0809160918, 0.0525927208, 0.0483813994, 0.0961273313, 0.0305067692, -0.0354082808, -0.1008843631, -0.1252848357, 0.0541557260, 0.0198889747, -0.0391041525, -0.0249802861, 0.0586659499, 0.0344430581, 0.0179706570, 0.0095067052, -0.0108814426, 0.0497439504, -0.0618195198, -0.0355369933, 0.0020540040, -0.0807930604, -0.0527344495, 0.0975681767, 0.0260505509, 0.0169869531, -0.0519075468, 0.0811476633, -0.0109220902, -0.0624710135, 0.0013788412, -0.0560765788, 0.0376209356, -0.0573985204, -0.0281754583, -0.0506480858, 0.0205023158, 0.0651899353, -0.0745809302, 0.0403070040, -0.1178799346, 0.0921170190, 0.1134568527, 0.0446569212, 0.0528596267, 0.0102628497, -0.0081159072, 0.0546746701, -0.0190430470, -0.0731924921, -0.0146118272, -0.0104101282, 0.0686526820, -0.0158389695, -0.0094679072, 0.0018196052, 0.0287177395, -0.0532647967, -0.0854909271, -0.1106588393, 0.1085697711, -0.0576148443, -0.0399742089, 0.0594273880, -0.0117026735, 0.0290222932, 0.0462426879, -0.0208350252, -0.0781623796, 0.0117678288, -0.0608346313, -0.0626553968, 0.0570404753, -0.0984819308, -0.0325916186, 0.0280160438, 0.0505411476, 0.0694892555, -0.0793727040, 0.0118753128, -0.0023594422, -0.0169678684, -0.0737976506, 0.0470605791, -0.0037042275, -0.1010909230, -0.0428388380, -0.0033963176, -0.1105097756, 0.0783266351, -0.0991815105, -0.0445729196, -0.0063387956, -0.1092535928, -0.0074478500, -0.0300974529, -0.0356753059, -0.0846881494, -0.0462134928, -0.0026572775, 0.0367514975, -0.0329005159, -0.0132799931, 0.0449339785, -0.1223559603, 0.0180434752, 0.0904948041, 0.0611154772, 0.0851532221, 0.0245866012, 0.0682471842, 0.0873751789, 0.0310726520, -0.0135714160, 0.0741850808, 0.0447751023, 0.0042299656, 0.0568960384, -0.0362697095, -0.0923837051, -0.0227496549, -0.0194548685, -0.0062860064, -0.0140756015, 0.1009268761, -0.0445771553, -0.0323718227, -0.0330489762, 0.0862545744, -0.0370198898, 0.0162330028, -0.0179290809, -0.0183973126, -0.0815610364, 0.0094981901, -0.0689861923, -0.0148693332, -0.0887847319, -0.0628109500, 0.0917508751, -0.0228217505, 0.0889922902, 0.0556368269, -0.1070880890, 0.0344590135, 0.0114715137, -0.0743719116, -0.0547909588, -0.0560029894, 0.0216843653, 0.0060639549, 0.0058684773, 0.0559543110, -0.0101715494, -0.0835409090, 0.0604901575, 0.0713095888, -0.0401252136, -0.0118630240, 0.0790289193, -0.0989123806, 0.0536822863, 0.0464276150, -0.0250857510, -0.0708051920, -0.0380102545, -0.0469052382, -0.0259703286, -0.0459867492, 0.0749081746, 0.0476112477, -0.0067549734, 0.0755220205, 0.0283092260, -0.0094461124, -0.0349616520, -0.0281492211, -0.0406691208, 0.0434187390, -0.0500748754, -0.0156613123, 0.0465632565, -0.0532398820, -0.0901269317, 0.0222319197, -0.0076412535, -0.0289004482, -0.0622298643, 0.0017550348, -0.0525766164, -0.0616657622, -0.0386126079, 0.0456349142, -0.0008578679, 0.0395516604, 0.0954565853, -0.0839209482, -0.1054278314, 0.0253550038, -0.0228124242, 0.0363320075, -0.1124483645, 0.0198326800, 0.0973046497, 0.0328774527, -0.0607570298, -0.0942225009, -0.0660805553, -0.0132945301, -0.0295132920, -0.0753982887, 0.0289255902, -0.0257626232, 0.0025579166, 0.0600869544, 0.1152406558, -0.0822265223, 0.0348102637, -0.0751195550, 0.0075422595, -0.1043115929, -0.0452645756, -0.0207598135, -0.0208451916, -0.0451487489, -0.0552694574, -0.0480275750, 0.0069583706, -0.0606968589, 0.0396989249, -0.0385943018, 0.0294327345, 0.0420620218, 0.0920260847, -0.0161205959, 0.0970634595, 0.0162959434, -0.0089475065, -0.0082051465, 0.0401105471, -0.0547258817, -0.0375018120, -0.0208583921, 0.0276355110, -0.0209248923, 0.0001011234, 0.0030618580, -0.0758966655, -0.0471456945, -0.0329519026, 0.0658188462, -0.0311671831, -0.0094496952, 0.0837619752, -0.0467644818, 0.1101562902, -0.0492065474, -0.1078417301, 0.0201095622, 0.0185763892, -0.0721385404, -0.0439168364, -0.0863500684, -0.0110220267, 0.0673364103, -0.1296855509, -0.0170137510, 0.1074530035, 0.0091565792, -0.0165436175, -0.0620194077, -0.0061471132, 0.0559902191, -0.1232871264, 0.0079151429, 0.0417011753, 0.0361650847, -0.0457347967, -0.0400689989, 0.0279702358, 0.0126487799, -0.0857785195, 0.0068633840, 0.0676993206, -0.0582232140, -0.1001731381, -0.0527383611, 0.0775076374, -0.0364543684, -0.0860437378, -0.0777071938, 0.0459077470, -0.0604949929, -0.1001108587, -0.0429667681, 0.0318797342, -0.1111069992, 0.0077592381, -0.0005875677, 0.1119261310, -0.0260222461, -0.0013913962, -0.0560086034, 0.0389671922, 0.0689542890, 0.0233140141, 0.0300713368, -0.0803542659, 0.0847232714, 0.0663540959, 0.0702129155, 0.0311987512, -0.0267395638, -0.0152772563, -0.0494951196, 0.0475560687, -0.0545736887, 0.0442166068, 0.0269809254, 0.0202853829, -0.0202994272, -0.0545423552, -0.0975775123, 0.0967538133, -0.0120887095, -0.0983330533, -0.1172190160, -0.0744181052, 0.0089429580, 0.0219449066, 0.0008326359, 0.0650447160, 0.0236016419, 0.0578817725, 0.0148458788, 0.0580780432, 0.0248129722, 0.0098707052, -0.0717796683, 0.0592403859, -0.0036848306, -0.0172100700, -0.0502673872, 0.0782169774, 0.0302932411, -0.0304913670, 0.0213997383, 0.0516682453, -0.0973847285, -0.0064932769, -0.0675309673, -0.0226201545, 0.0151592745, 0.0244462639, -0.0088752126, -0.0321001336, -0.0250339396, -0.0097174812, 0.0514597110, -0.0020484929, -0.0094539523, 0.0447996594, 0.0960274115, 0.0943090692, -0.0373369604, 0.0447060242, 0.0350078084, 0.0980955437, -0.0142442165, 0.0585472658, -0.0046140412, 0.0212778579, 0.0427802838, 0.0596132912, -0.0397585891, 0.0727206916, -0.0602830090, -0.0553626567, -0.0002679894, -0.0647221878, 0.0804017857, -0.0438671149, -0.0374107137, 0.1078991592, 0.1121006086, 0.0313240215, -0.0329002663, 0.0842983201, -0.0635166988, -0.1237624288, -0.1284221262, -0.0779457837, -0.0341528133, 0.0389286429, -0.1070671454, 0.0853904784, 0.0332357660, -0.0241401270, -0.1064502597, -0.1088088006, 0.1325438470, -0.0808413327, 0.0188693758, -0.0666846111, -0.1128197908, -0.0579287857, -0.0724222362, 0.0346835703, 0.0124059515, -0.0855304822, -0.0824203044, 0.0662915930, -0.0610532202, -0.1158885062, 0.0109667499, 0.0344069004, -0.0741608590, -0.0966908112, -0.0940564275, -0.0264073461, 0.0064434600, 0.0333845541, 0.0420471206, 0.0123310452, -0.1070936844, -0.0065651499, 0.0708614960, 0.1092617586, 0.1025377512, 0.1220247597, 0.0419038832, 0.0653543621, -0.0526612066, 0.0089906547, -0.1076873019, -0.0070101270, 0.0562724993, 0.0933816060, 0.0816991255, -0.0720439777, -0.0168386381, -0.0813265368, -0.0436205529, 0.0165960733, -0.0243459605, 0.0140281757, -0.0580572449, -0.0876272619, -0.1150998101, 0.0562302135, -0.0525997542, 0.0131550683, -0.0234639738, 0.0845371112, 0.0845880434, 0.0645145848, 0.0104215825, 0.0006672475, 0.0053783301, 0.0561049655, -0.0045408504, 0.0383550152, 0.0891155675, 0.0567528047, -0.0718972459, -0.0317348205, -0.0380836986, 0.0334619693, -0.0539889298, -0.0592469759, -0.0664977953, -0.0387745127, -0.0178752858, -0.0108575244, 0.0155066941, 0.0434781834, 0.0956632644, -0.0531454682, 0.0267858952, -0.0300821010, 0.0643903688, -0.0410369225, 0.0205515604, -0.0854159296, 0.0804504082, -0.0720804036, -0.0477081165, 0.0974480510, 0.0656475946, -0.0990457013, -0.0386476666, -0.0652717277, -0.0688462928, 0.0101498328, -0.0649761781, -0.0117965061, 0.0056660273, 0.0376284383, -0.0701800138, 0.0826864690, -0.0055849175, 0.0401805080, -0.0696538463, -0.0518579334, 0.0164372157, 0.0675067678, -0.0481503569, 0.0505894199, -0.1036889926, -0.0248987414, 0.0139334407, 0.0044459784, -0.0388906747, 0.0778530017, 0.0424889848, -0.0956750214, 0.0313156508, 0.1176492646, 0.1032899544, -0.0149097554, 0.0236455165, 0.0933204070, 0.0745979995, 0.0164525285, -0.0305847172, -0.0453833230, -0.0462757125, 0.0716104433, 0.0017339968, -0.0260022450, 0.0808438361, -0.0588447712, 0.0002803910, 0.0413416810, 0.0419341736, -0.1019896269, 0.0932285860, -0.0654171556, 0.0495051779, 0.0101856934, -0.0384094492, -0.0200610030, -0.0431325696, -0.0945847481, 0.1029531211, 0.0343452357, -0.0372738838, -0.0459631681, -0.0054494562, -0.0462477915, 0.0187008772, -0.0842810422, -0.0221094750, 0.0381745696, -0.1145296618, -0.0479547493, 0.0591144115, -0.0169878397, -0.0149987387, -0.0211797561, -0.0106641697, -0.0685209706, 0.0327232853, -0.0402297340, -0.0613182597, -0.0651461482, -0.0929853246, 0.0809061751, -0.0442672707, -0.0437759683, -0.0513029732, 0.0633333400, 0.0232774597, -0.0459473766, 0.0033834637, -0.0796196088, -0.0383941866, 0.0496998169, -0.0348777436, 0.0090311039, 0.0388431139, 0.0974778160, 0.0938871428, 0.0398421921, -0.0097404663, -0.0305270683, 0.0430335626, 0.0219011717, -0.1041736454, 0.0823949724, 0.0665499941, 0.0414726399, -0.0825508237, 0.0071999016, -0.0267125946, -0.0749386922, -0.0409800895, -0.0318010002, -0.0621349998, -0.1031979769, 0.0081599383, -0.0470586270, 0.1040679514, -0.0450439677, 0.0662881508, 0.0904434025, -0.0004420289, 0.0169366226, -0.0148050766, 0.0916884020, 0.0727850720, -0.0314105526, 0.0979069024, -0.0182988495, -0.0162431933, -0.0094773425, 0.0493119024, -0.1060616374, -0.0965324119, -0.1063003540, 0.0800793916, -0.0414904431, 0.0246364903, -0.0382748693, -0.0323442407, -0.0343991444, 0.1263858378, 0.0610475875, -0.0505288430, -0.0975543559, -0.0768613815, 0.0107287979, 0.0365275033, 0.0917010009, -0.0264499392, 0.0519067906, -0.0485541523, -0.0291953422, 0.0498155467, -0.1066700146, 0.0753209293, 0.0170132667, 0.0087786559, -0.0646179020, 0.0614576451, -0.0203015506, 0.0360439718, -0.0285527203, 0.0553155132, 0.0638046339, 0.0178444907, -0.0684069246, -0.0007731151, 0.0284641404, 0.0985760242, -0.0061087813, 0.0087736323, 0.0812749788, 0.0945805162, -0.0658282861, -0.0213558953, -0.0421474352, -0.0262410995, -0.0900270641, 0.0209914148, -0.0408425815, 0.0616376624, -0.0941470712, -0.0159974582, 0.0405371971, 0.0663895383, -0.0664028972, 0.0786199272, 0.0840577036, -0.0199513510, 0.0923431665, -0.0122990133, 0.0414923206, 0.0146341976, 0.0301975235, 0.0938574150, -0.0025104398, -0.0501864292, 0.0140856225, 0.0358223505, -0.0137333963, 0.0403839611, -0.0036579194, -0.0244949386, -0.0138333282, -0.0498007722, -0.0362360589, 0.0152195059, -0.0937398225, 0.0524914935, 0.0926477313, -0.0516449884, -0.0120919459, 0.0806160867, -0.0238206405, 0.0580104962, -0.0014318494, 0.0926021338, 0.0130839320, -0.0006579065, 0.0746481195, 0.0609901547, -0.0510440506, -0.0385548882, 0.0485465415, 0.0207427405, -0.0561711118, -0.0883624405, 0.0405547991, 0.1063965484, 0.0563797839, -0.0798728243, 0.0793027878, 0.0328498110, 0.0542350858, 0.0388386026, -0.0496951304, -0.0489619114, -0.0901913419, 0.0532528982, 0.0105046481, 0.0041543366, -0.0195566248, 0.0147253154, 0.0189000554, 0.0316809528, -0.0034427901, -0.0429448150, -0.0359589383, 0.0829860270, 0.0290505216, 0.0446490943, 0.0983402729, 0.0454616211, 0.0262868740, 0.0600226671, 0.0629616529, -0.0517806150, 0.0631640851, 0.0839035287, -0.0156586040, -0.0735767111, -0.0266558565, -0.0718683749, -0.0450277776, 0.0509266295, 0.0563774258, 0.0155383097, 0.0198860448, 0.0867594033, 0.0749464706, 0.0112684490, -0.0706160739, -0.0646757185, -0.0287593752, -0.0692301169, -0.0664193183, 0.0573794469, -0.0405941941, -0.0023744572, -0.0450559817, 0.0165631380, -0.1184123009, -0.0949928984, -0.0091519533, 0.0621750019, -0.0447788686, -0.0148168970, 0.0490458831, -0.0141975172, -0.0150367180, 0.0263002515, 0.0949032679, 0.0690017343, -0.1194256842, 0.0334768966, 0.0318304524, 0.0911566317, 0.0520043783, -0.1265912354, 0.1147056147, 0.0133905234, -0.0803617388, -0.0716759786, 0.0699918121, -0.0079340469, 0.0092380447, 0.0807914287, 0.0605756789, 0.0741831958, -0.0976382196, -0.0176165570, 0.0953644291, 0.0467234030, -0.0531115755, 0.0898741409, -0.0119131524, 0.1031840369, -0.0688908324, -0.0351308882, 0.0795904174, 0.0142632509, 0.0636650845, 0.0632498339, -0.0214450117, -0.0892691612, -0.0448615626, -0.0282501001, 0.0122858258, -0.0245157797, -0.0660565719, 0.0821670592, 0.0848303959, 0.1016373038, 0.1059659570, 0.0289488733, 0.0231849495, -0.1139427572, -0.0281736739, 0.0922578573, -0.0470836721, -0.0382205546, 0.1216278374, -0.0064893248, 0.0338946022, 0.1061849892, 0.0415786318, -0.0630414188, 0.0757837072, -0.0268446729, 0.0442582853, 0.0171488393, 0.0020275349, 0.0536983907, 0.0720431879, -0.0015499787, 0.1007808894, 0.1203857809, -0.0493056588, 0.0422704592, 0.0539571270, 0.0686692744, -0.0503682233, -0.0087067140, 0.0454890467, 0.0895511061, -0.0656480044, 0.0451740883, 0.0814248398, 0.0777174160, -0.0803946033, 0.0120327696, 0.0343352109, 0.0828064904, 0.0040988266, -0.0089360410, -0.0173670333, 0.0611548722, 0.0533101484, 0.0283322111, 0.0600613318, -0.0304898247, 0.0476971865, -0.0781315118, -0.0320981257, 0.0292736851, 0.0295723882, -0.0073985374, 0.0305236820, -0.0458699688, -0.0159503855, -0.0652109981, -0.0281927437, 0.0519251488, -0.0995482653, -0.0029106450, -0.0712041333, 0.0958862007, -0.0553594641, -0.0854172483, 0.0450661480, -0.0807847008, -0.0465794802, 0.0888250172, -0.0706097856, 0.0035180226, 0.0839335397, -0.0861035660, -0.1036661193, 0.0933837369, -0.1148393080, -0.0773179457, 0.0653751940, -0.0134235788, -0.0769295171, 0.0059838588, 0.0393774807, -0.0492612273, 0.0026992941, -0.0105542541, 0.0710523278, 0.0363707133, -0.1149272472, -0.0367194004, 0.0690998435, 0.0129242651, 0.0727997124, -0.0913090408, 0.0012919941, -0.0725886896, -0.0886527747, -0.0343275554, -0.0316035077, 0.0348576456, 0.0341431350, 0.0544464365, 0.0735505000, 0.0524490066, 0.0290352758, -0.0640863702, -0.0085609034, -0.0528373308, -0.0337687396, 0.0494077839, 0.0175722390, 0.0679033101, -0.0501161180, -0.0965128168, -0.0161837842, -0.0555295087, 0.0548207909, 0.0177431330, -0.0218149275, 0.0131282769, -0.0553762317, 0.0280464068, -0.0819884539, -0.0365975760, 0.0338996798, 0.0083219949, 0.0425284095, 0.0238710344, 0.0993969068, -0.0399451964, 0.0103374375, -0.0442307629, 0.0292413160, -0.0078049451, 0.0303494632, -0.0726384595, 0.0484153740, -0.0652573556, -0.0421637408, 0.0041317889, -0.1055757850, -0.0942962095, 0.0002396978, -0.0158610661, 0.0106243677, 0.0513810553, 0.0887923539, -0.0056389421, 0.0672029778, -0.0171822011, -0.0179396048, -0.0381712057, -0.1215570942, -0.0891333967, 0.0012587588, -0.0360988639, 0.0747838244, 0.0287501942, 0.0673592761, 0.0461889952, -0.0362911895, -0.0410057418, 0.0839671120, 0.0615225732, -0.1079002991, 0.0073227710, -0.0714299530, 0.0605220422, -0.0444179475, 0.0789839327, 0.0806876495, 0.0465152897, -0.0741202012, -0.0542834960, -0.0405934080, 0.0665354878, -0.0061332355, -0.0092104068, 0.0646894127, 0.0578725450, -0.0375674441, 0.0512397885, 0.0305578969, 0.0379984640, -0.0170058664, -0.0004418743, -0.0805028230, -0.0524748750, -0.0180628151, 0.0529314503, -0.0166390110, 0.0600209758, -0.0347538330, -0.0689994693, -0.0687254444, -0.0221982468, 0.0916488320, -0.0415104888, -0.0386638641, 0.0658358708, 0.0881100148, -0.0282618031, 0.0104627712, -0.0345787108, -0.0196790341, -0.0536194369, 0.0609061047, 0.0351212434, -0.0297209658, -0.0195935760, -0.0500079803, -0.0298084170, -0.0269600917, -0.0448302589, 0.0168351009, -0.0276510995, -0.0806627423, 0.0411635414, -0.0850227252, 0.0793680102, -0.0567147844, -0.0947638303, 0.0866168439, -0.0074668713, 0.0790080801, -0.0920065194, 0.0148641225, 0.0260923654, 0.0007554133, 0.0288331844, -0.0673773885, -0.0136014009, -0.0260989461, 0.0436860025, 0.0424978547, -0.0441776849, -0.0833720341, 0.0063168723, -0.0574735999, 0.0748451576, 0.0398850963, 0.0417292826, -0.0409980118, 0.0100491364, -0.0806125328, -0.0405502282, -0.0443541966, -0.0505619869, 0.0343745202, -0.0090467203, 0.0469941646, -0.0176794622, 0.0539122522, 0.0884938240, -0.0805066675, 0.0602638200, -0.0629214197, 0.0300864596, 0.0505027361, -0.0416417830, -0.0189636517, 0.0651061386, 0.0243192408, -0.0421697386, 0.0676650926, 0.0804934800, 0.0196817666, 0.0015348701, -0.0238768142, 0.0327861458, 0.0586750545, 0.0174873509, -0.0200847015, 0.0395098403, 0.0060148719, 0.0012649670, 0.0071777250, 0.0662455261, -0.0767159835, 0.0462214164, 0.0287277568, 0.0566923507, -0.0685451254, -0.0723291337, -0.0780046508, -0.0352710336, -0.0221681222, -0.0491831638, -0.0035574946, -0.0357426889, 0.0294157695, 0.0232067518, -0.0400108024, 0.0459624380, 0.0296889972, -0.0555663891, 0.0593079999, -0.0301979408, 0.0289920531, 0.0100492593, -0.0557981133, 0.0795377865, 0.0044882419, 0.0213857889, 0.0356600471, -0.0277191643, 0.0363585465, -0.0361123048, -0.0793797001, -0.0391824394, -0.0293174144, 0.0439289622, -0.0470918082, 0.0014470011, -0.0337979645, 0.0816401839, -0.0727810785, 0.0064185988, -0.0390917920, 0.0673681349, 0.0359489322, 0.0675012320, 0.0640637875, 0.0657115132, 0.0471369885, -0.0444616266, 0.0242161285, 0.0472140536, 0.0205454417, -0.0515213460, -0.0258325543, 0.0076726452, 0.0928375050, -0.0654819608, -0.0282399207, 0.0070392932, -0.0538604558, -0.0166681930, -0.0795735195, -0.0690838546, -0.0191296823, -0.0840706304, 0.0667165890, 0.0460932627, -0.0585476011, 0.0031932099, -0.0780392587, -0.0903472602, -0.0034528936, -0.0741105452, -0.0824698433, -0.0185973011, 0.0015119894, -0.0836980790, 0.0728460103, -0.0258482117, 0.0337373056, -0.0591646098, -0.0382905118, -0.0367040224, -0.0606413782, 0.0650704801, -0.0420374386, 0.0031477779, 0.0691299289, 0.0317717083, -0.0628862604, 0.0007178116, -0.0281840581, -0.0026585096, -0.0726288483, 0.0895953774, -0.0536289699, -0.0607579201, -0.0697900876, -0.0369022675, 0.0614173636, -0.0563686267, -0.0095928758, -0.0356408842, 0.0203395560, 0.0090619447, 0.0304592103, -0.0546062365, 0.0019156212, 0.0941618159, 0.0327592343, 0.0616794191, -0.0199041255, 0.0633036494, -0.0657456592, 0.0137077197, 0.0436778367, 0.0325427502, -0.0409366786, 0.0103022614, 0.0000662291, -0.0262492914, -0.0426440388, 0.0451210737, 0.0220499840, -0.0472218245, -0.0100556370, -0.0256693494, -0.0256628674, -0.0439988896, 0.0507231168, 0.0882678255, -0.0813937038, -0.0001755330, -0.0074205925, -0.0353536271, 0.0398331508, -0.0809420347, 0.0508546084, 0.0207538810, -0.0794254988, 0.0402658097, -0.0405473299, 0.0774180964, -0.0584708229, -0.0549992174, -0.0519552007, -0.0302460436, -0.0080718845, -0.0671097487, -0.0536829196, 0.0127088195, -0.0045053414, 0.0287270974, -0.0386126339, 0.0454014502, 0.0287304111, -0.0450432971, 0.0038120546, -0.0703551024, 0.0301770698, 0.0146701178, 0.0222327132, -0.0827020332, -0.0499732047, -0.0853402242, 0.0599757656, -0.1033113003, 0.0224721171, 0.0180914458, -0.0593137555, -0.0040062475, 0.0384887382, 0.0554247871, 0.0536928773, -0.0689827874, 0.0641199127, 0.1028819904, -0.0305988807, -0.0356470533, 0.0884272084, -0.0239254478, -0.0124570960, -0.1012999937, 0.0244289953, -0.0716128573, -0.0689174905, 0.0849542320, 0.0979154930, 0.0196430106, -0.0165727641, -0.0130494488, -0.0205344707, 0.0450233184, 0.0279913153, -0.0170963984, -0.0135307489, 0.0024074023, -0.0626222864, -0.0858817697, 0.0168968141, 0.0572244786, 0.0538199246, 0.0791131705, -0.0132163744, -0.0496984310, 0.0032972130, -0.0086323163, -0.0147005366, -0.0533176102, 0.0977276638, 0.0018017463, -0.0065288208, -0.0058996221, 0.0608651973, -0.0172734875, -0.0602414310, -0.0327087753, 0.0259097610, -0.0121250227, -0.0027127962, 0.0712105483, 0.0258630440, -0.0012260096, 0.0290689785, 0.0643445477, -0.0488101281, -0.0852403417, 0.0257857591, -0.0040211263, -0.0466127247, -0.0504209064, 0.0131660756, -0.0418276042, -0.0590037368, -0.0468295552, 0.0483476333, -0.0668049008, 0.0728942975, 0.0110160131, -0.0263971649, 0.0344777144, 0.0673472285, 0.0479853526, -0.0337626487, 0.0880794823, -0.0287302900, 0.0132132573, -0.0455541946, 0.0577862784, -0.0253378116, -0.0543505065, 0.0477484539, -0.0961959437, -0.0754977390, -0.0356988013, -0.0083118323, 0.0153832501, 0.0550844781, 0.0210013781, 0.0505426079, 0.0260306634, -0.0032612740, -0.0473015420, -0.0944562256, 0.0504801758, -0.0167305581, -0.0408179015, -0.0460804142, 0.0582224242, -0.0648512617, 0.0153419077, 0.0917299688, 0.0574467070, 0.0369728915, -0.0897602737, 0.0978316739, -0.0112498878, 0.0538959987, -0.0815370753, 0.0740868598, -0.0855348557, -0.0316870287, -0.1013895944, -0.0707553029, 0.0345326401, -0.0651205480, 0.0670544058, -0.1043633893, -0.0589037128, -0.0393547527, 0.0791521594, 0.0279193316, 0.0040713912, 0.0272991806, 0.0376363397, 0.0988151506, 0.0146039985, 0.0791032016, -0.0320127606, -0.0338382497, 0.0532982498, -0.0318079479, 0.0116375377, -0.0021762410, 0.0081797959, 0.0906353071, -0.0387879610, 0.0420414023, -0.0355189592, -0.0219529513, -0.0230099969, -0.1017417014, -0.0813035220, 0.0657545924, 0.0847931579, -0.0552777983, -0.0399953425, 0.0698065385, 0.1105860621, -0.0296210796, -0.0299979988, -0.0206895340, 0.1017998978, -0.0359053463, 0.0692582875, 0.0522314757, 0.0384024866, 0.0697998032, -0.0712910444, 0.0817942023, 0.0102910539, -0.0753616542, -0.0326653421, -0.0245531611, -0.0034665226, -0.0759316757, 0.1221329421, -0.0038065747, 0.0381090604, 0.0159567706, 0.0278663225, 0.0850613266, 0.0702916235, -0.0943380818, 0.0858394727, 0.0536615178, 0.0677025318, -0.0346144922, 0.0178457573, 0.0920388773, -0.0651153326, 0.0244053975, 0.1202272773, -0.0497215018, -0.1142488793, 0.0308728125, 0.0069397679, -0.0087058749, -0.0457210988, -0.0404500179, -0.0161310285, -0.1057342291, 0.0414255485, 0.0345153883, 0.0117625492, -0.1017196625, -0.0295648426, 0.0254325774, 0.1029808000, -0.0002683175, 0.0841357186, 0.0847609341, 0.0905931890, -0.0193771124, 0.0126448441, 0.0491412431, 0.0637140870, -0.0667464063, 0.0949998721, 0.0277608167, 0.0456159040, 0.0369812734, -0.0037158551, -0.0358683653, 0.0676709861, -0.0070728790, -0.0054096235, 0.0251515824, -0.0682380274, 0.0705527589, 0.0053573647, 0.0181724075, 0.0238672905, 0.0545707755, 0.0658430234, -0.0824429244, -0.0666021779, 0.0588581115, -0.0678502396, -0.0703601241, 0.0791305676, -0.0791390538, 0.0342450663, -0.0916868895, 0.0534190312, 0.0560698807, -0.0500843637, 0.0418419167, -0.0032295156, 0.0150458962, -0.0688873976, 0.0692632273, -0.0735718012, -0.0092206253, 0.0497200154, 0.0122337500, -0.0137319807, 0.0467198826, -0.0632043928, 0.0784622282, -0.0642491058, 0.0592031926, -0.0563754700, 0.0764264092, -0.0594226532, -0.0154235847, -0.0763149112, 0.0103008365, -0.0117104650, 0.0521379299, -0.0705318227, -0.0679930523, 0.0076911999, -0.0526803806, -0.0839558169, 0.0086465897, -0.0239514243, -0.0303991251, 0.0370092951, 0.0703441352, 0.0597676896, -0.0683802441, -0.0871366635, 0.0133389216, 0.0100853862, -0.0547646582, 0.0312050637, -0.0580217242, -0.0279658064, 0.0541600473, -0.0137843033, 0.0684651807, -0.0136613101, 0.0490821414, -0.0864279196, -0.0449046120, 0.0015559265, -0.0883548856, -0.0549250692, -0.0320419446, 0.0783828348, 0.0721987486, -0.0340535976, -0.0424163677, -0.0216775332, -0.0727700442, -0.0874274820, 0.0875424147, 0.0298585258, -0.0720665157, -0.0445759296, 0.0031712251, 0.0346330069, 0.0591505729, -0.0222484041, -0.0623481572, -0.0597238503, -0.0364886932, -0.0103566032, -0.0053825350, 0.0310314707, 0.0864519253, -0.0149976127, -0.0010574103, -0.0036504914, 0.1079444811, 0.0922021568, 0.0680424199, -0.0543068424, 0.0135157928, -0.0661631152, 0.0608637221, -0.0267700274, -0.0521743633, -0.0159126502, -0.0323783606, 0.0158350356, 0.0823171064, 0.0734064057, -0.0438008346, -0.0196737647, 0.0021652412, -0.0891720429, -0.0517995767, 0.0753672644, -0.0442931056, 0.0655313656, -0.0254002046, 0.0608591549, -0.0289662573, -0.0256895032, -0.0875719264, 0.0853341147, -0.1148975268, 0.0461250059, 0.0039563519, -0.0597291552, 0.0311108958, -0.0429674014, -0.0413178317, 0.0496615171, -0.0058427802, 0.0230907947, -0.1040543690, 0.0683415383, -0.0930363536, 0.0538756549, 0.0022375605, -0.0928989351, -0.0163141061, 0.0247023925, 0.0347346142, -0.0010628523, -0.0399840623, -0.0633986816, 0.0109310141, -0.0214491934, -0.0716664121, -0.0754462257, 0.0666268021, 0.0669675842, 0.0149013996, 0.0382743254, 0.0769361630, 0.0183115955, 0.0766816661, 0.0319575667, 0.1057300270, 0.0634032488, -0.0424153879, 0.0702813491, 0.0105830403, -0.0235659610, 0.0354919992, 0.0149546815, -0.0015651339, 0.0016564445, 0.0115994848, 0.0513348542, 0.0025236295, -0.0287239980, 0.0268603507, 0.0230950806, -0.0843145102, -0.0291642006, -0.0563628413, 0.0086590070, -0.0619938336, -0.0256862082, 0.0381724946, 0.0172100514, -0.0487863608, 0.0023328653, -0.0356107615, 0.0007962869, 0.0662422851, -0.0516762659, -0.0930016115, -0.0872768536, 0.0590971038, -0.0434506461, 0.0505510606, -0.0302336905, -0.0001422990, -0.0149064139, 0.0108587742, -0.0922347307, -0.0000684079, 0.0395887345, 0.0317663290, 0.0661740080, 0.0076479036, -0.0666122139, -0.0609271564, 0.0206122324, 0.0194836520, 0.0354269594, -0.0000583772, -0.0272862371, -0.0384592749, -0.0442967974, -0.0146501912, -0.0481805056, 0.0775523558, -0.0548282452, 0.0015582270, -0.0971154198, -0.0010355924, -0.0508836359, -0.0235988591, -0.0040032570, -0.0088175982, -0.0848441049, -0.0434821695, 0.0253314674, -0.0117252218, 0.0251721554, 0.0015228584, -0.0694708154, 0.0330162868, -0.0654880181, 0.0128663527, 0.0893257260, -0.0220419839, -0.0249754004, -0.0546807460, -0.0752782822, 0.0304751527, 0.0790578350, -0.0479614325, -0.0523523837, 0.0525578484, 0.0218523405, -0.0058668219, 0.0026488903, 0.0574834757, 0.0112955412, -0.0254128799, -0.0488073714, 0.0323854126, -0.0008237516, -0.0466832332, -0.0163482521, -0.0433409885, 0.0650369227, -0.0361874513, 0.0075781252, -0.0131340716, 0.0511115231, 0.0484732091, -0.0266928785, -0.0431808792, 0.0319732800, 0.0749314502, 0.0252740458, 0.0406324118, -0.0357390679, 0.0326522514, -0.0138413552, 0.0511464663, -0.0158302616, 0.0197762083, -0.0762284622, 0.0589654669, 0.0751670599, 0.0116365254, -0.0293563828, 0.0070088361, 0.0602534488, -0.0307119731, -0.0256597139, -0.0006224612, -0.0356008112, -0.0189333539, -0.0587496348, 0.0114712995, 0.0352317430, -0.0651814491, -0.0020844622, -0.0432981029, 0.0688337907, 0.0633385405, -0.0014397644, 0.0605259649, -0.0084343757, -0.0668300390, -0.0749797300, -0.0461268127, -0.0956391618, -0.0072671166, 0.0788645223, 0.0130723380, 0.0901496112, -0.0012808118, -0.0000719410, 0.1116620749, -0.0072419513, 0.0103773838, 0.0583169125, 0.1079665050, 0.0016490190, -0.0365643688, -0.1050627530, 0.0184387490, 0.0362297334, -0.0700334609, -0.1065946594, 0.0925324708, -0.0537500381, 0.0191384163, -0.0770943388, -0.0657842979, 0.0807173550, -0.0408000872, 0.0414529257, 0.0817796811, 0.0611862354, 0.0013693079, -0.0926776528, -0.0437281355, -0.0291819889, -0.0098098218, -0.0344531797, 0.0272409953, -0.0762242004, -0.0831615478, -0.0729280040, 0.0422890112, -0.0660800561, 0.0009048766, -0.0823350847, 0.0425827578, 0.0078627719, -0.0477286726, 0.0847012177, -0.0470214933, 0.0520750284, -0.0062119206, 0.0845833495, -0.0346687473, 0.0214185864, 0.0642907917, 0.0031326653, 0.0917731300, 0.0567722432, 0.0226368140, 0.0314154215, -0.0474175289, 0.0961886048, 0.0558038019, -0.0604326501, -0.0081884610, 0.0213961508, -0.0649961606, -0.0032369830, 0.0092758453, 0.0697578192, -0.0176285841, -0.0291732419, -0.0672961324, 0.0132208588, -0.0300059225, 0.0118271904, -0.0145500246, -0.0885514840, -0.0044211796, -0.0757003203, 0.0722724125, -0.0396097712, 0.0263958070, -0.0568622239, 0.0630730987, -0.0691463500, -0.0633465871, -0.0015522903, 0.0438441709, -0.0441994742, -0.0390943624, 0.0574401282, -0.0183065496, 0.0055914572, 0.0170735773, -0.0466704816, 0.0312236119, -0.0630354658, -0.0471418276, -0.0389548093, 0.0533023849, -0.0081228660, 0.0598815233, 0.0084028309, 0.0602825172, 0.0049034562, -0.0276677571, 0.0147205619, -0.0805375651, -0.0558992736, -0.0498738587, -0.0483795032, 0.0943230391, 0.0124409338, -0.0300833341, -0.0589644052, 0.0141290827, -0.0497618690, -0.0517448895, 0.0592989139, -0.0349727795, -0.0286285132, 0.0358953848, -0.0099107856, 0.0192806236, 0.0157340001, 0.0080242623, 0.0585847273, 0.0147938076, -0.0324312970, -0.0173428115, -0.0214548577, 0.0002344954, 0.0231860224, -0.0384571776, 0.0045737377, -0.0146311857, 0.0274165962, 0.0024028933, -0.0410878733, 0.0770824105, 0.0246415529, 0.0013924863, -0.0618081465, -0.0270196982, -0.0603824593, -0.0161376223, -0.0911408141, 0.0454114228, -0.0679970384, 0.0867917612, -0.0433666222, 0.0166759361, -0.0397060141, -0.0049525122, 0.0014382435, -0.0412642136, 0.0259491131, 0.0636537373, 0.0470801815, 0.0672114268, -0.0071786721, -0.0539739840, -0.0269869603, -0.0571082607, -0.0017033448, -0.0650927126, 0.0448859483, 0.0305418894, -0.0734635442, -0.0595769249, 0.0410523675, 0.0908111036, -0.0943972617, -0.0075215460, 0.0501865894, 0.0395040698, -0.0307559147, 0.0171410497, 0.0772122368, -0.0365106389, 0.0853231251, -0.0191278309, 0.0123621458, 0.0237066355, 0.0119395759, 0.0104573453, 0.0602358729, -0.0044775717, 0.0578071699, 0.1006169543, 0.0605031773, 0.0391229726, -0.0022636428, 0.0022722099, -0.0353156440, -0.1127309203, 0.0573687777, -0.0708947778, 0.0257209204, 0.0633484274, -0.0123765338, 0.0000280137, -0.0351423845, 0.0391572453, 0.0431956649, 0.0141688203, 0.0026111249, 0.0195758305, 0.0259334221, -0.0562568009, -0.0739593431, 0.1035810709, 0.0862454027, 0.0398728587, -0.0699057057, 0.0091535626, 0.0125161083, -0.0696896464, 0.0221287180, 0.0649557710, -0.0518485643, -0.0318802521, 0.0108656129, 0.0004109603, -0.0670404136, -0.0056800186, -0.0734163448, 0.0144976480, -0.0400492661, -0.0588739514, -0.0629549548, -0.0200070217, -0.0204391200, -0.0830777362, 0.0081020296, 0.0218682997, -0.0784450769, -0.0175319277, -0.0454942137, 0.0552630648, 0.0149372676, 0.0156697948, 0.0721642226, -0.0391779095, 0.0907940194, 0.0382201187, 0.0181874540, 0.0580687709, 0.0228832290, 0.0302688088, -0.0596111901, -0.0892578438, -0.0284695607, 0.0821458101, 0.0869504809, -0.0928645730, -0.0658693761, -0.0100702131, -0.0649578497, -0.0102982689, -0.0611607432, 0.0259121507, -0.0516442433, 0.0557152741, 0.0428984798, -0.0308416989, 0.0396010987, -0.0282114018, -0.0147075644, -0.0801191106, 0.0503554009, 0.0510072596, 0.0283236746, 0.0126034105, -0.0714294836, 0.0312861726, 0.1087942496, -0.0328601934, -0.0339769311, -0.0460999906, 0.0417539217, 0.0439090393, 0.0208468717, -0.0630495697, -0.0494087152, -0.0751438737, -0.0898758024, -0.0221035611, -0.0902959630, 0.0576433204, -0.0728857890, 0.0600856058, -0.0972778574, -0.0858563557, -0.0319924615, 0.0571697615, 0.0008472563, -0.1075265780, -0.0221393872, 0.0335280448, -0.0621415898, -0.0134423589, 0.0779130310, 0.0460150242, 0.0528345369, 0.0476432815, 0.0525855348, 0.0565942340, 0.0887227505, -0.0252774823, -0.0228961464, 0.0322955586, -0.0566582344, -0.0025035667, -0.1242148504, 0.0606255643, 0.0262063593, 0.0260295924, 0.0487209000, -0.0161642358, -0.1185415685, 0.0466220081, -0.0172126293, -0.0108189015, 0.0667512640, 0.0760626718, -0.0218514986, 0.0268228091, 0.0125177763, 0.0370801389, 0.0566461459, 0.0154268034, -0.0486086607, 0.0245316438, -0.0953932703, 0.0224205554, -0.0450120904, -0.0242390372, 0.0307250805, 0.0848978683, 0.0000425506, 0.0588944927, -0.0507276133, 0.0541401170, 0.1219141185, -0.0455711409, 0.0339215025, 0.0064729103, -0.0657116249, -0.0634726584, -0.0279337130, -0.0607860237, -0.0716851875, 0.0651138946, -0.0645924732, -0.0503059961, -0.0708751604, 0.0189097412, 0.0070617860, 0.0568995588, 0.0065167602, 0.0092129596, -0.0630698726, 0.0756506026, 0.0527037308, -0.0629785284, 0.0102657983, 0.1030897945, 0.0154685723, -0.0046174349, 0.0741431341, 0.0323446877, 0.0037857376, 0.0194387902, 0.0185916107, -0.0010925530, -0.0612887293, -0.0087952707, -0.0204144102, 0.0284208376, 0.0396771654, 0.0502978712, 0.1054075807, -0.0767511353, -0.0313109308, -0.0085649341, -0.0568429530, -0.0538806096, 0.0519267321, 0.0786580443, 0.0015501207, -0.0341293141, 0.0810570717, 0.0005568931, 0.0291493088, -0.0520185530, 0.0367025062, -0.0429834537, -0.0086930189, 0.0496784896, -0.0521380492, 0.0230877828, -0.1092130467, -0.0402994491, -0.0474397987, 0.0638079494, -0.0009732494, 0.0316194370, 0.0711822659, -0.0317709111, -0.0362273231, -0.0221586712, -0.0095534576, -0.0512136966, 0.0029546167, 0.0503117107, -0.0545077734, -0.0814999193, -0.0498083830, 0.0422500148, -0.0270173941, 0.0357612446, -0.0346133411, -0.0601214282, 0.0091221994, 0.0327783786, 0.0149441306, -0.0099263042, 0.0743215159, 0.0103337048, 0.0271477215, 0.0172528420, -0.0895052180, 0.0632486641, 0.0309014823, -0.0501930863, 0.0965717658, -0.0548279658, -0.0148744164, -0.0280410033, -0.0999540240, 0.0482965820, -0.0541306362, -0.0079328157, -0.0602867454, -0.0664127916, -0.0264438707, -0.0975218713, 0.0931247324, 0.0308449212, -0.0212334618, -0.0591230616, -0.0785673633, 0.0985797271, 0.0290154982, -0.0618790761, -0.0003435501, 0.0074946773, 0.0254906267, -0.0411964245, -0.0705826133, 0.0543468446, 0.0330133401, 0.0044904663, 0.0034714921, 0.0010551040, -0.0926890522, 0.0235865749, -0.0315406993, -0.0517906584, 0.0169021413, -0.0348019376, 0.1063858420, -0.0408892371, 0.0577442273, -0.0600325204, 0.1122534722, 0.0268697906, 0.0607869141, -0.0585957579, -0.1004505232, 0.0912164673, -0.0618506446, 0.0664712563, 0.0564456917, 0.0781441331, 0.0063172309, -0.0541922487, 0.0263428278, 0.0442514345, -0.0533822253, -0.0085972166, -0.0298712179, 0.0404702537, 0.0635041744, -0.0327402838, -0.0468252674, 0.1023487002, -0.0087878080, -0.0792799741, 0.0806042925, 0.0471980833, -0.0713215396, -0.0536055565, 0.0120015172, 0.0146732144, -0.0122764250, 0.0237406995, -0.0565651394, -0.0584907494, 0.0536471121, -0.0657865852, 0.0659598187, -0.0210679844, -0.0807627738, 0.0576692410, -0.0729799718, 0.0068189912, -0.0302996710, -0.0358881056, -0.0377490409, -0.0358639546, 0.0470864065, -0.0036405309, 0.0443246886, 0.0067361454, 0.0539726540, -0.0175458137, -0.0478021018, -0.0225159787, 0.0153036583, -0.0791189596, 0.0665449128, 0.0509782694, -0.0319119245, 0.0988264158, 0.0585753061, 0.0295981355, -0.0477647930, 0.0377162881, 0.1091696694, 0.0656678751, 0.0426300131, -0.0002747701, 0.0248227641, 0.0383872725, -0.0678785741, 0.0134648485, 0.0429729670, 0.0777223334, 0.0172442105, 0.0202610716, 0.0443793200, 0.0490107238, -0.0528737307, -0.0264968611, -0.0227391943, -0.0436165594, -0.0243600085, -0.0215235278, 0.0899679139, 0.0705850869, -0.0281323735, -0.0020780026, -0.0272615366, -0.0059263599, -0.0607801564, -0.0840095580, -0.0079557030, -0.0356688611, -0.0217340328, 0.0015870203, -0.0788157061, -0.0176622160, 0.0117967343, -0.0281947050, -0.0175802000, 0.0636697412, 0.0321002677, 0.0089468397, -0.0325637721, -0.0024425467, -0.0235725604, 0.0459491014, -0.0455994383, -0.0448018983, -0.0432581939, 0.0597889274, 0.0645459965, 0.0934452191, 0.1159701347, 0.0608608723, -0.0617583692, 0.0037513433, 0.0747813582, 0.0369113348, -0.0166017301, -0.0031007277, -0.0172437243, 0.0687608719, 0.0301725026, 0.0872729719, 0.0824076682, -0.0380395725, 0.0774943084, 0.0052624927, 0.0545315072, 0.0228121076, -0.0752807409, 0.0785353184, 0.0801564977, -0.0235511139, 0.0451124310, 0.0528802238, 0.0357064344, -0.0057003279, 0.0277701505, 0.0749354437, 0.0541052632, 0.0337675437, -0.0511807688, 0.0347656868, -0.0528316312, 0.1158474833, 0.1026549116, -0.0496719405, 0.0373641849, -0.1128723174, 0.0709805563, 0.0057360535, -0.0564119220, -0.0330830850, -0.0772005096, 0.0297316182, 0.0119680269, 0.0546849854, 0.0146962488, -0.1092187390, -0.0113458000, 0.0365114510, 0.1007442996, 0.0277545843, 0.0247310121, 0.0467757359, 0.0091732023, 0.0870494917, -0.0333044603, -0.0314168893, -0.0434574112, -0.0232068133, 0.0408809260, -0.0988678336, 0.0891280845, 0.0752136335, 0.0908333734, 0.0557064526, 0.0826242268, -0.0449886024, 0.0561115779, -0.0682002231, 0.0420487337, -0.0995681733, -0.0350145027, 0.0770581886, -0.0478323251, -0.0401066765, 0.0365136527, 0.0319372192, 0.0415822566, 0.1093545109, 0.0102977557, -0.1084675789, 0.0208976995, 0.0850676820, 0.0268849991, -0.0601481348, -0.0134918084, -0.0368642658, 0.1065239608, -0.0514557660, 0.0096269799, 0.0300303362, -0.0354225114, 0.0391643010, -0.0494659320, 0.0371599570, 0.0614231452, -0.0201455429, 0.1147703975, -0.0085779987, -0.0280535035, -0.0679267496, 0.0273890346, -0.0916208923, -0.0234046951, -0.0573156178, 0.0588002540, 0.0420838781, 0.0539994352, 0.0716391653, -0.0569198169, -0.0248656161, 0.0042350409, -0.0806065649, 0.0098420158, -0.0380394645, -0.0031531472, -0.0608894117, 0.0315741301, 0.0192554034, 0.0141034918, 0.0103761274, -0.0185361896, -0.0260711554, -0.0667454228, 0.0200955048, 0.1047611609, -0.0555915274, 0.0701007694, 0.0448630415, -0.0430237614, 0.0830930769, -0.0205795914, 0.0513217822, -0.0028657685, -0.0351734944, -0.0072327247, 0.0678153783, 0.0393401682, 0.0056258631, 0.0087162890, -0.0140220048, -0.0428956524, 0.0200824067, -0.0254921392, -0.0038022043, -0.0241262317, 0.0450241752, -0.0511048585, 0.0154249491, 0.0389517918, 0.0080308933, 0.0545166060, -0.0273146033, -0.0148106059, 0.0818261206, 0.0172835290, -0.0101955812, -0.0564381182, 0.0437064096, 0.0371171013, -0.0001844166, -0.0061349422, 0.0388334654, 0.0763194934, -0.0823042169, 0.0307521541, 0.0822468922, -0.0137065295, -0.0648388490, 0.0489057340, 0.0450453162, -0.0056086634, 0.0146497153, 0.0049170977, -0.0659094080, 0.0618692897, 0.0538481921, 0.0404570736, 0.1171863452, 0.0813488811, 0.0464234166, -0.0362639129, 0.0491531044, -0.0032692673, -0.0322684422, -0.0218595099, 0.0638885275, -0.0919213295, 0.0315706134, -0.0450254306, 0.0969104767, -0.0215949435, 0.0578926243, -0.0497647673, -0.0139489276, -0.0401485860, -0.0539629310, 0.0038089980, -0.0093277106, 0.1256930679, 0.0286884680, 0.0439400598, 0.0019062192, 0.1276063025, 0.0988713875, 0.0841262266, 0.0402760431, -0.0713423565, -0.0761389956, -0.0174954757, 0.0463447757, 0.0073970184, -0.0382259749, 0.1285804063, 0.1030215323, 0.0306519438, 0.0501191914, 0.0785777122, 0.1150563657, 0.0784058869, -0.1085843742, -0.0272367951, 0.1254144907, 0.0291983299, 0.0192059074, 0.0343090333, -0.0598270446, 0.0005826284, -0.1206820682, -0.0575608797, -0.0312209856, -0.0038839669, -0.1094224975, -0.0115479687, -0.0433763191, -0.0345518552, 0.0277057011, 0.0204900540, -0.0923747048, -0.0962536037, -0.0440029576, -0.0139093027, 0.0863443762, -0.0311818458, 0.0700196773, -0.0913716033, -0.0061628046, 0.0117984619, -0.0922981128, -0.0717684999, 0.0619939789, 0.0395162590, 0.0279033501, 0.0069120992, 0.0504308790, 0.0827668831, 0.0845174119, -0.0491807945, 0.0827719197, 0.0221341532, 0.0417380556, 0.0781718418, -0.0820121318, -0.0340248123, 0.0600762852, 0.0003843769, 0.0182620101, 0.0244955067, 0.0211328976, -0.0214316826, -0.0351596065, 0.0338463150, -0.0652259439, 0.0744448230, 0.0985059887, 0.0049911160, -0.0554162860, -0.0472725742, -0.0015141406, 0.0500377454, -0.0750430971, 0.0511046052, -0.0471700355, 0.0004584481, -0.0356321968, 0.0207414031, 0.0455061421, 0.0763178766, -0.0151514187, 0.0462142713, -0.0379590578, -0.0850193650, -0.0041307029, -0.0730349198, -0.0264632516, -0.0682338551, -0.0188735146, 0.0144224064, -0.0682967827, -0.0167837106, 0.0409925021, -0.0971013159, 0.0343175381, -0.0595700555, -0.0020478098, 0.0133109279, 0.0408413447, 0.0501974821, 0.0687982887, -0.0627261847, -0.0428849049, -0.0386025906, -0.0235041268, -0.0350394025, 0.0048922445, -0.0127399778, -0.0666233450, -0.0393460393, 0.0627547279, 0.0551860742, -0.0539602190, 0.0532835312, -0.0726310462, -0.0003061156, 0.0158439092, 0.0243861359, -0.0635104924, -0.0451879576, -0.0143769858, -0.0755891800, -0.0572025292, 0.0829676315, -0.0311088786, -0.0868604630, -0.0860455185, -0.0440682024, 0.0448021777, 0.0269886386, -0.0371705741, -0.0730346292, 0.0033565010, -0.0064839646, 0.0419417024, -0.0041872566, 0.0578738861, 0.0596822724, 0.0660260245, 0.0220654141, -0.0495874211, -0.0187612921, -0.0142647680, -0.0079788044, -0.0497481599, 0.0097384667, 0.0440657474, -0.0069147558, 0.0312260035, -0.0069989571, 0.0886037275, 0.0622653849, -0.0529692806, -0.0257000383, 0.0018959532, 0.0012261033, -0.0077048214, 0.0076079322, -0.0493427068, 0.0217171796, -0.0584892966, 0.0351276845, 0.0619531795, 0.0474194214, 0.0090404702, 0.0314003490, -0.0234683789, -0.0666591749, 0.0020320220, 0.0556625351, -0.0469894372, 0.0788331926, 0.0674172938, -0.0014908244, 0.0477063358, 0.0050483802, 0.0268123150, 0.0651961789, -0.0296017807, -0.0750139132, -0.0183123890, 0.0333323814, -0.0341283046, 0.0682340413, -0.0597337224, -0.0430968292, -0.0184287895, 0.0205000602, -0.0927676409, 0.0444079563, -0.0432229266, -0.0076684323, 0.0055209901, -0.0682559386, -0.0003406000, -0.0106380573, -0.0259183533, -0.0449621454, 0.0150420638, -0.0077797961, -0.0686692372, -0.0785921440, -0.0445272364, 0.0696787834, -0.0660117418, 0.0303913169, -0.0117687378, -0.1070741192, -0.0612449907, -0.0836231634, -0.0146504650, 0.0283257030, -0.0015966999, -0.0545946956, 0.0026320762, -0.1039167866, -0.0390410721, -0.0604190156, 0.0339792781, -0.0155503657, -0.0300161485, 0.0604147352, -0.0600621477, 0.0724722445, -0.0111238677, 0.0456940867, -0.0503436476, 0.0688308552, -0.0297198575, -0.0047934246, 0.0725421980, -0.0593721531, 0.0056270077, 0.0336825252, 0.0268969350, 0.0335531458, 0.0177644957, 0.0254075322, 0.0349197723, -0.0131280869, -0.0681743026, -0.0026206865, -0.0925726816, 0.0576973371, 0.0990476236, 0.0222644154, 0.0686256886, -0.0913119838, -0.0629845485, 0.0723422840, -0.0947760344, -0.0375154391, 0.0907667428, -0.0057355175, -0.0459935330, -0.0057397420, 0.0108544650, 0.0312493593, -0.0752756596, 0.0662653744, 0.0588392429, -0.0228937715, -0.1046160683, -0.0790336430, 0.0759267136, 0.0313829891, -0.0581567064, 0.0428525619, 0.0269042701, -0.0074810642, -0.0105002634, -0.0654903874, -0.0484332144, -0.0704421252, 0.0292622354, -0.0213691629, -0.0587111264, -0.0405241214, -0.0396418795, -0.0140108317, 0.0408374146, 0.0420415215, 0.0198597498, -0.0602455288, -0.0002947036, 0.0589345321, 0.0822919011, 0.0013873451, -0.0103147039, 0.0151971914, 0.0168737639, 0.0226934515, 0.0020571516, -0.0544210859, -0.0318987295, -0.1135130078, 0.0762012973, 0.0667438880, -0.0167577900, 0.0425151847, 0.0614985116, -0.0503101312, -0.1161928624, -0.0598204471, -0.0915770978, 0.0729851127, 0.0039576930, -0.0401700027, 0.0853594467, 0.0464473516, 0.0547999330, 0.0174477212, -0.0309659075, -0.0268116910, -0.0460347086, 0.0532412045, 0.0525688790, -0.0013705781, 0.0463086292, 0.0378425904, -0.0003792226, -0.0328467824, -0.0031813427, -0.0996367335, 0.0668903142, -0.0799282640, -0.0724936947, -0.0307953861, 0.0316532142, -0.0967860073, 0.0329793021, -0.0283360928, 0.0209929813, -0.0263802819, -0.0145498589, 0.0678019226, 0.0564383678, -0.0011015477, 0.1040722206, 0.0248548128, 0.0112058539, -0.0263714306, 0.0298088156, -0.0561025664, 0.1036783829, -0.0753261074, -0.0470902696, -0.0355178714, 0.0412760526, 0.0696574971, 0.0564000085, 0.0504746735, -0.0734160393, -0.0035700835, -0.0898568481, -0.0871050507, -0.0082719875, 0.0484614633, -0.0692890286, 0.1122721508, -0.0175466780, 0.0674669519, 0.0429511182, 0.0360143557, -0.0377686284, 0.0390405208, 0.0156597849, 0.0146278134, -0.0353597216, 0.0276612211, -0.0072068404, -0.0512826890, -0.0467341058, -0.0151747651, -0.0065166322, 0.0029375069, -0.0396404080, -0.0370824970, 0.0124643240, 0.0086645680, -0.0072476440, 0.0113019245, 0.0513539053, 0.0889334604, 0.0542998575, 0.0162616484, 0.0097757298, -0.0031535048, 0.0473904908, -0.0084961196, 0.0142570911, 0.0492110923, -0.0382638797, -0.0876269042, 0.0082389619, 0.1006691009, 0.0283312015, 0.0489673130, -0.0435578264, 0.0426439308, -0.0560757108, -0.0328362510, 0.0496815592, -0.0036473379, 0.0406592749, 0.0068306294, -0.0554496497, 0.0047040270, 0.0608355328, -0.0026251490, -0.1083227545, 0.0161419138, 0.0368279889, -0.0032120284, 0.0488572419, -0.0780858621, 0.0667097569, -0.0114224209, 0.0344353244, 0.1003316194, -0.0298790224, -0.0458560809, -0.0177428890, 0.0053961365, 0.0371079594, 0.0130804619, -0.0685473979, 0.0636616945, -0.0382575430, 0.0180858374, -0.0337161086, 0.0105792200, -0.1108711362, -0.0715757087, -0.0339829028, -0.0560671166, -0.0060722525, 0.0482656956, -0.0780596212, 0.0182638001, -0.0245802626, -0.0467858352, 0.0082066832, -0.0057594529, -0.0550016686, -0.0618029349, -0.0128626423, 0.0990677401, -0.0278274659, 0.0628900230, 0.0020952958, -0.0066338992, 0.0476625040, -0.0736987516, -0.0011547281, -0.1101238951, 0.0636857450, 0.0485816225, -0.0520432629, -0.0904852003, 0.0661402941, -0.0005728761, -0.0063956995, 0.0931317881, -0.0442090221, 0.0054522813, -0.0130080804, 0.0537216216, 0.0572027005, 0.0709884986, 0.0306104980, 0.0536827520, 0.0206063353, -0.0148959858, -0.0331207551, -0.0663944557, -0.0981969535, 0.0297716167, 0.0361466184, 0.0859571025, 0.0400778949, 0.0550769679, 0.0194581859, -0.0405502357, -0.0155672450, -0.0023591027, -0.0422351845, 0.0767719001, -0.0054975734, 0.0138466842, -0.0959342718, -0.0603005514, 0.0832333490, -0.0756722465, -0.0756964684, -0.0204065256, -0.1059922948, 0.0367836729, -0.0620649122, 0.0367007665, 0.1049494445, 0.0027968944, 0.0247407574, -0.0081405751, -0.0295638628, 0.0911654159, 0.0135155208, -0.0839719102, -0.0152941924, 0.0485398062, -0.0844100863, 0.0569873378, 0.0136726461, -0.0152863702, 0.0557380393, -0.0464381836, 0.0728305206, -0.0476396419, 0.0176658630, -0.0710289553, 0.0309224371, -0.0254396014, 0.0258387867, 0.0366823077, 0.0547687188, -0.0438961536, 0.0183450878, 0.0593362786, -0.0915313736, -0.0992976353, 0.0665141344, 0.0555934384, 0.0251390040, -0.0459871814, 0.0907632560, -0.0107222656, 0.0213179849, -0.0032226583, -0.0376648232, 0.0310605858, -0.0314195529, 0.0440914556, 0.0267902128, 0.0458668172, -0.0949491337, -0.0000218054, -0.0894221738, 0.0294368621, 0.0249737035, 0.0444237292, 0.0270784888, 0.0034307844, -0.0783859715, -0.0352054834, 0.0196040049, -0.0265179705, -0.0153650250, -0.1080189943, -0.0636343881, -0.0672582835, -0.0434187017, -0.0601280145, -0.0251583736, -0.0384738110, 0.0325374529, 0.0689147711, 0.0625888482, -0.0258467570, -0.0615529008, 0.0791592970, -0.0966763049, 0.0514805689, 0.0078157634, -0.0698460564, 0.0098781781, 0.0959120914, 0.0108733522, -0.0436004736, 0.0226057637, 0.0102245584, -0.0702931359, -0.0913693830, 0.0467321202, -0.0879676715, -0.0047053904, -0.0344595164, 0.0500772409, 0.0753032640, 0.0241591744, -0.0768088177, 0.0043054563, 0.0687263533, -0.0535816960, -0.0449807197, 0.0376242734, -0.0032696542, -0.0172220320, -0.1060756892, -0.0296785794, 0.0615527965, 0.0413443185, 0.0667494759, 0.0418047607, 0.0038379263, -0.1065357551, 0.0634692833, -0.0545374602, 0.0291963685, -0.0541531667, 0.0199555345, 0.0878833681, -0.0189005882, -0.0444833376, 0.0165583957, -0.0899003521, -0.0552047677, 0.0295583457, -0.0173787437, -0.0802860260, -0.0402924530, 0.0993574485, -0.0770502761, 0.0288033504, -0.0590341985, -0.1156399474, 0.0369005911, -0.0135690924, 0.0296234656, 0.0518215895, 0.0707510114, -0.0719824284, 0.0178702995, 0.0087035066, 0.0005903061, -0.1133548245, -0.0222278219, -0.0433884747, -0.0418212786, -0.0705735460, -0.0319105163, 0.0016124939, -0.1013240591, -0.0514020622, -0.0920630544, 0.0582720414, -0.1065881103, 0.0038640962, -0.0048291208, -0.0362859480, -0.0250097439, -0.0440060347, 0.0124865631, -0.0055565988, 0.0028920025, 0.0382893160, -0.0435746126, -0.0186368767, 0.0272575542, -0.0060764030, 0.0320191719, 0.0269790851, 0.0354549326, 0.1091558039, -0.0426473729, 0.0536124781, -0.0787156001, -0.0800147206, 0.0016414949, -0.0674727336, 0.0449169725, 0.1117907837, -0.0277803764, -0.0370982438, -0.0817736611, 0.0868501142, -0.0473504774, 0.0052619413, 0.1131215692, 0.0069127879, 0.0221647937, 0.0948410183, 0.0846565589, 0.0355507880, -0.0054068603, -0.0238506645, -0.0171653163, 0.0179797038, 0.0225625280, -0.0308846999, 0.0709510446, -0.0967769921, -0.0613998696, -0.0200738311, -0.0222106446, 0.0397036187, -0.0678989962, 0.0265687257, -0.0204897020, -0.0167722870, -0.0573070310, -0.0578389838, -0.0087658847, -0.0434217416, -0.0313099548, 0.1402200609, -0.0817412511, 0.0117884036, -0.1112793013, 0.0398152024, -0.0965339169, -0.0579101220, -0.0549231432, 0.1272097677, -0.0105473464, -0.0727698356, -0.1372622550, -0.0402047150, 0.0102416845, -0.0758802071, 0.0367589779, -0.0566528924, -0.1144096553, 0.0692170784, 0.0165010653, 0.0011513757, 0.0487562865, 0.0755833834, 0.0686680526, 0.1217537299, -0.0401936211, 0.0432521291, -0.0509741791, -0.0600938685, 0.0601912849, 0.0968271792, 0.0924091488, -0.0297049042, -0.0557813570, -0.0461257994, -0.0623585545, -0.0006621290, -0.0404426418, -0.0012158045, 0.0103223445, -0.0220726859, -0.0774666518, 0.0540083982, -0.0587165914, -0.0383455828, -0.0138182146, 0.0583996028, -0.0540019833, 0.0347520113, 0.0636371076, -0.0625543669, -0.0428696275, 0.0106057776, 0.0515911505, 0.0715968013, -0.0196690969, 0.0356349014, -0.0770859420, -0.0206703115, -0.0383303501, 0.0794175193, -0.0212744828, -0.0122935018, -0.0596576072, -0.0451326072, 0.0463426486, -0.0189448074, 0.0784551427, 0.0846486613, 0.0143900756, -0.0457296930, -0.0067593851, 0.0472862050, -0.0398951955, 0.0683738589, -0.0729862824, -0.0375151187, -0.0704292655, 0.0111395130, 0.0200084541, 0.0026695898, -0.0376576521, 0.0628056005, 0.0019952103, -0.0010727457, 0.0397863723, -0.0150875738, -0.0050996765, 0.0154862544, -0.0181897655, -0.0326389596, -0.0610051677, 0.0319652222, -0.0610631667, -0.0633782223, -0.0353944339, -0.0114482706, -0.0374905653, -0.0414924547, -0.0103785573, 0.0219304152, 0.0704212934, 0.0097886445, -0.0658169389, 0.0568680577, -0.0430628546, 0.0364177376, -0.0641903132, -0.0313902609, 0.0493412167, 0.0011612024, 0.0222556125, -0.0284410007, -0.0325802527, -0.0004080976, 0.0752146319, 0.0542111322, 0.0870161951, 0.0609791167, 0.0473240539, -0.0106506152, 0.0166581627, -0.0345149450, -0.0324570984, 0.0439355299, 0.0245987773, 0.0560325384, 0.0693031177, -0.0211843792, 0.0259272102, 0.0643820316, -0.0191822238, -0.0449054204, 0.0628876090, -0.0086314902, -0.0138535015, -0.0593631081, 0.0403045006, -0.0674589425, 0.0300718304, 0.0435263403, -0.0508101173, -0.0814036131, -0.0413297303, 0.0082299113, -0.0205295645, -0.0306297112, 0.0402634330, -0.0465583280, -0.0544468649, -0.0414540283, -0.0386123173, -0.0259352811, 0.0565965325, 0.0125293108, 0.0195092913, -0.0029987015, 0.0688288808, -0.0389580019, 0.0569451936, 0.0092213163, 0.0568038039, 0.0312537365, 0.0817029029, -0.0661325604, -0.0693910122, 0.0078679919, 0.0385053419, 0.0745425075, -0.0461538397, 0.0134683643, 0.0650941283, -0.0738804787, -0.0085752048, 0.0536052994, -0.0278742258, -0.0070700049, -0.0815872476, 0.0413755998, 0.0713125393, -0.0711197257, -0.0344019160, 0.0480154455, -0.0112011675, 0.0226945877, -0.0525261089, -0.0147315394, 0.0099455891, 0.1003745794, 0.0753018707, -0.0474428125, 0.0459840335, 0.0126011036, -0.0497839786, 0.0987400562, -0.0205033328, 0.0395188220, 0.0276032891, 0.0405612290, -0.0002438580, 0.0835629255, 0.0479333960, 0.0584118851, -0.0299886651, -0.0709912777, 0.0640615076, -0.0410651602, 0.0381614789, 0.0224631540, -0.0002000997, -0.0477502979, -0.0735147670, -0.0200925861, 0.0962197855, 0.0077107311, -0.0589206256, 0.0241916385, -0.0657370165, 0.0103859631, 0.0009474542, -0.1022307277, 0.0559814908, -0.0253520329, -0.0980088860, 0.0762497634, -0.0644979030, 0.0156075470, -0.0068275663, 0.0769634619, 0.0364772938, 0.0283457004, 0.0720256567, 0.0174503122, 0.0502589457, -0.0414168425, 0.0287330318, 0.0041167652, -0.0246771276, 0.0051436755, 0.0176803395, 0.0442169234, -0.0556624420, 0.0445680432, -0.0173721779, 0.0754228681, 0.0700429305, 0.0223721452, -0.0176503435, 0.0420115814, -0.0679404587, 0.0431357101, 0.0580893457, -0.0157644134, -0.0239945445, 0.0839632452, 0.0182777978, 0.0722314864, -0.0604476891, -0.0527568497, -0.0743656307, 0.0761061385, 0.0172889512, -0.0363384783, 0.0468789525, -0.0499578603, -0.0397711210, 0.0798726529, -0.0141660739, -0.0504791103, 0.0475336835, 0.0429105945, -0.0257933196, -0.0301080663, -0.0424243249, -0.0617002174, 0.0504928604, 0.0111256437, 0.0092663765, -0.0475213155, 0.0510782674, 0.0141082108, 0.1019399837, 0.0702309087, 0.0939497054, 0.0620626397, -0.0221817121, 0.0682960302, -0.0543762669, 0.0487422235, 0.0022616044, 0.0100552849, -0.0064428183, -0.0402163975, 0.0165766645, 0.0137379384, 0.0694239140, 0.0079481015, 0.0005050228, -0.0442576893, -0.0247642305, -0.0618034527, -0.0514161289, 0.0177685823, 0.0075936588, 0.0478488542, -0.0956739262, 0.0094913607, -0.0009697896, -0.0059998697, -0.0331315547, -0.0418228507, -0.0276586786, 0.0176816527, -0.0376931168, 0.0301776938, 0.0473795719, 0.0286211967, 0.0734884813, 0.0174511820, 0.0687463880, 0.0482093543, -0.0133715766, -0.0489544049, -0.0535005629, -0.0528311692, -0.0773485079, -0.0224003345, -0.0162080787, 0.0868538395, -0.0243694857, 0.0175836813, 0.0512255616, -0.0457823202, -0.0571009926, -0.0839055181, 0.0142585244, -0.0633704215, 0.0421473607, -0.0083445273, -0.0554814860, 0.0932136402, 0.0326810740, 0.0439632274, 0.0991804153, -0.0564771183, -0.0476131625, 0.0334445350, -0.0075610457, -0.0539857894, -0.0264567863, 0.0899746865, 0.0068318895, -0.0468077324, -0.0232631303, -0.0812824368, 0.0553127714, 0.0262529626, -0.0759777874, -0.0736221448, 0.0674937218, -0.0709592998, -0.0413242765, 0.0121468119, -0.0370484628, -0.0738764778, -0.0097522605, 0.0821221396, 0.0329280719, 0.0447079353, 0.0122943381, -0.0084707960, -0.0360569358, 0.0005802898, 0.0179667994, -0.0146532133, 0.0018844393, -0.0488122180, 0.0049926639, 0.0722273290, -0.0169924535, 0.0735904202, 0.0615023002, -0.0731203705, 0.0166077781, -0.0780130476, -0.0047232155, 0.0688389391, -0.0664175749, 0.0691391379, 0.0420017578, -0.0561936013, 0.0688687861, -0.0746178254, 0.0596692413, 0.0531386063, -0.0169773344, -0.0298195984, 0.0869192183, 0.0426722951, 0.0151646920, -0.0407861471, -0.0549801514, 0.0008828506, 0.0426313989, 0.0403462984, 0.0355914459, 0.0229519978, -0.0575158224, 0.0545864739, 0.0297090672, -0.0048287120, 0.0727794543, 0.0902271047, 0.0098938895, 0.0220003556, 0.0506643653, -0.0215840321, 0.0147222392, 0.0380603150, 0.0619747974, 0.0276039802, 0.1033554301, -0.0014007717, 0.0473917797, 0.0346907042, -0.0273801535, 0.0293027367, 0.0069917296, -0.0045689479, 0.0055739651, 0.0025814264, 0.0108507005, 0.0264918562, 0.0054096095, -0.0400481746, 0.0257888678, 0.0272632316, -0.0674398318, 0.0607785508, -0.0284371041, 0.0434207730, 0.0409146026, 0.0520185865, 0.0151664531, -0.0978661180, 0.0335985944, 0.0612918884, -0.0308151953, 0.0599891730, -0.0515654162, 0.0799828693, -0.0295935832, -0.0175898913, -0.0584969521, -0.0504086800, 0.0426305197, -0.0930414051, -0.0507514551, -0.0457176380, 0.0532049648, -0.0639621019, 0.0626319945, -0.0973602086, 0.0675763711, -0.0611229055, 0.0822085217, 0.0248902496, -0.0127367033, -0.0428992212, 0.0137865664, -0.0226717126, -0.0529099964, 0.0635711923, 0.0266822930, -0.0744090676, -0.0066287643, 0.0144622717, 0.0677076504, 0.0053950991, 0.0451158322, -0.0127208121, -0.0137766981, -0.0324587151, 0.0441513397, 0.0716644228, -0.0010458439, 0.0058335434, -0.0710623488, 0.0144637488, 0.0714250803, 0.0484913141, -0.0254239719, 0.0123025384, 0.0141997272, 0.0401140340, 0.0263682473, -0.0615804084, -0.0082365815, -0.0403473787, -0.0097368928, 0.0832580999, 0.0256181769, 0.0977079347, -0.0008369869, -0.1060517877, 0.0535308868, 0.0320197977, 0.0029652864, -0.0249044690, -0.0185848493, -0.0228469390, 0.0710787848, 0.0426908582, -0.0527202971, -0.0682984591, 0.0309523009, 0.0482868738, 0.0123881632, -0.0566465519, -0.0285504218, 0.0570307635, 0.0161830597, 0.0126871169, -0.0785605684, -0.0212053899, -0.0562071539, 0.0431387424, 0.0036411386, -0.1287139505, -0.0749051571, -0.0354378596, -0.0157131609, -0.0440533869, -0.0160958879, -0.0676762834, 0.0550775081, -0.0473677553, -0.0506703965, -0.0240142588, -0.0362869240, 0.0637803227, -0.0565207377, 0.0657995120, 0.0038556880, -0.0213951021, 0.0206714515, -0.0895058364, 0.0138978958, 0.0304583255, 0.0137793310, -0.0931152552, 0.0281140581, -0.0078165391, 0.0708623156, -0.0017193618, 0.0315336697, 0.0171474125, -0.0610462576, 0.0674033314, -0.0614000633, -0.0783523023, 0.0164863169, -0.0740225390, -0.0448766947, -0.0721819699, -0.0720660090, -0.0336222649, 0.0216613654, 0.0441801548, 0.0578084998, -0.0524951816, -0.0953089893, 0.0454306826, -0.0359923877, -0.0365778059, -0.0536515117, 0.0428988747, 0.0642684102, -0.0581976734, 0.0661276430, 0.0562626719, -0.0176755320, 0.0358934291, 0.0394416675, 0.0433382764, -0.0029893694, -0.0471306816, -0.0588462949, -0.0722801238, -0.0209339671, -0.1010550559, 0.0302297249, 0.0111772735, 0.0622586645, -0.0397595204, -0.0080377525, 0.0328326635, -0.0324638449, -0.0232262779, 0.0131343883, 0.1111365482, 0.0594605878, 0.0526458099, 0.0518007949, -0.0004863436, -0.0178663470, -0.0637569875, -0.0150072472, -0.0777007416, 0.0637982860, -0.0200241376, -0.0112403044, 0.0237661712, 0.0301771108, 0.0380674861, 0.0604786389, 0.0622451566, 0.0006014227, -0.0353833176, -0.0142585402, 0.0440635011, 0.0221420806, 0.0680418462, 0.0626330599, 0.0621661842, -0.0343195349, 0.0242750049, -0.0606779531, -0.0295835920, -0.0289820395, 0.0674972236, -0.0388567373, -0.0217702128, -0.0220900197, -0.0263212733, 0.0140766697, 0.0275073089, -0.0691116378, -0.0582448728, -0.0161098335, 0.0119814267, -0.0398683213, -0.0275056064, 0.0526559278, -0.0319423154, -0.0322020464, -0.0281602964, -0.0236812085, 0.0533171520, 0.0332524963, 0.0253069494, 0.0294232294, -0.0222662855, -0.0277186576, 0.0228455085, 0.0599489175, -0.0387345068, 0.0283505637, 0.0270824358, -0.0045107240, -0.0289930366, 0.0297134966, -0.0349987447, 0.0457118675, 0.0465726219, 0.0468727872, 0.0136286980, 0.0373168178, 0.0275457371, 0.0702746585, -0.0268604439, 0.0814058930, -0.0871497989, 0.0712745413, 0.0719347224, -0.0554812811, 0.0354780108, -0.0207531378, -0.0416531265, 0.0986138061, -0.0908644497, 0.0150737017, -0.0286348425, 0.0225887205, -0.0414043032, 0.0140374741, 0.0305888746, -0.0193368383, 0.1003410295, 0.0573017448, 0.0871925727, 0.0101533365, -0.0153931966, 0.0100246752, -0.0204003006, 0.0215209387, 0.0655450970, -0.0404974744, -0.0266238842, 0.1075211391, 0.0691548586, -0.0529992916, 0.0648463219, 0.0314789377, 0.0245103035, 0.0362846516, -0.0143329930, 0.0588168241, -0.0244206563, -0.0091914702, 0.1064588353, 0.0657214224, -0.0839016214, 0.0956855342, 0.0430238731, -0.0219039619, -0.0214887820, -0.1005313173, -0.0878406391, 0.0980742350, 0.0421050787, 0.0655646250, -0.0187792573, -0.0851440430, -0.0690703988, -0.0112727592, -0.0307183899, -0.0606768802, 0.0209572241, 0.0856797025, 0.0124557689, 0.0211920962, 0.1161586493, 0.0273876432, 0.0287996158, -0.0644856095, 0.0641166568, -0.0515397340, -0.0316274539, 0.0801046863, 0.0707221255, -0.0298160259, 0.0564006045, 0.1045139357, -0.0740443915, 0.0013569676, 0.0343744531, 0.0106170699, -0.0591464601, 0.0816247016, -0.0157573540, 0.1027835086, 0.0669297650, -0.0688894689, -0.0454736166, 0.1064261571, 0.0270075928, 0.0005392224, -0.0363667198, 0.0441008061, -0.0086831963, -0.0505269915, -0.0360133350, 0.0243610069, 0.0583039485, 0.0451762304, 0.0647687390, -0.0618491173, -0.0136492625, 0.0802880079, -0.0194203593, 0.0298075918, 0.0599326566, 0.0046462798, 0.1133523583, 0.0901635811, 0.0203648899, -0.0352366567, -0.0500698835, -0.0334377736, -0.0251202248, 0.0762945414, -0.0315713026, -0.0153234117, 0.0579934344, 0.0436076857, -0.0890943334, -0.0146295866, -0.0573854744, -0.1002029926, 0.0172343291, -0.0601757541, 0.0178738162, 0.1045999080, 0.0132663194, -0.0373050421, -0.0393076725, -0.1010121033, -0.0738260150, -0.0004438324, 0.0429637097, -0.0261122305, -0.0081651639, -0.0303188115, 0.0864212811, -0.0698688254, 0.0773140416, -0.0589633435, 0.0129377004, -0.0450528711, -0.0247523244, -0.1160860658, 0.0081681153, 0.0615848042, 0.0570987873, -0.0778208226, -0.0029631176, 0.0403317846, -0.0836496651, 0.0543609634, -0.0047094501, 0.0529581681, 0.0869180262, -0.0344588794, 0.0735322013, -0.0071214945, 0.0394223817, -0.0071530975, 0.0481614843, 0.0319055691, 0.0126570696, -0.0535660423, -0.0408734530, -0.0475395806, 0.0031018325, -0.0553847179, -0.0539450347, 0.0579164289, 0.0380897485, -0.0585658029, -0.0088860383, -0.0040862150, -0.0207853410, -0.0234405883, 0.0132955797, -0.0396924205, 0.0486993678, 0.0766484812, -0.0335503146, 0.0136410855, 0.0712295547, 0.0829433426, 0.0269529428, -0.0270592067, 0.0826745480, 0.0463231765, 0.0761459544, -0.1148815304, -0.0415683985, -0.0057904352, 0.0294290148, -0.0083833830, -0.0213295966, 0.0047953743, 0.0627479181, 0.0042967871, -0.0386657789, -0.0723665357, -0.0727374628, -0.0749484003, 0.0299076959, -0.0537642650, -0.0449796431, -0.0011700190, -0.0254654791, -0.0668109134, -0.0430857502, 0.0222109705, 0.0172084961, 0.0513821691, -0.0440733284, -0.0148391481, 0.0549144000, 0.0619831681, -0.0201486889, -0.0591999143, 0.0050158254, 0.0332207158, -0.0241304114, 0.0575377271, -0.0997117087, -0.0451852828, 0.0678584129, 0.1160955951, 0.0854082853, -0.0026553385, 0.0647565499, -0.0542802177, 0.0243760813, -0.0335044675, 0.0095116934, 0.0375608541, 0.0044102455, 0.0498253815, -0.0176492408, 0.0219475962, -0.0516032428, -0.0424045697, -0.0164724179, 0.0302642211, -0.0737057701, 0.0498112105, 0.0602351800, -0.0644878969, 0.0761767849, 0.0604244545, 0.0587222762, -0.0109586688, 0.0208219606, -0.0139062675, 0.0070315260, 0.0078034019, 0.0014923225, 0.0344484635, 0.0704878718, 0.0603547208, 0.0234548785, 0.0257987510, 0.0112119587, 0.0454559587, 0.0454518273, -0.0321186408, -0.0595186166, 0.0446585938, 0.0255141538, -0.0167748258, -0.0303743649, -0.0855198875, -0.0056994669, -0.0603217781, -0.0359683484, 0.0987883732, 0.0909542069, -0.0533194020, -0.0475511700, -0.0043481155, -0.0279182848, -0.0029142250, -0.0132572241, -0.0800443664, -0.0241522975, 0.0193939134, 0.0769259781, 0.0000978978, 0.0120960372, 0.0072592269, -0.0390260816, -0.0090069370, 0.0329539366, 0.0806142315, -0.0404717326, 0.0268599503, 0.0672563538, 0.0061747725, -0.0525038913, -0.0393855721, -0.0270081591, -0.0113332095, 0.0011291861, 0.1026761010, 0.0869672894, -0.0672009215, 0.0415984020, -0.0740851834, 0.0526842251, -0.0746098161, -0.0358887017, -0.0648844242, 0.0223633181, 0.0540402345, 0.0151074175, 0.0663222149, 0.0327120908, 0.0644613057, -0.0885916203, -0.0302667711, 0.0460340343, -0.0277050044, 0.0015754492, 0.0505069681, 0.0330696926, -0.0759433359, -0.0436087139, 0.0544100143, 0.0053289663, -0.0485096164, 0.0804294273, -0.0260203797, 0.0406464338, 0.0600707009, 0.0353747047, -0.0557288490, -0.0347775556, 0.0111593017, -0.0577068590, -0.0257903542, 0.0601677820, -0.0620164908, -0.0442211032, 0.0398730785, -0.0293651819, 0.0031979261, -0.0763359666, 0.0782918707, -0.0041724746, 0.0337738506, 0.0103731537, 0.0561863407, 0.0961879194, -0.0233544949, -0.0446408466, -0.0176609419, -0.0061842636, 0.0309365615, -0.0575478636, -0.0181197245, 0.0635650903, 0.0587421507, 0.0630180687, 0.0329725966, 0.0222952273, 0.0369193517, 0.0277712438, -0.0753933042, 0.0437788963, -0.0049639577, -0.0644603446, -0.0354574472, 0.0546530001, 0.0586930402, 0.0277069621, -0.0422148034, -0.0530455299, 0.0854610801, -0.1020948514, 0.0434415415, 0.0445822291, -0.0391120650, -0.0724536851, -0.0593119413, 0.0323533416, -0.0913610309, 0.0152875232, 0.0030205760, 0.0345259495, -0.0625592619, -0.0730665177, -0.0539859980, 0.0422931463, -0.0180215538, -0.0670813173, -0.1014366299, 0.0509030446, 0.0687197000, 0.0386174619, 0.0272263885, -0.0389438421, -0.0494601987, 0.0197114684, -0.0386878140, 0.0000019523, 0.0376049019, 0.0148327788, -0.0395437256, -0.0903664976, 0.0495924242, 0.0563816391, 0.0654666275, 0.0729080364, -0.0072964500, -0.0254208799, -0.0614442602, 0.0369782671, -0.0033665937, -0.0533044674, 0.0691218153, -0.0479077697, -0.0419939496, 0.0396658182, 0.0672959760, 0.0227857120, 0.0022006009, -0.0370440111, 0.0299581811, 0.0048755440, -0.0595932491, -0.0533322915, 0.0401705392, 0.0291304588, -0.0069690230, -0.0245466866, 0.0372549258, -0.0172681846, 0.0368456617, -0.0383405387, 0.0624799244, 0.0770307332, -0.0411180444, -0.0573492758, -0.0597651787, 0.0029227869, -0.0440058745, 0.0103524858, -0.0316083916, 0.0425970778, -0.0448429398, 0.0675685033, -0.0679548532, -0.0791371837, -0.0348371267, -0.0407579429, -0.0361839831, -0.0267722085, 0.0810676143, -0.0682595745, 0.0175752398, -0.0094769988, -0.0706271827, -0.0988282114, 0.0456955694, 0.0925091058, 0.0561499111, -0.0117856273, -0.0004650209, 0.0265664775, 0.0573061444, -0.0205070581, -0.0129543720, 0.0558571368, 0.0434973389, -0.1102579832, -0.0319575481, -0.0035530587, -0.0126256673, -0.0444690734, 0.0475730076, 0.1041015685, 0.0409190394, -0.0347627290, -0.0347188599, 0.0241232626, 0.0018147492, -0.1101914793, 0.0710336417, -0.0680215433, 0.1118054315, 0.0624758415, -0.0036336775, 0.0259844251, 0.0942487791, 0.0632187128, -0.0416420363, 0.0424319096, 0.0873193741, -0.0924702585, -0.0060060401, -0.0280414727, 0.0063431822, 0.0768786222, -0.0183145944, 0.0371491797, -0.0659458861, -0.1270795316, -0.0139110750, -0.0789528489, -0.0687457398, 0.0104801860, -0.0422028042, 0.0148828533, 0.0635497048, 0.0822660699, -0.0865303427, 0.0427298918, -0.0533380546, -0.0389982238, 0.0121613834, -0.0050528222, 0.0268635098, 0.0091876360, -0.0048542726, -0.1085046455, -0.0008449425, 0.0021993539, 0.0464334339, 0.0584391914, 0.1156690493, -0.0305438563, -0.0606026836, 0.0235851426, 0.0068425476, 0.0829005763, -0.0421032943, 0.0269167181, 0.0816765353, 0.0090062683, -0.0185049158, -0.0566240139, 0.0733255744, 0.0327808447, -0.0714419261, 0.0235558432, -0.0524166599, 0.0061590313, -0.0848876312, 0.0580069609, 0.0914863423, 0.0372739658, -0.0336127207, 0.0382900983, -0.0009836508, -0.1061239392, -0.0259199832, 0.0772891790, 0.0592025518, -0.0613418855, -0.0245233811, -0.0053377235, -0.0065859957, -0.0151054524, -0.0318685733, 0.0341875777, -0.0690223351, -0.0322955512, -0.0500988066, 0.0464687683, -0.0785090774, -0.0415173061, -0.0176670719, -0.0132161425, -0.0538978428, 0.0638778210, -0.0411417484, 0.0235195160, 0.0620832890, -0.0493505299, -0.0437331796, -0.0229367204, 0.0252021272, 0.0043527898, 0.0698995665, -0.0088144261, 0.0422231033, -0.0587747060, 0.0054221554, -0.0511626378, -0.0071800929, -0.0231520236, 0.0531093217, 0.0760967359, 0.0760289654, 0.0594161227, 0.0631883815, -0.0193137713, 0.0321251377, 0.0857496411, 0.0220124740, -0.0283237062, 0.0417978503, 0.0182115082, -0.0820615515, 0.0802562013, -0.0016852374, 0.0809956416, -0.0803906471, -0.0447218344, 0.0340276361, -0.0109650940, 0.0833986923, -0.0247112643, -0.0653107092, -0.0597811826, -0.0640655085, 0.0098568676, 0.0716939121, -0.0115803815, 0.0676027611, 0.0363652706, -0.0378838740, -0.0386187471, 0.0317071378, 0.0409794115, 0.0799539462, 0.0827398747, 0.0099476809, -0.0154751102, -0.0001570055, 0.0438020602, 0.0373489931, -0.0440323353, -0.0955328792, -0.0254905708, -0.0470597148, 0.0190648958, -0.0877043307, -0.0769533217, -0.0566893406, 0.0268488899, -0.0406525880, 0.0653873682, 0.0565875471, 0.0509321541, -0.0446850881, -0.0324051268, -0.0062584225, 0.0838742927, -0.0607567877, -0.0483508296, -0.0547838919, -0.0105459318, 0.0784511417, -0.0583490692, 0.0727256238, 0.0529699996, -0.0258937404, -0.0968263000, 0.0070063449, 0.0352781527, -0.0122613339, 0.0954695567, -0.0058425972, 0.0720903054, 0.0624066964, 0.0501152202, -0.0786154196, -0.0717077032, 0.0386762433, -0.0439430028, 0.0345738865, 0.0890276358, -0.0675648823, -0.0843568295, 0.0272084344, -0.0460112691, 0.0007272212, -0.0776314437, 0.0899881721, -0.0827735066, 0.0734464154, -0.0863454863, -0.0412944779, 0.0067814197, 0.0992403477, -0.0862577111, 0.0766847059, 0.0525031686, -0.0058261855, -0.0319657885, -0.0698398128, 0.0439560153, -0.0509973057, -0.0582059398, -0.0164405871, 0.0072972178, -0.1048113257, -0.0921944529, -0.0543563701, -0.0492677726, 0.0010882455, -0.0596813932, -0.0540559553, 0.0454669222, -0.0268845186, 0.0305314306, -0.1016788259, 0.0298730917, -0.0628426448, 0.1039123088, -0.0052648908, -0.0179370604, -0.0649247691, 0.0424103960, -0.0016119148, -0.1126813591, -0.0198544189, -0.0330484882, 0.0445889868, 0.0253320560, -0.0123025449, -0.0944874361, 0.0333225243, 0.0617781691, 0.0317844227, -0.0170898531, 0.0253082607, -0.0161876846, 0.0666288733, -0.0152898878, -0.0082633048, 0.0469999835, 0.0916954726, -0.0898979530, -0.0522564724, 0.0434436537, -0.0704697296, -0.0324261375, -0.0572791658, -0.0789911151, 0.0619405620, -0.1125699058, -0.0137812262, -0.0412255190, 0.0122753391, -0.0075629433, -0.0061991164, 0.0886830464, -0.0180018488, -0.0698531047, -0.0058761346, 0.1034196019, -0.0305412710, 0.0363270044, 0.0311795995, -0.0826524198, -0.0396809094, -0.0723564997, -0.0019385964, -0.0649153516, 0.0435294546, 0.0144840693, -0.0256440826, 0.0150436005, -0.0203088671, 0.0014615331, -0.0055863899, -0.0446845219, 0.0472213067, -0.0679159313, -0.0974051133, -0.0912933350, -0.0606644414, 0.0814312249, -0.0790487677, 0.0215436257, 0.0810894296, -0.0325588770, -0.0536876954, -0.0286583900, -0.0158794653, -0.0585320704, 0.0687308386, 0.0627790987, 0.0508506969, -0.1226320490, 0.0394505747, -0.0052901069, 0.0620015748, 0.0969106331, -0.0736417025, -0.0045867246, 0.0148168635, -0.0574193187, -0.0836402476, 0.0325034335, 0.0213468149, -0.0058818473, -0.0367222726, 0.0097037135, -0.0219142325, -0.0496882796, 0.0247868523, 0.0631444529, -0.0135302758, 0.0024360539, 0.0488568433, -0.0103047211, 0.0439329110, -0.0436651856, 0.0322549865, 0.0734228790, 0.0688388050, 0.0157013647, 0.0656050146, 0.1107062921, 0.0482812598, 0.0775343329, -0.0375334360, -0.0310762562, 0.0202575214, -0.0079907775, 0.0005173440, -0.1263455153, -0.0716165900, 0.0297332443, -0.0347981229, 0.0426367372, -0.0702517852, -0.0487017855, -0.0307367239, -0.0034819299, -0.0064194021, 0.0819358677, -0.0409117341, -0.0514260083, 0.0217036866, 0.0724097639, -0.0487328023, -0.0459956229, 0.0569711141, 0.1047941223, 0.0903582349, 0.0084861070, 0.0443246067, 0.0403496251, -0.0150984172, 0.0165506583, 0.0677912980, 0.0220521092, -0.0067385021, 0.0033473971, -0.0451970957, 0.0427839048, -0.0444142818, 0.1172956899, 0.0758751929, -0.0923434868, 0.0214029197, 0.0239822399, 0.0590501688, 0.0381573178, -0.1128654703, -0.0641731396, -0.0490057692, -0.0576587282, 0.0415754765, -0.0022716385, 0.0174149238, -0.0256377868, 0.0922478586, 0.0180503633, -0.0535773747, -0.0495912209, 0.0293683484, 0.0811981261, 0.0321484879, 0.0196191203, -0.0161477868, 0.0235063620, 0.0075848103, 0.0502343737, -0.1007523239, -0.0613630377, 0.0142964218, -0.0996309966, 0.0840793550, -0.0164733268, -0.0529966019, -0.0487200730, -0.0417139120, 0.0521216989, -0.0742260963, 0.0834880918, 0.0655897483, -0.0699632838, 0.0856787115, -0.0242333300, -0.0460766256, 0.0540072098, 0.0417771265, 0.0001474343, 0.0455498248, 0.0156098474, -0.0314065479, -0.0135336099, -0.0287811588, -0.0049559735, 0.0237266496, -0.0920080170, -0.0157566350, 0.0418655314, -0.0687992573, 0.0364982411, -0.0847377479, 0.0835885406, 0.0178023744, -0.0036817086, 0.0659248754, -0.0645221174, 0.0867100656, -0.0004010500, -0.0088492008, 0.0326128080, -0.0041199690, 0.0348705798, -0.0251935292, 0.0083160903, -0.0837371945, -0.0852136984, -0.0709720403, -0.0460910052, -0.0335554741, -0.1065562814, 0.0720229968, 0.0334048644, 0.0898503289, -0.0866421089, -0.0290055163, 0.0844427198, -0.0370191447, -0.0270767566, -0.0253741927, 0.0706840679, -0.0110872518, 0.0236098282, -0.0519211106, -0.0013613170, -0.0284411665, -0.0812414810, 0.0483504832, -0.0952464864, -0.0414772630, -0.0274161920, 0.0037630822, 0.0216607321, -0.0661816746, 0.0413394608, 0.0001202266, 0.0086968206, 0.0794012696, 0.1054897681, -0.0868224055, 0.0123269940, 0.0030537110, 0.0648985580, -0.0292697437, -0.0380829759, -0.0419189222, 0.0836293027, -0.0594172850, 0.0350607596, -0.0279874187, -0.0756208375, 0.0189990588, 0.0674446970, -0.0194685087, -0.0364903361, 0.0077328044, -0.0211409498, -0.0038196957, 0.0021937795, -0.0676196218, -0.0336569995, 0.1059745401, 0.0122264968, 0.0491938181, -0.0599647127, 0.0859462395, 0.0671511218, -0.0829894841, -0.0369070545, -0.0142474733, -0.1185447499, 0.0439393930, -0.0683311895, 0.0078927372, 0.0556822456, 0.0868742913, -0.0031117396, 0.0651515573, -0.0948597267, -0.0220436342, 0.0805604830, -0.0288031567, -0.0424312800, 0.0323656462, 0.0047934442, 0.1117652953, 0.0599070489, -0.0082106087, 0.0437401272, 0.0488388538, -0.0284646675, 0.0981810018, -0.0993899405, 0.0298196580, 0.0078976406, -0.0466203243, -0.0385150537, -0.0836180821, 0.0291680023, 0.0734278113, 0.0149316313, 0.0167709086, 0.0362350605, -0.0157091916, 0.0041265995, 0.0553817526, -0.0112445075, -0.0403990261, 0.0356603153, -0.0556543097, -0.0264088418, 0.0825298950, -0.0437483005, 0.0681309402, -0.0532279275, -0.0355558693, 0.0636458844, -0.0104650576, -0.0009407261, -0.0982215330, -0.0078881523, -0.0337256454, 0.0474047400, -0.0522940233, 0.0997066423, -0.0600077547, -0.0996392742, -0.0391446054, -0.0533252619, -0.0354266465, 0.0395878926, 0.0591826700, 0.0909551382, -0.0003843539, 0.0095722703, -0.0080624223, -0.0422781631, 0.0364614613, 0.0428761803, 0.0368768089, -0.0721656904, 0.0234510358, 0.0190412253, -0.0354366526, 0.0025424385, 0.0063692532, -0.1036169007, -0.0757099763, 0.0173149258, 0.0968767405, -0.0622391105, -0.0400943272, 0.0976451337, -0.0660646111, 0.0045757224, 0.0534669124, -0.0052176975, -0.0497754999, -0.0636986047, -0.0264235586, 0.0044349977, 0.0343612656, 0.0100851581, -0.0137010003, -0.0678409189, 0.0053632981, -0.0196453724, -0.0744784102, -0.0834155530, -0.0897907987, 0.0198554471, -0.0081515638, 0.0445827283, 0.0986790285, 0.0048222183, 0.0693814009, -0.0218185931, -0.0970720723, 0.0001786343, -0.0504997000, -0.0137064904, -0.0175857227, 0.0112918895, -0.0747174695, -0.1011619568, -0.0972896516, -0.0034754467, 0.0514359958, -0.0638403296, 0.0354980156, 0.0118748853, -0.0903807580, 0.0752399787, 0.0168926679, -0.0098390793, 0.0570714995, -0.0710097402, 0.0002050297, 0.0341250002, -0.0263932683, -0.0835845917, 0.0628692061, -0.0096004773, 0.0520387143, 0.0404874943, -0.0121614058, 0.0552333854, 0.0575648136, 0.0095396740, -0.1167142987, -0.0197439864, 0.0508011840, -0.0692192391, -0.0157246385, 0.0476450510, -0.0288212486, -0.0629839078, 0.0283933524, 0.0848864838, -0.0731378049, 0.0099762799, -0.0451225080, 0.0792520195, 0.0102273729, 0.0296185985, 0.0104909427, -0.0240820479, 0.0237934124, -0.0293702111, 0.0187661834, 0.0520185195, -0.0392635278, 0.0105758412, -0.0242333356, -0.0875236914, -0.0564346984, 0.0222776551, -0.0983704552, 0.0590713955, -0.0535477772, 0.0369011201, 0.0258123558, -0.0990286320, 0.0490013845, -0.0060523031, -0.0957000032, -0.0368430130, -0.0209931396, -0.0379349217, -0.0481221788, 0.0919423550, -0.0772549808, -0.0514775328, -0.0186391845, 0.0175031070, -0.0800660849, -0.0407350957, -0.0067918748, 0.0729939565, 0.0509698652, 0.0365755372, -0.0026901783, 0.0234706774, 0.0951386094, 0.0392057188, -0.0622310229, -0.0651562959, -0.0093981214, -0.0544996671, -0.0423960909, -0.0202167761, 0.0218930077, 0.0493156388, -0.0007303284, 0.0601205043, 0.0783996284, 0.0014501715, 0.0460671261, -0.0417535715, -0.0201572943, 0.0740552247, -0.0281813499, 0.0494435169, -0.0626324564, -0.0379639678, -0.0111466479, 0.0033114015, -0.0376517624, -0.0393311046, 0.0495142266, -0.0179462638, 0.0330982842, -0.0355891101, -0.0048061199, 0.0693657175, 0.0626785681, -0.0049803476, 0.0155706117, 0.0801342949, -0.0087278336, 0.0868190229, 0.0766268075, -0.0535871200, -0.0808382332, -0.0449329577, 0.0828070790, -0.0168385264, 0.0782640725, -0.0131059019, 0.1094345078, 0.0395851173, -0.0055147614, -0.0465408973, 0.0565046705, -0.0353288129, -0.0164790247, -0.0315513834, 0.0951904133, -0.0971850902, 0.0493559986, -0.0051900186, 0.1100857928, 0.0304424576, -0.0036457956, 0.0336771570, 0.0628708303, 0.0203703251, 0.1006264091, -0.0596790016, 0.0307972562, -0.0688660145, 0.0700685158, 0.0365233645, 0.1101884544, 0.0534530543, 0.0752759278, 0.0216050204, 0.0414682925, -0.0666847304, 0.0708192214, 0.0769625902, 0.0608977973, 0.0828717425, -0.0451575518, 0.0767814443, -0.0061245770, 0.0089497268, -0.0089256447, -0.0770268887, -0.0788294673, -0.0776220784, -0.0685788393, -0.0975931063, -0.0449942574, -0.0036753917, -0.0674942732, 0.0103842476, -0.0600038692, 0.0735433027, 0.0307566598, -0.0620484203, 0.0154835768, -0.0586333685, -0.0078758337, 0.0612899661, -0.0126859695, -0.0360542238, -0.0455643423, 0.0158065036, -0.0503381044, 0.0305677708, -0.0263002776, -0.0806271434, -0.0463949367, 0.0492945760, -0.0071327547, 0.0628811643, -0.0094713261, 0.0405942537, 0.0269327238, -0.0582702123, -0.0776292607, 0.0804308876, -0.0633119345, 0.0695790648, -0.0351603106, -0.0365155488, -0.0550510734, -0.0103996359, 0.0602047779, -0.0588224605, 0.0492673144, -0.0630930886, -0.0405924059, 0.0833414644, 0.0076114465, -0.0244759396, -0.0230603293, 0.0258097202, -0.0266006980, -0.0674338937, 0.0403890871, -0.0389669053, -0.0476944111, 0.0213367902, -0.0319427960, -0.0407910310, -0.0112049785, -0.0652603135, 0.0026513357, 0.0388927050, -0.0594366342, -0.0220395848, 0.0514368303, 0.0452067330, -0.0027085538, 0.0455019027, 0.0285184905, 0.0784635618, -0.0005846489, -0.0621302649, 0.0825269446, -0.0297603533, -0.0266789682, -0.0306898970, -0.0223293230, -0.0836270824, -0.0819488764, -0.0081422469, -0.0067600110, 0.0502025373, -0.0329278857, -0.0161465835, 0.0211988576, -0.0870302320, 0.0160868354, 0.0612325892, 0.0372742936, -0.0248755757, 0.0715447515, 0.0572415963, 0.0575501584, -0.0297625978, -0.0542810224, -0.0602855943, -0.0556749031, 0.0148165300, -0.1001981571, 0.0672670528, -0.0569134094, -0.0356675386, -0.0115836402, 0.0210025087, -0.0648929849, -0.0581957810, 0.1305957884, 0.0024347752, -0.0384374931, 0.0267011225, 0.0585261807, -0.0891824588, -0.0005508901, 0.0069627240, 0.0240861308, 0.0594283976, -0.0607252233, 0.0224900115, -0.0355858468, -0.0294432044, -0.0752305984, 0.0442273356, -0.0689839274, 0.0598965473, 0.0031170186, -0.0755078644, 0.0537897237, 0.0224155579, 0.0433642790, 0.0486356206, -0.0039052928, -0.0154807176, 0.0219416246, -0.0611041859, -0.0081760576, -0.0016774861, 0.0757779852, -0.0222062077, -0.0037369430, 0.0327461697, 0.0218963791, 0.0648577139, 0.0419626348, 0.1077983528, -0.0672098026, -0.0629877150, -0.0929529741, -0.0179407578, 0.0838374719, 0.0274719112, -0.0987362787, -0.0397584736, 0.0021944833, -0.0163411703, 0.0651253983, 0.1162682995, 0.0609580800, 0.0586910471, -0.0419613943, 0.0829696506, -0.0362607241, -0.0186832137, -0.0249951202, -0.0041425452, 0.1009544581, 0.0371351987, -0.0335087851, 0.0108500728, 0.0611979328, -0.0344757959, 0.1103164330, 0.0874956548, -0.0028420968, -0.0667572916, 0.0498747006, -0.0009774030, 0.0473017730, 0.0167938247, 0.0393246561, 0.0947801471, 0.0414731242, -0.0370617770, 0.0422100313, 0.0662772059, 0.0907595307, -0.0601500198, 0.0051940330, 0.0062152445, -0.0856255442, 0.0662937611, 0.0382249877, 0.0396446772, 0.0447901748, -0.0507100858, 0.0188010987, -0.0074018845, -0.0397993959, 0.0101470631, 0.1073459014, 0.0728471056, -0.0210472811, -0.0448985398, -0.0300722662, -0.0241440851, 0.0393808521, -0.0498841666, 0.0797370672, 0.0476852879, 0.0923400447, 0.0564801097, -0.0464611128, 0.0555794910, -0.0311160479, 0.0459678695, 0.0770552978, -0.0539608821, 0.0308332741, 0.0252027456, -0.0518073626, -0.0016037746, 0.0869371220, -0.0455018245, 0.0589054711, -0.0583919957, 0.0251110885, 0.0673957542, 0.0196504127, -0.0393139869, 0.0229101144, -0.0720609948, 0.0372273549, 0.0461502299, -0.0634180158, -0.0271938797, 0.0237000603, -0.0652649701, -0.0397277512, -0.0506045818, 0.0193856042, -0.0752572864, -0.0434221104, -0.0028677871, -0.0336668938, -0.0511272550, -0.0598716065, -0.0510453843, -0.0615665838, 0.0579858534, -0.0376963094, -0.0621419698, -0.0116361650, 0.0346402489, 0.0113627678, -0.0417099595, 0.0623146594, -0.0318010300, 0.0443016104, 0.0586161204, -0.0213536043, -0.0450392403, 0.0048291278, 0.0200789366, -0.0245804973, 0.0612097234, -0.0464048795, 0.0140318600, 0.0076983455, -0.0739038885, 0.0927572548, 0.0805722699, 0.0758867487, 0.0386380069, -0.0290646907, -0.0522872210, 0.0149977459, 0.0597454049, 0.0571983233, -0.0604337566, 0.0269384719, 0.0767779872, 0.0163251571, 0.0376702994, 0.0709483251, -0.0470412038, -0.0010882864, 0.1052693799, -0.0662726760, -0.0448245630, 0.0139014563, -0.0121341832, -0.0816981196, -0.0529350862, 0.0412827134, 0.0483317263, 0.0456243940, 0.0739852190, -0.0701399744, 0.0721517652, -0.0045433422, -0.0108358376, -0.0238577072, -0.0997651890, 0.0831310973, -0.0300235786, 0.0668754503, 0.0300149452, -0.0222269222, 0.1004698351, 0.0147729469, -0.0228248648, -0.0127019072, -0.0474593751, -0.0535870790, -0.0040160078, -0.0064941258, 0.0042628273, 0.0867042616, -0.0311209746, 0.0724775642, -0.0702169761, 0.0478003882, -0.0179647058, 0.0463211425, 0.0460279845, -0.0402639024, -0.0767180398, -0.0325990021, 0.0890085623, 0.0576516688, 0.0043645487, -0.0603354089, -0.0434329286, -0.0664698035, 0.0777640715, -0.0421191007, 0.0800131932, 0.0469010063, 0.0310087074, 0.0100499820, -0.0734130666, -0.0205649137, 0.0198600665, 0.0166788101, 0.0598535240, -0.0005705940, -0.0125619546, -0.0262698438, 0.0096394932, -0.0236661155, -0.0073919133, -0.0517208725, -0.0391560234, 0.0339068919, -0.0355877019, 0.0196718331, -0.0565367080, -0.0330978781, 0.0695662275, 0.0258379541, -0.0083187213, 0.0722870603, 0.0056020338, 0.0041563907, 0.0372714102, -0.0786454305, -0.0723223984, 0.0504269153, -0.0327307284, 0.0547284782, 0.0071270880, -0.0530546568, -0.0159514379, -0.0347260870, 0.0542078800, 0.1115902513, 0.0987141281, -0.0340157859, -0.0020057452, -0.0392668247, 0.0130204046, 0.0499447174, 0.0638001710, -0.0301165190, 0.0010554862, -0.0998444930, -0.0245950595, 0.0002373389, -0.0085274447, 0.0270327684, 0.0058409027, 0.0722077861, -0.0657949820, -0.0600268617, 0.0499836691, -0.1133013517, -0.0849201456, 0.0457684025, 0.0618672222, 0.0535196066, 0.0491227955, -0.0536577217, -0.0122342836, 0.0717797279, -0.0308889039, -0.0636542737, -0.0538462773, 0.0778771713, -0.0283137783, -0.0937063545, -0.0381776281, 0.0815669522, -0.0047455644, -0.0087239398, -0.0478910320, -0.0557582192, -0.0325563364, -0.0827000663, -0.0587784871, -0.0719631538, -0.0609836243, -0.0011155435, -0.0173862725, 0.1008156091, -0.0504390076, 0.0863788128, 0.0684269965, -0.0894498080, -0.0037595993, 0.0084707700, 0.0501307659, 0.0414705575, -0.0504617989, -0.1016179472, -0.0085492255, -0.0090369210, -0.0681154430, -0.0366858765, -0.0192563944, -0.0850211903, -0.0682092458, -0.0023704185, 0.0669268668, -0.0210504010, 0.0289425850, 0.0080031129, -0.0578118339, -0.0700560510, 0.0128244571, 0.0903758109, 0.0358274393, -0.0226811524, 0.0505800061, -0.0123629058, -0.0196029302, -0.0447292738, -0.0385265686, -0.0227678623, -0.0581046604, 0.1102266461, -0.0142417932, 0.0339044370, 0.0335326754, -0.0384893864, -0.0409194753, -0.0971178859, -0.0789157078, 0.0877103359, -0.0053079464, 0.0363429599, 0.0337315463, 0.0728254616, 0.0507462434, -0.1116316170, 0.0126314033, 0.0119096972, -0.0808841214, -0.0192278977, -0.0183715094, -0.0065123113, -0.0341131426, 0.0284249801, 0.0196060389, -0.0596152619, 0.0419315025, 0.0144403279, -0.0430951267, 0.0185223781, -0.0470788255, -0.0528159700, 0.0154825822, 0.0000721811, 0.0753091574, -0.0883492529, 0.0063970974, -0.0926963985, -0.0601349995, 0.0150540285, 0.0333622172, -0.0056142234, -0.0169148110, 0.0048554339, 0.0775163397, -0.0990429372, 0.0400913171, 0.0550778881, 0.0372443236, -0.0106397048, -0.0052821501, 0.0216071755, -0.0503777564, 0.0261123553, -0.0162969865, 0.0138340183, -0.0214089230, 0.0802335516, -0.0558450297, 0.0292081106, 0.0707069114, -0.0239213351, 0.0108102011, 0.0504392721, 0.0800790265, 0.0653515458, 0.0627127811, 0.0466048978, 0.0507446341, -0.0368460566, 0.0355694331, 0.0320639648, 0.0595746599, 0.0741118118, -0.0356637985, 0.0225849748, -0.0006857889, -0.0340081416, 0.0364192240, 0.0757208690, 0.1080877408, -0.0504806302, -0.0900722891, 0.0144887203, -0.0736950040, -0.0427868776, 0.0081657795, -0.0934811980, 0.0943390206, 0.0297825448, -0.0525657684, -0.1209360734, -0.0507470742, -0.0191330444, -0.0877527446, -0.0594102778, 0.0183027461, -0.0286019333, -0.0462172627, 0.0444590077, 0.0895184875, -0.0167203341, -0.0449444205, -0.0108342087, 0.0480087139, -0.0776745155, -0.0623608977, -0.0475126393, 0.0391829200, -0.0289178398, -0.0783834681, 0.0108600110, 0.0342736579, -0.0111859497, 0.0420671031, -0.0361002646, 0.0766937956, -0.0941147581, 0.0799506381, 0.0300961155, 0.0891900137, 0.0066548684, 0.0329675637, -0.0420670062, 0.1003152058, 0.0523530059, -0.0276938975, 0.0096906926, 0.0244413745, -0.0185309518, 0.0811387375, -0.0325812958, -0.1044656038, -0.0761076510, 0.0354975313, -0.0630356595, 0.0469360799, 0.0642468557, -0.0551005825, 0.0063143601, 0.0709957033, 0.0043151681, 0.0177152883, -0.0594532266, 0.0561063290, 0.0626956597, -0.0935575962, 0.0125307478, -0.0790785402, -0.0280475020, -0.0148016987, -0.0313300602, -0.0312701352, 0.0113873929, -0.0520646572, -0.0841214880, 0.0320223235, 0.0285360776, 0.0791086033, -0.0542588681, 0.0934414268, -0.0501420870, -0.0413080677, -0.0784081444, -0.0349977538, -0.0567298383, 0.0411202125, 0.0365976095, 0.0365400128, -0.0397605821, -0.0337437056, -0.0746579692, -0.0592893958, -0.0296142530, 0.0698367655, 0.0629151687, -0.0298240036, 0.0263249055, -0.0596365854, 0.0157839265, -0.0032363101, -0.0577052012, 0.0584608726, -0.0251153205, 0.0549191311, 0.0336652212, -0.0078808498, -0.0671871230, 0.0080229063, -0.0021122764, -0.0649551377, -0.0038960520, -0.0664895698, 0.0334660970, -0.0417117141, 0.0061519258, -0.0620401539, -0.0386520587, 0.0059160260, -0.0168623738, 0.0253367331, 0.0661770701, 0.0191896167, -0.0553551093, 0.0653794333, -0.0826950371, 0.0409655944, -0.0994350091, 0.0954233855, 0.0581974313, -0.0272542033, -0.0728474781, 0.0506770425, -0.0831265971, -0.0967743695, -0.0774988830, 0.0428994931, -0.0375746973, 0.0830615684, -0.0873915404, -0.0508431196, -0.0309060980, -0.0353722461, 0.0592690930, 0.1123182625, 0.0559113510, -0.0666814521, 0.0579366907, -0.0497499704, -0.0492899008, 0.0084677627, -0.0662795231, 0.0099291559, 0.0521690398, -0.0351720899, 0.0088189170, 0.0126993228, -0.0382369347, 0.0234925654, 0.0064053442, 0.0010892273, 0.0703295991, -0.0640142560, -0.0175471175, 0.0272320881, -0.0120727364, 0.1049314514, 0.0700013041, -0.0527871996, -0.0072479686, -0.0089187520, -0.0213125814, -0.0636560172, -0.0665697679, 0.0795940012, -0.0058783279, -0.0318427049, -0.0592513233, -0.0297070164, -0.0156279579, -0.0600639805, 0.0031762347, -0.0440716408, -0.0880438760, -0.0082315812, 0.0796876475, 0.0387507156, -0.0275649428, 0.0865671858, -0.0893774331, -0.0820244327, -0.0367127284, 0.1001572907, 0.0693718046, -0.0467141494, -0.0711004287, -0.0741181076, 0.0350295566, 0.0037736325, -0.0518709533, 0.0385055840, -0.0378594846, -0.0226178467, -0.0043619648, -0.0102498308, 0.0075005614, -0.0904351696, 0.0881800279, 0.0099520599, -0.0456054620, 0.0403341241, 0.0728873312, 0.0983242020, 0.0258918479, 0.0037862598, -0.0182361118, 0.0608408637, 0.0041157953, -0.0750395581, 0.0083698835, 0.0215060320, 0.0305479169, 0.0523599647, 0.0249996912, -0.0588334203, -0.0192504507, 0.0429916047, -0.0207775254, 0.0332606733, -0.0508068129, -0.0011572702, 0.0341006890, 0.0659122765, -0.0168711022, -0.0064013302, -0.0407094732, 0.0802050084, 0.0808985159, -0.0085179992, 0.0178591441, 0.0444524027, -0.0079678353, 0.0002577634, 0.0466144010, -0.0411305316, -0.0207955278, 0.0182691626, 0.0224250685, -0.1047436744, 0.0393350907, -0.0538384877, 0.0085266931, -0.0128521062, -0.0294481274, 0.0335447751, -0.0455954559, 0.0672506914, -0.0201791339, 0.0331467800, 0.0234598555, -0.0496871024, 0.0673188642, -0.0482285060, -0.0124569042, -0.0550583601, 0.0050679296, 0.0717113763, -0.0345009528, -0.0492957048, 0.0653265342, 0.0342582501, -0.0767632201, 0.0175804757, 0.0484731570, -0.0724968836, -0.0135994125, 0.0776652992, 0.0516474731, -0.0034647794, 0.0296549574, 0.0180747882, 0.0522636883, 0.0577564165, -0.0045633963, 0.0641524792, -0.0818850920, -0.0853728503, -0.0458043516, 0.0062467917, 0.0103285760, -0.0478827544, 0.0461175665, 0.0145681882, -0.0497659482, 0.0288109966, 0.0034716330, 0.0493517704, 0.0434766673, -0.0205154773, 0.0318680741, -0.0222869292, -0.0121339057, 0.0331563987, -0.0389674790, -0.0381463915, -0.0016998628, 0.0275656339, 0.0044585783, -0.0071557784, -0.0319399163, -0.0256258920, -0.0618449114, -0.0614252687, -0.0345361009, -0.0559946708, 0.0921652913, -0.0492704697, 0.0731239542, -0.0276919138, -0.0561346002, 0.0421874672, -0.0049115676, -0.0803980529, 0.0166359935, 0.0596990362, 0.0371862613, 0.0125812581, 0.0363607109, 0.0153907398, -0.0434642956, 0.0914770737, -0.0042793178, 0.0566299856, -0.0116589973, -0.0141705507, -0.0944629461, 0.0207605418, 0.0819404274, -0.0726772621, 0.0479277708, -0.0220643319, 0.0765326992, -0.0089983176, -0.0446612686, -0.0481575467, 0.0189726055, 0.0189938135, 0.0152806789, 0.0447152108, -0.0300203860, 0.0086628487, 0.0312435869, 0.0492877513, -0.0394316912, -0.0398418084, 0.0156217106, 0.0265633836, 0.0726809502, 0.0466781855, -0.0653611943, 0.0107129356, -0.0713374615, 0.0310915019, -0.0570251383, 0.0615646094, -0.0442355387, 0.0416340306, 0.0363407806, 0.0478703305, -0.0605424941, 0.0297382679, -0.0229644012, -0.0436511822, -0.0096289469, -0.0706069693, -0.0641981736, 0.0667124167, -0.0048974492, 0.0029650906, -0.0577924773, -0.0474797077, 0.0522943251, -0.0323974304, 0.0236040745, -0.0685092062, 0.0216400474, -0.0413558297, -0.0024941191, -0.0844831541, -0.0205775108, -0.0136937918, 0.0013917484, 0.0537532307, 0.0311520156, -0.0602902956, -0.0035909391, 0.0419629626, 0.0839811340, -0.0836618170, -0.0997409075, -0.0587336905, 0.0641508996, -0.0246948693, -0.0605516806, -0.0585728176, -0.0755277723, -0.0497919135, 0.0199430995, -0.0363457054, -0.0731117949, -0.0933117941, -0.0199089926, 0.0418218821, 0.0535010993, -0.0930078551, -0.0620770082, 0.1144320741, 0.0480393805, 0.0513180271, 0.0103222430, 0.0016860620, -0.0631778613, 0.0773064271, 0.0998195186, 0.0755006671, -0.0156415068, 0.0279241409, 0.0333093442, -0.0510573313, -0.0416757464, -0.0411775038, -0.0398874469, -0.0711355656, 0.0331758149, 0.0613009073, 0.0896000341, 0.0238979291, -0.0401775837, 0.0282693133, -0.0414065197, 0.0485455245, 0.0608982258, -0.0431082509, -0.0300357100, 0.0492316373, 0.0065362579, 0.0610998534, -0.0673162118, -0.0555998571, 0.0513904616, -0.0550324731, -0.0152255874, 0.0349792652, -0.0090941750, -0.0122513426, 0.0076476610, 0.0152510237, -0.0026270060, 0.0551502518, 0.0419461317, -0.0574693233, -0.0409275852, -0.0600040369, 0.0229648557, -0.0345013253, -0.0191797633, -0.0088719679, -0.0295980629, 0.0083786407, -0.0449002050, 0.0529527925, -0.0501723811, 0.0259631537, -0.0582900792, 0.0025048773, 0.0225200728, -0.0206746478, 0.0617565028, 0.0956625342, -0.0089359125, -0.0453211442, -0.0688700452, 0.0575303659, 0.0459417664, -0.0814906955, 0.0769030899, -0.0711308643, -0.0221149623, 0.0826103017, -0.0745778978, 0.0194638614, 0.0470534153, -0.0682152435, 0.0534081161, -0.0144202989, -0.0264290459, -0.0393924229, -0.0059173279, -0.0316763371, 0.0568411127, 0.0178024396, 0.0756042749, 0.0530700833, -0.0276650451, -0.0687060356, 0.0670724735, 0.0248554237, -0.0687556863, 0.0097831702, -0.0029367900, 0.0801059753, -0.0310640000, -0.0311570242, -0.0388044268, 0.0887102112, 0.0283614900, -0.0641063899, -0.0704038367, 0.0155148963, -0.0260024574, -0.0346694551, -0.0094752088, 0.0777138099, 0.0582028963, -0.0328306742, -0.0383794941, 0.0685440227, -0.0495350733, -0.0847814232, 0.0011838374, 0.0562960841, -0.0051145521, 0.0340650417, 0.0313740149, 0.0272169244, 0.0201898832, 0.0561747812, 0.0826225951, 0.0342878625, -0.0267157014, -0.0755898207, 0.0211029612, -0.0550883859, 0.0139069641, 0.0663142726, -0.0079853665, 0.0213195365, -0.0382642113, 0.0814861953, -0.0111922892, -0.0300451070, -0.0958063900, 0.0694689527, -0.0688856468, 0.0420521833, 0.0458322242, -0.0014029809, -0.0348945446, 0.0235086866, 0.0601671897, 0.0642265305, -0.0182004794, -0.0710725784, 0.0366408043, 0.0789816454, 0.0242990386, -0.0793255270, -0.0114079118, 0.0436821021, -0.0443009362, -0.0641932711, -0.0089524677, 0.0157230962, 0.0164495632, -0.0565773472, -0.0912295580, 0.0595467500, 0.0432716347, -0.0322657004, -0.0108978515, 0.0901011601, 0.0648678988, 0.0082968464, -0.0282544550, -0.0973310396, -0.0071106618, 0.0410654210, 0.0974280015, -0.0527705960, -0.0243157670, 0.0684764087, -0.0152784362, 0.0579126813, 0.0207495354, -0.0094638169, -0.0493655615, -0.0174291432, 0.0997973904, 0.0104802344, 0.0676891804, -0.0708456933, 0.0141912727, -0.0585345812, 0.0796456486, -0.0488720499, -0.0251976084, -0.0255975332, -0.0526260585, -0.0918762386, 0.0569074340, 0.0374679565, 0.0410030410, 0.0065904045, 0.0287356023, -0.0885216072, -0.0852118433, -0.0894935131, -0.0746253729, 0.0046853465, -0.0044074510, 0.0269422363, 0.0091247885, -0.0216250196, -0.0260321610, -0.0657700151, -0.0187479313, -0.0120470505, -0.1030889004, 0.0228461474, 0.1233152524, -0.0311237238, 0.0700763017, 0.1044922620, -0.0493912622, -0.0544971824, 0.0637426227, -0.0258268826, 0.0336407311, 0.0137973567, -0.0441414975, -0.0164803155, -0.0502708219, 0.0889574736, 0.0992354974, 0.0501378253, -0.0587063879, 0.1048871800, 0.0213099215, -0.1068422124, 0.0131763564, -0.0124918837, 0.0867985487, 0.0374712199, -0.0389757007, 0.0071882326, 0.0214190353, 0.0204055309, -0.0051726238, 0.0220168885, -0.0500026792, 0.0618760288, -0.0392079316, -0.0809599683, -0.0365386419, -0.0769884512, 0.0825145841, -0.0496287271, 0.0113050565, 0.0020115508, 0.0325193889, 0.0944270864, 0.0929931402, -0.0451613665, 0.0192075539, 0.1057217494, 0.0591766350, -0.0594216399, 0.1062376127, -0.0821608305, -0.0863331407, -0.0343681723, -0.0698718876, -0.0485347994, -0.0918965787, 0.0167365447, -0.0285413731, -0.0027373359, 0.0357985720, -0.0212187339, -0.0225925818, 0.0614889413, 0.0542179532, -0.0695491880, -0.0123391142, -0.0295586213, -0.0256182142, 0.0540487580, 0.0212525185, 0.0029540025, -0.0169450287, -0.0420902073, 0.0824650899, 0.0399465337, -0.0507509783, -0.0459356010, -0.0263226274, -0.0200733636, -0.0188696049, 0.0864444003, 0.0446417369, 0.0322339013, -0.0500355735, -0.0400457941, -0.0882970095, -0.0447171926, -0.0002865515, 0.0222395509, 0.0483463593, -0.0498291329, -0.0183752105, 0.0712467954, 0.0324856006, 0.0607049838, -0.0080968440, 0.0488649830, 0.0193794537, -0.0361978114, 0.0359611511, -0.0530831814, 0.0030950613, 0.0325599834, -0.0500622503, 0.0579626709, 0.0154307503, -0.0306208842, 0.0575183332, 0.0591449849, -0.0496771187, 0.0158028696, -0.0533373281, -0.0428107679, 0.0612177923, -0.0529225431, 0.0617280230, -0.0107412487, 0.0336591564, 0.0559880324, -0.0372900143, -0.0251623709, -0.0538350157, 0.0240130182, -0.0344166383, -0.0236620829, -0.0430239961, -0.0038718628, 0.0026047670, 0.0621173494, 0.0803894401, 0.0408103652, -0.0670318007, -0.0313815847, 0.0369022973, 0.0217273347, -0.0395397320, -0.0914795324, 0.0460949689, -0.0405525118, -0.0347272083, -0.1109926775, -0.0322873741, -0.0466809683, 0.0143753607, 0.0686515272, -0.0364090241, -0.0588339195, -0.0229167975, -0.0087182540, -0.0921627507, -0.0472734086, 0.0263573918, 0.0423702225, 0.0435082801, 0.0857509449, 0.0059579993, -0.0217528902, 0.1212512404, 0.0740337148, -0.0638315454, 0.0065991841, -0.0037871394, 0.0011791715, 0.0412529148, 0.0387321822, -0.0391244218, 0.0398295410, -0.0120630609, -0.0220051985, 0.1053935662, 0.0586016662, -0.0563842431, -0.1055463403, -0.0559541956, -0.0832899064, 0.0482786298, -0.0143383052, 0.0991378725, 0.0320125222, -0.0942222700, -0.0773073360, -0.0567790717, 0.0513442121, -0.0217580702, 0.0466880314, 0.0909930542, -0.0414038040, 0.0137166418, 0.0304353852, -0.1016117707, 0.0032836832, -0.0413702615, 0.0402859673, -0.0371011645, -0.0004351987, -0.0618161447, 0.0389885008, 0.0639064535, -0.0243277550, 0.0097086914, 0.0332180709, 0.0107688764, 0.0177846216, -0.0054575899, -0.0392281525, 0.0516204946, 0.0228158534, -0.0192353427, -0.0408071317, -0.0068617258, 0.0862258971, 0.0272217207, -0.0160418525, 0.0251004864, -0.0662093833, 0.0828563422, 0.0983014256, 0.0314108431, 0.0150558334, 0.0635893717, -0.0796390101, -0.0266154353, 0.0052601243, 0.0903400183, 0.0508700758, 0.1178677827, 0.0420918576, 0.0963342339, -0.0411799327, 0.0401887782, 0.0686267540, -0.0267164670, 0.0233516879, 0.0079089366, 0.0557903908, 0.0488022082, 0.0169529505, -0.0004502166, 0.0852203518, 0.0039139334, 0.0495807417, 0.0120082218, -0.0681249052, 0.0410139412, 0.0284196697, -0.0338201411, -0.0826494694, -0.0530923791, -0.0091631729, -0.0986124724, -0.0098035634, -0.0691948757, -0.0464380719, -0.0523880720, -0.0202999134, -0.0807857513, -0.0359059051, -0.0352099203, 0.0018923727, 0.0334757455, 0.0909364596, 0.0018048642, -0.0380420126, 0.0944561586, -0.0613229796, 0.0520260967, -0.0421838798, 0.0384018272, -0.0788806304, -0.0024555561, 0.0269278828, 0.0959528387, 0.0560376383, -0.0089388117, -0.0144258728, 0.0800517723, -0.0278137289, -0.0557566136, 0.0537747517, 0.0718220547, 0.0768031329, -0.0886123180, -0.0410731211, -0.0237022676, 0.0441199318, 0.0010022470, 0.0131968269, 0.0996621028, 0.0723369792, -0.0517172590, -0.0702201352, 0.0153690521, -0.0128960162, -0.0569065250, 0.0472907797, -0.0629733726, 0.0513944738, -0.0521951579, 0.0567038544, -0.0076084067, -0.0340857804, -0.0085052298, -0.0369509272, -0.0620883815, -0.0310730338, 0.0806886628, 0.0382970944, -0.0109990826, 0.0247756056, -0.0222699102, -0.0022030196, -0.1022945493, -0.0232699495, -0.0644319057, -0.0609833784, 0.0187986493, 0.0511248447, -0.0061216839, -0.0448909700, -0.0880710259, 0.0200692378, 0.0715084076, 0.0242165625, -0.0475699119, -0.0109925540, -0.0803504810, 0.0339736342, -0.0215584263, -0.1048788205, 0.0996917039, 0.0727839619, -0.0004923816, -0.0871212333, -0.0135052549, -0.0316028111, -0.0400252938, -0.0166348144, -0.0113803511, -0.0385125987, -0.0300960746, 0.0005092270, -0.0283189826, 0.0104670450, -0.0621269420, 0.0671327934, -0.0648750886, 0.0099453554, 0.0123763224, 0.0385362245, -0.0246649794, -0.0262339488, -0.0258832760, -0.0346938930, 0.0926762596, 0.0664394200, 0.0804535151, -0.0774792060, 0.1139570773, -0.0147656547, 0.0173691977, 0.0076545007, 0.0632647723, 0.0132592078, 0.0546592921, -0.0138717769, 0.0001848534, -0.0733532459, -0.0880089402, 0.0548293740, 0.0000716442, -0.0446331091, 0.0362688527, 0.0584894121, 0.0044527771, -0.0664718971, 0.0680007115, 0.0069396882, 0.0679745674, -0.0446598642, 0.0145031670, 0.0293627381, -0.1026923656, -0.0203563515, -0.0061222869, 0.0649395660, 0.0093016876, -0.0044119507, 0.0382390618, 0.0452603996, -0.0704290494, -0.0111231655, -0.0424957089, 0.0673924014, 0.0507273450, -0.0580111705, -0.0204218961, 0.0425395779, 0.0158330966, -0.1034369096, -0.0051687630, -0.0218472723, 0.0262644868, -0.0885795131, 0.0266827680, 0.0376982056, -0.0828964114, 0.0172026381, -0.0256740693, -0.0678600892, 0.0687722787, -0.0707951710, -0.0820163339, 0.0432872213, -0.0360065848, -0.0830794424, 0.0429208539, -0.0351359248, 0.0114564160, -0.0155379726, -0.0520381108, 0.0199202374, -0.0474524759, 0.0303029250, -0.0082020313, 0.0212458167, 0.0240137428, 0.0028573698, 0.0179321188, -0.0061812745, -0.0534654297, -0.0248456970, 0.0636488870, 0.0447472632, -0.0049820170, 0.0798980594, 0.0672176406, 0.0165035054, -0.0095812595, -0.0563644320, 0.0111962352, 0.1080460697, 0.0098918648, 0.0299728252, 0.0789518654, 0.0293431636, 0.0628904477, -0.0295756273, 0.0846672580, 0.0516499430, 0.0351803452, 0.0197440591, -0.0811354071, -0.0500847660, -0.0144071840, 0.0570030361, -0.0205318928, 0.0456413738, 0.0184842832, -0.0093312357, 0.0521129631, -0.0548672676, 0.0198975913, -0.0065704286, -0.0457033701, -0.0572597794, 0.0275449008, 0.0303678997, 0.0300727263, 0.0385881886, -0.0438472033, 0.0541674495, 0.0005847630, -0.0390891768, 0.0725937784, 0.0383579917, -0.0179887544, 0.0828906819, 0.0078839920, -0.0082213841, -0.0297002960, 0.0266016461, -0.0528237596, -0.0441667251, 0.0216640662, -0.0262361187, -0.0436067022, 0.0466340035, -0.0786007568, -0.0687251687, 0.0067549101, -0.0570457727, -0.0593022071, -0.0678877831, 0.0761787072, -0.0652245954, -0.0187988430, 0.0584212281, 0.0168510564, -0.0031742123, -0.0761544555, 0.0113029592, 0.0216810778, -0.0398470052, 0.0267871264, 0.0181552283, 0.0735641569, 0.0739028826, -0.0366122648, -0.0497215204, -0.0089041041, -0.0646457002, 0.0331941694, -0.0642017052, 0.0554881245, 0.0174014326, -0.0307453033, 0.0202525835, -0.0282572899, 0.0426724702, -0.0414630063, -0.0709979758, 0.0486090034, -0.1068795845, -0.0980936885, 0.0763364509, 0.0802989975, -0.0315542109, 0.0363661386, 0.0122058047, 0.0399631150, 0.0264554098, -0.0958549902, 0.0173436571, -0.0303332582, -0.0399354473, -0.0963746011, -0.0707656965, -0.0303986426, -0.0130556654, -0.0412771739, 0.0330050513, 0.0441545695, 0.0215691496, 0.0616328046, 0.0655160546, 0.0149944788, 0.0763606727, -0.0731167570, -0.0378871560, -0.0739768744, 0.0651866198, 0.0696955100, 0.0170044880, 0.0232158285, 0.0166674592, -0.0576158874, -0.0314564258, -0.0421517640, -0.0291730873, -0.0703728274, 0.0502207354, -0.0613068640, -0.0062388158, -0.0307395533, -0.0192151163, 0.0491764434, 0.0041807746, -0.1012674794, 0.0023889521, -0.0363427252, 0.0102605959, 0.0349971950, -0.0087167667, 0.0495253690, 0.0194517616, -0.0752781853, 0.0314476453, -0.0150381513, -0.0672153756, -0.0273877457, 0.0080481730, 0.0591423847, -0.0064630988, -0.0911452994, 0.0233763345, 0.0371602923, -0.0902438313, 0.0335895196, -0.0472876243, 0.0353719443, -0.0995431095, -0.0439607166, 0.0426101461, -0.0590251535, 0.0583710410, -0.0025848486, -0.0259224921, 0.0241495613, 0.0115350503, 0.0111123919, -0.0246513188, 0.0717032030, 0.0039539952, -0.0257287417, -0.0160626061, 0.0175061189, -0.0010587340, -0.0665247515, -0.0297878794, -0.0969709009, -0.0809719041, 0.0457514673, -0.0196153969, 0.0550554283, -0.0076694586, -0.0331179090, 0.0792129338, -0.0847911611, -0.0300865602, -0.0688823238, 0.0056028962, 0.0019793604, -0.0191299617, -0.0006888512, -0.0161353257, -0.0614463985, 0.0250508823, 0.0671174154, 0.0105464440, 0.0464802645, 0.0554619208, 0.0382314958, 0.0926460326, 0.0126824845, 0.0329084508, -0.0544454083, 0.0060499199, -0.0394383967, -0.0030491655, 0.0315457284, -0.0084733088, -0.0879076421, -0.0391018204, -0.0298212804, 0.0278317276, 0.0241419040, -0.0416431949, -0.0905130655, 0.0057716579, -0.0193077531, -0.0221138913, -0.0043221214, -0.0258938652, 0.0657250583, -0.0533879027, 0.0593468100, -0.0650067031, 0.0709019601, -0.0217862166, -0.0071952878, -0.0021147132, -0.0288719591, 0.0667402744, 0.0622353926, 0.0580859445, 0.0679759830, 0.0479368344, -0.0080153113, -0.0497187153, 0.0277627781, -0.0040198122, 0.0650290996, 0.0600156784, 0.0747783259, -0.0559517108, -0.0144653413, 0.0710835606, -0.0969832540, 0.0031162871, 0.0525343306, -0.0850789025, -0.0600150973, -0.0090805236, 0.0590070449, 0.0355815776, -0.0047652475, 0.0007424521, 0.0148347449, -0.0563403890, -0.0353807025, -0.0479900762, 0.0335177705, -0.0092999032, -0.0162844062, -0.0388293080, -0.0356149785, -0.0290741846, -0.0742148459, -0.0753057003, -0.0644254461, 0.0473170839, -0.0492010713, 0.0375619642, 0.0219317209, -0.0709659681, -0.0464720167, -0.0133651467, -0.0353676304, -0.0772560835, 0.0300515834, 0.0755306706, 0.0360531546, -0.0344718806, 0.0053576380, -0.0997451097, -0.0605625324, 0.0674824566, -0.0212264750, -0.0009284843, -0.0094072027, -0.0390058607, -0.0085088545, 0.0294156615, 0.0386793688, 0.0683370158, -0.0307961758, 0.0303442478, -0.0750348195, -0.0219123792, -0.0011979337, -0.0016741969, 0.0647902489, -0.0367731787, -0.0163951758, -0.0630172491, 0.0523557067, -0.0620400943, -0.0074351518, 0.0506298989, -0.0525081530, -0.0067797173, 0.0158625133, -0.0300519913, 0.0299207065, 0.0005140475, 0.0019957931, -0.1007031277, 0.0458647832, 0.0700622499, 0.0391300209, -0.0125802346, 0.0788101181, -0.0085530644, -0.0004816874, -0.0460548401, 0.0140974959, 0.0624201819, 0.0500776954, 0.0643696934, 0.0755117908, 0.0125270532, -0.0237917174, 0.0090888301, 0.0649388954, 0.0533622019, -0.0201420859, -0.0475626923, 0.0654265881, -0.0591418445, 0.0578697696, 0.0130331907, -0.0532457456, 0.0252610166, 0.0316220671, 0.0682621151, 0.0377580225, 0.0852811188, -0.0180506781, -0.0836381540, -0.0088956542, 0.0669163764, -0.0596258715, -0.0195476450, -0.1018404365, -0.0597965568, -0.0491890460, 0.0419577621, -0.0893172696, 0.0215523802, -0.0427800231, 0.0473468117, -0.0231437571, -0.0164638497, 0.0124228885, -0.0343095921, -0.0397455506, 0.0495636947, 0.0286637712, -0.0443349294, -0.0114465151, 0.0794954821, 0.0410720222, -0.0538309477, 0.0347558409, 0.0850213468, 0.0392036922, -0.0656047687, -0.0550179705, -0.0054230690, -0.0351895429, 0.0082280003, -0.0033410033, 0.0435807034, 0.0277610961, -0.1022358686, 0.0371894203, -0.0033012379, 0.0095145013, 0.0687328056, 0.0125082815, -0.0484731607, -0.0186581071, 0.0700845271, 0.0782762542, 0.0909968913, 0.0276315995, -0.0692801774, 0.0442330875, -0.0789835751, -0.0289432593, 0.0618877411, 0.0233911183, -0.0517575815, -0.0257349368, 0.0793933719, -0.0294916984, -0.0070296717, 0.0452938899, -0.0150983306, 0.0446589440, -0.0479188263, 0.0328347348, -0.0203340072, 0.0058012092, -0.0292916466, -0.0814192444, -0.0377814025, -0.0339183472, -0.0192536432, 0.0591652803, 0.0040046852, 0.0215569325, 0.0467461571, -0.0133029725, -0.0105730137, -0.0212218575, -0.0641900077, 0.0204887725, -0.0613715015, 0.0559628978, 0.0106533486, -0.0716271698, -0.0772396550, -0.0483540930, 0.0973698348, -0.0992610529, -0.0345690474, -0.0295577440, 0.0503077880, -0.0169719961, -0.0192770921, -0.0881972015, 0.0027672262, -0.0476045907, 0.0308086518, -0.0579621382, 0.0799693018, -0.0191156883, 0.0615527704, 0.0534916036, -0.0795316398, -0.0222415999, -0.0268193278, 0.0547085963, -0.0441594943, -0.0729232058, 0.0845405087, -0.0157218333, 0.0127073247, 0.0515566356, 0.0527349003, -0.0671433508, -0.0837175846, 0.0652443841, -0.0157834329, -0.0648899451, -0.0047932793, 0.0774873346, 0.0294395350, -0.0613410585, -0.0846344903, 0.0918225870, -0.0571501739, -0.0327663943, 0.0423868299, 0.0367507301, -0.0704601109, 0.0867270529, 0.0438156240, 0.0660788268, -0.0196327139, -0.0656826571, -0.0997147262, 0.0313292928, 0.0205478575, 0.0309988726, -0.0022709526, -0.0071239504, 0.0820671469, 0.0017520339, -0.0649417564, 0.0705846921, 0.0255806595, -0.0222333111, 0.0589350723, 0.0316374302, -0.0492848568, -0.0405878052, 0.0646721646, -0.0444154330, -0.0568888597, -0.0000703815, 0.0989568010, -0.0375372991, 0.0116658388, 0.0044627804, -0.0452534147, -0.1063532978, -0.0797992274, 0.0439840667, 0.0033772036, -0.0321931094, -0.0451031402, 0.0330066793, -0.0955552831, -0.0584865250, 0.0925144032, 0.0512883291, 0.0952543989, -0.0583648607, 0.0532556511, -0.0780637413, 0.0999506116, -0.0640092343, -0.0902122855, -0.0396770686, -0.0887604803, 0.0880166069, 0.0270917825, -0.0369115472, -0.0784275606, -0.0029391656, -0.1083275229, 0.0558882840, -0.0848646238, 0.0178819075, -0.0048138811, -0.0067677232, 0.0101712886, -0.0735193640, -0.0038115080, -0.0283692498, -0.0896661654, -0.0234522410, 0.0215908084, 0.0015516519, -0.0573170446, 0.0524765588, 0.0674673021, 0.0765831098, -0.0696585327, 0.0158419423, 0.0419521667, 0.0674844384, 0.0169069320, -0.0825083852, -0.0190750975, 0.0534629971, -0.0275702402, -0.0053525446, -0.0537376218, -0.0465628207, -0.0608913526, 0.0803299546, 0.0402254723, -0.0228188280, 0.0522763729, -0.0188613106, 0.0453080274, 0.0626903623, 0.0325780772, -0.0559882410, 0.0593850091, -0.0268558376, -0.0148327686, -0.0125015909, -0.0698725209, -0.0245698579, -0.0894994438, -0.0360668078, 0.0298726894, -0.0994742140, -0.0120380903, 0.0586449616, -0.0408922434, -0.0052565634, -0.0434613004, 0.0549764745, -0.0294670891, 0.0121287489, -0.0600230210, -0.0538571216, 0.0082644746, 0.0398898087, -0.0524275191, -0.0672555938, -0.0665131658, 0.0499690138, 0.1040417925, 0.0676453486, -0.0524265580, 0.0416641086, -0.0089691132, 0.0515066981, 0.0469902903, -0.0322909728, -0.0923593193, 0.0262133218, 0.0149290310, 0.0371116884, 0.0271069501, 0.0144167980, 0.0539876372, 0.0391085595, -0.0271481648, 0.0329497457, -0.0269341134, 0.0104374178, 0.0468671024, -0.0792726800, -0.0183525458, 0.0107575972, -0.0748203471, -0.0391650423, -0.0040442483, 0.0807115883, -0.0353032388, -0.0705781505, 0.0317064263, -0.0389587916, -0.0637174174, 0.0453236774, 0.0117562367, 0.0584836155, -0.0645345300, 0.0037913974, 0.0029742231, -0.0132807298, 0.1056402028, -0.0102227032, -0.0952254981, -0.0183309093, -0.0096805263, -0.0380588546, -0.0942122564, -0.0809862912, 0.0582366399, -0.0189402234, 0.0795927793, 0.0336991064, -0.0278808363, 0.0162976570, -0.0744702294, 0.0384041183, 0.0142596355, -0.0241463166, 0.0666698068, 0.0393721908, -0.0339960009, -0.0345968194, 0.0368802622, -0.0814286619, -0.0743081495, -0.0266229045, -0.0532155521, 0.0115331393, 0.0068564112, 0.0191255864, 0.0522923544, -0.0878789052, -0.0254957322, -0.0499572121, -0.0292032063, 0.0050331331, -0.0555086285, 0.0173054039, -0.0504363775, -0.0149970632, 0.0147601767, 0.0129558463, -0.0000670958, 0.0184107013, -0.0715589672, -0.0530575626, -0.0636886656, -0.0305607282, 0.0762706101, 0.0400494523, -0.0380967520, 0.0767018348, 0.0005926790, 0.0571005084, 0.0882341787, -0.0753303692, 0.0053057061, -0.0372529961, 0.0555768162, -0.0356874131, -0.0435166657, -0.0089665875, -0.0304681938, 0.0628893673, -0.0451295078, -0.0629944950, 0.0281214565, -0.0175067056, -0.0542624407, -0.0167035740, 0.0061614760, 0.0335072689, 0.0286720134, -0.0059128790, 0.0246736594, -0.0218035858, -0.0252018310, 0.0061094426, 0.0392534398, 0.0678622201, 0.0830629468, -0.0340791717, 0.0677873194, 0.0281037893, 0.0891754106, -0.0008850506, 0.0280872118, 0.0068841269, 0.0628040880, -0.0229536593, -0.0021596891, 0.0177268386, -0.0273425449, -0.0422891900, 0.0317383036, 0.0462029688, -0.0178724043, 0.0295141190, 0.0583541878, 0.0627905130, 0.0319431983, -0.0153392358, -0.0167615674, 0.0966060758, -0.0407661125, -0.0251381081, -0.0385260060, 0.0381027870, -0.0774778649, 0.0294478722, 0.0042399680, 0.0312266070, -0.0236478578, 0.0645670220, 0.0444228537, -0.0416914783, -0.0545875616, 0.0191030614, 0.0325157084, 0.0884747356, -0.1042361334, 0.0126189170, 0.0757646561, 0.0705608577, -0.0741437152, 0.0090077100, 0.0267775785, 0.0422725827, 0.0428093523, 0.0464705527, 0.0398181677, -0.1112175956, 0.0287488289, -0.0452909246, 0.0022244989, 0.0320526510, -0.0158212632, -0.0543334596, 0.0121488869, -0.0831959322, -0.0221184567, -0.0772894397, -0.0719610155, 0.1041106060, -0.0366544612, 0.0045527685, 0.0117224678, -0.0557840578, 0.0874836966, -0.0146085164, 0.0517135821, -0.0339365713, 0.0762558803, -0.0176163651, -0.0500447936, 0.0981917530, 0.0513665862, -0.0294101872, -0.0284677856, 0.0963030607, -0.0641243458, 0.0031535320, 0.0786684826, 0.0992395431, -0.0706608966, 0.0972346514, -0.0269797649, -0.0452387445, -0.0720757693, -0.0225861352, -0.0208714884, 0.0997492597, -0.0016681686, 0.0019430366, 0.0122745186, -0.0504907593, -0.0566698574, 0.0443497710, 0.0658720657, -0.0262616035, -0.0372208618, -0.0488476418, -0.0987673402, -0.0514459349, 0.0177005529, 0.0521185957, 0.0822312459, -0.0306916013, -0.1162585989, 0.0101895053, 0.0186168402, 0.0341335498, 0.0966797546, -0.0403133109, -0.0126756225, -0.1213264838, 0.0004740401, -0.0345586352, -0.0823161975, 0.0471280254, 0.0840486810, -0.0315166675, -0.0162226651, 0.0564355999, 0.0463442840, -0.0564854965, -0.0397524014, 0.0804356337, -0.0688888282, 0.0187980421, -0.0582023337, 0.0658167228, 0.0825701803, 0.0396394506, 0.0231188666, -0.0479881950, -0.0592984594, -0.0435618162, -0.0985209420, 0.0140393833, 0.0366612375, -0.0067506959, -0.0263487399, 0.0176498592, 0.0415894762, -0.0802865624, -0.0179988518, 0.0587917939, 0.0382318310, 0.0135148037, 0.0916692168, 0.0631246716, -0.0340545997, -0.0562459491, 0.0488192365, 0.0022413288, -0.0881492496, 0.0213270225, -0.0371046290, -0.0383787304, -0.0918633640, 0.0529954620, 0.0540331528, 0.0894650593, -0.0090280147, 0.1097393557, -0.0951323137, -0.0564853139, -0.0429232419, 0.1004903391, -0.0056277863, -0.0619705282, -0.0577629842, 0.0248520132, 0.0758235827, 0.0150028942, 0.0549179353, -0.0708897784, 0.0079552857, 0.0041706613, 0.0320991725, 0.0689093620, -0.1013296247, 0.0097461799, 0.0152606266, -0.0954257622, -0.0549240746, -0.0591784567, 0.0043495251, 0.0392152891, 0.0356461853, 0.1132900566, 0.0317552127, 0.0010058387, -0.0296420641, -0.0191348027, 0.0607001260, -0.0454971567, -0.0299530476, 0.0178627074, 0.0179035347, 0.0656295121, -0.0683029741, 0.0635908842, -0.0406540893, -0.0404850356, 0.0336529873, -0.0023180963, 0.0052753547, -0.0105599128, -0.0548721626, 0.0288527012, 0.0972836539, 0.0307077840, 0.0013211608, 0.0708189383, -0.0850634202, -0.0481647477, 0.0557933040, -0.0303129405, 0.0089717358, -0.0565680303, -0.0106177935, 0.0117711555, -0.0591990836, -0.0152269686, -0.0446328223, -0.0226833597, -0.0658897683, -0.0035955005, -0.0565075837, 0.1082588136, 0.0287151262, 0.0326079652, 0.0191796292, 0.0781713352, -0.0817060247, 0.0165855940, 0.0347611494, 0.0805189684, -0.0740543604, -0.0010066788, -0.0449773073, 0.0242117904, 0.0703190938, 0.0470179208, 0.0352627300, -0.1113518700, -0.0454153903, 0.0220977291, -0.0155042401, -0.0828973576, -0.0332045257, -0.0578653701, -0.0657123923, 0.0553380065, -0.0467787124, 0.0334235318, 0.0350154638, -0.0479970388, 0.0325146094, -0.0351466611, -0.0927766412, -0.0081103267, 0.0237296447, -0.0978434086, 0.0750604495, 0.0679113641, -0.1030525938, 0.0598716624, -0.0403069742, -0.0519222505, -0.0467436984, -0.0241057742, -0.0077773025, 0.0021272954, 0.0166610293, 0.0299565084, 0.0706455261, 0.0042742048, -0.0372800492, 0.0378559269, 0.0272235945, -0.0550476462, -0.0411107615, 0.0209755059, -0.0285465363, 0.0562806763, -0.0944140702, -0.0070432923, -0.0465204492, 0.0236486085, -0.0925427899, 0.0571672469, -0.0484803580, 0.0285459291, -0.0246761646, 0.0883743912, 0.0810871124, 0.0831854194, -0.0726052374, 0.0613592416, 0.0283795651, 0.0564103462, -0.0437334813, 0.0081653893, -0.0551687293, -0.0130346930, -0.0680636242, 0.0494047999, -0.0765949488, 0.0229480695, 0.0561230741, 0.0182766095, 0.0609175637, -0.0150322514, -0.0430630520, -0.0696544722, -0.0168107171, 0.0373756401, 0.0325606540, -0.0937299430, -0.0292817857, 0.0216632225, -0.0098199025, -0.0381927267, 0.0299450643, 0.0607196689, 0.0042424812, 0.0394821949, -0.0207999423, 0.0375260673, -0.0513340421, 0.0366562493, 0.0679254234, 0.0469735265, -0.0452728458, 0.0231608134, 0.0024757104, -0.0365118608, 0.0960343033, -0.0586961918, 0.0256960820, 0.0832247734, 0.0476377048, -0.0490499027, 0.0005042769, -0.0418716855, -0.0231038369, -0.0207468569, 0.0919061974, -0.0671223253, -0.0342715867, -0.0489466041, 0.0160012506, -0.0297100935, -0.0737221837, 0.0796674788, 0.0324325599, 0.0781810656, -0.0305133481, 0.0518804602, 0.0244026463, 0.0416866653, -0.0255747121, -0.0423071980, 0.0387759618, 0.0797058567, -0.0549080595, -0.0420237482, -0.0157866832, -0.0657928362, 0.0524562821, -0.0164097548, 0.0295201503, 0.0375018530, 0.0575958826, -0.0964234099, -0.0505603179, -0.0367342681, -0.0198377930, 0.0544452630, 0.0343427286, -0.0375708453, 0.0807634518, -0.0090199346, 0.0274089389, 0.0373886451, -0.0149488226, 0.0290510897, 0.0213905443, 0.0484040454, -0.0529850833, -0.0082945172, -0.0545433424, -0.0128970677, -0.0244766809, 0.0118274866, -0.0426016897, -0.0540248416, -0.0467012450, 0.0005451645, 0.0704314038, 0.0878442749, 0.0532511435, 0.0295814779, 0.0189242847, -0.0396347679, 0.0534478314, 0.0654708818, 0.0578237623, -0.0871956125, -0.0104635051, 0.0301426649, 0.0792870224, -0.0441481844, 0.0218460597, -0.0295709278, -0.0180470347, 0.0617714860, -0.0212925468, -0.0924630538, -0.0410918146, 0.0345683694, -0.0071198884, 0.0227102898, 0.0386670679, 0.0389398858, 0.0564344339, 0.0248965696, 0.0844186023, 0.0350405797, 0.0302383155, -0.0119282724, -0.0395479538, -0.0103726340, -0.0118646296, -0.0721335411, 0.0532280728, -0.0042682262, -0.0007993669, -0.0496946573, 0.0068200114, -0.0792957246, -0.0873437151, 0.1020429954, 0.0539327525, -0.0219331738, -0.0205150042, -0.0461356603, -0.0054579149, 0.0227243453, -0.0594426878, 0.0417022072, 0.0814080760, -0.0373294577, 0.0784065351, 0.0680235028, -0.0209150873, -0.0366248637, -0.0376188271, -0.0683316886, -0.0721669868, -0.0847721919, 0.0789224654, 0.0803171322, -0.0052608666, -0.0102908071, 0.0000989990, -0.0260966532, -0.0526961945, 0.0012019682, -0.0454124622, -0.0998132974, -0.0195259769, -0.0795690343, 0.0141377039, 0.0342042856, -0.0303256456, -0.0390560515, -0.0412790030, -0.0800148472, -0.0447062403, 0.0575876422, -0.0260245595, 0.0083640553, 0.0062033827, 0.0095700147, 0.0167107545, 0.0317683779, 0.0162015762, 0.0576061234, 0.0335150957, -0.0174073353, 0.0444377325, 0.0191492457, -0.0678552613, -0.0326263197, 0.0627373159, -0.0200409926, 0.0543205217, 0.0656056404, 0.0508714058, 0.0712427497, -0.0896834731, 0.0912959352, -0.0662788153, 0.0360350460, -0.0672457069, -0.0089071151, 0.0443383045, 0.1134978682, -0.0195936821, 0.0437632538, 0.0081291320, -0.0131396148, 0.0509423390, 0.0512123406, -0.0608313009, -0.0789598599, -0.0461366810, 0.0068521071, -0.0445632041, 0.0294092949, -0.0280857105, -0.1090279147, 0.0488206670, 0.0497275293, -0.1017646566, 0.0104983523, -0.0029276498, 0.0466229469, 0.0473341309, 0.0278019737, 0.0520337224, -0.0069873007, 0.0446953028, -0.0333357975, 0.0788645372, -0.0081133898, 0.0258942712, -0.0276166201, 0.0356450528, 0.0396445058, -0.0746745914, -0.0593872890, 0.0424566343, -0.0268553942, -0.1034009084, 0.0800005868, -0.0307446960, 0.0509666242, 0.0088913152, 0.0841951519, -0.0383354686, 0.0696039796, -0.0351308659, -0.0024054570, -0.0425914563, -0.0388178006, 0.0592092164, -0.0292722434, -0.0098440703, -0.1046701074, 0.0356557444, 0.0851208121, -0.0399092250, -0.0481089093, -0.0984260663, -0.0016406433, 0.0359463245, 0.0469321050, -0.0821721479, 0.0890302882, 0.0199830402, 0.0642594397, 0.0245449729, 0.0259546321, -0.0460844040, 0.0420612358, 0.0119024795, -0.0139032528, -0.0397325121, -0.0388957337, -0.0360265300, 0.0241065528, 0.0251847729, -0.0365743749, -0.0511479527, 0.0014647907, 0.0349246673, -0.0036493065, -0.0387587771, 0.0093752677, 0.0288327876, 0.0577621236, 0.0661982149, -0.1025435254, 0.0812994987, 0.0426055677, -0.0883603543, -0.0764340535, -0.0936647654, 0.0033893706, -0.0162592065, 0.0722545832, 0.0383298956, 0.0312598608, 0.0460457690, 0.0725147501, 0.1166583523, 0.0324583128, -0.0129483351, -0.0366900973, 0.0593393184, -0.0612888373, -0.0346941799, 0.0940185636, 0.0959826708, 0.0792311281, -0.0425668061, -0.0325933099, 0.0324145555, -0.0780323520, -0.0794125646, -0.0338408202, -0.0171348583, 0.1083927974, -0.0057903226, -0.0561365224, 0.0699895099, 0.0123765562, -0.0013446065, -0.0264805518, 0.0380311459, -0.0438894890, -0.0255541503, 0.0773571730, -0.0591431856, -0.0014230467, 0.0798516423, 0.0577454157, -0.0173189547, 0.0426489897, -0.0308962893, 0.1013727859, 0.0422373973, -0.0362225249, 0.0704475045, 0.0015991071, -0.0691346079, -0.0260345750, -0.0820973888, -0.0469164364, -0.0115730604, 0.0123160053, -0.0298282858, 0.0852093101, 0.0027073040, 0.0484579429, 0.0341372900, -0.0293273795, -0.0544956885, 0.0319651105, 0.0178448968, 0.0005105049, 0.0256852545, -0.0680445805, 0.0387051068, -0.0688042566, -0.0731531754, 0.0597930029, -0.0672479719, -0.0042861034, 0.0100631472, -0.0373071954, -0.0274266377, -0.0061294525, 0.0016675676, -0.0428509861, 0.0653631091, -0.0822821483, 0.0058874786, 0.0135730142, -0.0616967604, -0.0249454696, 0.0131599903, -0.0462956876, -0.0320070796, -0.0717724934, 0.0354829244, -0.0611601435, 0.0483572036, 0.0368883908, -0.0245941170, -0.0486464240, -0.0861436799, 0.0099677378, -0.0500763692, -0.0569637083, 0.0713830963, 0.0390132256, -0.0502870120, 0.0775008276, 0.1205190942, -0.0960945934, -0.0261827838, 0.0334569067, 0.0491640605, 0.0434052236, 0.0914645270, 0.0531369001, 0.0255666543, 0.0730188787, -0.0596377701, -0.0064219106, -0.0842123404, -0.0414253250, 0.0005638343, -0.0227243472, -0.0959395841, -0.0281876791, 0.0895915926, 0.0171678960, 0.0413203202, 0.0532068722, 0.0850923955, 0.0529728383, 0.0192341916, 0.0421163887, -0.0362502038, 0.0165973194, 0.0378327854, 0.0162226297, -0.0694986358, 0.0772013292, 0.0195374712, 0.0813086778, -0.0651702657, -0.0298158117, -0.0355884247, 0.0194403995, 0.0519182496, 0.1064070538, -0.0220996663, 0.0555791855, 0.0341913365, -0.0137824500, -0.0107817417, 0.0178158339, -0.0133502902, 0.0783352926, -0.0462955795, 0.0005692719, -0.0548944138, -0.0623001456, 0.0470804237, 0.0021724454, -0.0546848103, 0.0072900909, 0.0093751913, 0.0649766698, 0.0830256641, 0.0575802922, -0.0726399422, -0.0699542463, 0.0612298734, -0.0409580693, 0.0097793937, -0.0123698330, 0.0090351729, -0.0457703546, 0.0255903658, 0.0712290332, 0.0703351498, -0.0655649602, 0.0189952422, -0.0511230007, 0.0953611955, -0.0837477967, -0.0431811251, 0.0207929537, -0.0540665649, 0.0347024351, -0.0385994650, 0.0913488194, -0.0768771917, 0.0689115226, -0.0213791374, 0.0154093532, 0.0666535422, 0.0340919793, 0.0576343089, -0.0147251198, -0.0993592292, -0.0314294435, 0.1098158360, 0.0279790442, -0.0021309676, -0.0131544983, -0.0166781880, 0.0294042397, 0.0224009268, -0.0418377966, 0.0208661240, -0.0606896654, -0.0351056308, -0.0235830657, 0.0435610302, 0.1165551469, 0.0131310169, -0.0153881889, 0.0092468075, 0.0208425410, 0.0505868681, -0.0110118203, 0.0356126800, 0.0763968974, -0.0692668930, 0.0684444755, 0.0159860663, 0.0446995348, 0.0714309886, -0.0325297043, -0.0581992865, -0.0190779362, 0.0065312875, -0.0003251542, 0.0277614389, -0.0095769828, 0.0126863075, 0.0298740901, 0.0275819022, 0.0288856756, 0.0524386093, 0.0538247339, -0.0648182631, 0.0213028118, 0.0142387310, -0.0659673661, 0.0819086730, 0.0534616634, 0.0643400997, 0.0881773010, -0.0768748447, 0.0168525875, 0.0010895726, 0.0638771504, 0.0253602285, 0.0845492706, 0.0111075416, 0.0619827099, 0.0533978306, 0.0392886996, 0.0154143497, 0.0543666445, -0.0434515700, 0.0326848440, 0.0328737982, 0.0837330446, -0.0420832485, -0.0463963412, -0.0015680871, -0.0138848778, 0.0240574442, -0.0219196975, -0.0172526874, -0.0775864348, 0.0284540653, 0.0405845493, 0.0337421782, 0.0415767357, -0.0491649657, 0.0512420423, -0.0307451449, -0.0122122578, -0.0561576560, -0.0332366340, 0.0071980283, 0.0313878544, 0.0570006259, -0.0204407629, 0.0287214648, 0.0276194829, -0.0003590027, 0.0771735609, -0.0790593624, 0.0197505411, 0.0632959902, 0.0757548958, -0.0453224480, 0.0463887267, -0.0182609577, -0.0568803884, 0.0829735696, -0.0484410375, 0.0021939701, 0.0393723808, -0.0350737385, -0.0606180802, -0.0842383057, -0.0437284112, -0.0580189005, 0.0649869442, 0.0283687115, -0.0084688803, -0.0047040535, 0.0098268865, 0.0579885654, 0.0125341555, 0.0119139794, -0.0917083248, -0.0831915885, 0.0003535713, -0.0260975640, 0.0045796991, -0.0367583930, 0.0198692027, -0.0826752186, -0.0096119661, -0.0000576114, -0.0202785768, -0.0034085028, -0.0550554581, 0.0485103577, 0.0553685389, 0.0507932119, 0.0625025779, 0.0161837637, -0.0227181185, -0.0580825023, 0.0340319984, -0.0664675236, -0.0683407262, 0.0038778593, 0.0701581463, 0.0019689500, -0.0155841820, 0.0513998680, -0.0584380329, -0.0452122353, 0.0261129830, -0.0496878065, 0.0008401243, -0.0327435136, 0.0528209247, 0.0090242364, -0.0016169926, 0.0589869805, 0.0881726295, 0.0110376757, -0.0105070006, -0.0947622508, -0.0341926664, -0.0452124961, -0.0391109698, -0.0674014613, -0.0378627516, -0.0223004352, 0.0200979467, 0.0211937018, -0.0433204919, -0.0659597367, 0.0231765620, 0.0488250703, 0.0654039830, -0.0223486405, -0.0575619116, 0.0249870736, -0.0927967578, -0.0270021968, -0.0319646299, -0.0849575773, -0.0323003456, 0.0278723687, -0.0736382827, -0.0816961974, -0.0076020844, 0.0501597300, 0.0409635864, 0.0717635676, -0.0711100399, -0.0373638272, 0.0064761275, 0.0184063744, 0.0018765411, 0.0710635558, 0.0555080473, 0.0821094885, -0.0930429995, -0.0086223753, 0.0156077323, -0.0470436960, 0.0465239584, 0.0668442398, -0.0660021678, 0.0031000555, 0.0075197527, -0.0537110195, 0.0851114392, -0.0478729866, 0.0059790118, -0.0194449984, 0.0766234994, 0.0391192809, 0.0325957946, 0.0384177491, -0.0215329845, -0.0046533453, 0.0695966855, 0.0127001042, 0.0630915463, -0.0934242457, 0.0266831219, -0.0024543134, -0.0908172280, -0.0630693063, 0.0466872901, 0.0603085235, -0.0810170993, -0.0926998034, 0.0696445554, 0.0854741931, 0.0682581589, -0.0570008457, 0.0504075326, -0.0402695723, -0.0254795980, -0.0873438343, -0.0008621018, 0.1125593185, 0.0112913512, -0.0484781079, -0.0560605489, 0.0950683132, -0.0697268695, -0.0711899102, 0.0461205766, -0.0553105250, 0.0222982839, 0.0762236789, -0.0222522505, 0.0081001185, -0.0357604511, -0.0370354317, -0.0561170951, 0.0968576148, 0.0276932623, -0.0168870799, 0.0269886069, -0.0090738619, -0.0442083292, 0.0713891685, -0.0485368334, -0.0021683888, 0.0801160112, -0.0034726374, -0.0211504567, -0.0316443555, 0.0048793741, -0.0536791533, -0.0771863312, 0.0013942975, 0.0773842335, 0.0052271946, 0.0161307212, 0.0160806067, 0.0551356301, -0.0449027158, 0.0519175343, -0.0099699134, -0.0546827912, 0.0298846979, -0.0304662138, -0.0347819328, -0.0334198736, -0.0702299550, 0.0180317238, 0.0439404473, -0.0928245783, 0.0089188553, -0.0301109515, 0.0185012147, -0.0021411513, 0.0124603752, 0.0733338073, -0.0276380926, 0.0327611901, -0.0029356102, -0.0419642478, -0.0841281042, 0.0172551032, 0.0331245475, -0.0335705392, 0.1079770327, 0.0536420979, 0.0334406607, 0.0369999632, 0.0159124155, -0.0289669950, -0.0227271728, 0.0381016918, -0.0479006395, 0.0130598862, -0.0742080063, 0.0792412907, 0.0990680605, -0.0197201855, 0.0860194787, -0.1082271188, -0.0091560241, 0.0553265437, -0.0887289345, -0.0642334521, -0.0537501238, -0.0540174134, 0.0253138728, -0.0652298331, -0.0080781765, -0.0056610163, -0.0168109424, -0.0034065598, -0.0042790398, -0.0248150155, 0.0413700640, 0.0821506530, 0.0114784176, -0.0275774952, -0.0559457615, -0.0284642484, -0.0315758437, -0.0370753817, -0.0527589060, -0.0198704842, 0.1002714559, -0.0591372102, -0.1239197701, -0.0066031748, -0.0982367769, 0.0414148681, 0.0413203910, 0.0726821497, 0.0261075459, -0.0053178887, -0.0009613114, 0.0147464313, 0.0375021175, 0.0807740018, -0.0587619916, 0.0370620340, 0.0100389384, 0.0005875735, 0.0293584932, -0.0620408431, -0.0609543473, -0.0567499287, 0.0203176569, 0.0203615613, 0.0459264815, -0.0556230024, 0.0161170010, -0.0741201937, 0.0040931767, 0.1147696525, -0.0164317079, 0.0155535638, -0.0017884418, 0.0318816453, -0.1090656966, -0.0808820575, 0.0974322036, 0.1114487424, -0.0193172097, -0.0321747214, 0.1238273606, 0.0189286098, 0.0245926213, -0.0774041936, 0.0636397153, -0.0097961063, -0.0062251696, -0.1012189835, 0.1044903472, -0.0251464788, -0.0435624532, 0.0815442279, 0.0320555605, 0.0589998364, 0.0154760536, 0.0919951499, 0.0589274913, 0.1204490662, -0.0725910068, -0.0141480975, 0.1155881062, 0.1100295857, 0.0313565359, 0.0534818992, -0.0358015634, 0.0956065580, -0.0094679706, 0.0166989937, -0.0235531013, 0.0039270991, 0.0030799001, 0.0298741832, 0.0117869638, 0.0081693111, 0.0357802100, -0.0859716758, -0.0194547269, 0.0255809296, -0.0860719681, -0.0350040868, -0.0817867517, 0.0871930718, 0.0820753500, -0.0129602496, -0.0565196499, -0.0919498727, 0.0824269578, 0.1109228283, 0.0025842553, 0.0559731014, 0.0486188866, 0.0386777446, -0.0914415270, 0.0528082177, 0.0204374921, -0.0570744835, -0.0076583172, 0.0359799601, 0.0404643677, 0.0126590729, -0.0368041918, 0.0357224829, 0.0767574981, 0.0365847796, 0.1036035046, -0.0226208940, -0.0197984669, -0.0278568082, 0.0192811582, -0.0196374953, 0.0093539469, -0.0172953289, 0.0750055462, -0.0627480224, -0.0471207388, 0.0021078221, -0.0379889607, 0.0724177361, 0.0085464977, -0.0323426127, -0.0126911933, -0.0486106165, -0.1089701131, -0.0523890592, 0.0862383097, 0.0005786177, -0.0829249471, 0.0779950991, 0.0995400026, -0.0053486046, 0.0917276070, -0.0472666323, 0.0562870838, 0.0615073703, 0.0378425904, -0.0182671528, -0.1006383300, -0.0290525462, -0.0193222258, -0.0467466451, -0.0096552745, 0.0176585671, -0.0195304602, -0.0009569760, 0.0538650751, 0.0276840031, 0.0742171407, 0.0369604826, -0.0833744481, 0.0696955323, 0.0792035833, 0.0913604125, 0.0135085685, 0.0445057154, -0.0421809778, -0.0391379595, 0.0393519104, 0.0931593180, -0.0575857833, 0.0110520637, 0.0594241619, 0.0484940931, 0.0671451837, 0.0044906731, -0.0406052470, -0.0175974723, 0.0026494858, -0.0387723483, -0.0247270092, 0.0069153146, 0.0416418612, -0.0337790251, 0.0270742010, 0.0318580009, -0.0644311383, 0.0020582967, 0.0000770546, -0.0317493677, -0.0136541380, 0.0704226941, 0.0246945601, 0.0377840586, -0.0000432834, 0.0882200822, -0.0187447835, -0.0667739436, -0.0890730396, -0.0726842582, 0.0687834918, -0.0565887131, -0.0385958850, 0.0081723966, 0.0212339107, 0.0173770543, -0.0646938533, -0.0208400656, -0.0250888430, 0.0210336801, 0.0549993441, -0.0352458395, -0.0331984498, -0.0203209408, -0.0480742082, -0.0890924633, -0.0009564098, 0.0902914628, -0.0287614465, -0.0082174949, -0.0154598616, -0.0173758138, 0.0585088842, -0.0823846534, 0.0262784511, -0.0341968462, -0.0417539626, -0.0601383597, -0.0232725441, 0.0833961591, -0.0198511388, 0.0097312108, -0.0620565712, -0.0201802347, -0.0789369643, -0.0707085431, 0.0999368131, -0.0497913510, -0.1168962345, 0.0357748568, 0.0183204114, 0.1180293784, -0.0189835131, -0.0330266654, 0.0895466805, -0.0244389772, -0.0795225799, 0.0563768484, -0.0002873097, 0.0594939850, -0.0670214221, -0.1029357910, 0.1004001796, -0.0218268130, -0.0739142671, -0.0335665122, 0.0678026006, -0.0280246958, 0.0205463972, 0.1381433755, -0.0173456352, 0.0332413875, -0.0772090256, 0.0345648564, 0.0258163419, 0.0214661863, -0.1210122108, 0.0361800492, 0.0304281618, 0.0663967803, 0.0939338654, 0.0262505747, 0.1024956256, -0.1415333897, 0.0405669734, 0.0019044373, -0.0531165339, -0.1159957796, -0.0904045701, -0.0788377821, -0.0717814267, -0.0334782116, -0.0258542132, 0.0010858818, -0.0832864419, 0.0051078466, 0.0066487738, -0.1231231019, 0.0431609601, -0.0142202573, 0.0134637048, 0.0368913226, -0.0080245631, 0.0787589476, -0.0460394509, 0.0244018231, -0.0719877407, 0.0043022716, 0.0009333320, 0.0856063515, -0.0112382332, 0.0715537146, -0.0180542320, 0.0661672354, -0.0008248539, -0.0198586844, 0.0163948797, -0.0710274950, 0.1089079902, -0.0535042807, -0.0855540484, 0.0331943221, 0.0473181978, 0.0437951125, -0.0650719106, 0.0624094158, -0.0756823942, 0.0314083099, -0.0278873015, 0.0429759733, 0.0609591343, 0.0447193049, 0.0443671085, 0.0725426376, -0.0230097324, -0.0467738360, -0.0272746608, -0.0713385940, 0.0437120646, 0.0123804575, -0.0067530512, -0.0367045105, 0.0143621303, 0.0412779152, 0.0070353933, -0.0120791914, -0.0211522505, -0.0861768126, -0.0966271162, 0.0415295996, -0.0385278128, -0.0520990975, 0.0030157219, 0.0456801057, 0.0421263799, 0.0705098957, 0.0138340266, 0.0747434348, -0.0699409768, 0.0434026346, 0.0094858138, -0.0037063041, 0.0221286714, 0.0102007343, 0.0790495202, 0.0111264680, -0.0036872120, 0.0188346580, 0.0783994123, 0.0570572317, -0.0896844938, -0.0408132225, -0.0080162734, -0.0249324348, -0.0844768062, 0.0213189349, -0.0041888091, -0.0793767273, -0.0021040509, -0.0396427810, -0.0864238888, 0.0017325584, 0.0125739714, 0.0510029383, -0.0503236316, 0.0541928746, -0.0485263392, 0.0325828083, -0.0881002545, -0.0049881553, 0.0018829650, 0.0556155406, -0.0380051322, 0.0550500937, 0.0499033928, -0.0125893503, 0.0606114082, -0.0442291237, 0.0110196127, 0.0285789836, -0.0053137355, -0.0904423147, -0.0458612256, 0.0310193058, -0.0719443783, -0.0912695527, 0.0133472811, 0.0063519138, -0.0442846306, 0.0242536925, -0.0932247937, -0.0560579412, -0.0934940875, 0.0066348785, 0.0612875521, 0.0737759098, 0.0463757850, -0.0649991184, -0.0079392642, -0.0692930073, 0.0456396565, 0.0412238650, 0.0143786594, 0.0287521239, -0.0669023618, -0.0040277834, 0.0303042531, 0.0504791588, 0.0314499848, -0.0137263360, 0.0120441290, -0.0759455040, -0.0341023579, -0.0382251404, 0.0383910052, 0.0973518863, -0.0193537194, -0.0091719376, 0.0437773950, 0.0056514647, 0.0060596075, -0.0354961045, -0.0049099252, 0.0406950526, 0.0486748740, 0.0493431091, 0.0832815170, 0.0669843107, -0.0541637763, -0.0690982491, -0.0870355517, 0.0385107547, 0.0415674299, -0.0233300384, 0.0417672098, 0.0673593655, 0.0770150349, -0.0520266145, -0.0458155647, -0.0054810350, -0.0731810182, 0.1055786759, -0.0135113783, 0.0495415889, -0.1151758134, 0.0472493879, 0.0329088345, 0.0496362336, 0.0425241552, -0.0088140201, -0.0231095050, 0.0339221545, 0.0680458322, -0.0410377085, -0.0383718349, 0.0497100689, -0.0136824474, -0.0257938039, 0.0011299620, 0.0185100622, 0.0334337316, -0.0109866522, -0.0398521610, 0.0588213652, 0.0331860855, -0.0117103411, -0.0583838150, 0.0023074846, 0.0326433554, -0.0518436357, -0.0694583729, 0.0302546751, -0.0313077085, -0.0064064483, 0.0549984127, 0.0520560518, 0.0203604233, 0.0418969542, 0.0397199206, 0.0519307181, -0.0584369563, 0.0777695999, 0.0286978558, 0.0405695960, -0.0932655558, 0.0462244004, 0.0749919787, -0.0254497975, 0.0173530802, -0.0876618847, 0.1003186107, 0.0781033263, 0.0528653674, -0.0027320923, 0.0127351768, -0.0037655621, 0.0138088213, -0.0841988251, 0.0180719625, 0.0362386480, -0.0045410669, 0.0542992800, -0.0793406889, 0.0354448855, 0.0545959361, -0.0189284682, -0.0518393777, 0.0563986897, -0.0799309015, -0.0416050553, 0.0066956175, -0.0440250821, 0.0661037043, -0.0346518308, -0.0806069002, 0.0582113564, 0.0465626158, -0.0192992091, 0.0248461626, -0.0117938826, -0.0779137164, -0.0293756742, -0.0519223399, 0.0600388907, -0.0701749697, 0.0416532420, 0.0187291056, -0.0511750579, 0.0348193720, 0.0476121381, -0.0055995979, 0.0617706738, 0.0074642929, -0.0603892282, -0.0145777734, -0.0023718253, -0.0622567870, -0.0528733395, -0.0144435568, -0.0622411929, -0.0061103022, -0.0703210756, -0.0124773392, 0.0000053177, 0.0834208876, 0.0838232636, -0.0144958925, 0.0916250497, 0.0397490859, -0.0724733397, -0.0507821590, -0.0424531102, 0.0201048180, 0.0501539260, -0.0058870134, -0.0065428293, -0.0103953276, 0.0044632233, 0.0482746847, 0.0785668120, -0.0845231414, -0.0061658323, 0.0219313353, -0.0076570651, -0.0189011823, -0.0367726348, 0.0186179448, 0.0621011890, -0.0300015304, -0.0105206575, 0.0167184137, -0.0627075508, -0.0777023807, -0.0036563650, 0.0642240420, 0.0068230154, -0.0786426365, 0.0586929061, -0.0101079363, 0.0536364056, 0.0877271071, -0.0026030387, -0.0280936304, 0.0298781078, 0.0603494719, 0.0139549486, -0.0848593935, 0.0037094839, -0.0140478816, 0.0193726905, 0.0543345436, -0.0519046634, 0.0614780262, -0.0586952642, -0.0841177851, 0.0450344719, -0.0023224878, -0.0757552311, 0.0033866346, -0.0600954778, -0.0430277213, 0.0335135162, -0.0574346073, 0.0744090974, -0.0015410772, 0.0627995133, -0.0452940427, 0.0213062409, -0.0592522807, 0.0158275664, 0.0498049930, 0.0671359599, -0.0779966637, 0.0265624896, 0.0084721316, 0.0686501488, -0.0042034113, -0.0264730770, -0.0375782475, -0.0343106389, -0.0446506962, -0.0244254358, 0.0635108426, -0.0141092893, -0.0007346504, 0.0102113048, 0.0474409796, 0.0495600551, -0.0178078618, 0.0102011086, -0.0218635481, 0.0611330308, -0.0659683719, 0.0676771104, -0.0426184349, 0.0303172581, -0.0168136097, 0.0594653003, -0.0536327921, -0.0130398069, -0.0518705808, 0.0758472830, -0.0524568856, -0.0127882389, 0.0314232856, 0.0030607688, 0.0300665181, 0.0334105492, -0.0133677721, -0.0165296122, -0.0589802153, -0.0672386512, -0.0800703689, -0.0509154312, -0.0250832811, 0.0506615862, -0.0297656301, -0.0524967723, -0.0669909567, 0.0375143588, 0.0136064561, 0.0213306695, -0.0180639606, -0.0526616946, -0.0402823016, -0.0019723056, 0.0309237894, -0.0013117093, 0.0348884426, -0.0384293199, 0.0462139696, 0.0246044025, 0.0209361594, 0.0574328750, -0.0910839364, -0.0678588524, -0.0465545207, -0.0065142764, 0.0356306322, -0.0009194996, -0.0903245062, -0.0775989667, -0.0761832073, -0.0615969300, 0.0147625487, 0.0768604353, 0.0242589694, -0.0617728829, -0.0708328038, 0.0947241858, -0.0204958953, -0.0059177321, 0.0000519398, -0.0224265177, -0.0513506755, 0.0588540994, 0.0020637221, 0.0242968462, -0.0441919230, -0.0386162847, 0.0947147384, -0.0695643947, -0.0166014582, -0.0342891701, 0.0348414555, 0.0001028609, 0.0282099117, -0.0408818834, -0.0311150588, 0.0191397853, -0.0061981780, -0.0352715738, 0.0010656313, -0.0798096955, -0.0283705499, 0.0162885804, 0.0397303961, 0.0673733130, 0.0576711260, 0.0463676006, 0.0377304368, -0.0721974671, -0.0077881138, -0.0363736935, -0.0259848684, 0.0452720299, -0.0164673273, 0.0527698435, 0.0511668772, -0.0304562859, -0.0812982470, 0.0476745628, 0.0361959003, -0.0295616463, -0.0566378459, 0.0152853029, 0.0498343594, -0.0207297783, 0.0661714971, -0.0426265709, 0.0067590601, 0.0543992594, -0.0577421151, -0.0556282364, 0.0585096143, 0.0610185675, -0.0294060223, 0.0186775830, -0.0528007336, 0.0206383597, -0.0058787721, -0.0177453589, -0.0755596161, 0.0155290598, 0.0702175051, 0.0529808365, -0.0199278519, -0.0760189444, 0.0547864288, -0.0433656238, 0.0250736885, -0.0771845356, 0.0043521356, 0.0579020977, 0.0758044720, -0.0645371154, 0.0037324375, -0.0344911180, 0.0425401144, 0.0593799166, 0.0554978624, -0.0655372664, -0.0197329316, -0.0027472621, 0.0068477816, -0.0615268275, -0.0387144089, 0.0469071269, -0.0316851251, 0.0153435981, -0.0795202628, 0.0046946430, -0.0619277619, -0.0451193117, 0.0697669536, 0.0848818123, 0.0256660413, -0.0311205629, 0.0389773920, 0.0813094452, -0.0837150961, 0.0473226570, 0.0268161166, -0.0268345214, 0.0094497111, 0.0651234388, 0.0681198314, 0.0556233972, -0.0572413206, -0.0162428450, 0.0684466586, 0.0160446633, 0.0698988885, 0.0564862899, 0.0374088138, -0.0097553991, -0.0586136393, 0.0791593939, -0.0373749137, 0.0082241865, 0.0255663525, -0.0747822300, -0.0075820414, -0.0418175943, -0.0264890585, 0.0761511773, 0.0489927158, 0.0540619977, 0.0469573103, -0.0000514030, 0.0703736171, -0.0099714585, 0.0779885724, -0.0379930511, -0.0157830194, -0.0657745600, -0.0024189244, 0.0516666807, 0.0020786750, -0.0491907448, 0.0306632724, 0.0763022751, -0.1053457111, -0.0652835369, -0.0723929256, -0.0543765612, -0.0932766572, 0.0610846318, 0.0690527707, -0.0739354044, 0.0218428951, 0.0892362967, 0.0647331998, 0.0540708415, -0.0748487338, 0.0433596410, -0.0658933595, 0.0395226628, -0.1016482636, -0.0856646374, 0.0551812574, 0.0248562600, -0.0658362135, 0.0258915387, 0.0181171559, 0.0408301987, -0.0285272431, 0.0043493207, 0.0830420330, -0.0462541506, 0.0775954425, 0.0219179280, -0.0306632631, 0.0154456645, -0.0130741382, -0.0010971918, 0.0178482421, -0.0112173324, -0.0552566759, 0.0595582910, -0.0240473617, 0.0826050118, -0.0190040190, 0.0541024506, -0.0754489228, -0.0649924055, -0.0605411269, -0.0686668903, -0.0639803410, -0.0881767124, -0.0439563692, 0.0908868685, 0.0445144214, -0.0100803245, 0.0837176293, -0.0567113496, 0.0381443538, -0.0031934949, 0.0721876994, -0.0798433349, -0.0364020206, -0.0047747032, -0.0451911986, -0.0291933492, 0.0756500661, 0.0710233450, 0.0853324160, 0.0207144339, 0.0270480383, -0.0205727592, -0.0582937188, 0.0804252550, -0.0765564591, 0.1022953168, 0.0287754945, -0.0582910106, 0.0120094493, 0.0446566232, 0.0369664729, -0.0510776527, -0.0017597328, -0.0194836035, -0.0651315153, 0.0276563521, -0.0464125611, -0.0988037810, 0.0588333122, -0.0007867597, -0.0013303695, 0.0596470460, 0.0200225506, -0.0059273634, 0.0923905969, 0.0654996634, 0.0499611907, 0.0583665706, -0.0697000548, 0.0553606302, -0.0019422476, 0.0391816050, -0.0546069518, 0.0276632160, -0.0416771956, 0.0950720236, 0.0741256475, -0.0524155423, -0.0472551733, 0.0393571518, 0.0126362601, 0.0233339295, 0.0457271896, -0.0140695116, -0.0008893847, 0.0416051373, -0.0058693597, 0.0379540622, 0.0797577128, 0.0027716532, -0.0085847955, 0.0724186897, 0.0168109518, 0.0300184414, -0.0197760127, -0.0047678207, -0.0589446276, -0.0723287985, 0.0536464788, -0.0088178022, 0.0845208168, -0.0393348299, -0.0649628341, 0.0277488250, -0.0462842770, -0.0137578044, -0.0713690892, -0.0752300844, -0.0078174472, 0.0307184160, 0.0030982778, 0.0757361948, -0.0750984848, -0.0636320561, -0.0823980644, -0.0596084595, -0.0380841978, -0.0117279887, -0.0140608735, -0.0747063681, -0.0131372670, 0.0562191494, 0.1102847308, 0.0045204335, 0.0084179752, -0.0349111147, 0.0436994843, 0.0342132524, -0.0099151190, 0.0637789816, -0.0766548663, 0.0299075656, 0.0152013004, -0.0273596756, 0.0593964383, -0.0333379097, -0.0255133454, 0.0658387467, -0.0563526973, 0.0421804152, -0.0782047659, 0.0420108363, 0.0702751577, 0.0132316146, -0.0011618310, 0.0474325605, -0.0698848218, -0.0382831171, -0.0421823896, -0.0124080013, -0.0293177199, 0.0042885104, -0.0282326546, -0.0256989338, -0.0962753668, -0.0434341207, 0.0180811808, -0.0390540101, 0.0609532893, -0.0769267902, -0.0344134606, -0.0335346609, -0.0631231815, -0.0140718268, 0.0246228147, -0.0203357916, -0.0542180426, 0.0134225953, -0.0662770793, 0.0373562910, 0.0165634695, -0.0121481558, 0.0134422723, -0.0809903443, -0.0153782014, -0.0676615834, -0.0032115325, 0.0555211194, 0.0420236662, -0.0604311563, 0.0341237821, 0.0476137623, -0.0826565772, -0.0244195443, -0.0602381900, -0.0664873272, -0.0580307096, 0.0109974593, 0.0731432214, -0.0769461989, -0.0291273631, -0.0693993568, -0.0216705631, 0.0092987483, -0.0665448010, -0.0307790022, 0.0591373071, -0.0631234348, -0.0308485199, -0.0299894698, 0.0120922513, 0.0332740098, 0.0784514844, -0.0047116247, -0.0588151142, 0.0685854703, -0.0432694852, 0.0658045933, 0.0090965154, -0.0584590584, -0.0028810643, 0.0772641897, -0.0132566560, 0.0081800064, 0.0031478642, 0.0933631659, 0.0495015383, -0.0377788767, 0.0294231605, 0.0072762822, -0.0446785614, 0.0624612905, 0.0261293892, -0.0607174635, 0.0545486584, 0.0468543246, -0.0382789560, -0.0634709746, -0.0383167714, -0.0637273192, 0.0390610024, -0.0367231481, 0.0440477803, -0.0302676354, 0.0896236151, 0.0400766805, 0.0160764679, -0.0525199473, -0.0117909200, 0.0128203435, -0.0253195055, -0.0714266971, -0.0696320683, 0.0259361714, 0.0409594625, -0.0678456575, 0.0338089876, 0.0115622794, -0.0364327841, 0.0525311269, 0.0125882188, -0.0399343744, 0.0178514104, 0.0666425675, 0.0260012597, 0.0043318816, -0.0542665981, -0.0300362706, -0.0034949637, -0.0350973345, 0.0786436796, -0.0158839207, -0.0747107044, 0.0490842871, 0.0374865234, -0.0886582583, 0.0346217044, 0.0605156012, -0.0675822496, 0.0084257731, -0.0853055120, 0.0633473396, 0.0477292687, -0.0192614738, 0.0801847354, -0.0446841903, -0.0805498436, -0.1116093844, 0.0225001592, 0.0151817165, 0.0524113588, -0.0580698736, 0.0703852698, 0.0910320953, 0.0666422173, -0.0179990493, 0.0734294504, -0.0240763705, 0.0558145009, -0.0557022952, -0.0586843640, -0.0022818905, -0.0095661506, -0.0097240563, 0.0071892813, -0.0731808245, -0.0780820325, -0.0396879278, -0.0246064216, -0.0337207913, 0.0218700226, 0.0663870350, 0.0458053872, -0.0335942023, 0.0762411207, 0.0304462221, -0.0707898363, 0.0429848507, 0.0438418277, -0.0880768374, 0.0133768134, 0.0241173133, 0.0512895137, -0.0281058587, 0.0589646548, -0.0511860289, -0.0442831293, 0.0893299133, -0.0280681420, -0.0342868418, -0.0331069827, -0.0411337651, 0.0251972806, 0.0625955239, -0.0597240925, 0.0186380930, 0.0477202125, -0.0140341381, 0.0766382217, -0.0080413986, -0.0256261081, 0.0038834822, 0.0938237682, -0.0467455350, 0.0842463151, -0.0662147030, 0.0783291385, -0.0327545814, 0.0137824072, -0.0041568116, 0.0438265428, -0.0418298319, -0.0647411197, -0.0710557252, 0.0491072275, -0.0019151324, -0.0187455546, -0.0403050333, -0.0137764197, 0.0699821413, -0.0121485665, -0.0065781279, -0.0854375362, 0.0781275257, -0.0564209670, 0.0634317100, 0.0538194925, 0.0279980227, -0.0016119428, 0.0140019786, 0.0828223825, -0.0345555991, -0.0414020568, 0.0563204065, 0.0728499442, -0.0370711982, 0.0107728289, 0.0251662619, -0.0382813290, -0.0548311695, -0.0595755465, 0.0362799354, -0.0143001899, 0.0123322261, 0.0634277016, -0.0320545621, -0.0236059912, -0.0219910499, 0.0639977753, -0.0733480752, 0.0659605414, 0.0653720498, -0.0220308434, 0.0046701999, -0.0908730626, 0.0300114006, -0.0119452281, 0.0559891984, 0.0178907886, -0.0281016063, -0.0683081225, -0.0405440852, -0.0386076085, 0.0255849659, 0.0284961052, -0.0342119932, -0.0344183668, 0.0418666378, 0.0175063927, 0.0007386316, 0.0288027637, 0.0132314349, 0.0615216084, 0.0629500523, 0.0528859496, 0.0294992756, 0.0548853911, 0.0826668590, -0.0050225714, -0.0379472338, 0.0464866385, -0.0297885071, -0.0864613727, -0.0124496911, 0.0152345318, -0.0027540573, -0.0552317984, 0.0034693417, -0.0292845219, -0.0786784142, 0.0115953041, 0.0471702628, 0.0237321649, -0.0481968783, -0.0527822040, -0.0584687479, 0.0895331874, -0.0860578418, -0.0450008363, -0.0554424822, 0.0063390126, -0.0045099822, -0.0350858197, -0.0136181042, 0.0519704074, -0.0660353675, 0.0338131487, -0.0563628897, -0.0163833294, -0.1050865725, -0.0671194941, 0.0394486934, -0.0606337935, 0.0079952041, -0.0051286132, 0.0484704375, 0.0479977876, 0.0142936362, 0.0461286530, 0.0601255856, -0.0698789880, 0.0120989615, 0.0100735277, -0.0310640354, 0.0065773097, 0.0083058840, -0.0531402007, 0.0542998239, 0.0841992944, -0.0103036026, 0.0073880646, -0.0531520769, -0.0572503991, -0.0854818672, -0.0451438874, -0.0470199212, -0.0681954175, 0.0871960893, 0.0490331128, 0.0490220450, -0.0045978925, -0.0036040344, 0.0607739501, 0.0133993356, 0.0662228093, 0.0769450516, -0.0265405364, -0.0447996333, 0.0335649587, 0.0213800371, 0.0678120703, -0.0578749366, -0.0430200547, 0.0573162660, 0.0712183341, 0.0443078764, 0.0786505565, 0.0635096952, -0.0082273595, -0.0361034758, 0.0291149728, 0.0790742189, 0.0355833992, -0.0360099077, 0.0295907296, 0.0735574886, 0.0452588014, -0.0030059756, 0.0223411620, 0.0073793442, -0.0498203598, 0.0489794090, -0.0177160017, 0.0247047730, 0.0223609842, -0.0945827216, -0.0492306873, -0.0294986852, 0.0063506910, -0.0467979610, 0.0540625602, 0.0101130009, 0.0269019213, -0.0513172187, -0.0623791590, -0.0286136642, -0.0029010994, 0.0462632887, 0.0522438996, 0.0618767701, 0.0416751541, -0.0371682346, -0.0082912594, -0.0103970906, -0.0419623703, -0.0208210461, -0.0452274755, 0.0808097720, -0.0336081348, -0.0106198406, 0.0039290315, 0.0717097297, 0.0086873481, -0.0050596120, 0.0180242453, -0.0364538245, -0.0937987342, -0.0276530124, 0.0514015704, -0.0689113662, -0.0429750718, -0.0370169505, -0.0116429757, -0.0075398977, 0.0183931366, -0.0466303267, -0.0320074037, 0.0103519224, -0.0079535879, -0.0173161216, 0.0304915104, -0.0325707495, 0.0359036326, 0.0480374582, -0.0089760032, 0.0400752015, 0.0360178724, 0.0221885443, -0.0473471619, 0.0453891233, 0.0429199114, 0.0171228051, 0.0400882699, -0.0314415097, 0.0181719270, 0.0782331005, 0.0476075225, -0.0481038131, 0.0000681068, -0.0171159077, 0.0284600798, 0.0734894648, 0.0869728178, 0.1000473127, 0.0127717592, -0.0748997331, -0.0709147453, -0.0838156343, 0.0197963677, 0.0053766030, 0.0253768861, 0.0075402004, 0.0793559849, -0.0292028356, -0.0843221322, -0.0151407951, -0.0204136185, -0.0770873725, 0.0606706068, 0.0195503384, -0.1007450446, 0.0144300070, -0.0525710285, -0.0071353298, 0.0315598845, -0.0346048363, -0.0496650189, -0.0305588841, -0.0624386296, 0.0769794062, 0.0210953150, 0.0888165981, 0.0491601750, -0.0556891859, -0.0510244183, 0.0516472459, 0.1034629717, -0.0579809472, -0.0256840009, -0.0312533565, -0.0201680996, 0.0293395836, -0.0477798618, -0.0721715689, 0.0146989683, 0.0549123362, -0.0687292218, 0.0007923704, 0.0115669491, -0.0376800038, -0.1028000265, -0.0166672543, 0.0438490510, -0.0608734563, -0.0711314976, -0.0153774284, -0.0019653842, 0.0852807015, 0.1045165807, -0.0262558926, 0.0506242178, -0.0651408061, 0.0889597237, 0.0767266154, -0.0021737523, -0.0487433113, 0.0018236138, 0.0348199792, -0.0553442165, 0.0622930266, 0.0323190019, 0.0615447313, 0.0140390573, 0.0606447682, -0.0249236412, -0.0021176019, -0.0372865424, 0.0458357036, -0.0281011909, 0.0502102934, 0.0179226864, -0.0456668884, -0.0278137196, 0.0455494821, -0.0736916363, -0.0229005460, -0.0264167357, 0.0269503649, 0.0073709292, 0.0103813019, 0.0558385737, -0.0294111893, -0.0016094974, 0.0753314346, -0.0045719775, 0.0149323139, -0.0669135973, -0.0328189544, 0.0517224148, -0.0643530488, 0.0130661344, 0.0521896966, -0.0459860042, -0.0776487216, 0.0249742027, -0.0498318896, -0.0445854217, 0.0040129879, 0.0555106886, 0.0633552596, 0.0200950503, -0.0397371612, 0.0423526540, 0.0224406701, -0.0041514789, 0.0427695215, -0.0008379884, -0.0122317318, 0.0601099655, 0.0030230847, 0.0581290908, -0.0456745289, -0.0101764891, 0.0795837343, 0.0465689488, -0.0030112269, -0.0193943586, -0.0264657959, -0.0624841005, -0.0488672890, 0.0610948354, -0.0418614894, 0.0031418977, -0.0515895449, 0.0162618663, -0.0551597551, -0.0251412429, 0.0346827321, 0.0159222223, 0.0961773321, -0.0865948796, 0.0345546678, 0.0142747862, 0.0731780306, -0.0098544275, 0.0233531836, 0.0561709478, 0.0604182817, -0.0499126092, 0.0783490315, 0.0457560457, -0.0027815637, 0.0445081331, -0.0703517348, 0.0188335944, 0.0325572379, -0.0323556811, -0.0469819978, 0.0514214225, 0.0331157297, -0.0035938628, 0.0201575998, 0.0722305626, 0.0890742466, 0.0442705117, -0.0262068454, -0.0016207423, 0.0840475559, 0.0439807996, -0.0313129872, 0.0279401522, 0.0770007819, -0.0707942322, -0.0420276150, 0.0533031188, 0.0028565186, 0.0111865029, 0.0360185765, 0.0417203866, 0.0011562036, 0.0337446332, -0.0650828853, -0.0884511918, -0.0889815986, 0.0463071130, 0.0760488734, -0.0311024431, -0.1025148332, 0.0343459025, 0.0220515821, -0.0329984054, -0.0250129718, -0.0216759443, 0.0038294501, -0.0417002328, -0.0756095350, -0.0552922972, 0.0887186453, 0.0143221710, 0.0687316880, 0.0340619944, 0.0571372211, -0.0121979518, -0.0713374987, 0.0142720127, 0.0051552719, -0.0174010601, 0.0585532412, -0.0780569538, -0.0030608899, 0.0545602292, 0.0725778043, -0.0558904521, -0.0879230425, -0.0391027443, -0.0324843973, 0.0238447655, 0.0432661548, -0.0250443071, 0.0263623092, 0.0524505526, 0.0143141681, -0.0548662059, 0.0321618654, -0.0158972479, 0.0587483607, -0.0763292834, -0.0633136705, -0.0234915242, -0.0753705055, 0.0811881423, 0.0262640174, 0.0283318963, -0.0756655186, -0.0198905598, -0.0981477872, 0.0740550160, -0.0315305330, -0.0769035146, 0.0054974775, -0.0046263644, -0.0196611844, 0.0325475484, 0.0687617362, -0.0146872401, 0.0635157824, 0.0438266732, 0.0432000533, 0.0593251884, -0.0188470967, -0.0700690672, 0.0131731313, 0.0313998349, -0.0401710197, 0.0504646935, 0.0342154168, -0.0791791156, 0.0103985015, -0.0696335882, 0.0141620971, 0.0058393208, -0.0523348674, 0.0591876842, 0.0647178143, -0.0901298970, 0.0615658909, -0.0589454845, -0.0363513045, -0.0616499595, -0.0092648342, 0.0824415311, -0.0753930733, 0.0337772407, 0.0271563921, 0.0627785847, 0.0495985337, -0.0186908282, 0.0107488176, -0.0166512243, -0.0485067554, -0.0041506034, 0.0547502637, 0.0307135582, 0.0621997342, 0.0554386601, 0.0312454291, 0.0632894486, -0.0764224231, -0.0588075332, 0.0782854632, -0.0357482769, -0.0270611364, 0.0350613371, -0.0150127215, 0.0904961824, -0.0825529695, 0.0439897366, -0.0258212499, 0.0539963134, -0.0912765414, 0.0674578100, 0.0650965124, -0.0009516217, 0.0092804572, 0.0206697267, -0.0469672941, 0.0042907717, 0.0827835351, -0.0065829232, 0.0613231510, 0.0196969286, -0.0114810336, -0.0500017181, 0.0386727192, -0.0605285093, 0.0442170762, -0.0180285666, -0.0162897073, 0.0666514710, 0.0852365196, -0.0228033345, -0.0343769379, -0.0805313736, 0.0851875246, -0.0309252441, -0.0296471622, -0.0085651381, 0.0274459273, -0.0410844982, 0.0236709286, 0.0418819785, -0.0502775349, -0.0720137060, 0.0654531270, -0.0426843725, 0.0440370478, 0.0809733421, 0.0646711439, -0.0662861094, -0.0631454736, -0.0048768949, 0.0482944138, 0.0483158082, 0.0311193876, 0.0631817579, -0.0296836197, -0.0298344363, -0.0150731402, -0.0351054929, -0.0520871319, -0.0637282208, -0.0188402925, -0.0127193807, -0.0755519420, 0.0388360135, 0.0732113197, 0.0101093566, -0.0143480282, -0.0077143586, 0.0146855395, -0.0116277430, -0.1048506349, 0.0413346738, 0.0488379262, -0.0170262344, 0.0922980011, 0.0055305888, -0.0829090551, 0.0798093304, -0.0141189331, 0.0785389096, 0.0192139950, 0.0505403914, -0.0760976449, 0.0232273377, -0.0689169094, 0.0737293959, 0.0101753213, -0.0150799118, 0.0374011770, -0.0503241606, 0.0201162603, -0.0100727985, 0.0657659248, 0.0594329648, 0.0466901548, 0.0000464284, -0.0603054091, -0.0814327225, -0.0424625315, -0.0276081413, 0.0048265900, 0.0246153511, 0.0901370719, -0.0441385396, -0.0472350046, 0.0367425345, 0.0030198635, -0.0694419295, 0.0282134265, -0.0297303908, -0.0325902142, -0.0875756741, -0.1019901037, -0.0442014635, -0.0305768140, 0.0412982032, -0.0975347757, 0.0237941761, 0.0274858866, -0.0308575146, -0.0353583507, -0.0465010256, -0.0058137779, -0.0571264885, -0.0295999311, 0.0940902233, 0.0611294284, -0.0804592073, -0.0451660529, 0.0048726839, -0.0086183399, -0.0575873740, -0.0974418521, 0.0507664308, 0.0504931733, 0.0042166957, 0.0373986512, -0.0532975756, 0.0240401104, 0.0180861317, -0.0649244860, 0.0655622929, -0.0751336664, 0.0428160839, 0.0331678241, -0.0902084187, -0.1094112918, 0.0236869939, -0.0531612821, -0.0181723088, -0.0314306244, 0.1009580493, 0.0510591492, 0.1013842151, -0.0663913488, 0.0869911090, -0.0349625088, -0.0240790341, -0.0248156786, 0.0023025805, 0.0261324421, -0.0358688794, 0.0238726456, -0.0057007349, -0.0877167881, 0.0073369732, 0.0860280022, 0.0521091521, -0.0363891460, -0.0433213413, 0.0367328227, -0.0928441733, -0.0494448580, -0.0304483939, 0.0629505441, 0.0413531810, 0.0212567411, 0.0022084611, -0.0602065772, 0.0517967306, -0.0244631171, 0.0948128700, -0.0431950726, 0.0558235124, 0.0276632793, -0.0427305549, -0.0345936194, -0.0858021751, 0.0534963161, -0.0479517095, 0.0478172041, -0.0058480101, -0.0495793819, 0.0286654998, 0.0179476645, -0.0818030462, -0.0724834800, -0.0661100522, -0.0168798007, -0.0800969005, 0.0525363944, -0.0209895577, -0.0763895661, -0.0706105903, 0.0081686890, 0.0391206965, -0.0658399984, -0.0265138317, 0.0959498063, -0.0441371128, -0.0802101940, -0.0066023059, -0.0320926122, -0.0591151267, -0.0430738069, -0.0041455189, 0.1082001626, 0.0079898043, 0.0069537931, -0.0566061512, -0.0198520720, -0.0036605478, 0.0142407613, -0.0126867238, 0.0756305680, 0.0604804754, -0.0651167259, 0.0326458700, 0.0427298844, 0.0347805992, 0.0184188597, -0.0110628931, -0.0693778321, -0.0602708086, 0.0485358015, -0.0122238481, -0.0094252555, -0.0085266521, -0.0677558929, -0.0356180482, -0.0926379189, -0.0801520050, 0.0800322071, -0.0321128853, 0.0504048280, -0.0089200689, 0.0391289555, -0.0480803698, -0.0035360933, 0.0392192863, 0.0484825745, 0.0443270206, -0.0635476336, -0.0744934976, 0.0157424137, 0.0647828877, 0.0294710752, -0.0147324214, -0.0617869645, -0.0512762703, -0.0355113633, -0.0309831984, -0.0304390490, -0.0576167479, -0.0108780256, 0.0037709882, -0.0326861106, 0.0205921065, 0.0528243780, 0.0130713275, 0.0175305791, 0.0047334619, 0.0319097526, -0.0931273550, 0.0345244706, -0.0574167781, -0.0128167421, -0.0567886420, 0.0534096509, 0.0740994886, 0.0033814015, 0.0179530792, -0.0668339282, -0.0511961058, -0.0440471061, -0.0695410222, -0.0319375843, 0.0862656310, -0.0366258509, -0.0638458133, 0.0280982628, -0.0153860105, -0.0139795784, -0.0259441715, 0.0969581679, 0.0735381767, -0.0961863548, 0.0329382345, -0.0146008553, 0.0484093279, 0.0968752056, 0.0858379602, -0.0416939780, -0.0667540804, -0.0101377908, -0.0539498255, -0.0094940607, -0.0795217305, 0.0330025852, 0.0589976273, 0.0719480366, 0.0506921448, 0.0355585776, -0.0365462191, -0.0333655402, -0.0785968602, -0.0092108725, 0.0122647444, -0.0563701056, -0.0224044994, -0.0258063432, -0.0372717269, -0.0769381747, -0.0013715894, -0.0645644441, 0.0289652627, -0.0578995161, -0.0353790261, -0.0895373970, -0.0098991999, -0.0521149188, -0.0101478072, -0.0274251215, 0.0269939564, 0.0107268961, -0.0633350238, 0.0361770242, -0.0372998007, -0.0298819114, 0.0602151789, -0.0488197953, 0.1052811071, -0.0697066709, 0.0349992141, 0.0257630590, 0.0693999454, -0.0355582014, -0.0711391866, -0.0479465015, -0.0940650403, -0.0313626043, -0.0466438122, 0.0045034108, -0.0878979936, -0.0025527719, 0.0514758490, 0.0639679059, -0.0360593051, 0.0228228029, -0.0365778990, -0.0134526100, 0.0551088154, -0.0193994418, 0.0268758330, -0.0681250021, 0.0009056463, -0.0450440235, -0.0390132219, 0.0289594680, -0.0904742256, 0.0954362899, -0.0351672992, 0.0392431319, 0.0658814758, 0.0389485173, -0.0323822983, 0.0013280275, 0.0069994624, 0.0778737366, 0.0408914611, 0.0511365868, -0.0557838716, -0.0453379638, -0.0246563815, -0.0487671457, 0.0822063684, 0.0180637110, -0.0021226679, -0.0234373286, -0.0213339794, -0.0732968822, -0.0728321373, 0.0367810689, 0.0713443756, -0.0192908216, -0.1158587411, 0.0210826267, 0.0309690032, 0.0145585882, -0.0556355156, -0.0487396009, 0.0019432927, -0.0363894552, 0.0624753311, -0.0188185181, -0.0509556979, 0.0749169588, -0.0080010537, 0.0484706052, -0.0407836922, -0.0797816142, 0.0090867076, -0.1160631180, -0.0068329936, 0.0678759366, -0.0088717798, -0.0069050635, 0.0159654990, -0.0315615945, 0.0322289169, 0.0037472488, 0.0115253776, -0.0688084587, 0.0579437613, -0.0684311315, 0.0604021512, 0.0541388355, 0.0298358053, 0.0156528335, -0.0599737726, 0.0740916878, -0.0904396400, 0.0081872931, -0.0015321192, -0.0770362318, -0.0883956477, -0.0649235174, 0.0761461854, 0.0654149204, -0.0337957740, -0.1049611717, -0.0080515537, 0.0323768146, 0.0695783645, 0.0395129435, -0.0223855376, 0.0204137415, -0.0664972812, 0.0322601832, 0.0840919688, -0.0405654833, 0.0141794877, -0.0310707930, 0.0670061558, 0.0381451324, -0.0952481404, 0.0460970812, 0.0265831761, 0.0576249138, 0.0008887375, -0.0845836177, 0.0310772732, 0.0778388306, -0.0737425983, 0.0657260790, -0.0196761992, 0.0338753946, 0.0489163436, -0.0129325753, 0.0140320752, -0.0553732142, -0.0010282646, 0.0768190026, 0.0904268846, -0.0284493603, -0.0169463735, -0.0212812554, 0.0162834581, -0.0026199997, -0.0731643513, -0.0104077850, 0.0494226962, 0.0611039177, 0.0342441015, -0.1000137478, -0.0269054938, -0.0729449242, -0.0252441708, 0.0691745728, -0.0548854508, -0.0521700680, -0.0241064783, -0.0726760551, -0.0528180674, -0.0365808196, 0.0123634972, -0.0068111406, 0.0912025720, 0.0558855459, 0.0617605001, -0.0294390656, -0.0004466189, 0.0586686656, -0.0637336150, 0.0105934860, -0.0252278335, -0.0378542580, 0.0893929228, 0.0271644462, -0.0794004127, 0.1181191057, 0.0443503149, 0.0529085025, -0.0756229833, -0.0517427512, 0.0391911305, 0.0550876744, 0.0135951163, 0.0195303224, 0.0724204555, -0.0020492582, 0.0691565946, -0.0064153243, -0.0489919744, -0.0536540374, -0.1031777635, -0.0400679782, 0.0640119165, -0.0016252033, 0.1025373042, -0.0510948934, 0.0122981621, -0.0372258611, -0.0440971330, -0.0298528410, -0.0941797271, 0.0255546067, -0.0130869281, 0.0678159818, 0.0341527686, -0.0021934044, 0.0677845478, -0.0730022416, -0.0570006371, -0.0210860968, -0.0460084230, -0.0470530242, 0.0414194316, -0.0309111830, 0.0489958189, 0.0595097467, 0.0107779466, 0.1102199629, -0.1118124798, -0.0593979135, 0.0222963635, 0.0333770774, -0.0815338641, -0.0592538789, 0.0884487107, 0.0795895383, 0.1113466546, -0.0291990116, -0.0322163813, -0.0146349762, -0.0739300773, 0.0519094057, 0.0668154955, -0.0262788218, 0.0984636843, -0.0214500930, -0.0311004650, 0.0046359613, -0.0420988612, 0.0271899067, 0.0326828957, -0.0053162128, 0.0094830198, 0.0716042295, -0.1017507985, -0.0279773604, 0.0359378569, -0.0227116868, 0.0922706574, 0.0149567425, -0.0470384732, 0.0163173601, 0.0645704940, 0.0329787061, -0.0444699377, -0.0491694883, 0.0982291251, -0.1189395115, -0.0388544686, -0.0426785052, 0.0115000298, 0.0417622775, 0.0366697386, 0.0160195101, -0.1037409008, -0.0904427841, 0.0102132577, -0.0145512782, -0.0809312835, -0.0498730391, 0.1002602801, -0.0877768844, 0.0449601263, -0.0474655293, -0.0349446982, -0.0811097622, 0.0601235107, -0.0431136042, 0.0448638797, -0.0849740058, 0.0203064736, 0.0068302411, -0.0513964482, -0.0248129200, -0.0662730262, -0.0114699556, 0.0432026833, 0.0208550263, 0.0425323881, 0.0465782247, -0.0013549109, -0.0122932242, 0.0139579438, 0.0199761614, 0.0419398881, -0.0689635724, -0.0517836399, -0.0453569107, 0.0020846627, 0.0139616542, -0.0239522532, -0.0358594619, 0.1122515500, -0.0178164486, 0.0098462310, -0.0816278383, -0.0368768945, 0.0377615280, 0.0484838560, 0.0172006991, 0.0941348374, 0.0629636720, 0.0428169817, -0.0720122308, 0.0948962793, -0.0527831763, -0.0651550367, -0.0734025016, -0.0423078388, -0.0134322578, -0.1015865430, 0.0870060697, 0.0174317583, 0.0307087284, 0.1124378815, 0.0333937220, 0.0147236325, -0.0374521241, -0.0584617257, -0.0045246365, -0.0270569529, -0.0496391840, 0.0285485424, -0.0681184232, -0.0103251236, 0.0580098145, -0.0627839118, 0.0429516695, 0.0421484075, 0.0579520911, -0.0236827862, -0.0671421289, 0.0388143174, -0.0537733063, 0.0726554170, 0.0443836637, 0.0096402038, -0.0324167237, -0.0221059434, -0.0240560379, -0.0317868888, -0.0862342492, 0.0820392743, 0.0195860341, -0.0176847968, -0.0691996962, -0.0596396141, 0.0789640397, 0.0324368440, 0.0451105498, 0.0595092066, -0.0120960446, 0.0094325105, -0.0075066099, 0.0704263896, -0.0775914863, 0.0541089624, -0.0022880128, -0.1012019739, -0.0629645288, -0.0277857166, 0.1041523591, -0.0714201033, 0.0139281871, 0.0303348787, -0.0168591142, 0.0762317777, -0.0573237017, -0.0718991160, -0.0359736048, -0.0158977173, 0.0880815983, -0.0183528885, -0.0069582132, -0.0444234647, 0.0400243662, 0.0423831195, -0.0614694059, -0.0156953596, -0.0989804864, 0.0421069376, -0.0447220430, -0.0155321024, 0.0228358209, -0.0586366281, 0.0524584427, 0.0409537889, 0.0361202434, 0.0710544512, -0.0365524329, 0.0110663865, -0.0841277540, 0.0467919037, -0.0656270608, 0.0416001901, 0.1039455533, -0.0413599648, 0.0732503757, -0.0391153693, 0.0607836992, 0.0113654984, -0.0517157838, 0.0115421442, 0.0148472916, -0.0463599823, -0.0655467734, 0.0961317271, -0.0272897072, -0.0183990076, -0.0026066457, 0.0703450143, 0.0565619692, 0.0052849362, -0.0343596786, -0.0630438849, 0.0320664719, 0.0603233613, -0.0320790373, 0.0309213120, -0.0343692116, -0.0964271203, -0.0148922969, 0.0665394962, -0.0681783780, -0.0588504188, 0.0512570329, 0.0666210279, -0.0133235045, 0.0213507600, 0.0705625489, 0.0210553668, 0.0257056672, -0.0181889199, 0.0556122959, 0.0421565250, -0.0168614145, -0.0144102881, 0.0271221437, -0.0048820637, -0.0846562386, 0.0464547388, 0.0837452412, -0.0612185076, -0.1144970804, -0.0349990651, 0.0109504322, 0.0053650625, 0.0002214609, -0.0783009380, -0.0240513179, 0.0555428304, 0.0589702949, -0.0534796491, -0.0402061008, 0.0128956633, -0.0564358197, 0.0246820506, -0.0105027221, -0.0396337695, 0.0220049694, 0.0540055335, -0.0202534124, -0.0179347619, -0.0172980800, 0.0208722930, -0.0362136103, -0.0651123151, 0.0064560948, 0.1157245785, -0.0162126813, -0.0751042515, -0.0642637685, -0.0998465046, 0.0162837133, -0.0393496342, 0.0284548439, 0.0263226442, 0.0693059266, 0.0596114248, -0.0151875103, -0.0759677812, 0.0412514433, -0.0956460088, -0.0284987502, 0.0973821580, 0.0177295022, -0.0076166904, 0.0113982605, 0.0706341863, 0.0017806292, -0.0731326863, -0.1065962389, 0.0647738278, 0.0239993129, -0.0097613139, 0.0426794440, 0.1117578596, 0.0579134487, -0.1166490316, -0.0197141040, 0.0461193360, 0.0410636701, -0.0621483177, 0.1103553399, -0.0565294027, -0.0054516438, -0.0058947187, -0.0304729771, -0.0517746881, -0.0554460362, 0.0030006655, 0.1188244671, 0.0285401680, -0.0033902910, 0.0542205982, -0.0712293312, 0.0147657469, 0.1122699901, -0.0684903190, 0.1230295226, 0.0323819704, -0.0930169299, -0.0480355248, 0.0334257931, 0.0188170578, -0.0085097132, -0.0491286553, 0.0272197668, -0.0662248954, -0.0712439641, -0.0214378964, 0.0135080544, 0.0655047074, 0.0463511422, -0.0623089895, 0.0121553699, -0.0029622056, -0.0704088956, -0.0153475013, 0.0190537609, -0.0254210550, -0.0246222839, -0.0583052598, 0.0516571999, -0.0454464816, -0.0049775592, 0.0021336190, -0.0506446622, 0.0629698485, 0.0238599256, 0.0294807684, -0.0357682146, 0.0320799500, -0.0132122887, -0.0143388379, -0.0178679656, -0.0648364797, 0.0115479985, -0.0510453805, -0.0569734350, -0.0338766947, -0.0540201813, 0.0747048408, 0.0776221827, -0.0147851203, -0.0540565178, -0.0558789633, -0.0208788645, 0.0218349379, 0.0057538785, -0.0174203813, 0.0536049642, -0.0833535045, 0.0204820745, -0.0374247469, -0.0624192469, 0.0533701442, 0.0451649837, 0.0788028315, 0.0440355726, -0.0254147705, 0.0596436709, 0.0382053442, -0.0716403723, 0.0036487971, -0.0562926605, 0.0608473755, -0.0457550623, -0.0015482767, 0.0304216072, 0.0859866291, -0.0817997232, -0.0435905829, -0.0858442336, 0.0307022352, -0.0012885975, 0.0346822292, 0.0498782247, -0.0027055182, 0.0755636692, 0.0702546388, -0.0438405350, 0.0390278436, 0.0118647078, -0.0269795023, -0.0166557804, -0.0019075458, -0.0096169524, -0.0045168148, -0.0230739620, 0.0015154639, 0.0328963026, -0.0109646814, -0.0660882965, -0.0706094205, -0.0004023559, -0.0253751893, -0.0557729900, 0.0705495477, 0.0399460569, -0.0404367000, -0.0021355429, 0.0179052874, -0.0569364615, 0.0571127571, 0.0122951511, 0.0820903257, 0.0115258945, 0.0162473228, 0.0175430048, -0.0049492246, -0.0484741218, 0.0703949332, -0.0576848760, 0.0732980594, -0.1015515029, 0.0156587157, 0.0026240316, 0.0152510535, 0.0643661246, -0.0647656545, 0.0733041540, -0.0430399403, 0.1024810523, -0.0539368279, 0.0383246765, 0.0507001840, -0.0234326944, 0.0180960465, 0.0080606621, 0.0112383859, -0.0647343770, 0.0003960346, 0.0767107531, -0.0473059788, 0.1025031358, -0.0391505696, -0.0627648160, -0.0244143829, 0.0492214300, 0.0249642171, 0.0319050848, 0.0172282699, 0.0829380527, 0.0223975293, -0.0697694048, -0.0224559680, -0.0758772045, -0.0493644178, 0.0400478356, 0.0429906361, -0.0405488536, -0.0668858364, 0.0066093644, -0.0741544291, -0.0519684330, 0.0287598856, -0.0243967250, 0.0379811786, 0.0643236488, -0.0724771172, 0.0777839571, -0.0032309769, -0.0642515123, -0.0243692007, 0.0531975031, 0.0230654273, 0.0523307994, -0.0015970139, -0.0780460909, -0.0669431984, -0.0781605616, 0.0112094255, -0.0003387956, 0.0457125045, -0.0816885233, 0.0582768768, 0.0034969945, 0.0589754097, 0.0873144865, -0.0023703510, -0.0651152655, -0.0053142160, 0.0303791296, -0.0003518129, 0.0113379369, -0.0439630374, -0.0527906306, 0.0618533269, -0.0399734415, -0.0615722835, 0.0620880499, -0.0039691865, 0.0304939877, -0.0635127053, 0.0592377409, -0.0073339758, -0.0085885935, 0.0608613119, -0.0344414189, -0.0921171755, -0.0558470152, 0.0756468102, -0.0076848799, 0.0219441243, -0.0843703970, 0.0334793739, -0.0206004828, 0.0590906031, -0.0267321914, -0.0644140840, 0.0351253860, -0.0177570600, -0.0074407896, -0.0132631166, 0.0404398404, 0.0103551550, 0.0578952022, -0.0663114935, -0.0179888625, -0.0743205696, 0.0314424559, 0.0406540483, 0.0470882021, 0.0529522896, 0.0380211659, 0.0512707829, 0.0731635466, 0.0459584072, 0.0002328206, -0.0761922970, 0.0176783837, -0.0613697805, -0.0018536834, 0.0464647114, 0.0154494531, -0.0379821435, 0.0461103581, 0.1003923416, 0.0381799713, 0.0173791517, -0.0741461962, 0.0755575821, -0.0580750182, -0.0310842656, -0.0587285720, -0.0411446840, 0.0353085995, 0.0343535021, 0.0052386629, -0.0783437341, -0.0584677532, -0.0217459351, -0.0127790915, -0.0397083610, -0.0094383368, -0.0115932068, 0.0794302747, -0.0437961295, 0.0438567810, 0.0604271479, -0.0005222344, -0.0458711907, 0.0690341219, -0.0648192391, 0.0781074241, 0.1007174179, -0.0018910033, -0.0239749141, -0.0235562287, -0.0266511906, 0.0245454237, -0.0342395715, 0.0965987593, 0.0191092677, 0.0366560481, -0.0362062454, 0.0423991866, -0.0801468119, 0.0884032696, -0.0266787801, 0.0815967172, 0.0220098905, -0.0279209744, -0.0425346196, 0.0477925949, -0.0391740799, -0.0197166447, 0.0135415057, 0.0152773876, -0.0975219756, -0.0671892613, 0.0398959219, 0.0653062686, -0.0471936613, -0.0933326855, -0.0855291709, -0.0072796792, 0.0351725146, 0.0569160283, 0.1031721979, -0.0029378727, 0.0561249666, -0.1071888208, -0.0126687922, 0.0684255809, 0.0317796990, 0.0313747972, 0.0935364515, -0.0337975062, -0.0311241150, 0.0288688913, 0.0930295661, -0.0370722264, -0.0264337659, 0.0177894663, 0.0145516219, -0.0225605611, -0.0162794720, 0.0363172479, 0.0148971397, 0.0150046349, -0.0468573309, 0.0090298392, -0.0550167970, -0.0311709028, -0.0666493624, -0.0648196712, 0.0209943689, 0.0310199838, 0.0318080746, -0.0356798694, 0.0414832942, 0.0406389534, 0.0378512070, 0.0843248814, -0.0367072001, -0.0114226015, -0.0186092369, -0.0346483551, 0.0389682166, -0.0208093431, 0.0267048888, 0.0195557028, 0.0070997770, -0.0214675870, 0.0868723243, 0.0132756000, -0.0722009912, 0.0581756756, 0.0161394645, -0.0125971008, -0.0180892721, -0.0607527718, -0.0357333906, 0.0696078315, 0.0487157106, -0.0265980959, 0.0683988705, 0.0404095165, 0.0814217776, 0.0299278218, 0.0657933056, 0.0603553504, -0.0767577142, 0.0519001670, 0.0898510441, 0.0095839389, 0.0659846887, 0.0619139969, 0.0381187759, -0.0119900648, -0.0906774476, 0.0534910299, -0.0475224815, -0.0127245309, -0.0612590462, 0.0031226533, 0.0558661111, -0.0375437513, 0.0284543931, 0.0397998393, -0.0056599835, 0.0381203592, 0.0674542338, -0.0305658914, 0.0267684981, 0.0163390823, 0.0655410960, 0.0447625034, -0.0398297831, 0.0806579813, 0.0343406685, 0.0369143002, -0.0378831066, 0.1084980145, -0.0073570004, 0.0431648009, 0.0669125691, 0.0599025600, 0.0126112457, 0.0335698128, 0.0140238432, -0.0193308312, -0.0764590949, 0.0247368328, -0.0269575827, 0.0710174441, -0.0177504644, 0.0185198560, 0.0878793523, 0.0070769661, -0.0162940361, 0.0575222969, 0.0376260728, -0.0158293489, -0.0051361928, 0.0847346783, -0.0093252780, 0.0687703937, 0.0459306128, -0.0300984122, 0.0845719129, 0.0162596758, -0.0989030153, 0.0132266609, -0.0206860546, 0.0298902523, 0.0876768082, -0.0080485092, 0.0623917170, -0.0813774467, 0.0450656787, -0.0257764813, -0.0446177796, -0.0588178858, 0.0570974238, -0.0331320241, -0.0802638009, -0.0844880268, 0.0122154253, 0.0749531314, 0.0638543516, 0.0103943562, -0.0521819182, -0.0692224503, 0.0196445994, -0.0755470917, -0.0607386567, 0.0065135243, -0.0489182137, 0.0615169220, -0.0277965777, -0.0496202894, -0.0552548319, -0.0120246476, 0.0628205091, 0.0983387306, 0.0055419155, 0.0158507396, -0.0855379254, 0.0389300957, 0.0023728570, -0.0187937059, 0.0382291712, -0.0638551787, 0.0763731971, -0.0110763852, -0.0402130596, 0.0781838298, -0.0555869266, 0.0711947381, 0.0490922220, -0.0387125872, -0.0602158569, -0.0209646020, 0.0015546660, -0.0906651393, 0.0734762922, -0.0089115864, -0.0187386125, -0.0414333455, -0.0973643735, 0.0881146342, 0.0126258163, -0.1015617028, -0.0470289551, -0.0490087345, -0.0711883381, -0.0150411036, 0.0381283760, 0.0648055300, 0.0039542015, -0.0554587469, 0.0886666328, -0.0323913023, -0.0695525929, 0.0163857415, -0.0746513531, 0.0421706513, 0.0587255396, -0.0859755129, -0.0940276459, 0.0303722080, 0.0831740648, 0.0718243718, -0.0394945964, 0.0068028676, -0.0228897501, -0.0001899653, 0.0153314965, -0.0038181765, -0.0163599942, -0.0799426436, -0.0673863739, -0.0636066571, -0.0236350317, -0.1102216244, 0.0052676704, -0.0232180078, -0.0557091683, -0.0181402229, 0.0643844232, 0.0050037736, 0.0606541969, 0.0276758410, 0.0217217747, 0.0439252406, 0.1116520390, -0.0874325112, -0.0014179165, 0.0999758318, -0.0091774426, 0.0636819825, 0.0504041649, -0.0571038015, -0.0620917678, 0.0454851240, -0.0343628675, -0.0347058997, 0.0454952456, 0.0195564106, 0.0053568566, -0.1131449863, -0.1026804298, 0.0069074919, -0.0669162646, 0.0499645881, 0.0777381882, 0.1159323156, -0.0581577159, 0.1029768139, -0.0950737819, 0.0250858832, 0.0465116650, 0.0736588761, -0.0723176077, 0.0313492827, 0.0148841450, -0.0825172290, -0.0475693867, -0.0421685800, 0.0561024882, -0.0903421119, -0.0231117662, 0.0194875076, -0.0591443963, 0.0598295517, 0.0172851197, 0.0165032595, -0.0694084764, 0.0656226352, 0.0651583001, -0.0830350146, -0.0025923194, -0.0552254617, 0.0008246432, 0.0670855045, 0.0534343049, -0.0365779474, -0.0564515144, -0.0793905258, -0.0238241218, 0.0496836044, 0.0444742888, -0.0549100898, -0.0589272566, 0.0314854570, 0.0072931126, 0.0451951288, -0.0395949483, 0.0613314994, -0.0337413065, 0.0517917983, 0.0779546872, -0.0294928178, 0.0473932065, 0.0682861879, -0.0715267882, -0.0630717650, -0.0470178314, -0.0078386813, 0.0481317192, -0.0606307574, -0.0092043420, -0.0995219052, 0.0605142787, 0.0186273567, -0.0662270486, -0.0209379867, 0.0101303030, 0.0346516594, -0.0293108802, -0.0195010379, 0.0215843096, 0.0826588348, -0.0018401165, -0.0612822995, -0.0597310141, 0.1079009473, -0.0264075696, -0.0409157686, -0.0539508276, -0.0243989751, -0.0624466464, 0.0761880055, 0.0668275803, 0.0549156591, 0.0408939831, 0.0536930449, -0.0709702745, 0.0448542535, -0.0623787045, 0.0192071535, 0.0356761292, 0.0496967509, -0.0669576302, -0.0015066431, -0.0739930421, 0.0257190038, 0.0324466154, -0.0261308905, -0.0945240483, -0.0627539903, -0.0600581765, -0.0356514640, -0.0399150439, -0.0446277075, 0.0978333130, -0.0092538912, 0.0478421748, -0.0317665301, -0.0446228310, -0.0504583679, 0.0505455509, -0.0138951661, -0.0060226875, -0.0034479471, -0.0674223006, -0.0484059341, 0.0135099608, -0.0261525102, 0.0643117279, -0.0876133740, -0.1032887250, 0.1023617834, -0.0041441382, -0.0425480194, 0.0390527695, -0.0066013243, -0.0015107368, -0.0127121191, 0.0187726021, -0.0346361361, -0.0648254007, 0.0001078382, 0.0498243608, -0.0739254579, -0.0757316947, -0.0054529384, 0.0025468471, -0.0728327781, -0.0502774566, -0.0528340898, -0.0462214909, -0.0282729920, -0.0518665276, 0.0615733415, -0.0174995754, -0.0601216145, 0.0575811081, 0.0495488793, 0.0699618384, 0.0013050344, 0.0360985920, -0.0761367604, 0.1077048257, -0.0564426742, -0.0064614103, 0.0115508232, -0.0162430257, -0.0465452261, -0.0249614157, -0.0147298863, -0.1090634316, 0.0219898466, -0.0282195918, 0.0158499237, 0.0069018970, -0.0182943661, 0.0514416173, 0.0013789159, 0.0004054946, 0.0215906203, 0.0671630949, 0.0584938563, -0.0744066462, -0.0312261768, -0.0220223088, 0.0568195768, 0.0718449652, 0.0671566129, 0.0757358223, 0.0008503947, -0.0698109567, -0.0114378370, 0.0585089922, 0.1091880128, -0.0116608422, 0.0243707579, 0.0574684590, -0.0356469564, -0.0814114213, 0.0352803729, 0.0291329846, 0.0592219830, -0.0642958805, -0.0151885739, -0.0818300098, 0.0447816998, -0.0828775913, -0.0459557176, 0.0270259436, 0.0875888020, -0.0881174505, -0.0226609651, 0.0846721083, 0.0706265047, 0.0274146125, 0.0465091914, -0.0460619628, 0.0540675968, -0.0696311295, -0.0323891230, -0.0112655014, -0.0525639169, -0.0644157976, 0.0168056600, -0.0721193701, 0.0181642231, 0.0510685556, -0.0297393333, 0.0680985674, -0.0463175252, 0.0176861752, 0.0209969878, -0.0469264016, -0.0509552844, 0.0104254019, 0.0933554471, 0.0831930265, 0.0667592287, 0.0017486759, -0.0288650449, -0.0229415949, 0.0552373081, -0.0230465680, -0.0626681373, 0.0818868056, 0.0537772924, -0.1019715965, -0.0131524876, 0.0584688745, -0.0234467909, -0.0317706130, -0.0408856571, -0.0022913956, 0.0644345358, 0.0532358326, 0.0069959988, 0.0757672563, -0.0056428108, -0.0266215429, -0.0039127450, 0.0127830291, 0.0385010503, 0.0639427006, 0.0227919854, -0.0547597520, 0.0015557540, 0.0306532122, 0.0777365193, 0.1066016555, -0.0222666264, 0.0415870585, 0.0557223149, 0.0121790236, 0.0077663716, -0.0323301293, 0.1115398258, 0.0230733715, 0.0744590163, -0.0671431124, 0.0996659324, -0.0249272007, -0.0379605703, 0.1171619073, 0.0452156924, -0.0021264220, -0.0164313372, -0.0295252688, 0.0395746045, -0.0234161057, -0.1027215943, -0.0391159877, 0.0984902680, 0.0968075320, 0.0016963650, 0.0878502205, -0.0297414884, -0.0606557727, -0.0652505457, 0.0683378801, -0.0321309790, -0.0342928655, 0.0281625371, 0.0214458406, -0.0570329428, -0.0220341105, 0.0698966011, -0.0339707173, 0.0283848401, -0.0309297480, -0.0475549810, -0.1047180668, 0.1087048128, -0.0065964987, 0.0741183683, -0.0277433228, -0.0725276321, 0.1181529090, -0.0427374505, 0.0175178181, -0.0178117342, 0.0014307998, 0.0692736655, 0.0904954225, 0.0137062846, -0.0055133635, 0.0340496413, -0.0270510055, -0.0164107159, -0.0167008769, -0.0242242143, -0.0198765304, -0.0202736966, 0.0662768409, -0.0031535085, -0.0510177612, 0.0570197441, 0.0930158421, 0.1065153033, -0.0994318351, -0.0412645340, 0.0326769613, -0.0433602072, -0.0347985737, -0.0267593674, -0.0654827356, -0.0262239166, 0.0351297520, 0.0451325439, -0.0235857908, -0.0180217773, -0.0711688623, 0.0271051563, 0.0143183758, 0.0430516303, -0.0737726763, 0.0808341950, -0.0012656918, 0.0361674502, -0.0369461961, -0.0850688890, -0.0001169789, -0.0519913733, 0.0741127878, 0.0603311546, -0.0806152448, 0.0899107009, -0.0442038067, -0.0378620438, 0.0127357431, -0.0916485339, -0.0973631889, -0.0035637359, -0.0442963168, -0.0000927058, -0.0410805531, 0.0202437583, 0.1096090972, 0.1071380228, 0.0934767872, 0.0216087196, -0.0327654406, 0.0902254954, -0.0722544864, 0.0432854332, 0.0227297191, -0.0040446613, 0.1321559399, -0.0240223296, 0.0322072096, 0.0266040489, 0.0062361555, 0.0587488711, 0.1269406229, -0.0427379161, -0.0391364135, 0.0025783379, 0.0250672139, -0.0216223355, -0.0938170627, 0.0129962983, 0.0558442101, 0.0269612428, -0.0957452804, -0.0211023130, 0.0617407337, -0.0105308685, -0.0408601351, -0.0023971172, 0.1013756394, -0.0165455509, 0.0218824670, 0.0280232038, -0.0449553318, -0.0139594367, -0.0782781169, -0.0640434697, -0.0555787049, -0.0644013435, -0.1200665385, 0.0772598535, -0.0313454904, 0.0357647017, 0.0503290892, 0.0185629893, -0.0859304070, -0.0355462767, -0.0104161836, 0.1123694330, 0.0364175476, 0.0698375180, 0.0175530203, 0.0009134601, 0.0568470657, 0.0175735503, 0.0401483104, -0.0633867383, -0.0878099799, -0.0485946424, -0.0253958534, 0.0548036806, 0.0292092077, -0.0199060515, 0.0741648600, -0.0295428485, 0.0803188682, -0.0389220566, 0.0536143444, 0.0336804688, -0.0877402052, -0.0053472300, 0.0147353699, -0.0291203726, -0.0403083190, -0.0074336920, -0.0167270172, -0.0198412314, -0.0073198229, -0.1231419519, -0.0049527506, -0.0365108959, -0.0398753099, 0.0353585109, 0.0667300820, -0.0206555836, 0.0823416114, -0.0347369574, -0.0410711914, -0.0150708612, -0.0636676997, -0.0283812974, -0.0075697154, -0.0257314835, -0.0316747427, -0.0767373666, 0.0845265463, -0.0348404795, -0.0093028750, -0.0158353858, 0.0117077567, -0.0318945274, 0.0579322800, -0.0671959147, 0.0176368747, -0.0048559033, -0.0007947874, 0.0384585708, 0.0089850938, -0.1206947342, 0.0442036577, -0.0846183822, -0.0286887288, 0.0214369241, -0.0422364324, 0.0091777910, 0.0118672894, 0.0256052539, -0.0325369947, -0.0500373468, 0.0398485027, -0.0906540528, -0.0701139644, -0.0690584704, 0.0432304852, -0.0564235412, 0.1070073768, 0.0806082636, -0.0281577967, 0.0651143640, 0.0304399934, -0.0430194065, -0.0674868301, 0.0565678962, -0.0281185582, 0.0955352038, -0.0186520722, -0.1077754498, -0.0453698486, 0.0157418549, -0.0508021489, -0.0210600607, 0.0356249139, 0.0234911311, 0.0485250317, -0.0173443276, -0.0585090891, -0.0080198869, -0.0734160468, 0.0823084489, 0.0411252193, 0.1078780442, -0.0025790383, -0.0244764630, -0.0631966889, 0.0629679486, 0.0060034366, 0.0449762456, -0.0774236768, 0.0348626226, 0.0751336217, 0.0186414048, -0.0600115582, -0.0645650029, 0.0185800008, -0.0343105495, -0.0430541411, -0.0165186431, 0.0053149667, -0.0367264003, -0.0919425189, 0.0730258003, 0.0454725921, -0.0565061644, 0.0033912312, -0.0177792683, 0.0181780644, 0.0803001523, 0.0014605335, 0.0227051675, 0.0396692939, -0.1115446389, -0.0032179505, 0.0257542729, 0.0297239609, -0.1062959954, -0.0221436284, 0.0130578037, 0.0496594757, 0.0633911565, 0.0152862081, -0.0086821076, 0.0618336760, 0.0133469058, 0.0337021090, -0.0020712018, 0.0251801610, -0.0416559838, -0.0303557534, 0.0486147329, 0.0219834819, 0.0038899670, 0.0449228659, 0.0954502523, -0.0372471921, -0.0816451311, -0.0315314867, -0.0018067635, -0.0713130236, 0.0099298069, 0.0568206720, 0.1233260781, -0.0565707609, -0.0284462180, 0.0467821434, -0.0153060667, 0.0304449908, -0.0390555374, -0.0154486364, 0.0652015209, 0.0203085635, -0.0563176088, 0.1182700023, -0.0141549921, -0.0613409169, -0.0374452248, -0.0553958826, 0.0168943070, 0.0649231449, -0.0006863124, -0.0814876482, 0.0202253126, -0.1040165350, 0.0289470330, 0.0708781704, -0.0383294374, 0.0275819674, -0.0614718571, 0.0256899577, -0.0460083596, 0.0043348735, 0.0686480701, -0.0545896031, 0.0448506735, -0.0314169154, -0.0928346813, -0.0080313869, 0.0374258794, 0.0727606416, -0.0271870457, -0.0792995915, 0.0033297266, 0.0044486234, 0.0270219706, 0.0403051712, -0.0516931489, 0.1035045832, -0.0778671205, -0.0187655166, -0.0303451251, 0.0546146110, -0.0517578833, 0.0589552708, 0.0277894866, -0.0568229221, -0.0611216798, 0.0467701517, 0.0462327488, 0.0470268093, -0.0594266467, -0.0595230907, -0.0751569048, -0.0857430324, 0.0755262598, 0.0801427513, 0.0993665457, -0.0299333837, -0.0394737236, 0.0898134857, 0.0803104565, 0.0581526496, -0.0384833664, -0.0159698091, -0.0692307726, -0.0203536097, 0.0100341188, 0.0985158905, 0.0591419227, 0.0471024215, -0.0170663781, -0.0582634844, -0.0743530542, -0.0306734405, 0.0841740370, -0.1003054306, -0.0609183908, -0.0298592448, 0.0822144374, 0.0750546008, 0.0327823199, 0.0865892544, 0.0016656639, -0.0103077767, -0.0682368577, -0.0095588276, 0.0369557664, 0.0148525126, 0.0215263311, -0.0474212095, -0.0577441752, 0.0000938215, 0.0473737791, -0.0535308048, 0.0142558794, -0.0124613401, -0.0155836903, 0.0307384692, 0.0150902877, 0.0134870047, 0.0026264142, 0.0435373634, 0.0601645932, 0.0086887795, 0.0104971426, -0.0605392754, -0.0462711826, 0.0645170957, 0.0375796333, 0.0642398372, -0.0585838854, 0.0545906611, 0.0109516857, 0.0706327036, 0.0916544497, 0.0099771507, 0.0142850596, -0.0813105702, 0.0445175171, 0.0198337957, -0.0187027939, -0.0506309085, -0.0114799887, 0.0975066572, 0.0267980415, 0.0304337107, -0.0045884917, 0.0661379620, 0.0568311736, -0.0431993976, -0.0359070785, 0.0613373891, -0.0838103816, 0.0819080919, 0.0198855810, 0.0481024869, -0.0740701184, -0.0865797475, -0.0303355251, -0.0452696197, 0.0729856044, 0.0044081495, 0.0774167776, -0.0200184695, 0.0195561014, -0.0797338560, -0.0047209840, 0.0330937356, 0.0597620495, 0.0828317106, -0.0010243778, 0.0015896773, -0.0166507568, -0.0331953093};
# 30 "./parameters.h" 2
# 1 "./weights/b12.h" 1
# 12 "./weights/b12.h"
conv2d_3_bias_t b12[32] = {-0.0187643860, -0.0195711870, 0.0036227161, 0.0134053016, 0.0253376272, -0.0110528097, -0.0174828451, -0.0113579808, 0.0187008344, -0.0146266473, 0.0168407355, -0.0180915091, -0.0186632182, 0.0208966769, -0.0017505414, 0.0203432851, -0.0143510606, -0.0154656274, -0.0170961302, 0.0146710360, 0.0197429080, -0.0214072634, 0.0200274754, -0.0096986089, -0.0227742400, -0.0215164255, -0.0209617242, 0.0283329338, -0.0202432107, 0.0187184904, 0.0130493632, -0.0230308902};
# 31 "./parameters.h" 2
# 1 "./weights/w16.h" 1
# 12 "./weights/w16.h"
dense_weight_t w16[7168] = {0.0230013728, 0.0406903848, 0.0277618710, 0.0581434257, 0.0668466091, -0.1078503281, -0.0668716058, -0.0946692005, 0.0005673327, 0.0243167765, 0.0137104020, -0.0983093530, 0.0274255462, 0.0463500954, 0.0666571781, -0.0639444962, -0.0323898308, -0.0565913282, -0.0802544430, 0.1049573347, 0.0222320929, -0.0107032862, 0.0649591684, -0.0935430005, 0.0217226874, -0.0897163004, -0.0235507693, 0.0063152052, 0.0425493605, 0.0821661949, 0.0038028196, -0.1196553931, 0.0153351193, -0.0514472686, -0.0311834794, 0.0030681882, 0.0544548854, 0.0192304514, 0.0527550802, -0.1084423065, 0.0098379599, -0.0438959152, 0.0887098536, -0.0149440262, -0.0854474157, -0.0170893539, 0.0031186063, -0.0498120189, 0.0357524678, -0.1012308970, -0.0959736481, 0.0228516851, -0.0126507375, -0.0932153761, -0.0245461930, -0.0790525451, -0.0146464836, 0.0205243565, -0.0834486410, -0.0533855669, -0.0506941043, 0.0010691356, 0.0634977147, 0.0073538800, 0.0736334100, 0.0073250062, -0.0633954927, 0.0073916409, 0.0063376734, -0.0258139186, 0.0750059038, 0.0425876938, 0.0457499549, 0.0319595411, -0.0018535493, -0.0807917416, -0.0144994678, 0.0621407256, 0.0106561389, -0.0524198450, -0.0369896144, -0.0306210555, -0.0811044648, 0.0731162131, 0.0861762315, -0.0020901226, 0.0719642267, 0.0551514700, 0.0013494225, 0.0505980141, -0.0359991677, 0.0332066566, -0.0558233373, -0.0458317660, -0.0059687467, -0.0654387325, -0.0129280593, 0.0570726059, -0.0774809271, -0.0421600416, 0.0344646461, 0.0243575908, 0.0372060649, -0.0577141568, -0.0553897358, -0.0689328536, -0.0266801268, -0.0477768034, -0.0771813691, 0.0926571786, -0.0867714286, -0.0113952830, -0.0540011711, -0.0150545631, 0.0144328354, -0.0273770671, 0.0399153717, -0.0587999672, 0.0814779475, -0.0451544300, -0.0715271160, -0.0409689806, -0.0575071611, 0.0733722225, 0.0621047355, -0.0002312706, -0.0698147938, 0.0651819929, 0.0258971211, -0.0172977522, 0.0065213139, -0.0400720872, -0.0211835150, -0.0371374264, 0.0036165973, -0.0449591838, 0.0977676958, 0.0303085204, 0.1153733805, -0.0065425108, -0.0247743800, -0.0024112493, -0.0950810313, 0.0532102585, 0.0279528610, 0.0416140631, 0.0388059318, 0.0225447267, 0.1076371968, -0.0877813995, 0.0561263077, 0.0471553691, -0.0414467119, -0.0010332807, 0.0233301669, 0.1098231375, 0.0621610768, 0.0028687511, -0.0119535709, -0.0259071365, -0.0446231030, 0.0337782055, -0.0758685395, -0.0844701529, 0.0281843338, -0.0004222592, -0.0417533368, -0.0658707768, 0.0657199025, -0.0014305054, 0.0125331115, 0.0325460099, -0.0138873700, 0.1257571280, 0.0053656911, 0.0667087957, -0.0554028489, 0.0071589733, 0.0067290384, -0.0462294109, 0.0484616086, 0.0035089161, -0.0156727191, -0.0067399363, -0.0484110937, -0.0092272200, -0.0643451214, -0.0033037735, 0.1137320995, 0.0508341677, 0.0036692359, -0.0347740166, -0.0998790860, -0.0720367134, 0.0347583182, -0.0077240928, 0.0041519911, -0.0756537914, -0.0476907454, -0.1077838093, 0.0558347180, -0.0157279056, -0.0106606400, -0.1178592741, 0.0668501854, -0.0550210476, -0.0290099345, 0.0079852045, -0.0571546927, 0.0085593583, 0.0147775281, -0.0209977124, -0.0038263982, -0.0111335907, -0.0084326165, 0.0106220469, -0.0216550361, 0.0223720912, -0.0846378058, 0.0192684885, -0.0291909631, 0.0115592638, 0.0975563377, -0.1032742932, 0.0174237080, -0.0196867120, -0.0443427823, 0.0365586765, 0.0353244245, -0.0068370504, 0.0283542648, 0.0116640283, 0.0837405697, -0.0217045937, 0.0670817271, -0.0272843745, 0.0292953271, 0.0644149184, -0.0846674144, 0.0837493092, 0.0433967225, -0.0440774523, -0.0162713360, -0.0006801115, 0.0333561786, 0.0417675935, 0.0130024040, -0.0713443533, -0.0567408837, -0.1189895868, -0.0054967706, 0.0782764405, 0.0866816118, 0.0738150477, -0.0635804087, -0.0090225078, -0.0738303140, 0.0209357925, -0.0281526130, 0.0469038635, -0.0139186969, 0.0562332459, -0.0545116998, -0.0872126222, 0.0791215152, -0.0072878022, 0.0602022782, 0.0126169734, 0.0647035241, -0.0319643579, -0.0329720490, 0.0807772428, -0.0435517989, -0.0334337689, -0.0553816929, 0.0489247255, 0.0662234649, -0.0208713599, 0.0292440876, -0.0397710167, 0.0377087705, 0.0319593288, -0.0471542962, -0.0133265136, -0.0381555483, 0.0205952320, 0.0546142831, -0.0434348024, -0.0145750735, 0.0275797173, -0.0295294691, 0.0145814549, -0.0539882779, 0.0434037335, -0.0198615268, 0.0507256053, -0.0623657182, 0.0599188693, -0.0083731059, -0.0382091329, 0.0088561503, 0.0049345358, 0.0556017235, 0.0607524142, 0.0000444043, 0.0817761123, -0.0578834265, 0.0411301702, -0.0102617294, -0.0661206841, 0.0027660199, -0.0672665164, -0.0253448207, -0.0808465332, -0.0237417612, -0.0554736331, 0.0926850140, -0.0530602522, -0.0584045574, 0.0022741419, -0.0137994746, 0.0098493863, -0.0116676642, 0.0005117574, 0.0820833445, 0.1044503525, 0.0155018475, 0.0206482913, 0.0851564333, -0.0305135734, 0.0353620462, -0.0612874888, -0.0431070328, -0.0029471808, -0.0933435038, -0.0245531276, 0.0300348327, 0.0402287208, -0.0696320534, 0.0305602774, 0.0110855633, -0.1069092676, 0.0404676460, -0.0395463631, 0.0283293147, -0.0084952125, -0.0463550203, -0.0171724055, -0.0017295867, 0.0225547738, -0.0598780960, -0.0113845794, -0.0065679951, 0.0257739555, 0.0910429060, 0.0688635334, 0.0443283990, -0.0615641773, 0.0185615513, 0.0765678436, 0.0121067222, -0.0260116234, -0.0060885623, 0.0138023654, -0.0722349435, -0.0044763428, -0.0606722757, 0.0571855456, -0.0613505952, 0.0383109972, -0.0518787317, -0.0414934866, -0.0492721647, -0.0709769204, -0.0240073968, -0.0742734820, 0.0480460525, 0.0009322033, -0.0602995679, 0.0169163104, 0.0496099703, 0.0646750629, -0.0858607963, -0.0538032912, 0.0179369394, -0.0231667366, 0.0148218824, 0.0777722672, -0.0314115323, 0.0241204482, -0.0674417540, -0.0731198862, 0.0837723836, 0.0279878546, -0.0099490592, -0.0477846339, -0.0503668077, 0.1095933393, -0.1394290030, -0.0338648036, -0.0548032336, -0.0442312881, -0.0627454668, -0.0398641787, 0.0835140198, -0.0373472944, 0.0517951585, 0.0524624139, 0.0367023163, -0.0582225546, -0.0395551696, -0.0111827524, -0.0474753380, -0.0405119918, 0.0321241692, -0.0244981479, 0.0605201609, -0.0705874786, 0.0374328233, -0.0288228188, 0.0527746305, 0.0201784894, -0.0589884967, -0.0149977934, -0.0357327387, 0.0723766237, 0.0476922654, -0.0482934192, -0.0590774640, -0.0094305491, -0.0681928992, -0.0764345601, -0.0035230296, 0.0366230719, 0.0036308640, 0.0949059129, 0.0315028317, 0.0278074592, 0.0057160179, 0.0326142348, 0.0179634858, 0.0812853277, 0.0482254215, -0.0656595975, 0.0178483874, -0.0238063112, -0.0464049429, -0.0634029061, 0.0579892695, -0.0510411672, 0.0168116931, -0.0355057605, 0.0418741144, -0.0954721645, -0.0284947604, 0.0588083863, -0.0109959748, -0.0253247526, 0.0074460986, -0.1094651818, 0.0006551510, 0.1104378179, 0.0317555629, 0.0583589152, -0.0194657147, -0.0461802930, 0.0424477644, 0.1216462180, -0.0042444365, -0.0663088709, 0.0635183752, -0.0911496803, 0.0243893731, -0.0722137094, 0.0404481106, -0.0445679724, 0.0230860095, 0.0319114625, 0.0058007548, -0.0166335981, -0.0006400327, 0.0083707292, -0.0449470766, -0.0756519884, -0.0517604351, -0.0313078538, -0.0809784457, -0.0494364165, -0.0105921216, 0.0402719155, -0.1083553284, -0.0335222781, -0.0338609107, 0.0729021132, 0.0476696379, 0.0206623748, 0.0029452040, 0.0752850771, -0.0563297309, 0.0446992666, -0.0396588221, 0.0172295533, 0.0310533047, 0.0323590338, 0.0926630273, 0.0157345850, -0.0398202315, 0.0625423416, -0.0080676684, 0.1154134274, 0.0779508650, 0.1048487425, -0.0711899400, 0.0376649462, 0.0203615762, -0.0886594057, 0.0820653960, 0.1127223000, 0.0160631500, 0.0026753307, 0.0304412264, 0.0247555450, 0.0396457799, -0.0160816126, -0.1010922641, -0.0066313539, -0.0431619324, 0.0164997559, -0.0699777752, 0.0720940158, -0.0472927615, 0.1028633639, 0.0131558916, -0.0698090941, -0.0838756487, 0.0330341794, -0.0061202850, 0.0135940844, -0.0795276538, -0.0148063749, 0.0462926477, -0.0562877394, -0.0789232180, 0.0444067046, -0.0822014436, 0.0863753483, 0.0512003079, -0.0019488075, 0.0299655162, 0.0358750857, -0.0195682514, -0.0005101819, -0.0639266297, -0.1016348377, 0.0240648203, 0.0004462558, 0.0354265310, 0.0811421797, 0.0461409576, 0.0729964450, -0.0250295177, -0.0386916362, -0.0495724604, 0.0822637603, 0.0206805654, 0.0460208356, -0.0370596126, -0.0440690704, 0.0723829195, -0.0529384650, -0.0630817413, 0.0477538668, -0.0984420702, 0.0931678861, 0.0193058234, -0.0009079076, 0.0275406484, 0.0129606761, 0.0615643412, -0.0546131432, -0.0153760696, -0.0019631139, -0.0713122040, 0.0378541909, 0.0171153229, -0.0171559174, -0.0122765256, -0.0564384088, 0.0561820604, 0.0139995730, 0.0115161575, -0.0576619953, -0.0198253561, -0.0047410489, -0.0660048798, 0.0149304625, 0.0262080543, -0.0563363768, 0.0725355446, -0.0511432737, -0.0703276023, 0.0610959940, -0.0483449101, -0.0749097690, -0.0741041750, 0.0120579842, 0.0397419594, 0.0298735444, -0.0151383942, -0.0642099082, 0.0514483713, -0.0035440163, 0.1020189747, 0.0063040219, 0.0466990024, 0.0367009938, -0.0505249389, 0.0606412254, -0.0477429852, -0.0594570041, 0.0332472026, 0.0521300249, -0.0021157444, -0.0753569901, -0.0541495979, -0.0269710626, 0.0100343805, -0.0755635425, -0.0215073749, 0.0076506343, -0.0807042643, 0.0592889003, -0.0669468343, -0.0336465500, 0.0148157086, -0.0186365247, 0.0353667177, 0.0478717498, 0.0338208042, -0.0469951294, -0.0021836881, 0.0254698396, -0.0429532751, 0.0551606305, 0.0032692880, 0.0815330148, -0.0430394262, 0.0574374348, 0.0640612915, -0.0202877484, -0.0755698457, 0.0579145476, -0.0284540839, -0.0353011154, 0.0098768519, 0.0361345150, -0.0587562323, -0.0796496719, 0.0737561956, -0.0808085948, -0.0538324863, -0.0765893608, -0.0276478790, 0.0468200222, 0.0470024161, -0.0131299375, 0.0138184642, 0.0447323024, -0.0574929379, 0.1001353115, 0.0161424074, 0.0174394138, 0.0185260512, -0.0058135567, 0.0321121141, 0.0748782456, -0.0454952195, 0.0260468461, 0.0379602350, -0.0182207935, 0.0555111393, -0.0686330274, 0.0463110618, -0.0402820483, -0.0783983320, 0.0021307385, 0.0550479144, 0.0045208493, 0.0328991488, -0.0524939932, 0.0479395203, -0.0364962183, 0.0666050613, 0.0228861608, 0.0723371580, -0.0172243398, 0.0336033590, -0.0684050173, -0.0613357536, 0.0346472561, -0.0873605981, -0.0534304604, -0.0315771252, -0.0430328473, -0.0536475293, -0.0615085773, -0.0165047683, 0.0771381557, 0.0348987356, -0.0397580452, -0.1055945307, -0.0504814945, -0.0325888656, -0.0386921018, -0.0407473743, 0.0805053189, -0.0134530142, -0.0417962819, -0.1177741811, 0.0778011978, -0.0247557722, 0.0477446094, 0.0147717278, 0.0106549170, -0.0508896746, 0.0695709363, 0.0116644520, 0.0471710898, 0.0351304300, -0.0257807635, -0.0702333301, -0.0622473694, -0.0701255649, -0.0042906594, 0.0091440128, 0.0381048322, -0.0454345644, -0.0835175216, -0.0476770289, 0.0022075698, -0.0894096419, 0.0145675717, -0.0432271436, 0.0371670574, 0.0965229571, -0.0145533485, -0.0875137523, -0.0457327105, 0.1039906591, -0.0845653713, 0.0604286790, 0.0103240106, 0.0459625013, -0.0020408418, 0.1049076021, -0.0177239645, 0.0175422318, 0.0022747752, 0.0398899131, -0.0003291862, 0.0472983643, -0.0657004789, -0.0584671758, 0.0155760655, 0.0377537645, 0.0207332950, 0.0695599169, 0.0023408826, -0.0308508035, -0.0535830744, 0.0310578924, -0.0269485041, -0.0338861980, 0.0057621715, 0.0077694980, 0.0153456442, 0.0223185662, -0.1007789522, 0.0217774007, -0.0028978046, 0.0639483556, 0.0647357553, -0.0193885807, 0.0234865062, 0.0535105988, -0.1076190919, 0.0812276825, -0.0418908522, 0.0009408906, 0.0029975050, 0.0382642262, 0.0240896400, -0.0295626335, -0.0671904534, -0.0675055310, 0.0684498921, -0.0652162880, 0.0693251714, 0.0312777832, -0.0617121495, 0.0431983322, -0.0770697296, -0.0977388248, -0.0425572395, 0.0412401408, 0.0160303973, -0.0801384822, -0.0142032914, 0.0145292133, -0.0084509598, 0.0572074465, 0.0469894819, 0.0788550228, 0.0482619368, -0.0797122046, -0.0592597201, 0.0256954562, 0.0483777598, -0.0376766101, 0.0009034089, -0.0630977228, 0.0718534812, -0.0228450149, 0.0898179635, -0.0704652518, 0.0888746679, 0.0244750958, 0.0503484644, 0.0212939866, 0.0500958376, 0.0731890053, 0.1061104760, 0.0654004216, 0.0525482148, 0.0609178469, -0.0800894052, -0.0068232385, -0.0010446309, 0.0631798357, 0.0159828980, 0.0268518422, -0.0151312146, -0.0068925568, -0.0251723677, 0.0173835866, 0.0481577292, -0.1020283774, -0.0526040271, 0.0029174823, 0.0265051648, -0.0241113845, -0.0537722744, 0.0104002664, 0.0362147465, 0.0972564667, 0.0619893484, -0.0597434565, -0.0508517213, 0.0058375071, 0.0137285329, -0.0535238311, -0.0530626327, 0.0181018338, 0.0396065898, -0.0814286470, -0.0663679764, 0.0074414513, 0.0223141573, -0.0711380467, -0.0039216615, 0.0658991337, 0.1100510061, 0.0377955064, 0.0513911434, -0.0062932093, -0.0252558812, -0.0434325561, 0.0491162091, -0.0535101444, -0.0279792808, -0.0516692773, -0.0745329857, -0.0056090439, 0.0107273078, 0.0432808883, 0.0458319969, 0.0112339910, 0.0583268367, 0.0097691752, -0.0616477281, 0.0236899480, -0.0656057298, -0.0892644376, 0.0659692958, 0.0656715482, 0.0728507638, -0.0051575662, -0.0238817688, 0.0907415301, 0.0008069898, -0.0056885234, 0.0372554176, 0.0362430178, 0.0372762941, 0.0434762165, 0.0688583851, 0.0391258858, 0.0162835568, 0.0193548054, -0.0015045097, -0.0033379907, -0.0873035565, -0.0393795669, -0.0680161193, -0.0210052878, -0.0264569446, -0.0007828439, 0.0781661347, -0.0538541675, -0.0324346535, -0.0384671278, -0.0580120236, -0.0272648167, -0.0595180988, -0.0651196837, -0.0500645228, 0.0060261358, 0.0920145065, 0.0821403638, -0.0086703422, 0.0713090077, -0.0790830553, 0.0621878095, 0.0692751035, 0.0570573881, 0.0187050551, 0.0460337810, -0.0251746438, -0.0553977154, 0.1226837710, -0.0249748938, -0.0227012374, 0.0862532854, -0.0093876375, -0.0743045583, 0.0317263938, -0.0305384733, 0.0304314625, -0.0441973731, 0.0758909509, 0.0241156593, 0.0768525749, -0.0389337614, 0.0798583701, -0.0061833654, -0.0441619419, 0.0718006194, 0.0433005281, 0.0543841310, -0.0334503539, -0.0490458533, -0.0173175149, 0.1014038920, -0.0208908934, -0.0630664229, 0.0482367277, -0.0424170457, 0.0966470763, -0.0425744653, 0.0589009784, -0.0379002281, 0.0075847367, -0.0050805057, 0.0547114387, 0.0680547282, -0.0052289115, 0.0146514671, 0.0575927310, -0.0006894373, 0.0547585562, -0.0570858121, 0.0662268847, 0.0265286472, -0.0053033014, 0.0977546945, 0.0598955043, -0.0463969819, 0.0535162762, 0.0062147700, 0.0265758988, -0.0621204749, 0.0174364857, 0.1099203005, 0.0432502106, 0.0552554838, -0.0039436184, -0.0226598158, 0.0829107612, -0.0016096742, -0.0773590878, -0.0977625176, -0.0487633757, -0.0016589855, 0.0470301509, 0.0414609127, -0.1055708230, -0.0149259223, -0.0817264095, 0.0357774459, 0.0434580520, 0.0481825247, 0.0164993815, -0.0708895400, 0.0615358502, -0.0385309830, 0.0378083475, 0.0777429938, 0.0310244262, 0.0029424177, 0.0226688292, -0.0745355785, 0.0219430327, -0.0749156103, -0.0587317199, -0.0058456706, 0.0781232044, 0.0441749059, -0.0509698354, 0.0102746300, -0.0735854283, 0.0225222148, 0.1000204086, 0.0276358854, 0.1309773326, -0.0705626681, 0.0695560873, 0.0874112919, -0.0006311288, 0.0498384312, -0.0977029875, 0.0921764746, 0.0043534110, 0.0802769959, -0.0220335145, -0.0051549016, 0.0131464293, -0.0381887779, -0.0470191427, -0.0270920116, 0.0975941345, 0.0524166226, -0.1102453396, -0.0940094292, 0.0410519950, -0.0508594736, 0.0556056462, 0.0207618438, 0.0606401674, -0.0106467959, 0.0880993903, 0.0092895543, -0.0136206625, -0.0270671193, 0.0496932529, -0.0765353963, -0.0003757010, -0.0802473202, -0.0247061960, -0.0520462431, -0.0543361232, 0.0512237586, 0.0169800427, 0.0623323135, 0.0886240900, 0.0144636873, 0.0251250453, 0.0159806814, 0.0564019606, 0.0062205652, 0.0750657618, -0.0453207232, 0.0348037854, 0.0709495693, -0.0503269657, -0.0565769412, -0.0860059485, 0.0056724716, -0.0373013727, 0.0144629879, 0.0185665283, -0.0213685893, -0.0125880223, -0.0016642597, 0.0678763986, 0.0369553231, 0.0875095502, -0.0002815400, 0.1015486494, -0.1540312022, 0.0786839277, -0.0593674369, -0.0370647982, 0.1017114520, -0.0517526343, -0.0410525762, -0.0361271389, 0.1387802511, 0.0426794663, -0.1057767048, 0.0862041861, -0.1072530001, 0.1326212585, -0.0437807217, -0.0388565436, 0.0104201734, 0.0032629289, -0.0733259991, 0.0222508032, -0.0895837247, 0.0701012090, 0.0759796724, -0.0850114748, 0.0197543334, 0.0919927880, -0.0306133274, 0.1127269268, 0.0691269562, 0.0230713226, 0.0454267338, 0.0701080635, -0.1005757228, 0.0965733007, 0.0826045275, 0.0108094187, 0.0297245122, 0.0520769060, 0.0266828220, 0.0090349941, 0.0513313524, -0.1064789817, -0.0646207407, 0.0622753762, -0.0107721630, 0.0552099496, 0.0110478895, 0.0588628612, 0.0802513063, -0.0779502690, 0.0720282272, -0.0477987751, -0.0859422088, 0.0072561721, -0.0461648703, -0.0607776009, -0.0243990477, -0.0515122004, -0.0529670231, 0.0308196098, -0.0594317466, 0.0561689287, 0.0241389275, 0.0552913621, 0.0609398112, -0.0198954549, -0.0523980670, 0.0097710025, 0.0567414574, 0.0513043664, 0.0162780415, 0.0368963443, 0.0652502924, -0.0593641885, -0.0666593611, 0.0113526797, -0.0190569237, -0.0743363053, -0.0731664672, -0.0208407380, 0.0099153938, -0.0700606406, 0.0086422721, 0.0145045649, -0.0069748694, 0.0045551592, 0.1064051986, 0.0557180196, -0.0231022164, 0.0711904094, -0.0187881626, 0.0631421730, 0.0176939256, -0.0992076769, -0.0004242923, -0.0365213230, -0.0394963957, 0.0604525469, 0.0616160668, -0.0219945256, -0.0969918892, -0.0341139026, -0.0710005462, -0.0519468300, 0.0573924370, -0.0799888000, 0.0216042139, 0.0137828654, 0.0670498610, 0.0113606732, -0.0289212577, 0.0156482738, -0.0133713987, -0.0964021683, -0.0536835641, -0.0881926939, -0.0017935782, -0.0027566515, 0.0689114332, -0.0652774349, -0.0308096968, -0.0189537611, -0.0130803036, 0.0132404678, 0.0687336698, -0.0274778381, -0.0298554916, -0.0645195246, -0.0382522941, -0.0652211383, 0.0959499329, 0.0067044711, 0.0969095752, 0.0070613935, -0.0118974866, -0.0058714412, 0.0681953505, 0.0220009983, -0.0684593245, -0.0076602176, -0.0857287198, 0.0808725283, 0.0838678703, 0.0046887072, -0.0415208302, 0.0034231280, 0.0582398139, 0.0342063643, 0.0075654197, 0.0701882392, 0.0782395452, -0.0154838972, 0.0248393212, -0.0572256334, 0.0232979022, 0.0667874664, 0.0079498580, -0.0093300352, 0.0383787565, 0.0802179426, -0.0135066397, -0.0628951788, -0.0006205942, 0.0161137264, -0.0627841502, 0.0532418378, -0.0735328943, -0.0461119600, 0.0626250654, -0.0257557295, 0.0101302136, 0.0976468027, 0.0006507257, 0.0712514147, 0.0377094001, -0.0176478140, 0.0327611901, -0.0284303632, -0.0003993861, 0.0449260734, 0.0082636625, 0.0943337977, 0.0695051998, 0.0102510396, 0.0061731017, -0.0438289009, -0.0317126513, -0.0124911861, 0.0714358240, -0.0734696314, -0.0266346000, 0.0016398625, -0.0495297909, -0.0171450190, 0.0285788924, -0.0521777384, 0.0252685118, 0.0000955653, 0.1038250998, -0.0119998688, 0.0743820220, -0.0425994992, -0.1000124887, 0.0642294213, -0.0529133081, -0.0628611520, -0.0256282259, 0.0248095598, -0.0008629414, -0.0247078594, -0.0258638877, 0.1020326614, -0.0804274678, -0.0314625651, -0.0412695855, 0.0907326415, 0.0528430082, 0.0178180393, 0.0843409598, -0.0484002680, -0.0630530044, -0.0576664396, 0.0189348999, 0.0771821290, -0.0918311849, 0.0706638247, 0.0161085278, -0.0414808802, 0.0124856681, -0.0932220966, -0.0676209629, 0.0546824262, 0.0126143610, 0.0370678939, -0.0215198155, 0.0599248372, -0.0947795510, 0.0482685901, 0.0725510791, 0.0708709508, -0.0204928070, 0.0045602052, -0.0112883355, 0.0271486547, 0.0229504146, 0.0965845883, -0.0145945568, -0.0635783076, 0.1182982996, 0.0187447164, 0.0878998786, -0.0223567840, -0.1012719125, -0.0199531503, 0.0502003431, -0.0441087894, 0.0515088029, 0.0828599855, -0.0122703062, 0.0238235947, 0.0112486565, -0.0811346918, -0.0290405471, -0.0465618297, 0.0445292667, -0.0063594803, -0.0781191736, -0.0330071524, -0.0366036519, -0.0301392786, -0.0552884899, -0.0159229878, 0.0608403198, -0.0102327792, -0.0051295664, -0.0105431937, -0.0146975713, 0.0476127751, -0.0423564389, 0.0806958824, -0.0485251695, -0.0317817293, -0.0031528801, -0.0688491538, -0.0272656847, -0.1014906690, 0.0013201074, -0.0742204040, 0.0667651221, -0.0569137782, -0.0692989528, 0.0691624358, 0.0991169736, 0.0884454921, 0.0472330414, -0.0008773669, 0.0293991901, -0.0320961885, 0.0322706997, -0.0763734728, -0.0549554341, 0.0488184541, -0.0448626056, 0.0334640294, 0.0604677610, 0.0839158595, -0.0049488214, -0.0148310391, -0.0103179216, 0.0239269249, 0.0688495860, -0.0461257026, -0.0155769400, -0.0486274287, 0.0141462879, 0.0302886982, -0.0849051178, 0.0366649814, -0.0590357929, 0.0381369665, -0.0807580948, -0.0634193569, 0.0081418129, -0.0842277110, -0.0556688234, 0.0657530874, 0.0512557328, 0.0407065600, -0.0671436116, 0.0410837717, -0.0227868576, -0.0419186540, 0.0321927257, 0.0086585507, -0.0425272249, -0.0503158607, 0.0974741429, 0.0808554888, 0.0881130844, 0.0466818027, 0.0344440304, -0.0157949124, -0.0260027032, 0.0403264835, -0.0977387130, 0.0792894438, 0.0219707377, -0.0298968200, 0.0100678587, -0.0034393072, -0.0502983369, -0.0111544076, 0.0780520812, -0.0553481951, 0.0731891766, 0.0260551088, -0.0569700114, 0.0229486562, 0.0197660904, 0.0159555376, -0.0728346631, -0.0759446695, 0.0601419099, -0.0385929346, 0.0415953770, 0.0116216531, -0.0425089300, -0.0774131119, 0.0455604494, 0.0137673290, 0.0471715294, 0.0379832573, -0.0483289473, 0.0484818071, 0.0596440621, -0.0477705970, 0.0716246516, -0.0326203182, -0.1050947234, -0.0057064337, -0.0032634113, -0.0178467650, 0.0663305223, 0.0669440404, 0.0119257485, -0.0510032177, 0.1002528220, -0.0338325836, 0.0347402319, 0.0218796618, -0.0007034480, 0.0719865933, 0.0901659206, -0.0344701372, -0.0714014918, -0.0424349122, -0.0079540536, 0.0843792260, 0.0496495403, -0.0522063822, -0.0053842315, 0.0445574671, 0.0483611226, -0.0897281542, -0.0309850760, 0.0491484180, -0.0183715709, 0.0770161450, -0.0044850302, -0.0077693444, -0.0907397047, -0.0719019398, -0.0821078122, -0.0829989240, 0.0148507552, 0.0660319105, 0.0386940166, 0.0440795720, -0.0665419176, -0.0064935931, 0.0523031652, -0.0335111953, -0.0233517438, -0.0239316747, 0.0334301591, -0.0774360374, -0.0898317620, 0.0299224462, 0.0159920007, 0.0129415412, 0.0435046703, -0.0698653460, -0.0597311966, -0.0746490359, 0.0074538277, -0.0119548971, -0.0292453580, -0.0545586422, 0.0326674394, 0.0627195090, -0.0131176012, -0.0548445843, -0.0226497818, 0.0285932906, 0.0658999532, 0.0565954112, 0.0376876630, -0.0087230410, -0.0256450735, 0.0073829005, -0.0234163515, -0.0115006398, 0.0789152905, 0.0696190521, 0.0549947731, 0.0270268489, -0.0017171312, 0.0394058190, 0.0019891735, -0.0410170481, -0.0426747426, 0.0422068313, 0.0588472523, 0.0425306186, 0.0222698320, -0.0417793170, -0.0193345062, 0.0155505072, 0.0743428320, -0.0609353893, -0.0246198196, -0.0513275340, 0.0364474021, -0.0233966634, -0.0359537750, -0.0269458611, 0.0455012582, 0.0301536322, -0.0296705160, 0.0089581301, -0.0187869072, 0.0799059346, 0.0400704779, -0.0052272333, 0.0485313348, 0.0635592341, -0.0689264610, -0.0085940138, -0.0504999086, -0.0505907051, 0.0534072556, -0.0486300439, -0.0600609370, 0.0826685950, 0.0260253921, -0.0136451907, 0.0794514641, 0.0255404841, 0.0516975410, 0.0165370516, -0.0631964281, -0.0219983403, -0.0189995691, 0.0214803461, 0.0226894356, 0.0712505654, 0.0321358219, 0.0809759051, 0.0640257150, 0.0513286665, 0.0504368171, 0.0924099833, -0.0356145278, -0.0357736349, -0.0190042760, 0.0611073971, 0.0822315514, 0.0255948938, 0.0006217262, 0.0985398963, 0.0196492951, 0.0196140669, -0.0874154940, 0.0470271334, 0.0543143377, 0.0297077559, -0.0055683488, 0.0345776677, -0.0359160341, 0.0500060990, 0.0244497638, 0.0736882836, 0.0159489792, 0.0402849726, 0.0204582661, -0.0381494947, 0.0590995289, 0.0573859103, 0.0304399915, 0.0061417073, -0.0099705877, -0.1368993670, 0.0507185906, -0.0273191761, 0.0123042213, -0.0708405599, -0.0118915020, 0.0109338257, 0.0162487347, 0.0621489845, -0.0296445396, 0.0311576091, -0.0162960682, 0.0519785360, 0.0995696336, -0.0506395921, -0.0117923068, 0.0176765416, -0.0321018845, 0.0708773062, -0.0109930607, 0.0362681672, -0.0078844335, 0.0306749735, 0.0075980593, -0.0403345376, -0.0280745421, 0.0317284949, 0.0462220423, -0.0143796941, -0.0233862232, 0.0711340681, -0.0652432963, -0.0776443928, 0.0505991690, -0.0268694498, -0.0195489451, -0.0671620369, 0.0106068552, 0.0581447333, -0.0656693354, -0.0261791442, 0.0369961560, 0.0113861291, -0.0450594686, 0.0089036170, 0.0651080683, -0.0555235595, 0.0345058814, -0.0130580049, -0.0080959210, 0.0275677200, 0.0531780161, 0.0668640882, -0.0666683167, -0.0293511208, 0.0479387790, 0.0466476381, -0.0934623182, -0.0256468244, 0.0961134434, 0.0333962142, 0.0500231609, -0.0826806054, -0.0545620024, 0.0117556909, -0.0157711264, 0.0479555875, 0.0247272532, -0.1290893853, 0.0450000167, -0.0319573916, -0.0909592286, 0.0090901442, 0.0074860379, -0.0386133865, 0.0002144083, -0.0129285958, 0.0688096508, -0.0720279664, 0.0277616009, -0.0076275426, 0.0464994498, 0.0070151673, 0.0429575816, -0.0427369140, 0.0301713552, 0.0842030942, -0.0175205674, -0.0262330025, 0.0436023511, 0.1036125347, 0.0766974613, -0.0103223538, -0.0267820563, 0.0366245359, 0.0581770279, 0.0475502126, 0.1067112163, 0.0261142459, 0.0035148356, -0.0044916756, -0.0005204109, 0.0397519395, -0.0198143274, 0.0072564096, -0.0547808707, -0.0896626338, -0.0923268422, -0.0230199061, 0.0335784741, 0.0235470459, -0.0496611260, -0.0010418614, 0.0080945976, -0.0647024363, -0.0300934017, -0.0364294238, 0.0551614091, -0.0611081496, 0.0251745339, 0.0668660700, -0.0368400849, -0.0131456293, 0.0320964120, -0.0206674431, -0.0614314862, -0.0862048194, 0.0688565820, -0.1131574661, 0.0527791902, -0.0076611363, 0.0323468223, -0.0379180610, -0.0666863024, 0.0265811551, -0.0236869697, -0.0420924686, 0.0183485709, 0.0674955323, -0.0338927023, -0.0364717059, -0.0549664013, -0.0365766101, 0.0611869171, -0.0585210919, 0.0261811651, -0.0525673851, -0.0221183710, 0.0682273731, 0.0631298125, 0.0238224193, -0.0227658730, -0.0772728473, -0.0865311846, -0.0317275412, 0.0586480275, 0.0292888843, 0.0148282461, -0.0925802216, 0.0051257210, 0.0946132243, -0.0375422090, -0.0567362979, 0.0620716885, 0.0840579718, -0.0120263025, 0.0380436592, -0.0546461232, -0.0414557084, 0.0918327942, 0.0338102952, 0.0204768367, 0.1344250739, 0.0350905992, -0.1078876108, 0.0598509796, -0.0094698509, -0.0998523682, -0.1063552722, -0.1368052363, -0.0946208090, -0.0344150364, 0.0870912522, 0.0571342446, -0.0447140671, -0.0254891571, 0.0140172290, 0.0760777369, 0.0624144413, -0.0585529841, -0.0511355251, -0.0637983531, 0.0686990246, -0.0346608385, -0.0434723049, -0.0584326796, 0.0346227363, 0.0301370956, -0.0923937187, -0.0179488920, 0.0153428679, -0.0826268569, 0.0444883779, 0.0955409929, -0.0761637911, -0.0263234004, 0.0836199448, -0.0702951998, 0.1271014363, -0.0577081293, 0.0448718071, -0.0986514613, 0.0389878079, -0.1049695313, -0.0140398396, 0.0499074534, 0.0787163228, -0.0217337292, 0.0629799068, 0.0363136195, 0.0340900235, 0.0011362752, 0.0509814993, 0.0081963576, -0.0751012787, 0.0670414269, -0.0373584628, -0.0394850075, 0.0501752906, -0.0445246808, 0.0564284027, 0.0186610613, -0.0219072774, 0.0520421267, -0.0664390922, 0.0271180868, 0.0093234554, 0.0067385971, 0.0752281472, 0.0232608616, -0.0366111435, 0.0218645837, -0.0401167832, 0.0361690484, -0.0579253994, 0.0354836881, 0.1075880378, 0.1128781512, 0.0079230322, -0.0500356257, -0.0838471577, 0.0628112480, -0.0373112261, 0.0185820051, 0.1091590077, -0.0661971569, 0.0718382448, -0.0557051860, 0.0239713565, 0.0876954198, 0.0700486824, -0.0523546264, 0.0239687562, 0.0422790758, -0.0321071334, -0.0475318544, 0.0378498062, -0.0720294565, -0.0125894276, -0.1012543887, -0.0317424200, -0.0075109396, 0.0596465804, -0.0350402184, -0.0861148834, -0.0162899867, -0.0808514431, -0.0334001966, 0.0232555848, -0.0903670341, -0.0509537123, -0.0007436409, 0.0698159710, 0.0691219047, -0.0428071097, -0.0164888594, -0.0468616374, -0.0272848718, 0.1035122573, -0.0561133251, 0.0010717364, -0.0609439500, 0.0437258072, -0.0971824750, 0.0123899579, 0.0166248232, 0.0314571857, 0.0879387558, 0.0153681831, 0.0631500334, 0.0454797670, 0.0127629340, -0.0520640314, 0.0294730719, 0.0165828783, 0.0813419744, 0.0189436544, -0.0775961056, 0.0565524586, -0.0484657511, -0.0415490642, -0.0211330745, -0.0696069673, -0.0336302146, -0.0122655043, 0.0078585511, 0.0538719147, 0.0493037961, 0.0385884382, 0.0175926145, -0.0172528066, 0.0379448049, -0.0401252098, -0.0047287750, 0.0237208493, 0.0592326820, -0.0044845385, 0.0278495941, -0.0706112161, -0.0213382468, -0.0594782457, -0.0253365990, 0.1084292904, -0.0034186156, 0.0577318855, -0.0815431625, 0.0152827306, 0.0736228153, -0.0575197153, -0.0361190699, -0.0450567007, -0.0014184901, 0.0467382260, 0.0729733855, -0.0304837152, -0.0684167817, 0.0337529629, -0.0593894906, -0.0300656650, -0.0272028577, 0.0489828773, 0.0115235327, -0.0437892862, -0.0511422083, -0.0609443411, -0.0705350637, -0.0034931207, 0.0515916459, 0.0800569132, 0.0051470022, 0.0145409582, 0.1030191481, 0.0509001538, -0.0632508025, 0.0610505342, -0.0475332588, 0.0081772814, -0.0772520825, -0.0214492418, -0.0042103808, 0.0644811764, -0.0542097799, -0.0517343432, -0.0934174284, 0.0103558488, 0.0127558345, -0.0286444854, 0.0839834213, -0.0815525725, 0.0111505184, 0.0778236613, 0.0092852321, 0.1035258994, -0.0639744699, -0.0476940311, -0.0133968806, -0.0647520423, -0.0209622718, -0.0498810783, 0.0424565077, 0.0350550003, -0.0638197362, -0.0967311263, -0.0563485362, -0.0471512713, 0.0327361375, -0.0556806289, 0.0571295992, -0.0156775638, -0.0070692329, 0.0424551927, -0.0404162630, 0.0612829588, -0.0006515973, -0.0646975189, -0.0423859917, 0.0359278284, -0.0630979463, 0.0160971805, -0.0616020374, -0.0015262804, -0.0577459596, -0.0351190753, 0.0189132225, -0.0300258789, 0.0206179582, 0.0780955181, -0.0680090189, 0.0640379488, 0.0859092996, -0.0340298563, -0.0672283247, -0.0108148018, -0.0917941555, 0.0770612806, 0.0453900136, -0.0482786521, 0.0625094026, 0.0264460128, 0.0332458019, 0.0490108617, 0.0406608805, 0.0432946123, -0.0214102846, -0.0686133131, 0.0321186110, -0.0277446751, -0.0116768209, 0.0498744324, 0.0409979597, -0.0062683444, 0.0448385626, 0.0132268956, 0.0259315893, -0.0516970642, 0.0572991297, 0.0250893347, -0.0465981364, 0.0677105337, 0.0209144689, -0.1110757515, 0.0505181104, -0.0125770373, 0.0125388810, 0.0030589849, -0.0504411533, -0.0377475582, 0.0136001213, 0.0243763532, 0.0158268772, -0.0356452763, 0.0685455725, 0.0655341893, 0.0449047573, -0.0501374900, 0.0187924877, 0.0893416554, 0.0508667342, -0.0771863014, -0.0565607175, 0.0468382016, 0.0862050280, 0.0596719608, -0.0225372165, 0.0425869040, -0.0010246345, -0.0292629935, 0.0359526314, 0.0621567406, 0.0180940125, 0.0091972966, -0.0028900236, 0.0017478748, 0.0811761916, -0.0887464508, -0.0029254893, -0.0161641482, -0.0244563110, 0.0803293884, 0.0140949758, 0.0701379031, 0.0397167504, -0.0050042775, 0.0349897817, -0.0450910255, 0.0408838280, 0.0430077389, -0.0759879649, -0.0036776015, -0.0552649386, 0.0403665043, 0.0477019511, 0.0151913418, 0.0099682296, 0.0475739203, -0.0178664699, 0.0569032878, -0.0723228082, 0.0077367486, 0.0077799568, -0.0484302454, 0.0470897518, 0.0355073847, -0.0463510789, -0.0403069779, 0.0218571313, -0.0071351919, 0.0144365709, 0.0514151081, 0.0376090780, -0.0717724338, -0.1092714742, -0.0278653000, 0.0464842394, -0.0513579324, 0.0220583268, 0.0192053560, -0.0443876050, 0.0464169420, 0.0135450419, 0.0407928117, 0.0262800250, 0.0711238831, 0.0226698834, -0.0255220626, -0.0292159934, -0.0083893165, 0.0578366071, -0.0696260482, -0.0246183276, -0.0173219703, -0.0268406328, 0.0278430246, -0.0237827133, 0.0971199274, -0.0234724954, 0.0468971655, -0.0038387410, 0.0073664314, 0.0270933453, -0.0293612424, 0.0204176195, -0.0560105331, 0.0410260633, 0.0087364130, -0.0176865999, 0.0698703080, -0.0184013452, 0.0201409440, 0.0807460099, -0.0574144684, 0.0093146982, 0.0456510596, 0.0182397906, -0.0188928600, 0.0434815921, -0.0238244627, -0.0437055007, -0.0184786748, -0.0251973402, -0.0431271642, 0.0062546330, 0.0324404575, 0.0085822046, -0.0435069352, -0.1113805026, -0.0633646250, 0.0467285402, 0.0022946135, 0.0978300124, -0.0790031552, 0.0030353642, -0.0784239247, -0.0149427066, 0.0846172124, 0.0110120503, -0.0455028340, -0.0740411133, 0.0832002833, 0.0487929992, -0.0342988744, 0.0627895817, 0.0074916496, -0.0938964188, -0.0913651884, 0.0205161292, -0.0045757722, 0.0519996919, -0.0753869414, -0.0263494458, -0.0083350074, -0.0582194999, -0.0192312207, -0.0457405001, -0.0302768461, 0.0857215524, -0.0169450250, -0.0266135838, -0.0396816730, -0.0194411054, -0.0647407696, 0.0075784139, -0.0192575939, 0.0549131706, 0.0195734333, -0.0384785235, 0.0611935258, 0.0808877125, -0.0838714242, -0.0308543630, 0.0391853079, 0.0248323902, -0.0745583773, 0.0797585919, -0.0039557829, -0.0547160879, -0.0777580887, -0.0624661446, 0.0175921246, -0.0972044170, -0.0587687008, 0.0594301671, 0.0188092981, 0.0081633413, -0.0069619003, 0.0736846179, 0.0675351024, -0.0279390328, -0.0527098142, -0.0587510988, -0.0762571618, 0.0634979233, 0.0000304119, 0.0305079669, -0.0351835713, 0.0155209713, 0.0282147843, 0.0146016302, 0.1219006777, 0.0072965547, -0.0071910704, -0.0640707016, -0.1007560492, 0.0437677503, 0.0005653665, 0.0428802818, -0.0415742137, -0.0176753346, 0.0296378173, -0.0685914233, 0.0782564729, -0.0245004464, -0.0657527298, 0.0483138748, -0.0371166840, 0.0631465986, -0.0938038677, 0.0044131665, -0.0951197371, 0.0123803997, -0.0608498454, 0.0005843713, -0.0527451001, 0.0794117078, 0.0426428989, -0.0586611629, 0.0842785612, -0.0753818378, 0.0582579449, 0.0344776772, 0.0864994377, -0.0253924001, -0.0565299056, -0.0274694283, 0.0456774086, -0.0074422429, -0.0141806947, -0.0165640395, -0.0886566192, -0.0852082223, -0.0566423051, 0.0093606627, -0.0434514508, -0.0881259367, 0.1241577715, 0.0802536756, -0.0651885569, -0.0492139310, 0.0370543748, -0.1172203496, 0.0085840123, 0.0668455437, -0.0229287744, 0.0326617546, 0.0555482469, 0.0205060244, 0.0389070883, 0.0380547196, -0.0766694620, 0.0198936332, 0.0541187003, 0.0102163265, 0.0966322944, 0.0479908660, -0.0537331142, -0.0457192659, -0.0127808833, 0.0304035079, 0.0538528971, -0.0172432568, 0.0175907817, -0.0775126889, 0.0507174581, -0.0395655744, 0.0176669769, 0.0518982187, -0.0899371356, 0.0611846894, 0.0417415500, -0.0101253651, 0.0162515827, -0.0016884976, -0.0518880635, -0.0577986352, 0.0178150386, -0.0481893234, -0.0607996397, -0.0204469357, 0.0077428897, 0.0229883902, -0.0052290782, -0.0532457530, 0.0604495704, -0.0080551980, 0.0481934138, -0.0428391770, -0.0699471086, 0.0624134168, -0.0281638242, 0.1082357690, 0.0722721741, -0.0422830358, 0.0298382882, 0.0011916034, 0.0360629149, -0.0744390637, -0.0583684221, 0.0740102082, 0.0123050977, -0.0604767092, -0.1263231337, 0.0069584656, -0.0630599707, -0.0087829968, 0.0440105386, -0.0692159310, -0.0445144139, -0.0950911045, 0.0274205115, 0.0418847650, 0.0117661897, -0.0450531170, 0.0082251001, -0.0489693880, -0.0218123607, -0.1169591993, -0.0100978473, -0.0175523572, -0.0633795112, -0.0632353425, 0.0858877450, -0.0475533009, 0.0094020255, -0.0636333078, 0.0450382791, 0.0653867871, -0.0703393370, 0.0342147574, 0.0499326549, 0.0365791507, -0.0086758528, -0.0181354620, -0.0010459002, -0.0261749104, -0.0945665017, -0.0804066658, -0.1231093481, -0.0150834611, -0.0343219377, 0.0912162811, 0.0119891847, 0.0801727995, 0.0806417987, -0.0005546208, 0.0481092297, 0.0180564467, 0.0247241985, -0.0048881257, 0.0962796584, -0.0830935463, -0.0104241930, -0.0646664053, 0.0562746041, 0.0767676756, -0.1042389870, -0.0545477495, -0.0264624842, -0.0355523564, -0.0339850225, -0.0070505245, -0.0203065611, 0.0382241495, -0.0992808938, 0.0033612128, -0.0538646989, 0.0194496047, 0.0467323475, -0.0097409962, 0.0321530625, 0.0691612363, 0.0442213714, 0.0075022741, -0.0244788099, 0.0227113944, -0.0278015975, -0.0467666648, -0.0039017277, 0.0383271314, 0.0565300584, -0.0131075839, -0.0316870622, -0.0450045504, -0.0402912647, -0.0661331117, -0.0635706857, -0.0624528490, 0.0705548972, 0.0271346755, 0.0468141995, 0.0223413631, 0.0233903788, 0.0352930315, -0.0436482951, 0.0033529722, 0.0326805115, -0.0681691691, -0.1320796162, 0.0435734205, -0.0149730053, 0.0700285584, 0.0062151216, -0.0011915169, -0.0422008857, 0.0443446003, -0.0550772101, -0.0709869117, 0.0035166061, 0.0359955281, 0.0440442190, -0.0516825840, 0.0418352112, 0.0266746599, -0.0427641943, 0.0141055631, 0.0286913440, -0.0280645713, 0.0940140188, 0.0407089666, -0.0407091416, 0.0431707874, -0.0416681617, 0.0821303576, -0.0472535007, -0.1016769037, 0.0383951329, -0.0839152932, -0.0395711362, 0.0996870324, 0.1112114415, -0.0724486336, -0.0117092561, -0.0196884200, 0.1066583246, -0.0483780652, 0.0937900394, 0.0299479198, -0.0856375322, 0.0005908002, -0.1135300770, -0.0467272848, -0.0073861014, 0.0382446758, -0.0399042554, 0.0620600618, -0.0355792195, -0.0408315212, -0.0269472785, 0.0158490948, -0.0207985453, -0.0073334854, -0.0616098791, 0.0736996010, 0.0931702405, -0.0971681774, 0.0177640282, 0.0128681781, -0.0150363557, 0.0067516309, -0.0187889189, 0.0226126760, 0.0090497090, -0.0663501844, 0.0209988579, -0.0524178222, 0.0911140740, 0.0718056038, -0.0103543783, 0.0342949405, 0.1085455194, 0.0724620074, 0.0143227018, 0.0629864112, -0.0524259955, -0.0695256814, 0.0584521182, -0.0429601148, 0.0320165567, -0.0295032915, 0.0515120253, -0.0691079721, -0.0935463160, 0.0705519766, 0.0018851276, -0.0050656078, -0.0684837028, -0.0089390716, -0.0231317133, -0.0417587161, 0.0104047339, -0.0927239954, -0.0031662572, 0.0668860525, -0.0483453944, -0.1102601886, -0.0449126288, 0.0567592233, -0.0054275496, -0.0202938728, 0.0152548300, 0.0459500886, 0.0786925778, 0.0870953649, -0.0089179995, 0.1038981378, -0.0196340196, -0.0949511901, -0.0200547799, -0.0946431309, -0.0389329456, -0.1046754271, -0.0562830269, -0.0590541624, -0.0085925749, 0.0107934438, -0.0770855621, -0.0130238878, -0.0560502484, 0.0373975374, -0.0163414609, 0.0059418241, 0.0016573037, -0.0466401801, -0.0472410955, 0.0388432816, 0.0285642315, -0.0753882676, 0.0027262804, 0.0686315596, -0.0200712010, 0.0111772986, -0.0196544733, -0.0582451336, -0.0424865671, 0.0152764311, -0.0195121318, -0.0286381003, -0.0806701183, -0.0188647974, 0.0233861543, -0.0030430667, -0.0200721622, -0.0355844609, 0.0386458859, -0.0089417733, -0.0534065105, -0.0598672591, -0.0442885086, 0.0201019738, -0.0075707454, 0.0815547705, -0.0044287131, 0.0385189578, 0.0882018209, 0.0617999062, 0.0704011843, 0.0278412905, -0.0090770721, 0.0511510260, -0.0482534766, 0.0334970169, -0.0464352258, -0.0475742370, 0.0112363053, -0.0309997387, -0.1027748138, 0.0765452310, -0.1168999895, 0.0837492645, -0.0244134795, 0.0453356914, 0.1057826579, 0.0300504081, 0.0312933847, 0.0346575901, 0.0067572440, -0.0744857714, 0.0382872075, 0.0317286253, -0.0352217108, 0.1019449532, 0.0286907405, 0.0241940580, -0.0748899803, -0.0475421995, 0.0784966648, 0.0446574837, 0.0362506881, -0.0394586734, 0.0158945918, 0.0640951768, 0.0556883961, -0.0901536345, -0.0752544329, -0.0781823993, 0.0136455847, -0.0807934999, -0.1062682569, -0.0477387495, 0.0067657162, 0.0513201840, 0.0445262231, -0.0277017988, 0.0662650988, -0.0128779057, -0.0490230657, -0.0581128262, 0.0435579494, 0.0229744166, 0.0619360358, 0.0184487961, 0.0375609770, 0.0291304234, -0.0727165118, -0.0055699577, -0.0017803538, -0.0468951352, -0.0269123353, -0.0068453960, 0.0203149524, 0.0637205914, -0.0487274230, 0.0433482416, -0.0871033669, 0.0410819948, -0.0793876722, 0.0423978083, 0.0529960319, -0.0193831716, -0.0366516672, -0.0611255877, -0.0685838535, 0.0577190854, 0.0030311372, -0.0912687555, 0.0405899324, 0.0221197493, -0.0456303693, 0.0027335265, -0.0249875002, 0.0084118452, -0.0705314726, -0.0245683398, 0.0070609744, -0.0202289782, -0.1134290472, -0.0193684790, 0.0283968505, 0.0675994232, 0.0179941189, -0.0173628423, 0.0094698574, 0.0521579236, -0.0999353006, 0.0561514422, 0.0043197214, -0.0329687409, 0.0116345743, -0.0654166266, -0.0070643206, -0.0098854061, -0.0658051446, -0.0002597093, -0.0878915936, 0.0956753790, -0.0459828600, 0.0809955224, 0.0874168947, -0.0009166864, 0.0726572424, 0.0193017572, -0.0090195648, -0.0737738237, -0.0529891960, 0.0924749821, 0.0216355026, 0.0312330760, -0.0026383435, 0.0392228402, 0.0727424622, -0.0159540325, 0.0187592264, 0.0573137291, -0.0058614505, -0.0615067668, 0.0111094331, 0.0557473302, 0.0429019183, 0.0371880867, -0.0054494231, -0.1165785342, -0.0319685340, 0.0063394574, 0.0487307347, -0.0171338990, -0.0081979930, 0.0164546762, -0.1012937203, -0.0807802603, 0.0290670637, -0.0489047877, 0.0725890994, 0.0587242134, 0.0339140370, 0.0392362624, -0.0443024486, -0.0649544597, 0.0662072226, 0.0400243364, 0.0922429338, 0.0091204653, 0.0334708393, -0.0411175601, -0.0650162920, 0.0227654316, -0.0108907130, 0.0210865438, -0.0406586751, -0.0948974341, 0.0631415993, 0.0583333895, 0.0331713706, -0.0929403305, -0.0546195097, -0.0004453734, 0.0482033491, 0.1242811084, -0.0305425078, -0.0054801828, -0.0912421271, 0.0673923343, -0.0140783554, -0.0630106479, 0.0880644172, -0.0064855283, -0.0450394414, 0.0025971250, -0.0310317818, -0.0063807233, -0.0702895969, 0.0913009569, 0.0370520726, -0.0530544482, -0.0091269435, 0.0665723234, 0.0606174506, -0.0180569310, -0.0419501476, -0.0728137270, -0.0227875523, -0.0326041169, 0.1033002362, 0.0141171478, 0.0539286248, -0.0265470725, -0.0568867885, -0.0514086224, -0.0419889279, -0.0273815617, -0.0347794592, 0.0484423079, -0.0189176220, -0.0290566422, 0.0798710883, -0.0720758215, -0.0142438542, 0.0192314368, -0.0282237735, -0.1167704761, 0.0182371419, 0.0293261800, -0.0312189106, 0.0263425820, -0.0314140283, -0.0037693772, -0.0787522495, -0.0494405478, 0.0803791285, -0.0374571681, -0.0015194227, 0.0312034823, -0.0320267268, 0.0335951746, -0.0119955437, -0.0505926125, -0.0684285834, -0.0331697389, 0.0124531751, 0.0242395848, -0.0863832533, 0.0472776294, -0.0585381277, -0.0339128263, 0.0178381037, -0.0783070400, 0.0947160646, -0.0651237443, 0.0417780466, 0.0132954055, 0.0024329103, 0.0296264812, -0.0486384928, -0.0234073419, -0.0814268813, -0.0332675204, 0.0268426929, -0.0258006006, 0.0060324860, 0.0138631249, -0.0392873175, 0.0629895851, -0.0209556744, -0.0529365726, 0.0062828823, -0.0245266389, -0.0550526679, -0.0722452402, -0.0757207572, -0.0669900030, 0.0319832712, 0.0218806416, -0.0307518560, 0.0563208833, 0.0640043393, -0.0455211475, -0.0374137610, -0.1049712896, -0.0111793419, -0.0172308143, -0.0460040495, 0.0185952038, -0.0096894307, -0.1153427809, 0.0952402502, 0.0299468394, -0.0690490827, 0.0460108146, 0.0066782534, 0.0419691093, -0.0990116000, -0.0619534440, 0.0778122395, 0.0839506835, -0.0296060126, -0.0530040748, -0.0533046387, -0.0750399828, 0.0834488496, 0.0755916610, 0.0141875455, -0.0493605919, -0.0916268602, -0.0574415661, -0.0471893586, 0.0791037008, -0.0839682892, 0.0597445667, -0.0093482332, 0.0117559489, 0.0387670249, 0.0489423685, 0.0801441744, -0.0979672298, -0.0192974843, 0.0232158490, -0.0160044134, -0.0122337909, 0.0342871733, 0.0460131764, -0.0826790929, -0.0670132041, -0.0965217277, -0.0025129903, -0.0605333410, 0.0451409817, 0.0943691581, -0.0353224650, 0.0487655252, -0.0509990156, -0.1000786275, 0.0760439709, -0.0607647076, -0.0135052865, -0.0636125132, 0.0323087834, -0.0140095390, 0.0060948078, 0.0612241365, 0.0343343690, 0.0618557185, -0.0191161800, -0.0070720813, 0.0799179822, 0.0285927057, -0.0247860551, 0.0623891875, 0.0490220673, -0.0098726079, 0.0901656449, -0.0517424792, 0.0264877118, -0.0809480324, -0.0751837343, -0.0855533183, -0.0543893613, 0.0584297106, -0.0076961089, 0.0527487397, -0.0084151775, 0.0857734010, -0.0718160197, -0.0086384974, 0.0660850704, -0.0530403703, 0.0204086658, -0.0286893379, 0.0875088200, -0.1340195686, 0.0176448226, -0.0391539857, 0.1079802737, 0.0025590393, -0.0764714479, -0.0403536372, 0.0315489955, -0.0296204221, 0.0173620954, 0.0031368011, -0.0384797379, 0.0217724703, 0.0692078844, -0.0314922743, 0.0747445896, -0.1053905487, -0.0401313677, -0.0534914248, -0.0681419373, 0.0672112852, 0.0372074395, -0.0183585193, -0.0644447207, 0.0081948722, -0.0640152693, 0.0168410130, 0.0357269645, 0.0299785826, 0.0076532895, -0.0090504615, -0.0411625616, -0.0980293155, -0.0428470001, -0.0427383818, 0.0509173200, 0.0134348720, 0.0034040767, -0.0096425069, -0.1009798348, -0.0598027743, -0.0738093406, 0.0539691560, 0.0474868044, -0.0263984967, 0.0820184872, 0.0062483298, 0.0960483626, -0.0492861718, -0.0908759385, -0.0190034043, 0.0192457642, -0.0464157537, 0.0360585935, 0.0684731826, 0.0572751090, -0.0109122470, 0.0113932453, 0.0638316870, -0.0266126450, -0.0389935113, 0.0002981525, 0.0256468952, 0.0236636940, -0.0070025041, 0.0814315826, -0.0018197035, 0.0043973690, -0.1102549881, 0.0387328304, 0.1053907573, -0.1258085221, 0.0675702244, -0.0782774836, -0.0014036831, -0.1008424461, -0.0110811647, 0.0419712327, 0.0593557209, 0.0026708541, 0.0333915018, 0.0225215126, -0.0341655128, 0.0412660427, 0.0687685609, 0.0709504709, -0.0168659817, -0.0302297752, 0.0095196543, -0.0535803773, -0.0088731237, -0.0617031530, 0.0678007677, -0.0590577722, -0.0682938918, -0.0576875769, 0.0322235078, -0.0541046485, -0.0712206662, 0.0759248883, 0.0685639232, -0.0067832340, -0.0090264408, -0.0136767980, -0.0225501098, -0.0508586504, -0.0043425448, 0.0112537080, 0.0328419991, -0.0612137616, -0.0783420801, 0.0191212092, -0.0074064014, -0.0074492395, -0.0774977282, 0.0517058223, 0.0261511337, -0.0103626465, 0.0228291061, -0.0643076450, -0.0513541512, 0.0197547805, 0.0273484606, 0.0024878806, 0.0405012853, -0.0874374285, -0.0185671691, 0.0332237296, 0.0855339542, -0.0073003867, 0.0783619210, 0.1039865315, -0.0576286986, -0.0593037754, 0.0551124439, -0.0796509609, 0.0460273772, 0.0113270311, 0.0831875503, 0.0853904188, -0.0320808403, -0.0418316424, -0.0122169545, 0.0346280336, 0.0498560742, 0.0616389774, -0.0155047169, 0.0710693151, -0.0529765263, 0.0178445932, -0.0044411938, -0.0910187215, 0.0159671567, 0.0545973070, -0.0202265289, -0.0753677487, -0.0746001899, 0.0932964683, 0.0126150353, 0.0682650879, -0.0272502881, -0.1015963703, 0.0507260934, -0.0201765094, -0.0423499718, -0.0474197119, 0.0046626334, -0.0213874131, -0.0807419121, 0.0569501631, -0.0269942358, 0.0545489714, 0.0029249296, 0.0406245105, 0.0533181429, 0.0361464210, -0.0445311405, 0.0859302208, 0.0388456732, 0.0162137691, -0.0775269493, -0.0192028452, 0.1042141840, 0.0172425397, 0.0425910279, -0.0030727293, 0.0526241921, -0.0063177464, -0.0672742948, 0.0556124225, 0.0702540800, 0.0639773831, -0.0173907466, 0.0026551867, 0.0424278490, -0.0634287149, -0.0497049838, -0.0708050728, -0.0645367056, 0.0602659583, -0.1050041243, 0.0850464478, 0.1226056591, -0.0869738385, 0.0073196809, -0.0258536953, -0.0372046828, 0.0761502385, -0.0413719974, -0.0167449974, -0.0325916447, -0.0616366081, -0.0048463978, -0.0181289166, 0.0888768882, 0.0624667071, -0.0377001204, -0.0349980891, -0.0700026825, 0.0665959194, -0.0579759888, -0.0011870831, 0.0647128373, -0.0692155734, 0.0751882717, -0.0182750374, 0.0012218265, -0.0787796602, -0.0490441807, -0.0564228818, -0.0535166226, -0.0625951737, -0.1072165817, -0.0181566179, -0.0314581878, -0.0001766436, 0.0673999563, 0.0292226095, -0.0444391333, 0.0465805121, -0.0297844429, 0.0345498919, -0.0817926005, -0.0799801871, -0.0620284043, -0.0974197239, -0.0107314456, 0.0246502627, 0.0876051560, -0.0065903086, -0.0744576901, -0.0292508509, 0.0294519346, 0.1045566872, 0.0559673011, 0.0015080075, 0.0069028633, -0.0075379531, 0.0446091667, -0.0381253473, 0.0569518805, -0.0937014297, -0.0253538936, 0.0776123255, 0.0299013648, -0.0838031992, 0.0199887026, -0.0154761337, -0.0095276013, -0.0412339345, 0.0086064395, -0.0592367724, -0.0524190553, 0.0460886732, 0.0731199160, -0.0581477657, -0.0809078068, -0.1041684821, 0.0379553474, 0.0165447481, 0.0980705246, -0.0684135780, 0.0349942073, -0.0537738577, 0.0341153741, 0.0321187451, -0.0196773969, 0.1005256772, 0.0495184921, -0.1086711064, 0.0261159129, -0.0373283252, 0.0598505847, 0.0428739190, 0.0469530597, 0.0857185423, -0.0978741944, -0.0783884525, -0.0355202109, 0.0284813289, 0.0658533126, -0.0345211476, -0.0156721529, 0.0544163920, 0.0427739471, 0.0276813377, 0.0770309642, -0.0509358011, -0.0406666286, -0.1072955653, 0.0060987053, -0.0314481035, 0.0165261663, -0.0385022424, -0.0640731454, 0.0631092489, 0.0278190486, 0.0562796146, -0.0092184488, -0.0233343579, 0.0593788885, 0.0157371312, 0.0156754237, -0.0288002566, 0.0552827530, -0.0078284545, -0.0231869817, -0.0214908384, -0.0071462402, -0.0217550900, 0.0115529420, -0.0255634785, -0.0317263715, 0.0729837641, -0.0376720503, 0.0339453816, 0.0554059856, 0.0736208484, -0.0064898813, -0.0134110600, 0.0506726354, 0.0435840040, 0.0454262421, -0.0823948085, 0.0575976670, -0.0226575155, -0.0557672195, 0.0072103497, -0.0468155742, 0.0448060557, -0.0072028222, 0.0573376343, -0.0010665812, -0.0744598806, -0.0175620839, -0.0388079993, -0.0235444698, 0.0434396304, -0.0775578395, 0.0514719859, -0.0222887509, -0.0009214387, 0.0626671538, 0.0426121950, 0.0199426413, 0.0693571717, 0.0661376342, 0.0430095308, -0.0454866588, 0.0134142302, 0.0292144362, -0.0319372378, -0.0734730735, 0.0496993475, 0.0502003655, 0.0305773914, 0.0649904311, 0.0485829003, -0.0638841316, -0.0017880832, 0.0587659553, 0.0510459468, 0.0449243821, -0.0939020216, -0.0621204749, -0.0501953997, 0.0032281266, -0.0459357575, 0.0938901529, -0.0225707088, 0.0149196014, 0.0316394120, -0.0582478940, 0.0486581214, -0.0102431653, 0.0771507546, 0.0711099654, -0.0394536480, 0.0214256328, 0.0387109593, 0.0796285942, -0.0015607375, 0.0342226177, -0.0647621229, 0.0217127893, -0.0292069893, 0.0092334663, 0.0421453565, 0.0237085838, -0.0804734156, -0.0283175986, 0.0358469747, -0.0313949510, -0.0267575867, -0.0670356378, 0.0221343506, 0.0516375750, -0.0645825043, 0.0689507946, 0.0199184902, 0.0723137707, 0.0703164116, 0.0788925886, -0.0482620113, -0.0395638831, -0.0717984587, -0.0464771204, 0.0422927514, -0.0867610276, -0.0731109157, -0.0353679359, -0.0439272523, 0.0696093738, -0.0546742715, -0.0229299944, 0.0150476247, -0.0008708977, -0.0282667447, -0.0620033368, 0.0679142773, 0.0461465493, 0.0415316224, 0.0601112731, 0.0084206685, 0.0053467965, -0.0437947810, -0.0002189409, -0.0468843356, 0.0214648247, 0.0485845283, -0.0413961709, 0.0377422646, 0.0141518116, 0.0281349625, -0.0470379591, 0.0114583401, -0.0552169420, 0.0143368738, -0.0393812470, 0.0283103082, 0.0162791926, 0.0079137553, -0.0319455713, 0.0435399637, -0.0320562720, 0.0560009442, 0.0414340533, 0.0458348691, 0.0724851936, -0.0319387503, 0.0760929734, -0.0260223970, 0.0150371380, 0.0699088797, 0.0115541955, -0.0462511517, -0.0167091265, 0.0039669415, 0.0357193872, 0.0206443779, -0.0564308763, -0.0755352154, 0.0561633483, -0.0898808613, 0.0095562879, 0.0092787948, -0.1116423681, -0.0608012527, 0.0107128425, 0.0387749560, -0.0845795646, -0.0392261706, 0.0629259795, 0.0177593846, 0.0732280388, 0.0213647168, -0.0696299747, 0.0049608303, -0.0834959522, -0.0137188109, 0.0517456830, -0.1007851660, 0.0872379094, -0.0414443612, 0.0272084530, 0.0559246317, 0.0774721578, 0.0533407070, -0.0139797451, -0.0053970744, -0.1153181493, 0.0639227480, 0.0124350209, -0.0697866529, 0.0475004241, -0.0498433188, -0.0655213371, 0.0218679886, -0.0328346603, 0.0941050798, -0.0941572860, -0.0509904325, 0.0328037776, -0.0331719741, 0.0038285712, -0.0655361488, 0.0055625173, -0.0311558750, 0.1115570143, -0.0747124627, -0.0748964250, -0.0481343195, -0.0357912630, 0.0543604977, 0.0055655502, -0.0248463266, 0.0468773358, -0.0593602732, -0.0646806583, -0.0138634108, 0.0529872589, -0.0030905923, -0.0677905232, -0.0414378643, -0.0099438252, -0.1134035215, 0.0604877509, 0.0140817836, 0.0698923767, -0.0279349051, -0.0957166329, 0.0171963964, -0.0296539813, 0.0413893014, 0.0528788492, 0.0286971126, 0.0739943236, -0.0097879069, 0.0327758081, -0.0866297185, 0.0794432685, 0.0187762491, -0.0071456395, 0.0530487932, 0.0424329191, 0.0218441412, 0.1085181311, 0.0097882515, 0.0130327391, -0.0511170067, -0.0531309657, 0.0133984676, -0.0153939752, -0.0406565852, -0.0779463425, -0.0608849935, 0.0368889421, -0.0424851552, -0.0137532046, 0.0621743761, -0.0668571517, -0.0870960951, 0.0719702914, 0.0038252186, -0.0279066693, -0.0001880291, -0.0285669565, -0.0655141249, -0.0034939696, -0.0251331050, -0.0612419471, -0.0526376441, 0.0277009141, -0.0220451746, -0.0165086016, 0.0260279514, 0.0251672976, -0.0280288253, 0.0197273344, 0.0635767505, -0.0170282647, 0.0051250118, -0.0767205507, 0.0918758139, 0.0970709398, -0.0374665447, 0.0082414504, -0.0176066719, -0.0190369040, 0.0064944681, -0.0328949764, -0.0336357318, -0.0572566614, -0.0110383872, 0.0752135068, 0.0354225188, -0.0263498332, -0.0591939948, 0.0414854176, 0.0508392602, -0.0272428691, 0.0170895085, 0.0797888115, -0.0225107558, 0.0828130469, 0.0660151318, -0.0338827372, -0.0360291712, 0.0024340886, 0.0149575025, 0.0464481115, 0.0360001139, -0.0437176675, 0.0791879892, 0.0739590302, 0.0541822501, -0.0101814810, -0.0332630910, 0.0579987876, -0.0546223111, 0.0749589652, 0.0769797713, 0.0123117277, 0.0523993671, -0.0338807143, -0.0673692897, 0.0876903385, 0.0869811550, 0.0385082029, 0.0536620319, -0.0857360810, 0.0408812538, 0.0579142608, -0.0917163268, 0.1060993671, 0.0836103410, 0.0044633481, -0.0249446388, 0.0189792141, -0.0718487203, -0.0179363284, -0.0136217223, 0.0526480414, 0.0905452669, 0.0487330332, -0.0385565422, 0.0107451072, -0.0597040169, 0.0350720473, -0.0516094081, 0.0009214994, 0.0646375790, 0.0446741842, -0.0662259385, -0.0254918728, -0.0657816008, 0.0169348214, 0.0085051199, 0.0442098044, 0.0319498330, 0.0657293200, -0.0001202443, 0.0621946119, -0.0512636229, 0.0368107222, 0.0114101097, -0.0671692938, 0.0281745605, 0.0843759850, -0.0714589432, 0.0162501223, -0.0248250347, 0.0794022977, -0.0449991226, 0.0616302453, -0.0831724033, 0.0376032330, 0.0086786915, 0.0107141901, 0.0457660779, 0.0810280070, 0.1116413176, -0.0058809095, -0.0262580961, -0.0571679957, -0.0415237471, 0.0844544619, 0.0690715909, 0.0275625065, -0.0441069975, 0.0763682202, 0.0668285266, 0.0091732983, 0.0832126662, 0.0261655115, 0.0487557314, -0.0048369868, -0.0570707619, -0.0647181869, -0.0605657026, -0.0299021285, 0.0671531782, -0.0174633637, 0.0442628115, -0.0519587323, -0.0108314482, 0.0868570879, -0.0606265813, 0.0880018771, -0.0639708266, 0.0699883625, 0.0884593949, 0.0680765063, -0.0379180983, 0.0120783634, -0.0536481440, -0.0433138572, 0.0081192814, -0.0069159050, 0.0527217761, -0.0633420646, -0.0215366017, 0.0289469901, 0.0678072646, 0.0531343706, -0.0663230568, -0.0987481102, 0.0417900905, 0.0493585095, 0.0538440011, -0.0463786088, 0.0265676212, -0.0306183733, -0.0647268444, 0.0416533127, 0.0341087915, -0.0034718830, 0.0270325374, 0.0480711348, 0.0118822772, -0.0577703528, 0.0272113625, -0.0287013799, 0.0318237841, -0.0677121431, -0.0802268237, -0.0033998832, 0.0000681199, 0.0644644797, 0.0707940310, -0.0567876287, 0.0197128523, 0.0461872295, -0.0052699614, -0.0796101615, 0.0116784424, 0.0517551564, 0.0993606299, -0.0578969643, -0.0732828379, 0.0774800554, -0.0571923405, -0.0520769842, -0.0666960701, -0.0732880905, 0.0680428296, 0.0877077729, -0.0468055643, -0.0853250027, 0.0230684131, 0.0715111494, -0.0124270115, -0.0872119516, -0.0475158878, -0.0750328675, -0.0572591797, -0.0275733694, 0.0344787128, 0.0504925363, 0.0376154110, 0.1064340845, 0.0236377791, -0.0234513674, -0.0421560481, -0.0134266978, -0.0665743649, -0.0337545983, -0.0033854840, 0.0202589780, 0.0065892776, 0.0180080179, -0.0365233943, 0.0154890604, -0.0010554818, -0.0400012285, -0.0712268203, 0.0181494635, -0.0416912027, -0.0265320577, -0.0942134559, -0.0704575479, -0.0448804349, 0.1206400692, -0.0010438456, 0.0658029914, -0.0802185982, -0.0103645520, 0.0300126318, -0.0106900232, -0.0007687417, -0.0704760551, 0.0326898061, 0.0020625524, 0.0676234066, -0.0357118398, -0.0326083228, -0.0242136288, 0.0790981054, 0.0094716176, -0.0876364782, -0.0530529842, -0.0043126070, -0.0629183203, 0.0008251050, 0.0032147823, -0.0713190436, 0.0978869423, 0.0454249121, 0.0638143495, 0.0109481625, 0.0890733898, 0.0869576856, -0.0242595598, 0.0494414233, 0.0401909091, 0.0244627465, 0.0001771038, 0.0638437867, -0.0081932861, 0.1108195186, 0.0784814954, -0.0573680922, -0.0380246527, 0.0177795328, 0.0818316713, 0.0200798884, -0.0098461928, -0.0052567506, -0.0690007210, -0.0183953997, 0.0043544327, 0.0272223204, 0.0529919229, -0.0168409441, -0.0229592510, 0.0185126644, 0.0325875767, -0.0119080590, -0.0497292988, 0.0422375761, 0.0239184313, 0.0416392609, 0.0108213108, 0.0678120255, 0.0705993250, 0.0128227696, -0.0760046467, 0.0644503757, -0.0798112452, -0.0331143029, 0.0200615972, 0.0034324750, -0.0846170709, 0.0217297021, -0.0265854131, -0.0678516999, -0.0140568689, -0.0026121780, -0.0539541878, 0.0349291861, 0.0303989835, -0.0727293640, 0.0871502981, 0.0488504358, -0.0105376607, -0.0397175327, 0.0262136236, -0.0453323871, 0.0745888054, 0.0475863554, -0.0510620438, -0.0780318081, 0.0146290157, 0.0758424178, -0.0856835023, -0.0787235722, -0.0528195538, -0.0316203795, 0.0142820207, -0.0696052536, -0.0234302245, -0.0134042297, -0.0368272364, -0.0454715528, 0.0217436124, -0.0551605932, -0.0696970746, 0.0639434159, -0.0242970530, 0.0060438444, -0.0184583757, 0.0893260762, -0.0235150196, 0.0122051165, 0.0411833897, 0.0387008153, -0.0121927187, -0.1157745868, 0.0533956103, 0.0298690703, 0.0556892268, 0.0126431640, 0.0314482898, -0.0751722753, -0.0138622848, -0.0973604620, -0.0078188498, -0.0311873183, -0.0955529660, -0.1009253487, -0.0157155432, 0.0728313923, 0.0176215619, 0.0242238138, -0.1200757325, -0.0052281963, -0.0847875625, 0.0689538047, -0.0640044510, -0.0707935095, 0.0790366307, 0.0036524010, -0.0365299247, -0.0598784015, 0.0326237902, 0.0291132387, 0.0322077088, 0.0405409783, 0.0223240405, -0.0068110353, 0.0520521142, 0.0573397130, 0.0894670188, 0.0373509526, -0.0227720961, 0.0365224220, 0.0534219183, 0.0752007365, 0.0144342612, -0.0180395488, -0.0786799937, -0.0479072221, 0.0044931355, 0.0986081436, 0.0245955102, 0.0499830805, 0.0509828217, 0.0752547532, -0.0094146961, -0.0131825935, 0.0999496728, -0.0238177478, 0.0180293862, -0.0320006907, 0.0325625464, -0.0021347436, 0.0607101433, -0.0614370331, 0.0062375893, -0.0435550660, 0.0161829386, -0.0032230329, -0.0113038933, 0.0405820571, 0.0117051341, -0.0067931730, -0.0336791910, -0.0695622861, 0.0730791986, 0.0856038481, 0.0653175861, 0.0032438552, -0.0657172278, -0.0243291110, 0.0063451040, 0.0963689908, 0.0492968820, -0.0307229366, 0.0148794679, 0.0902776122, 0.0546112545, 0.0520531908, 0.0143410051, -0.0311460197, 0.0168134738, 0.0465112031, -0.0214014612, 0.0713753179, 0.0136453556, 0.0559140742, -0.0381371528, -0.0413654372, -0.0750835985, 0.1018353477, -0.0224361066, -0.0598868616, -0.0084040640, 0.0026568146, -0.0601804741, 0.0130912801, 0.0611166023, -0.0780122653, 0.0018191142, 0.0546894521, 0.0064405319, -0.0597103573, 0.0689685419, -0.0498253927, 0.0529652908, -0.0326932706, 0.0539541990, -0.0010532518, -0.0090838475, 0.0195653103, -0.0399606228, -0.0085106110, 0.0023330953, 0.0595780350, 0.0066408678, 0.0539115109, -0.0186537877, 0.0044804425, 0.0293579567, -0.0521319397, 0.0994533002, -0.0800367668, 0.0393720679, 0.0537877716, 0.0407784432, 0.0725052804, -0.0601943880, -0.0272317380, -0.0170989055, 0.0462230071, 0.0359728783, 0.0409974493, 0.0224895589, 0.0469391532, 0.0430090055, -0.0234416574, -0.0599957407, -0.0585438311, -0.1129137501, -0.0136840865, 0.0350328945, 0.0398963168, 0.0116473865, -0.0388613045, 0.0855640322, 0.0143445125, -0.0253685601, -0.0326228924, -0.0532775149, -0.0382724963, 0.0797727779, -0.0523877516, 0.0347411595, 0.0609138422, -0.0907626674, 0.0622363612, 0.0424136184, -0.0262474976, 0.0735518560, -0.0474072360, 0.0390350781, -0.0102142598, -0.0127707999, -0.0766503140, 0.0171599984, -0.0391358212, -0.0243141446, -0.0734450147, 0.0213143975, 0.0560342371, 0.0889825001, -0.0238482393, 0.0162959769, -0.0526624434, 0.0427327529, -0.0483879410, 0.0327990726, -0.0576952323, -0.0182117373, 0.0426591747, 0.0727101862, 0.0897317901, -0.0583821982, 0.0326353833, 0.0825377181, -0.0637571588, -0.0254263636, 0.0079740230, -0.0773675069, 0.0461806543, 0.0273889862, -0.0310835037, 0.0198715758, -0.0774855912, 0.0290042553, 0.0278845150, 0.0187737290, -0.0162552372, 0.0017876718, -0.0280020386, -0.0563059002, -0.0769267827, -0.0706836432, 0.0878984481, -0.0651883185, -0.0151581923, -0.0731232241, -0.0774554685, -0.0682662278, 0.0549100377, -0.0971088111, 0.0414504409, -0.0379359014, -0.0565104932, 0.0485811681, -0.0535344444, 0.0610967800, -0.0715391263, -0.0769709051, 0.0539293773, -0.0196741931, 0.0176248141, 0.0806935281, -0.0178021546, -0.0745670870, 0.0229066741, 0.0247019120, -0.0445580706, 0.0900930986, 0.1109868586, -0.0986838713, 0.0739167035, -0.0377724208, -0.0391795263, -0.0413024649, -0.0040319995, 0.0155122839, -0.0769945979, -0.0061206403, -0.0656881258, -0.0811985806, 0.0145993670, -0.0804935321, 0.0932780579, 0.0172946211, -0.0051504048, -0.0562865213, 0.0145511171, 0.0661287010, -0.0326576978, -0.1003344953, -0.0619033538, -0.0377139598, 0.0614610426, 0.0875332430, 0.0110403290, 0.0862742439, -0.0515769236, -0.0100286212, 0.0179331079, 0.0075677657, 0.1024327353, -0.0183520876, 0.0356705785, 0.0111216987, -0.0811468139, 0.0580801181, -0.0624344759, -0.0138199907, -0.0120138815, 0.0015675832, 0.0992209911, -0.0183840413, 0.0006314976, -0.0820842087, 0.0656702369, -0.1187577769, 0.0481623933, 0.0914447233, 0.0695568025, 0.0978698656, -0.0358526073, -0.0483438745, -0.0080404943, -0.0097791366, 0.0448995009, -0.0529295020, -0.0319821909, 0.0328326076, 0.0659739673, -0.1230882332, -0.0386668965, 0.0058809281, -0.0302764438, -0.0541451760, -0.0003033222, 0.0192916989, -0.0519664176, -0.0423162021, 0.0228600577, 0.0888713673, 0.0372620039, 0.0174683817, 0.0705990940, 0.0475245416, -0.1004596204, 0.0286982600, 0.0369898416, -0.0873924345, 0.0968592912, 0.0768902525, -0.0437992029, 0.0607019030, 0.0321930386, -0.0176553372, -0.0875411928, 0.0225040801, 0.0809403434, -0.0418785252, 0.0345890895, 0.0037462611, -0.0050952076, -0.0549138486, -0.0402692184, 0.0850877091, -0.0004658578, 0.0661578923, -0.0408322737, -0.0731453449, 0.0343541838, 0.0010700519, -0.0196753461, 0.0125034358, 0.1099502742, 0.0667541921, -0.0286962874, -0.0138901398, 0.0249309763, -0.0504240356, 0.0650966018, -0.0051166289, -0.0035395143, -0.0754805878, 0.0196930245, 0.0427059010, 0.0340610221, -0.0266936645, -0.0462631099, -0.0668142587, -0.0619268902, -0.0779317021, -0.0878185183, 0.0277689900, 0.0404378250, -0.0604079664, 0.0109702675, 0.0106500098, -0.0055749188, 0.0495829955, -0.0452110879, 0.0470118783, -0.0193536822, 0.0455168188, -0.0461517312, 0.1008121893, 0.0571833514, 0.0501181260, 0.0856750384, -0.0006786401, 0.0467700511, -0.0051479866, 0.0750049353, -0.0382493436, -0.0416088626, 0.0220902283, -0.0726740062, 0.0196053367, -0.0020944662, -0.0006981966, 0.0069942623, -0.1024985164, -0.0041073775, -0.0032954933, 0.0112059684, 0.0614869334, -0.1087571084, 0.0156739373, -0.1048187017, -0.0522810817, -0.0712783784, 0.0390020944, 0.0819999203, 0.0640403777, -0.0412050560, 0.0113002164, 0.0012867003, -0.0362799242, 0.0515153445, 0.0540758707, -0.0518422723, 0.0627926961, 0.0265317932, -0.0621748455, -0.0161994342, -0.0148588652, -0.0231970232, -0.0199197382, -0.0160184912, 0.0162203386, 0.0574782342, 0.0498879850, -0.0905799270, -0.0142344479, -0.0565920807, 0.0716150403, -0.0108346222, -0.0565621369, 0.0070771798, -0.0727956221, 0.0527078807, -0.0141433617, 0.0452803709, -0.0302558858, 0.0120449290, 0.0317584909, 0.0104071870, 0.0200930368, -0.0327418000, 0.0250811838, 0.0251097791, 0.0062369392, -0.0473810285, 0.0033637942, -0.0212349612, -0.0921714902, 0.0185676906, -0.0589887425, -0.0373461619, 0.1068289056, -0.0579387359, 0.0024732621, -0.0376593843, -0.0316709466, 0.0103642233, -0.0566912666, -0.0199068803, -0.0595009588, -0.0369240604, -0.0288024656, 0.0094160531, 0.0289081894, -0.0311685428, 0.0483430587, 0.0030410038, -0.0236813724, 0.0925974473, -0.0394818522, -0.0582988001, 0.1002336964, 0.0780931562, 0.0694883242, -0.0654860809, -0.0519849323, 0.0264791884, 0.0041092015, 0.0428412631, -0.1260401160, 0.1167197302, -0.1221363395, -0.0567935184, -0.0184706878, -0.1139921322, 0.0581628308, -0.0572740473, 0.0457124896, -0.0063541848, 0.0388016999, -0.0238049477, 0.0289219674, -0.0057144989, -0.0175218899, -0.0602187030, -0.1084227711, -0.0006706128, -0.0222288184, 0.0326283723, 0.0664501414, 0.0063483017, -0.1048964560, -0.0837191120, -0.0287164915, -0.0065009464, -0.0327675678, 0.0317338295, -0.0981563404, -0.0756311640, -0.0561001375, 0.0843831748, 0.0269114058, 0.1473197639, -0.0374649353, -0.0952018052, -0.0137594240, -0.0541110188, 0.1011410654, -0.0574656576, -0.0740722939, -0.1070262045, 0.0597058944, -0.0223701540, -0.0251394827, 0.0703603253, -0.0173551757, -0.0941617414, -0.1192603633, -0.0167363975, -0.0419868529, -0.0567835644, 0.0208559651, 0.1099364460, -0.0506708175, 0.0628559291, 0.0768986493, 0.0146705890, 0.0244907979, 0.0274809245, 0.0672606155, 0.0517594032, -0.1179546192, -0.0517715700, 0.0443708375, 0.0884529352, 0.0343722366, 0.0061644558, 0.0549309365, -0.0111765862, 0.0705924109, -0.0457145199, -0.0049978336, -0.0736692473, 0.0141653018, -0.0135235032, -0.0388378985, -0.0671976730, -0.0696201324, -0.0334591828, 0.0708865300, -0.0011055638, 0.0149526354, 0.0307474397, -0.0337857567, 0.0141360424, -0.0623022504, -0.0630378351, 0.0423450358, 0.0188728478, 0.0167297777, 0.0240323208, 0.0357157886, 0.0233318973, -0.0034886529, 0.0201205928, 0.0035541770, -0.0498989671, 0.0402831510, -0.0742297247, -0.0537989959, 0.0155783044, -0.0405438319, -0.0167055167, -0.0277142413, -0.0996505916, 0.0530590825, 0.0934074372, 0.0467931814, 0.0077198320, -0.0067335591, -0.0081938133, -0.0638731346, 0.0631964281, 0.0231837761, -0.0514438637, -0.0085112732, -0.0041316268, -0.0933519602, -0.0246175863, 0.0433230810, -0.0562207028, -0.0649784207, 0.0574588776, -0.0888648778, -0.0498441942, 0.0193980280, -0.0531785078, 0.0571105592, 0.0350879431, 0.0188776087, 0.0803610235, 0.0645249113, 0.0644649342, -0.0524863340, 0.0840456039, -0.0425469726, 0.0047072419, 0.0042803246, 0.0860996097, 0.0466646850, -0.0147530613, -0.0663259104, 0.0306706578, -0.0185229219, -0.0738393739, 0.0899053812, 0.0785105750, -0.0441180207, 0.0169721954, 0.0387243219, 0.0439678021, -0.0338140763, -0.0179100242, -0.0035875610, -0.0024231495, -0.0662360713, -0.0011499379, 0.0337648131, -0.0146712158, -0.0695893839, -0.0198104810, 0.0465607308, 0.0334589481, 0.0607647710, 0.0453107096, 0.0573441200, -0.0098857805, -0.0443951562, 0.0684863627, 0.0133315874, 0.0849100724, 0.0262610503, 0.0092017148, -0.0521683171, 0.0136861550, -0.0003236019, 0.0352001637, 0.0687986612, -0.0410411581, 0.0560144372, 0.0546026714, -0.0286180116, 0.0372494496, 0.0712037683, -0.0073927571, -0.0200062301, -0.1071217880, -0.0882837921, 0.0080050938, -0.1071234941, 0.0038842889, -0.0001451910, 0.0442140549, -0.1039277762, 0.0605921336, 0.0516907200, -0.0750101134, 0.0641383752, -0.0732468069, -0.0418560691, 0.0216829143, -0.0617114827, -0.0113375057, 0.0186607521, 0.0874029845, 0.0393888541, -0.0114128962, 0.0446654633, -0.0718072802, -0.0401280336, 0.0726218522, -0.0245658383, -0.0443583727, -0.1040541232, -0.0308220722, 0.0044841692, -0.0586056188, -0.0237360913, -0.0220417846, 0.0270628594, -0.0400012583, -0.0153786223, -0.0319902077, -0.0572622977, -0.0494609810, -0.0205506142, -0.0217926279, 0.0604327172, -0.0453784354, -0.0284498539, 0.0209392011, 0.0718474388, -0.0533778965, 0.0617345721, 0.0978918746, -0.0734420866, 0.0681109279, -0.0237466842, 0.0884757340, -0.0869042054, 0.0594698414, 0.0377694406, 0.0016748231, -0.0559290089, -0.0673540831, -0.0484174527, 0.0684009492, -0.0367870443, -0.0994984135, -0.0438081138, 0.0113043254, 0.0168561283, -0.0864579901, -0.0659003630, 0.0510979369, -0.0743006095, 0.0017889932, -0.0968866125, -0.0139075750, -0.0030926198, 0.0301650595, 0.0843010545, -0.0754335672, -0.0611832067, 0.0516513661, 0.0056170863, 0.1326393783, -0.0920241997, 0.0682449862, 0.0023090595, -0.0742289796, -0.0965282097, -0.0210129395, -0.0305179823, 0.0665024891, -0.1112552956, 0.0386525206, 0.0522794500, -0.0167861115, 0.0049752137, -0.0388814062, -0.0654924437, -0.0054216199, -0.0446828604, -0.0591199361, -0.0530224219, -0.0528483689, 0.0050747134, -0.0237337407, -0.0000085199, 0.0229142830, -0.0286644287, 0.0534011498, -0.0314511992, 0.0672992915, 0.0996342599, 0.0133251436, -0.0135926688, -0.0475325212, 0.0537165329, -0.0619890802, 0.0305499006, 0.0852541104, -0.0944413543, 0.0098366840, -0.0558538064, 0.0934285820, 0.0178887434, -0.0366209559, 0.0137397666, -0.0489089973, 0.0301630609, -0.0863136500, -0.0109781642, -0.0224755630, 0.0163373519, -0.0232924186, -0.0131313782, -0.0539185442, -0.0766918659, 0.0601144321, 0.0083458936, -0.0943553597, -0.0673811585, 0.0934743956, 0.0635883212, 0.0545761511, 0.0377008580, -0.0372802764, -0.0017777150, -0.0562782921, 0.0241065081, -0.0228975955, -0.0956214741, -0.0364435166, -0.1311795563, -0.0681008175, 0.0564209558, -0.0894720405, -0.0524880365, 0.0506056659, -0.0172698740, 0.0772264376, 0.0399620682, 0.0670377016, -0.0634884536, 0.0556381941, -0.0825206190, 0.1064877138, 0.0064900373, -0.0540506355, 0.0903542563, -0.0763587654, -0.0314292237, 0.0457735434, 0.0276473667, -0.0404600538, 0.0614563562, -0.0571675301, -0.0259905700, -0.0779186934, -0.0440634042, 0.0044138683, -0.0151011404, -0.0556708872, -0.0611641183, 0.0632184893, -0.0338283516, 0.0362279974, -0.0511485524, -0.0245517008, -0.0743156970, -0.0206537321, -0.0749312416, 0.0177482702, 0.0391924269, -0.0234748777, -0.0828231573, 0.0024357589, 0.0864189789, -0.0092044473, 0.0527593791, -0.0301663205, -0.0184845496, -0.0049944515, 0.0521099865, -0.0723673403, 0.0217997357, -0.0008660200, 0.0598713048, 0.0014075069, -0.0435922593, -0.0041598147, -0.0135831973, 0.0000830742, -0.0118206125, -0.0015728149, -0.0969058275, 0.0573560968, 0.1196737811, 0.0343896933, 0.0280057322, -0.0863312632, 0.0785001665, 0.0647954866, -0.0416069068, 0.0421882495, 0.0314915553, 0.1008806154, -0.0015864213, 0.0643570870, -0.0442448668, 0.0694106817, -0.0343022496, -0.0542501174, 0.0619012006, 0.0199683420, 0.0510055274, -0.0452453159, -0.0201838184, -0.0741981342, -0.0928585604, 0.0953401253, 0.0035230394, 0.0749447346, -0.0894441456, -0.0452432036, -0.0667815059, -0.0152369663, -0.0295761377, -0.0175174121, -0.0082652075, -0.0386863016, 0.0500000007, -0.0231109392, 0.0245561637, -0.0500217974, -0.0333949775, 0.0404929854, 0.0952760279, 0.0347134173, -0.0184856672, -0.0753094628, -0.0133137926, -0.0139202690, 0.0477861650, -0.0085707633, 0.0391687043, 0.0499430262, 0.0018575243, 0.0589865819, 0.0948606357, -0.0616783611, 0.0871583745, -0.0386081450, 0.0336626507, -0.0209923051, -0.0509805083, 0.0771421492, -0.0165036321, -0.0780919865, -0.0205278359, 0.0505764745, -0.0489082374, -0.0006339868, 0.0413988829, 0.0201669317, -0.0322979912, 0.0757543743, 0.0199384894, 0.1060836762, 0.0458986014, -0.0659902617, -0.0572591946, 0.0513294004, -0.0321389772, 0.0380169079, -0.0101593053, -0.0776675865, 0.0561421290, -0.0922767222, 0.0097489012, 0.0425946042, -0.0580291077, -0.0630271435, -0.0193615593, 0.0221305061, -0.0543753058, 0.0843821168, -0.0404119752, 0.0257620532, -0.0546577424, -0.0567989424, 0.0100906137, -0.0384115689, 0.0553749055, -0.0376614518, -0.0347854309, -0.0950834602, -0.0386126526, 0.0512349531, 0.0360892043, -0.0001955403, -0.0159439463, -0.0694561750, -0.0649045557, 0.0642454252, 0.0368109308, -0.0418054201, 0.0259932876, -0.0274419785, 0.0605768263, -0.0647982657, 0.0454070903, -0.0164773669, -0.0318193436, 0.0783608705, -0.0364938006, -0.0318980440, -0.0274327863, 0.0340974629, -0.0161281507, -0.0626900047, -0.0473175794, 0.0293474346, 0.0807583183, -0.0464429073, -0.0184536781, -0.0215954371, 0.0494935103, -0.0243099928, 0.0264229309, 0.0363999307, -0.0651169941, 0.0070852749, -0.0007164918, -0.0024001487, 0.0238312110, -0.0103190485, -0.0396373831, 0.1173831597, -0.0055343141, -0.0878950134, 0.0356840193, -0.0321128219, 0.0254013482, 0.0554090068, -0.0881265029, 0.0343270786, -0.0316386819, 0.0291502848, 0.0870528147, 0.0179969482, 0.1199324206, -0.0923429951, 0.0999764800, -0.0118787661, -0.0781633183, 0.0560259894, -0.0639641806, 0.0641858503, 0.0383121483, 0.0046003428, 0.0112197986, -0.0744619966, 0.0853698254, 0.0504234396, 0.0723685771, 0.0090834498, 0.0074778781, -0.0516578257, 0.0013034588, 0.0391588546, 0.0453968942, 0.0061588949, 0.0450230353, 0.0544581003, 0.0863642767, -0.0805306211, -0.0902523324, 0.0393035784, -0.0179939829, -0.0376326293, 0.0655334666, 0.0282271374, -0.0100671416, -0.0087404558, 0.0422508195, 0.0066767680, 0.0618485063, -0.0104555171, -0.0156789739, -0.0085102031, 0.0664879307, 0.0414043441, 0.0492681935, 0.0357958265, 0.0251154192, 0.0111107454, 0.0243029986, 0.0766879469, 0.0287288036, -0.0219414998, 0.0956504643, 0.0444392376, 0.0234573968, -0.0849413872, 0.0235300194, -0.0700071231, -0.0097999964, 0.0095623918, -0.0339982398, 0.0943941772, -0.0210923143, -0.0168233402, 0.0790360495, 0.0855144411, 0.0058190059, 0.0139571214, 0.0366969556, -0.0006505358, 0.0503368899, 0.1013127193, 0.0550321750, 0.0741514191, -0.0906095579, 0.0586236455, 0.1117357463, 0.0333474651, 0.0731972754, 0.0613003559, 0.0685272142, 0.0756196156, 0.0579088852, 0.0243615396, 0.0796638429, 0.0208514649, 0.1003647521, -0.0668701902, 0.0038950108, -0.0294294655, 0.0194784068, 0.0245554224, -0.0328035429, 0.0071180831, -0.0564302355, -0.0144530386, -0.0396323875, 0.0315131284, -0.0167173781, -0.0752794668, -0.0552949235, 0.0290356856, 0.0661833584, 0.0740858912, 0.0818134397, 0.0459282510, 0.0030089903, 0.0557397455, 0.0331020243, -0.0558984131, -0.0433822908, -0.0597350262, 0.0169463884, 0.0602632239, -0.0155685432, -0.0171811152, 0.0683559701, 0.0366759561, 0.0874240175, -0.0338286795, -0.0194547940, -0.0459857844, -0.0339254960, -0.0712882504, 0.0678945705, -0.0395834073, 0.0008872647, 0.0078796316, -0.0226583574, -0.0027745804, -0.0002934946, 0.0331479572, -0.0509796739, -0.0773810744, 0.0463147089, -0.0584947430, -0.0040973932, -0.0681114793, -0.0261164084, -0.0067179087, -0.0275245775, 0.0508845374, 0.0211539380, 0.0200943593, -0.0645395666, -0.0118221967, -0.0160882417, -0.0311001614, -0.0130343130, -0.0353607759, 0.0819839612, -0.0036937604, -0.0439058542, -0.0770178065, 0.0021832243, 0.0984016880, -0.0903642997, 0.0923578665, 0.0557127967, -0.0157066751, 0.0433142819, -0.0298644174, -0.0011912016, -0.0552276596, 0.0432850756, -0.0395879932, 0.0557527393, -0.0214389022, -0.0065349420, -0.0170141347, -0.0637250394, -0.0096594123, -0.0281965770, 0.0764335394, -0.0243989080, 0.0892636552, -0.0433811918, -0.0892542750, -0.0213685166, -0.0365725420, -0.0042391848, 0.0553551652, 0.0720088780, 0.0582475252, 0.0423218943, -0.1011707261, 0.0598802119, -0.0286313277, -0.0964791104, 0.0009740684, -0.0234660041, 0.0345758423, -0.0085205818, -0.0336296409, 0.0381354056, -0.0655707866, 0.0772739276, -0.0107801044, -0.0210242625, -0.0454606526, 0.0855644494, 0.0171826649, 0.0219311472, -0.0398114137, 0.0173852667, -0.0151845170, -0.0417555757, 0.0743216872, -0.0910138786, -0.0764382184, -0.0285481159, 0.0118721556, -0.0724200308, 0.0281527620, 0.0475246198, -0.0989353955, 0.0822644979, -0.0693215430, 0.0388190262, 0.0174402650, -0.0753995925, -0.0802291557, 0.0009129384, 0.0046629133, 0.0013244495, 0.0597910993, -0.0391240194, -0.0570709072, 0.0801970884, 0.0554546304, -0.0703393370, -0.0455362201, 0.0683036521, 0.1030614898, -0.0868554637, -0.0624098852, -0.0132804448, -0.0703981221, -0.0256886724, -0.0454820879, -0.0307963863, -0.0765619874, -0.0774016082, 0.0554653890, -0.0153830927, 0.0416506641, 0.0649449080, 0.0512752123, 0.0951510668, -0.0692751929, -0.0338025875, 0.0066638398, -0.0363708287, 0.0209982730, -0.0338135771, -0.0561912879, 0.0224481430, 0.1249165162, -0.0591034070, -0.0686986893, 0.0009110756, -0.0678410083, 0.0731543750, 0.0599747859, 0.0843949765, 0.0026392241, -0.0386054777, -0.0625216365, 0.0215685572, -0.0208954811, 0.0675131083, -0.0712223426, 0.0491417721, 0.0454494022, -0.0541892014, -0.0850660503, -0.0446277745, -0.0677518696, 0.0789068937, 0.0670267045, 0.0286684278, 0.0118170623, 0.0380423591, -0.0266094152, -0.0292246621, -0.0847590640, -0.0378046706, -0.0024279936, 0.0429178961, 0.0750030801, 0.0326767154, -0.0687044635, -0.0103027094, -0.0587078109, 0.0847494006, 0.0022722562, -0.0534968413, 0.0059590307, 0.0049505136, 0.0762564614, 0.0828911290, -0.0030256028, 0.0549568050, -0.0015954871, -0.0186477769, -0.0217640232, 0.0770449713, 0.0708134994, 0.0028033501, -0.0111012598, 0.0787302405, -0.0628477558, 0.1032115072, -0.0379449762, 0.0827412978, -0.0400512330, -0.1153564081, -0.0186399315, -0.0913211182, -0.0375087485, 0.0716646686, 0.0296949316, -0.0114088189, -0.1017551273, 0.0099021560, -0.0843612477, 0.1127540916, -0.0295511987, 0.0768863410, 0.0242221765, -0.0221330151, -0.0678479448, 0.0205860119, 0.0494018234, 0.0482824892, 0.0263982471, -0.0323238671, -0.0592495874, -0.0186126269, -0.0539557822, 0.0180009101, 0.0293202661, 0.0331819430, -0.1137661487, 0.0991066322, 0.0012903808, 0.0416786373, 0.0391400829, 0.0785013363, 0.0259613376, -0.0968756974, -0.0411629267, 0.1058216691, -0.0639596060, -0.0200695824, 0.0500735231, 0.0459831059, -0.0611718334, -0.0246487800, 0.0725602359, -0.0701849088, 0.0268052127, -0.0236411951, -0.0440956540, 0.0358544067, -0.0597818047, 0.0409395322, -0.0208180416, -0.0305572953, -0.0161257740, -0.0889888927, 0.0554716848, 0.0144412015, 0.0400027893, 0.0698467791, -0.0959077254, 0.0442357883, -0.1129975840, 0.0221521426, 0.0491114110, -0.0208803806, 0.0788395256, -0.0367001258, 0.0258491840, 0.0354103781, 0.0099006100, -0.0193409696, -0.0470344834, 0.0064083785, 0.0322636515, 0.0462386906, -0.0261603910, -0.0518192649, -0.0225509666, -0.0871490389, 0.0011268032, 0.0616862848, -0.0456391089, 0.0218064692, -0.0716070831, 0.0367930308, 0.0065604085, 0.0623978861, -0.0668943077, -0.1358570158, 0.0616390295, -0.0253726281, -0.0142444456, -0.0757483095, 0.0339246653, 0.0073415269, 0.0053512719, 0.0631577447, -0.0197004899, 0.0942279696, -0.0078320205, 0.0073960684, -0.0186346918, -0.0388238467, 0.0595627129, -0.1043009982, 0.0860784575, -0.0775748566, -0.0959566087, -0.0446389355, -0.1219899803, -0.0595544539, -0.0071544517, -0.0162247755, -0.0221049115, -0.0858455524, -0.0103841126, 0.0123206144, 0.0013345656, 0.0393052027, -0.0455992855, 0.0105820587, -0.1121737584, 0.0042313621, 0.0883744955, 0.0139347063, 0.0239979792, -0.0184429325, -0.0542963967, 0.1389431506, 0.0372035243, 0.0708453134, 0.0069280472, -0.0049572177, -0.0241171345, -0.0386607870, 0.1006553248, -0.0835625231, 0.0468814932, -0.0186559297, -0.0299350824, -0.0131886480, 0.0021858048, 0.0827684999, 0.0249048751, -0.0947319642, -0.0211961102, -0.0174313225, 0.0723894611, 0.0120139569, 0.0540517084, -0.0726846308, 0.0345521197, -0.0434004702, -0.0213401094, -0.0732669979, -0.0132811712, -0.1001467481, 0.0544000342, -0.0049174307, -0.0402825326, 0.0129672065, -0.0121059809, 0.0086819632, 0.0186624676, 0.0331100821, -0.0618661866, -0.0185186565, 0.0670395941, -0.0384097658, -0.0002172569, -0.0424930602, -0.0433753878, -0.0650239214, -0.1069373563, -0.0528888814, 0.0518348292, 0.0508825555, -0.0069736149, 0.0035840492, -0.0879210830, -0.0881812200, -0.0102378950, -0.0941880345, -0.1060474813, 0.0427403823, 0.0495877564, 0.0504998080, -0.0519750454, -0.0461075269, -0.0010097536, -0.0935202539, -0.0719351396, -0.0375057198, -0.0058360891, 0.0794751048, -0.0681238919, -0.0177932102, -0.0394831263, -0.0381792150, 0.0188883096, 0.0233734082, 0.0177586358, 0.0695301890, 0.0273005292, -0.0283245239, 0.0047541843, 0.0696755648, -0.0554784201, 0.0712257847, 0.0243380889, 0.0447326824, -0.0392614417, -0.0839330778, -0.0554369688, -0.0291283410, 0.0479394607, -0.0227646995, -0.0332628600, 0.0289383326, 0.0693472698, -0.0249010194, 0.1386018991, -0.0469598249, -0.0724299625, -0.0085262312, -0.0452051573, 0.0711506307, -0.0582961552, -0.0268659350, -0.0082942722, -0.0298586115, -0.0159947854, 0.0489678085, 0.0837514326, -0.0478560813, -0.0599326082, -0.0756848380, -0.0767502859, -0.0353780612, -0.0432756506, 0.0556706637, 0.0979047418, -0.0575757846, 0.0155394282, -0.0522017963, 0.0085267285, -0.0549801029, 0.0714371055, -0.0014620308, 0.0224269815, 0.0288570188, 0.0597026646, -0.0013477076, -0.0082397833, 0.0763339996, -0.0066985600, 0.0258380882, -0.0038054381, 0.0364205241, -0.0518796481, 0.0027898068, -0.0781848729, -0.0102864075, 0.0313938148, 0.0147942062, 0.0676541179, -0.0483148433, -0.0392561816, 0.0063363076, 0.0108184200, -0.0356937274, 0.0669416562, -0.0342701375, -0.0588120706, 0.0733523890, -0.0141583178, 0.0070916251, -0.0427360684, -0.0002873499, 0.0193743724, 0.0223576762, -0.0574696362, -0.0018153214, -0.0141254161, -0.0153031731, -0.0134930201, -0.0763727278, -0.0668840930, 0.0178015456, 0.0457074121, 0.0025487030, -0.0294278450, 0.0436321348, -0.0673645437, -0.0256965011, 0.0330589712, -0.0499325804, 0.0602915958, -0.0889950544, 0.0061774454, -0.0699948967, 0.0447003432, -0.0023227441, -0.0570535734, 0.0814387649, -0.0484284312, -0.0892530158, -0.0181301888, -0.0505878031, 0.0548341982, 0.0554423481, 0.0624991432, -0.0460976996, 0.0281682145, -0.0780547932, -0.0625899434, -0.0528463982, 0.0230539553, -0.0471705869, -0.0118094757, -0.0349848419, -0.0437918790, 0.0357542410, 0.0501838550, 0.0087323561, -0.0781918913, 0.0709987730, -0.0669814795, 0.0203855671, -0.0317525901, -0.0344242975, 0.0265109204, -0.0068869819, -0.0081716049, 0.0323541835, -0.0372611843, 0.0668605566, -0.0216443818, 0.0375676788, 0.0084879501, -0.0448600203, 0.0371361151, 0.0187284462, -0.0730621368, -0.0265598577, 0.0287324805, 0.0449888557, 0.0108782547, -0.0491274968, 0.0058944812, -0.0522802249, 0.0710554346, 0.0843744725, 0.0393222272, 0.0156311747, -0.0362315215, -0.0410554744, 0.0371529125, -0.0674018040, 0.0575787351, 0.0829013065, 0.0541611388, 0.0095099797, 0.0426698178, 0.0225607865, -0.0353869312, -0.0022328317, 0.0103684133, 0.0288765058, -0.0637598708, -0.0144463023, -0.0072381301, -0.0115335472, 0.0160401054, -0.0630764663, 0.0176155567, 0.0350185372, -0.0439583398, -0.0386889577, -0.0692238957, -0.0276361182, 0.0630308911, 0.0827319697, -0.0582667924, 0.0609217733, 0.0117105376, -0.0075000869, 0.0405741818, -0.0563857630, 0.0231896527, 0.0771748871, 0.0469451658, -0.0198586248, 0.0062002661, -0.0721849725, -0.0519684330, -0.0523313209, -0.0324315540, 0.0424297489, -0.0500820354, 0.0803506300, 0.0753145963, -0.0640502498, -0.0116729103, -0.0856134072, -0.0477000400, 0.0189309660, 0.0489675254, -0.0070864223, -0.0574440174, -0.0507298708, -0.0154829649, -0.0762682110, -0.0194732696, -0.0396507084, -0.0437472761, 0.0609259792, 0.0325172991, -0.0350531004, 0.0555665977, -0.0639480129, -0.0824672505, -0.0613041446, -0.0560690425, -0.0358939804, 0.0266059265, -0.0536917262, 0.0578975938, 0.0198283568, -0.0060849702, 0.0300377887, 0.0213095639, -0.0853840113, -0.0981111452, -0.0537410267, -0.0680219159, 0.0166427363, -0.0081296852, 0.0419388078, 0.0557735004, -0.0912054405, 0.1167059392, 0.0039008362, -0.0272693783, 0.0327839293, 0.0515926778, -0.0193027034, -0.0226807017, 0.1208535507, -0.0256137289, 0.0547450073, -0.0593582354, -0.0044474392, 0.0805550516, -0.0197219942, -0.0423163772, -0.0090064295, 0.0378770120, 0.0008286606, -0.0271608718, -0.0324527733, 0.0004887074, -0.0272413865, 0.0152704269, 0.0745330378, 0.0340338722, -0.0522011556, -0.0341915525, -0.0237437505, -0.0934622288, -0.0331237167, 0.0705279559, -0.0302455295, 0.0606619790, 0.0258488897, 0.0012309416, -0.1082090214, 0.0285269767, -0.0982523710, -0.0220347084, -0.0139918942, -0.0109819053, 0.0722478479, -0.0856711939, 0.0183560010, -0.0478225201, 0.0535411127, 0.0864500701, -0.0263966992, -0.0057582390, -0.0174101330, -0.0032883852, 0.0285371952, -0.0497594848, -0.0028413634, -0.0275596026, -0.0112077957, 0.0287891328, 0.0273967665, -0.0312706865, -0.0076161115, -0.0246653594, 0.0367330238, -0.0613911599, -0.0581333078, -0.0054692710, -0.0923648551, 0.0801276416, -0.0696960837, 0.0657678396, 0.0730697587, -0.0371011458, 0.0350866094, 0.0504549518, -0.0319113359, -0.0832426399, 0.0073761526, -0.0622438304, -0.0295599438, 0.0732328594, 0.0681524202, 0.0778913721, 0.0579589568, 0.0284737702, 0.0198891610, -0.0129450923, 0.0967826247, 0.0246795118, 0.0739561170, 0.0270277001, -0.0999298990, 0.0265681874, -0.0084334174, -0.0049199909, 0.0008887165, -0.0407458320, -0.0422836542, 0.0150259351, -0.0292718187, 0.0739750788, 0.0154089062, 0.1200041920, -0.0414072387, -0.0445035622, -0.0391825214, -0.0235126615, 0.0940457433, -0.0264915768, -0.0721020699, 0.0793477744, -0.0210612044, 0.0501754358, -0.0337155871, 0.0358506553, 0.0839951783, -0.1044638008, -0.0926883221, 0.0351854265, -0.0213322304, 0.0710772648, 0.0917653963, 0.0876782760, -0.0616076626, -0.0553403683, -0.0487423241, -0.0904670730, -0.0053636096, -0.0069001080, 0.0348851345, 0.0371008031, 0.0130388644, -0.0375286192, -0.0799493119, -0.0735618100, 0.0569023229, -0.0792049319, 0.0756027550, -0.0447692610, -0.0432259887, -0.0301483516, 0.0310126636, -0.0487596244, 0.1084678248, -0.0082814870, -0.0158518981, 0.0238694511, 0.0063071568, 0.0109420940, -0.0097733755, -0.0147858169, 0.0675112009, -0.0919307992, 0.0054976018, -0.0219982453, 0.0848869011, 0.0057368916, 0.0570293479, -0.0068896762, 0.0567142367, -0.0253446437, 0.0724115670, -0.0441402644, 0.0776825845, -0.0050125979, 0.0369414911, 0.0395461991, -0.0280822739, 0.0494059287, 0.0699864030, 0.0539363697, 0.0685688928, -0.0849051625, 0.0266530290, 0.0776313990, 0.0065532620, 0.0828059092, -0.0703898147, 0.0517802685, -0.0391405635, 0.0412250981, -0.0315858237, -0.0733557567, 0.0481433049, -0.1102056354, 0.0896994844, -0.0155653320, 0.0567632690, 0.0463146754, 0.0500846505, -0.0443372764, -0.0485450998, -0.0557922497, -0.0156240510, -0.1103556156, -0.0718378648, -0.0805043653, -0.0471842661, 0.0615365505, -0.0020731972, -0.0912516713, 0.0542782471, -0.0138389468, -0.0114264507, -0.0458818115, -0.0368746109, 0.0432071313, -0.0222105999, 0.0144061735, -0.0108744344, 0.0513515063, -0.0118853161, -0.0748039111, -0.0742977485, 0.0409889296, 0.0548372567, -0.0001101288, 0.0784817860, 0.0447412953, 0.0768472254, -0.0278140828, -0.0997234508, -0.0592706241, -0.0185945239, 0.0084031336, 0.0395107195, -0.0368623398, 0.0225582886, 0.0092992987, -0.0312008206, 0.0253983922, -0.0994084030, 0.0478742830, 0.0021735833, 0.0352007896, 0.0437652618, 0.0076410822, -0.0446652584, -0.0795152932, 0.0631302521, -0.0220039301, 0.0488177687, -0.0457755625, -0.0242090896, -0.0497936606, -0.0642320365, -0.0078455703, -0.0250686668, -0.0095241126, 0.0416701697, -0.0042680157, -0.0435467474, -0.0115632517, 0.0039690072, -0.0159057286, 0.0428311788, 0.0759202018, -0.0043805460, -0.0728439838, -0.0198439192, 0.0691681653, 0.0034960976, 0.0574981570, 0.0327424183, -0.0807196647, -0.0305312723, 0.0301135387, -0.0064436081, -0.0579823069, -0.0468257889, 0.0101229474, 0.0369170010, -0.0655652136, -0.0762211904, -0.0241147522, 0.0679824501, 0.0339697599, 0.0099175293, -0.0438688099, 0.0572849289, -0.0364321657, 0.0809552595, -0.0024152100, -0.0403201170, -0.0526715256, 0.0655883849, -0.0101570711, -0.0565710962, 0.0271182638, 0.0603547171, 0.0626949370, -0.0379227325, -0.0296074692, -0.0410708524, -0.0129170511, 0.0518854819, -0.0024680560, 0.0716129169, -0.0368341394, -0.0355991349, -0.0246508513, 0.0730077848, 0.0344433486, -0.0566174425, -0.0253532641, -0.0399234854, 0.0644669309, 0.0289732069, -0.0557301119, -0.0821196064, -0.0904793069, -0.0076975063, 0.0278228819, 0.0298181195, -0.0198585205, 0.0218758173, -0.0241619963, 0.0809875652, -0.0592288449, 0.0302412454, 0.0447323546, 0.0346236005, 0.0111151235, -0.0772329122, -0.0371455848, 0.0520895161, 0.0181038678, -0.0360531360, 0.0256229565, 0.0594985373, 0.0093924971, -0.0819981322, -0.0415469892, 0.0762246698, 0.0047300053, 0.0678077266, -0.0470022410, 0.0104880286, -0.0785415024, -0.0263598226, -0.0499605015, 0.0085146576, -0.0575162545, -0.0408884287, -0.0379739627, -0.0753119886, 0.0277718194, -0.0460089743, -0.0438446812, 0.0126226908, -0.0779057518, -0.0269639976, -0.0389525406, -0.0620535612, -0.0930346325, 0.0486407392, 0.0182562489, -0.0424416773, -0.0578939728, -0.0366499536, -0.0648675263, 0.0442316532, -0.0546179637, 0.0112073896, -0.0342487656, 0.0356882513, -0.0707762837, 0.0330131501, -0.0551264472, -0.0305196792, 0.0176666323, -0.0719194412, -0.0075789797, 0.0067831934, -0.0389002226, -0.0756468177, 0.0586853735, -0.0165355932, -0.0742861629, -0.0556054600, -0.0128358873, -0.0585029610, 0.0125222513, 0.0371683575, 0.0890111849, -0.0645149052, -0.0698528364, -0.0179890469, 0.0593934357, -0.0130168842, 0.0390347652, -0.0615630113, -0.0621070527, 0.0570915155, -0.0693151578, 0.0305870920, -0.0068522473, -0.0794428438, -0.0391760804, -0.0035199039, 0.0319487154, -0.0519074947, -0.0555826239, -0.0321099535, -0.0233857185, 0.0420163572, -0.0711128786, 0.0296443515, -0.0373162553, 0.0546965338, 0.0791003034, -0.0045958678, -0.0131498715, 0.0204111319, 0.0700206086, 0.0372060537, -0.0139337787, 0.0381502323, 0.0106992563, 0.0045070215, 0.0600147620, -0.0293569881, -0.0549956672, -0.0902861655, -0.0645107105, 0.0702297464, -0.0279027484, 0.0474049300, 0.0212746728, 0.0546488464, 0.0423788093, -0.0029252821, -0.0275594350, -0.0074120001, 0.0636014417, 0.0702180937, 0.0187662542, 0.0199207254, 0.0271003488, 0.0658725724, 0.0494163074, 0.0573640577, -0.0776437819, -0.0243224874, -0.0441419221, -0.0142909838, -0.0839980096, -0.0062718955, 0.0147287371, -0.0432117544, -0.0784030557, 0.0383564420, -0.0088402955, 0.0588643327, 0.0868013427, -0.0308022778, 0.0189697295, 0.0171357412, 0.0384846516, -0.0500113331, 0.0612459369, -0.0700443909, -0.0418307222, 0.0177304782, -0.0219760351, 0.0297536924, 0.0274758637, -0.0478356816, -0.0499829650, -0.0290201679, -0.0449195802, 0.0506013744, -0.0674390867, 0.0784496143, 0.0426308438, 0.0084240539, -0.1032953560, -0.0196025204, 0.0162040219, -0.0208594557, -0.0551190041, -0.1077884957, 0.0764530674, -0.0022397779, -0.0322086625, -0.0103764366, 0.0959192216, -0.0297849346, -0.0736830533, 0.0729371905, -0.0737599432, 0.0167336781, 0.0581276417, -0.0020076903, -0.0918575972, -0.0185122825, 0.0852901265, -0.0984243304, 0.0338247381, -0.0053610029, 0.0360221304, -0.1001846567, 0.0343860276, -0.0032869871, -0.0212207269, 0.0241345838, -0.0457192212, 0.0268874876, -0.0417420156, -0.0699643940, -0.0569255352, -0.0081174988, -0.0032949161, 0.0727735162, 0.0644389763, -0.0192459915, 0.0683392435, -0.0000120168, -0.0568251051, 0.0314721689, 0.0720906854, 0.0598510280, 0.0161498580, -0.0569470786, 0.0270667728, 0.0400791243, 0.0457987823, -0.0320050158, 0.0421840437, -0.0720167905, 0.0337769687, 0.0497152619, 0.0628511757, 0.0159462132, -0.0896370932, 0.0039737248, 0.0013684923, -0.0070103919, -0.0597334392, 0.0335661508, 0.0225375313, 0.0169154909, -0.0294259414, -0.0081190253, -0.0150853610, 0.0275842343, -0.0537039824, -0.0174981691, -0.0265284572, -0.0561656468, -0.0225493927, -0.1039523035, -0.0003266088, -0.0324448869, 0.0206247587, -0.0728528351, -0.0082449699, -0.0345042460, -0.0974239632, -0.0226807259, 0.1101965085, -0.0764337704, -0.0542202666, -0.0852002650, 0.0535846651, -0.0316198356, -0.0445000716, 0.0619823784, 0.0725176707, 0.0023040664, 0.0714055598, -0.0762335509, 0.0351825692, 0.0000706236, -0.0699123889, 0.0054387799, 0.0122471116, -0.0478797704, 0.0139324684, -0.1016504243, -0.0242314823, -0.0971733183, 0.0600157045, -0.0593930520, -0.0230363198, 0.0314430371, -0.1117930561, 0.0935580358, -0.0015692231, 0.0163424592, -0.0126719829, 0.0058359494, -0.0324680470, 0.0594011806, 0.0897565186, -0.0454725511, -0.0423256531, -0.0411444232, -0.0740319490, 0.0104476996, -0.0344184302, -0.0250955895, 0.0040739854, 0.0426607653, -0.0179218519, 0.0443136916, -0.0260283649, 0.0641192794, -0.0935996845, -0.0120195458, -0.0556980073, 0.0446627811, -0.0505778603, 0.0029155214, 0.0048961309, -0.0844158232, -0.0542323887, -0.0288903359, 0.0623563044, 0.0213609766, -0.0402204394, 0.0101319831, 0.0050196773, -0.0534135140, 0.0782076418, -0.0592788421, 0.0798538402, -0.0500650294, 0.0547272153, -0.0152356997, -0.0343581848, 0.0267003365, 0.0626439229, 0.0396079943, -0.0676712319, -0.0399530306, 0.0050636674, -0.0691509247, -0.0008865791, 0.0405567326, 0.0294500105, -0.0408817716, -0.0342069380, 0.0414543189, -0.0258695502, 0.0425003767, -0.0092262961, -0.0589388758, -0.0225204565, 0.0275268666, -0.0145818545, 0.0356979668, -0.0557154939, 0.0227088444, -0.0858187079, 0.0270534419, -0.0390029661, 0.0433604866, 0.0754722133, -0.0267341435, 0.0681445226, -0.0685469285, 0.0198709387, -0.0061988002, -0.0626129061, -0.0468651354, -0.0008779557, -0.0568773672, -0.0649287254, -0.0070616156, 0.0190689843, -0.0319800861, 0.0265394747, -0.0847009197, 0.0486169122, -0.0870258361, 0.0129754879, -0.0357134640, 0.0075645512, 0.0064725196, -0.0965082347, -0.0198000018, 0.0013955588, 0.0867216736, 0.0160824005, 0.0067595383, -0.0790184736, 0.0179057252, 0.0142644802, -0.0648264661, 0.0713764876, -0.0515254363, -0.0454016253, -0.0902969465, 0.0497766510, 0.0721221715, -0.0285392813, -0.0238351561, 0.0895446092, -0.0737933218, -0.0659008548, -0.0336177312, -0.0067328638, 0.0202358272, -0.0496179014, -0.0003156654, 0.0388253182, -0.0415426381, 0.0906196311, -0.0609053634, 0.0026871678, 0.0610024482, -0.0240665302, 0.0479017422, -0.0271122307, 0.0385135151, -0.0157293305, 0.0323713012, 0.0402024388, 0.0706893429, 0.0789178759, 0.0009028607, 0.0004251194, -0.0152218472, -0.0554494038, 0.0169862099, -0.0719196871, 0.0107247569, 0.0441868044, -0.0066105910, 0.0722911507, -0.0371346250, -0.0161169469, 0.0071815462, -0.0712102428, 0.0543747321, 0.0081700291, -0.0444030203, -0.0419662185, 0.0445810594, 0.0633193180, 0.0534771867, -0.0242213514, 0.0253847744, -0.0784692317, 0.0963375270, 0.0154521968, -0.0031315612, 0.0109019540, -0.1019983888, -0.0069613042, -0.0156100653, 0.0934162810, 0.0211260077, 0.0904464945, -0.0768903866, -0.0289928913, -0.0469482690, 0.0081388392, 0.0635947064, -0.0150912609, -0.0369813070, -0.0692028999, -0.0128761539, -0.0196902733, -0.0721977055, -0.1029868498, -0.0892287567, -0.0628859922, 0.0146911070, 0.0260039344, -0.0243929960, -0.0677960441, -0.0087109189, 0.0266159959, 0.0233222917, -0.0548330173, 0.0085164187, 0.0037276612, 0.0467479937, -0.0621695034, -0.0412997529, 0.0593620427, -0.0307183843, 0.0827504545, -0.0011085623, -0.0056554573, -0.0495776869, -0.0452015437, -0.0499259084, -0.0071406914, 0.0406109318, 0.0126399584, -0.0725661889, -0.0479767174, -0.0949945822, 0.0069816168, 0.0493005738, -0.0587527342, 0.0158849414, -0.0825394690, -0.0694478527, 0.0306378584, 0.0157516971, 0.0652455762, -0.0801784992, 0.0711722299, -0.0467435680, -0.0998863280, 0.0789934397, 0.0144785056, -0.0468629487, -0.0543123186, -0.0203174520, -0.0973250270, 0.0370425954, 0.0057843118, -0.0387578793, 0.0569692850, 0.0194849726, -0.0477710664, -0.0712651834, 0.0505073555, 0.0334301144, 0.0015485976, 0.0308750141, -0.0784652159, 0.0554160364, 0.0333168767, -0.0618326850, 0.0379829779, -0.0226519872, 0.0479561910, 0.0531583540, -0.0342108384, 0.0913672745, 0.0569208637, 0.0429470874, -0.0203671455, -0.0502775349, -0.0439739078, -0.0288136527, 0.0370557792, -0.0054709995, 0.0065055606, 0.0275162701, -0.0217903629, -0.0448997989, -0.0037277008, 0.0111622158, 0.0189260207, 0.0704075173, -0.0534821264, 0.0602304935, 0.0359589309, -0.0106540807, -0.0257193055, 0.0725658685, 0.0760212839, -0.0124679189, -0.0575099364, -0.0249742977, 0.0274547953, -0.0104243681, -0.0595092252, -0.0014492992, 0.0657575205, -0.0669324622, -0.0379223078, -0.0514580533, 0.0690458342, 0.0450852253, -0.0967218950, 0.0580738820, 0.0285820793, 0.0032741185, 0.0548531115, 0.0276376456, 0.0387114920, 0.0287304856, -0.0329851173, -0.1075926200, 0.0974677876, 0.0125517389, 0.0344778672, -0.0238722246, -0.0615122840, 0.0911299884, -0.0951564535, -0.0083630178, 0.0392349809, -0.0578678586, 0.0245117676, -0.0067866608, -0.0703589097, 0.0892956704, 0.0614512302, 0.0932145417, 0.0871661827, -0.0119901784, -0.0733959749, -0.0073789661, 0.0627588257, -0.0319197513, 0.0376040712, -0.0685730577, -0.0944870859, -0.0695543438, -0.0191280376, 0.0566643178, 0.0388707332, -0.0520912372, 0.0784783438, -0.0775454864, 0.0556481518, 0.0499834120, -0.1015940607, -0.0225389581, -0.0458425172, 0.0195646863, -0.1054804996, -0.0213547628, -0.0147218863, -0.0772374570, -0.1195589155, 0.0302857962, 0.0703628212, -0.0583880618, 0.0428439789, -0.0308328755, -0.0592810139, 0.0398121923, 0.0855352730, -0.0448594280, -0.0261624325, -0.0398395695, -0.0142532531, -0.0283337012, 0.0163879804, 0.1094168425, -0.0011702791, -0.0181104746, -0.0287632905, 0.0620701350, -0.0400492214, 0.0193854738, 0.0118297404, -0.0179862976, 0.0713455603, -0.0131479846, -0.0797578320, -0.0498420037, 0.0095195686, 0.0066320840, -0.0457420275, 0.0621470325, -0.0023098870, 0.0283944495, -0.0331115723, -0.1101817563, 0.0301029086, -0.0366475806, -0.0631501824, -0.0139260842, 0.0374819078, -0.0339628421, 0.0527157821, -0.0769541562, -0.0263974629, 0.0806929618, 0.0096239336, 0.0625940412, -0.0024253170, 0.0470324717, 0.0188191719, 0.1016986892, -0.0202712640, 0.0751483440, -0.0693619624, 0.0358063914, -0.0079871174, -0.0084759807, 0.0157258715, -0.0558860078, 0.0291255694, -0.0306787249, -0.0509417839, 0.0127801821, -0.0418856218, 0.0316128656, -0.0006034227, 0.0443922319, -0.0229423679, -0.1246169582, -0.0155242411, 0.0365661196, 0.0114481552, 0.0322340578, -0.0046404609, 0.0029147065, -0.0333680809, -0.0298784450, -0.0772723109, 0.0848585144, -0.0546374545, -0.0887992829, 0.0299960189, 0.1192808002, 0.0948301554, -0.0657570213, 0.0517408773, 0.0391966030, 0.0159427561, -0.1355288327, -0.0347749777, 0.0377439037, -0.0026336978, -0.0330354981, -0.0690013841, -0.0909855291, -0.0314580388, -0.0092748888, 0.0194088910, 0.0303409193, -0.0308290776, 0.0302501898, 0.0917918757, 0.0160696525, -0.0161236078, 0.0883677825, -0.0380897857, -0.0680239871, -0.0474566594, 0.0138239823, -0.0450471081, -0.0573598668, -0.0167387184, 0.0976987258, 0.0171539634, 0.0090994053, -0.0259819049, -0.0394521058, -0.0676544458, -0.0411818959, -0.0453483015, -0.0351105481, -0.0731339008, 0.0846362263, 0.0394997969, -0.0129380655, 0.0086036706, -0.0554789081, 0.0441896506, -0.0165096074, 0.0782319233, -0.0407444872, 0.0774441138, -0.0712245852, -0.0651743487, 0.0862354115, 0.0564587861, 0.0049694204, 0.0797263980, -0.0120043447, -0.0698167235, 0.0424863547, 0.0071896133, 0.0377570912, 0.0888988897, 0.0503425226, -0.0832405984, 0.0379429311, -0.0307752509, -0.0166217498, 0.0911268070, -0.0660962313, 0.0174048375, 0.0372520201, -0.0942144245, 0.0300726015, -0.0926022083, -0.0497880876, 0.0405019745, -0.0283303931, -0.0507445522, -0.0524445698, -0.0568007007, 0.0096940836, -0.0468582213, 0.0281575248, -0.0222554561, -0.0206564963, 0.0286571030, 0.0493778214, 0.0028876178, 0.0522065982, 0.0151103027, 0.0097280052, 0.0656695962, -0.0199724417, 0.0858772174, 0.0398469605, -0.0166100562, 0.1056774184, 0.0078669628, 0.0464723296, 0.0045002997, 0.0246571954, -0.0485481545, 0.0097726220, -0.0095887845, 0.0718178600, -0.0660659820, 0.0008154796, 0.0104325460, 0.0029558460, -0.0889591947, -0.0075682150, -0.0794155076, 0.0682990253, 0.0765858591, -0.0542972907, 0.0559045821, -0.0499537773, -0.0034360171, 0.0763798729, -0.0317279622, -0.0223481264, -0.0927855894, 0.1162762940, -0.0626422092, -0.0688513964, 0.0426145978, -0.0786903873, -0.0913694501, 0.0966871157, 0.0518883765, -0.0760877430, 0.0577707812, -0.0572405979, -0.0577088483, 0.0283938069, -0.0186925419, 0.0553374290, -0.0466783158, 0.0240608789, -0.0459429212, -0.0159582607, 0.0081922226, 0.0345045105, -0.0675752610, -0.0181058794, 0.0024727453, -0.0334965698, 0.0742055029, 0.0492576845, 0.0058820480, -0.0836045519, 0.0096047791, 0.0322922468, 0.0733142570, 0.0023454993, -0.0416289829, 0.0057591889, 0.0122991549, -0.0052638575, -0.0332143493, -0.0436516143, -0.0306573082, -0.0723641291, -0.0222715549, 0.0099971471, 0.0187330246, -0.0235121157, -0.0299110841, -0.0454586372, -0.0474985577, -0.0486985110, 0.0351031385, 0.0543195121, 0.0431663729, 0.0598862246, 0.0444039330, -0.0052484348, -0.0593752116, -0.0182053111, -0.0494931787, 0.0745920092, -0.0527159236, -0.0850386396, -0.0193608068, -0.0149973696, -0.0196812302, 0.0005038398, -0.0140326656, 0.0490801074, 0.0103853969, -0.0670835972, 0.0518872812, 0.0060841362, 0.0573546365, 0.0354920141, 0.0026648771, 0.0654768422, 0.0167637747, 0.0711628795, -0.0876660794, -0.0343579203, -0.0975357741, 0.0337937921, -0.0196248740, -0.0789349973, -0.0457354262, 0.0255269613, 0.0302599370, -0.0305956341, 0.0024212669, 0.0324045084, 0.0254230276, 0.0127498377, 0.0310766958, 0.0680306032, 0.0493575297, 0.0888536721, -0.0762989298, -0.0347797982, -0.0443730131, 0.0273083393, -0.0304572731, -0.1033408567, 0.0160289016, -0.0250702947, 0.0618231073, 0.0373845287, 0.0009144710, 0.0365183800, -0.0657537431, 0.0695670694, -0.0786268339, 0.0247500446, -0.0673060566, -0.0210781973, 0.0005532569, 0.0528597422, 0.0325181037, -0.0197764616, 0.0381172560, 0.0097802179, -0.0726107359, -0.0474507809, 0.0668727830, 0.0167941712, -0.0720947534, 0.0448003449, 0.0464879870, 0.0899442732, -0.0501868092, 0.0070755966, -0.0506426394, -0.0359653383, 0.0420245156, -0.0756772459, 0.0046389825, 0.0801901594, -0.0732635409, 0.0209800359, -0.0476668552, -0.0200248677, 0.0432560816, 0.0520199016, -0.0222797301, -0.0861952007, -0.0853214711, 0.0592664741, 0.0364619344, -0.0485934876, -0.0297029968, -0.0014516816, -0.0272396784, 0.0178891588, -0.0825804323, -0.0529033989, -0.0703560188, -0.0044610174, -0.0145864151, 0.0208166260, 0.0387724340, -0.0522737727, 0.0322730727, -0.0409419648, 0.0432896949, -0.0210563447, -0.0877226591, -0.0662253797, 0.1005816162, -0.1020887122, -0.0046790568, 0.0244557280, -0.0718500689, 0.0770090446, 0.0244450048, 0.1002550945, 0.0245733932, -0.0040449225, 0.0346615575, -0.0848177597, 0.0747202039, 0.0928789154, -0.0303206258, -0.0312312841, 0.0374680497, -0.0087423977, -0.0376711152, 0.0548679307, -0.0675898641, 0.0496145897, 0.0388424955, -0.0138147324, -0.0434179455, 0.0123423412, -0.0249428153, 0.0482887365, 0.0107837282, -0.0701518729, -0.0565290675, -0.0455926396, 0.0024383478, 0.0271578729, 0.0211498775, -0.0436200164, 0.0282183420, 0.0563476607, 0.0157704577, 0.0370278955, -0.0303717609, 0.0324718505, -0.0697645172, 0.0531618260, 0.0784860775, -0.0464131348, 0.1002936065, -0.1017931923, 0.0487534031, 0.0772502422, 0.0456425846, 0.1082533225, 0.0682578087, 0.0088008353, 0.0760264099, -0.0455665290, -0.1138692871, 0.0259188823, -0.0754452348, 0.0083057145, 0.0006389461, 0.0585917532, 0.0215631463, -0.0725830421, 0.0959090367, 0.0358167961, 0.0487362370, -0.0587155819, -0.0823220909, 0.0009940538, 0.0117337899, -0.0766724944, 0.0206202865, -0.0021230681, 0.0072442265, -0.0200727917, 0.0175582692, 0.0989367217, -0.0480290242, -0.0363643244, 0.0641371012, -0.0154477106, 0.0137805808, 0.0568800308, 0.0043769898, 0.0121983336, -0.0123301856, 0.0340290964, 0.0685065612, 0.0266316682, -0.0485667959, 0.0931894854, 0.0012231523, 0.0596457943, 0.0006904807, 0.0889672190, -0.0724240839, 0.0325300470, 0.0457461923, -0.0625240803, 0.0845705122, -0.0833177716, 0.0362044908, 0.0077274987, 0.0329650976, -0.0589666255, 0.0206930451, 0.0332423523, -0.0570383854, -0.0430944711, -0.0034195993, 0.0605066679, -0.0019737957, -0.0051737549, -0.0273223314, -0.0052998606, -0.0057360185, 0.0727282614, 0.0560101643, 0.0124791712, 0.0238746684, -0.0162103083, -0.0623838864, 0.0772035718, -0.0079132849, -0.0412349924, 0.0045508533, 0.0312563591, 0.0187780932, -0.0120754000, 0.0196554027, 0.0494650602, -0.0171507839, -0.0069737062, -0.0097753461, -0.0999140739, 0.0305841919, -0.0214121193, -0.0706724674, 0.0784271210, 0.0321383774, 0.0153729562};
# 32 "./parameters.h" 2
# 1 "./weights/b16.h" 1
# 12 "./weights/b16.h"
dense_bias_t b16[8] = {0.0275416151, -0.0127247097, 0.0172035098, 0.0094223991, 0.0161079820, -0.0117295440, 0.0221073534, 0.0188806280};
# 33 "./parameters.h" 2
# 1 "./weights/w18.h" 1
# 12 "./weights/w18.h"
dense_1_weight_t w18[24] = {-0.0652779564, -0.2509036958, 0.4885342121, -0.0673456937, -0.0354500897, -0.1323486418, 0.0283774678, -0.6573882699, 0.3910228610, -0.6785684228, 0.3483562469, 0.6009259820, -0.0949936435, 0.4088453948, 0.1827655882, -0.0606034733, 0.4440538287, -0.5402925014, 0.6609015465, 0.3316026032, 0.5059693456, -0.1902755648, 0.3253899217, 0.2625038028};
# 34 "./parameters.h" 2
# 1 "./weights/b18.h" 1
# 12 "./weights/b18.h"
dense_1_bias_t b18[3] = {-0.0261011273, -0.0242789481, 0.0264608990};
# 35 "./parameters.h" 2



struct config2 : nnet::padding2d_config {
    static const unsigned in_height = 480;
    static const unsigned in_width = 128;
    static const unsigned n_chan = 1;
    static const unsigned out_height = 512;
    static const unsigned out_width = 128;
    static const unsigned pad_top = 16;
    static const unsigned pad_bottom = 16;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
};


struct config3_mult : nnet::dense_config {
    static const unsigned n_in = 9;
    static const unsigned n_out = 32;
    static const unsigned reuse_factor = 144;
    static const unsigned strategy = nnet::resource;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    typedef model_default_t accum_t;
    typedef conv2d_bias_t bias_t;
    typedef conv2d_weight_t weight_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config3 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 512;
    static const unsigned in_width = 128;
    static const unsigned n_chan = 1;
    static const unsigned filt_height = 3;
    static const unsigned filt_width = 3;
    static const unsigned kernel_size = filt_height * filt_width;
    static const unsigned n_filt = 32;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 510;
    static const unsigned out_width = 126;
    static const unsigned reuse_factor = 144;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit =
        ((kernel_size * n_chan * n_filt + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    static const unsigned strategy = nnet::resource;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned min_height = 5;
    static const unsigned min_width = 5;
    static const ap_uint<filt_height * filt_width> pixels[min_height * min_width];
    static const unsigned n_partitions = 64260;
    static const unsigned n_pixels = out_height * out_width / n_partitions;
    template<class data_T, class CONFIG_T>
    using fill_buffer = nnet::FillConv2DBuffer<data_T, CONFIG_T>;
    typedef model_default_t accum_t;
    typedef conv2d_bias_t bias_t;
    typedef conv2d_weight_t weight_t;
    typedef config3_mult mult_config;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_height = nnet::scale_index_regular<K, S, W>;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_width = nnet::scale_index_regular<K, S, W>;
};
const ap_uint<config3::filt_height * config3::filt_width> config3::pixels[] = {1,3,7,6,4,9,27,63,54,36,73,219,511,438,292,72,216,504,432,288,64,192,448,384,256};


struct config5 : nnet::pooling2d_config {
    static const unsigned in_height = 510;
    static const unsigned in_width = 126;
    static const unsigned n_filt = 32;
    static const unsigned stride_height = 4;
    static const unsigned stride_width = 4;
    static const unsigned pool_height = 4;
    static const unsigned pool_width = 4;

    static const unsigned filt_height = pool_height;
    static const unsigned filt_width = pool_width;
    static const unsigned n_chan = n_filt;

    static const unsigned out_height = 127;
    static const unsigned out_width = 31;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const bool count_pad = false;
    static const nnet::Pool_Op pool_op = nnet::Average;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned reuse_factor = 128;
    typedef model_default_t accum_t;
};


struct config6_mult : nnet::dense_config {
    static const unsigned n_in = 288;
    static const unsigned n_out = 64;
    static const unsigned reuse_factor = 144;
    static const unsigned strategy = nnet::resource;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    typedef model_default_t accum_t;
    typedef conv2d_1_bias_t bias_t;
    typedef conv2d_1_weight_t weight_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config6 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 127;
    static const unsigned in_width = 31;
    static const unsigned n_chan = 32;
    static const unsigned filt_height = 3;
    static const unsigned filt_width = 3;
    static const unsigned kernel_size = filt_height * filt_width;
    static const unsigned n_filt = 64;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 125;
    static const unsigned out_width = 29;
    static const unsigned reuse_factor = 144;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit =
        ((kernel_size * n_chan * n_filt + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    static const unsigned strategy = nnet::resource;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned min_height = 5;
    static const unsigned min_width = 5;
    static const ap_uint<filt_height * filt_width> pixels[min_height * min_width];
    static const unsigned n_partitions = 3625;
    static const unsigned n_pixels = out_height * out_width / n_partitions;
    template<class data_T, class CONFIG_T>
    using fill_buffer = nnet::FillConv2DBuffer<data_T, CONFIG_T>;
    typedef model_default_t accum_t;
    typedef conv2d_1_bias_t bias_t;
    typedef conv2d_1_weight_t weight_t;
    typedef config6_mult mult_config;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_height = nnet::scale_index_regular<K, S, W>;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_width = nnet::scale_index_regular<K, S, W>;
};
const ap_uint<config6::filt_height * config6::filt_width> config6::pixels[] = {1,3,7,6,4,9,27,63,54,36,73,219,511,438,292,72,216,504,432,288,64,192,448,384,256};


struct config8 : nnet::pooling2d_config {
    static const unsigned in_height = 125;
    static const unsigned in_width = 29;
    static const unsigned n_filt = 64;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;

    static const unsigned filt_height = pool_height;
    static const unsigned filt_width = pool_width;
    static const unsigned n_chan = n_filt;

    static const unsigned out_height = 62;
    static const unsigned out_width = 14;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const bool count_pad = false;
    static const nnet::Pool_Op pool_op = nnet::Average;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned reuse_factor = 128;
    typedef model_default_t accum_t;
};


struct config9_mult : nnet::dense_config {
    static const unsigned n_in = 576;
    static const unsigned n_out = 64;
    static const unsigned reuse_factor = 288;
    static const unsigned strategy = nnet::resource;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    typedef model_default_t accum_t;
    typedef conv2d_2_bias_t bias_t;
    typedef conv2d_2_weight_t weight_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config9 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 62;
    static const unsigned in_width = 14;
    static const unsigned n_chan = 64;
    static const unsigned filt_height = 3;
    static const unsigned filt_width = 3;
    static const unsigned kernel_size = filt_height * filt_width;
    static const unsigned n_filt = 64;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 60;
    static const unsigned out_width = 12;
    static const unsigned reuse_factor = 288;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit =
        ((kernel_size * n_chan * n_filt + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    static const unsigned strategy = nnet::resource;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned min_height = 5;
    static const unsigned min_width = 5;
    static const ap_uint<filt_height * filt_width> pixels[min_height * min_width];
    static const unsigned n_partitions = 720;
    static const unsigned n_pixels = out_height * out_width / n_partitions;
    template<class data_T, class CONFIG_T>
    using fill_buffer = nnet::FillConv2DBuffer<data_T, CONFIG_T>;
    typedef model_default_t accum_t;
    typedef conv2d_2_bias_t bias_t;
    typedef conv2d_2_weight_t weight_t;
    typedef config9_mult mult_config;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_height = nnet::scale_index_regular<K, S, W>;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_width = nnet::scale_index_regular<K, S, W>;
};
const ap_uint<config9::filt_height * config9::filt_width> config9::pixels[] = {1,3,7,6,4,9,27,63,54,36,73,219,511,438,292,72,216,504,432,288,64,192,448,384,256};


struct config11 : nnet::pooling2d_config {
    static const unsigned in_height = 60;
    static const unsigned in_width = 12;
    static const unsigned n_filt = 64;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;

    static const unsigned filt_height = pool_height;
    static const unsigned filt_width = pool_width;
    static const unsigned n_chan = n_filt;

    static const unsigned out_height = 30;
    static const unsigned out_width = 6;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const bool count_pad = false;
    static const nnet::Pool_Op pool_op = nnet::Average;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned reuse_factor = 128;
    typedef model_default_t accum_t;
};


struct config12_mult : nnet::dense_config {
    static const unsigned n_in = 576;
    static const unsigned n_out = 32;
    static const unsigned reuse_factor = 288;
    static const unsigned strategy = nnet::resource;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    typedef model_default_t accum_t;
    typedef conv2d_3_bias_t bias_t;
    typedef conv2d_3_weight_t weight_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};

struct config12 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 30;
    static const unsigned in_width = 6;
    static const unsigned n_chan = 64;
    static const unsigned filt_height = 3;
    static const unsigned filt_width = 3;
    static const unsigned kernel_size = filt_height * filt_width;
    static const unsigned n_filt = 32;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 28;
    static const unsigned out_width = 4;
    static const unsigned reuse_factor = 288;
    static const unsigned n_zeros = 0;
    static const unsigned multiplier_limit =
        ((kernel_size * n_chan * n_filt + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    static const unsigned strategy = nnet::resource;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned min_height = 5;
    static const unsigned min_width = 5;
    static const ap_uint<filt_height * filt_width> pixels[min_height * min_width];
    static const unsigned n_partitions = 112;
    static const unsigned n_pixels = out_height * out_width / n_partitions;
    template<class data_T, class CONFIG_T>
    using fill_buffer = nnet::FillConv2DBuffer<data_T, CONFIG_T>;
    typedef model_default_t accum_t;
    typedef conv2d_3_bias_t bias_t;
    typedef conv2d_3_weight_t weight_t;
    typedef config12_mult mult_config;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_height = nnet::scale_index_regular<K, S, W>;
    template<unsigned K, unsigned S, unsigned W>
    using scale_index_width = nnet::scale_index_regular<K, S, W>;
};
const ap_uint<config12::filt_height * config12::filt_width> config12::pixels[] = {1,3,7,6,4,9,27,63,54,36,73,219,511,438,292,72,216,504,432,288,64,192,448,384,256};


struct config14 : nnet::pooling2d_config {
    static const unsigned in_height = 28;
    static const unsigned in_width = 4;
    static const unsigned n_filt = 32;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;

    static const unsigned filt_height = pool_height;
    static const unsigned filt_width = pool_width;
    static const unsigned n_chan = n_filt;

    static const unsigned out_height = 14;
    static const unsigned out_width = 2;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const bool count_pad = false;
    static const nnet::Pool_Op pool_op = nnet::Average;
    static const nnet::conv_implementation implementation = nnet::conv_implementation::linebuffer;
    static const unsigned reuse_factor = 128;
    typedef model_default_t accum_t;
};


struct config16 : nnet::dense_config {
    static const unsigned n_in = 896;
    static const unsigned n_out = 8;
    static const unsigned io_type = nnet::io_stream;
    static const unsigned strategy = nnet::resource;
    static const unsigned reuse_factor = 128;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 7168;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef dense_bias_t bias_t;
    typedef dense_weight_t weight_t;
    typedef layer16_index index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};


struct config18 : nnet::dense_config {
    static const unsigned n_in = 8;
    static const unsigned n_out = 3;
    static const unsigned io_type = nnet::io_stream;
    static const unsigned strategy = nnet::resource;
    static const unsigned reuse_factor = 8;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 24;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef dense_1_bias_t bias_t;
    typedef dense_1_weight_t weight_t;
    typedef layer18_index index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};


struct softmax_config19 : nnet::activ_config {
    static const unsigned n_in = 3;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_stream;
    static const unsigned reuse_factor = 128;
    static const unsigned axis = -1;
    static const nnet::softmax_implementation implementation = nnet::softmax_implementation::stable;
    typedef dense_1_softmax_exp_table_t exp_table_t;
    typedef dense_1_softmax_inv_table_t inv_table_t;
};
# 5 "myproject.cpp" 2

void myproject(
    hls::stream<input_t> &zero_padding2d_input,
    hls::stream<result_t> &layer19_out
) {


#pragma HLS INTERFACE axis port=zero_padding2d_input,layer19_out
#pragma HLS DATAFLOW
# 41 "myproject.cpp"
 hls::stream<layer2_t> layer2_out("layer2_out");
#pragma HLS STREAM variable=layer2_out depth=65536
 nnet::zeropad2d_cl<input_t, layer2_t, config2>(zero_padding2d_input, layer2_out);

    hls::stream<layer3_t> layer3_out("layer3_out");
#pragma HLS STREAM variable=layer3_out depth=64260
 nnet::conv_2d_cl<layer2_t, layer3_t, config3>(layer2_out, layer3_out, w3, b3);

    hls::stream<layer5_t> layer5_out("layer5_out");
#pragma HLS STREAM variable=layer5_out depth=3937
 nnet::pooling2d_cl<layer3_t, layer5_t, config5>(layer3_out, layer5_out);

    hls::stream<layer6_t> layer6_out("layer6_out");
#pragma HLS STREAM variable=layer6_out depth=3625
 nnet::conv_2d_cl<layer5_t, layer6_t, config6>(layer5_out, layer6_out, w6, b6);

    hls::stream<layer8_t> layer8_out("layer8_out");
#pragma HLS STREAM variable=layer8_out depth=868
 nnet::pooling2d_cl<layer6_t, layer8_t, config8>(layer6_out, layer8_out);

    hls::stream<layer9_t> layer9_out("layer9_out");
#pragma HLS STREAM variable=layer9_out depth=720
 nnet::conv_2d_cl<layer8_t, layer9_t, config9>(layer8_out, layer9_out, w9, b9);

    hls::stream<layer11_t> layer11_out("layer11_out");
#pragma HLS STREAM variable=layer11_out depth=180
 nnet::pooling2d_cl<layer9_t, layer11_t, config11>(layer9_out, layer11_out);

    hls::stream<layer12_t> layer12_out("layer12_out");
#pragma HLS STREAM variable=layer12_out depth=112
 nnet::conv_2d_cl<layer11_t, layer12_t, config12>(layer11_out, layer12_out, w12, b12);

    hls::stream<layer14_t> layer14_out("layer14_out");
#pragma HLS STREAM variable=layer14_out depth=28
 nnet::pooling2d_cl<layer12_t, layer14_t, config14>(layer12_out, layer14_out);

    auto& layer15_out = layer14_out;
    hls::stream<layer16_t> layer16_out("layer16_out");
#pragma HLS STREAM variable=layer16_out depth=1
 nnet::dense<layer14_t, layer16_t, config16>(layer15_out, layer16_out, w16, b16);

    hls::stream<layer18_t> layer18_out("layer18_out");
#pragma HLS STREAM variable=layer18_out depth=1
 nnet::dense<layer16_t, layer18_t, config18>(layer16_out, layer18_out, w18, b18);

    nnet::softmax<layer18_t, result_t, softmax_config19>(layer18_out, layer19_out);

}
