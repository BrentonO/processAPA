-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_data_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_val1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_val2 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_val3 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_val4 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_val5 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_val6 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_val7 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_val8 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of process_data_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_FFE5 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111100101";
    constant ap_const_lv16_FFE7 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111100111";
    constant ap_const_lv16_1B : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln43_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w18_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w18_ce0 : STD_LOGIC;
    signal w18_q0 : STD_LOGIC_VECTOR (42 downto 0);
    signal do_init_reg_145 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index3_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_0_val113_rewind_reg_176 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_val214_rewind_reg_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_val315_rewind_reg_204 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_val416_rewind_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_val517_rewind_reg_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_5_val618_rewind_reg_246 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_val719_rewind_reg_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_val820_rewind_reg_274 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_0_08_reg_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_1_06_reg_302 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_2_04_reg_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_do_init_phi_fu_149_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_fu_431_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_index_reg_638 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln43_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_493_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln55_1_fu_529_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln55_2_fu_565_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_index3_phi_fu_165_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_data_0_val113_phi_phi_fu_334_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_1_val214_phi_phi_fu_346_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_2_val315_phi_phi_fu_358_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_3_val416_phi_phi_fu_370_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_4_val517_phi_phi_fu_382_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_5_val618_phi_phi_fu_394_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_6_val719_phi_phi_fu_406_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_7_val820_phi_phi_fu_418_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_0_val113_phi_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_0_val113_phi_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_1_val214_phi_reg_342 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_1_val214_phi_reg_342 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_2_val315_phi_reg_354 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_2_val315_phi_reg_354 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_3_val416_phi_reg_366 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_val416_phi_reg_366 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_4_val517_phi_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_val517_phi_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_5_val618_phi_reg_390 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_5_val618_phi_reg_390 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_6_val719_phi_reg_402 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_6_val719_phi_reg_402 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_data_7_val820_phi_reg_414 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_data_7_val820_phi_reg_414 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln43_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_fu_465_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_fu_443_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_fu_477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln73_1_fu_473_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln55_fu_477_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln_fu_483_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_1_fu_499_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_1_fu_513_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_1_fu_513_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln55_1_fu_519_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_535_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln55_2_fu_549_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_2_fu_549_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln55_2_fu_555_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_151 : BOOLEAN;
    signal ap_condition_39 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component process_data_mux_8_3_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component process_data_mul_16s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component process_data_mul_16s_11s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component process_data_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config18_s_w18_ROM_AUTOjKb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;



begin
    w18_U : component process_data_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config18_s_w18_ROM_AUTOjKb
    generic map (
        DataWidth => 43,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w18_address0,
        ce0 => w18_ce0,
        q0 => w18_q0);

    mux_8_3_16_1_1_U5819 : component process_data_mux_8_3_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_mux_data_0_val113_phi_phi_fu_334_p4,
        din1 => ap_phi_mux_data_1_val214_phi_phi_fu_346_p4,
        din2 => ap_phi_mux_data_2_val315_phi_phi_fu_358_p4,
        din3 => ap_phi_mux_data_3_val416_phi_phi_fu_370_p4,
        din4 => ap_phi_mux_data_4_val517_phi_phi_fu_382_p4,
        din5 => ap_phi_mux_data_5_val618_phi_phi_fu_394_p4,
        din6 => ap_phi_mux_data_6_val719_phi_phi_fu_406_p4,
        din7 => ap_phi_mux_data_7_val820_phi_phi_fu_418_p4,
        din8 => w_index3_reg_161,
        dout => a_fu_443_p10);

    mul_16s_16s_26_1_1_U5820 : component process_data_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => w_fu_465_p1,
        din1 => mul_ln55_fu_477_p1,
        dout => mul_ln55_fu_477_p2);

    mul_16s_16s_26_1_1_U5821 : component process_data_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => w_1_fu_499_p4,
        din1 => mul_ln55_1_fu_513_p1,
        dout => mul_ln55_1_fu_513_p2);

    mul_16s_11s_26_1_1_U5822 : component process_data_mul_16s_11s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln55_2_fu_549_p0,
        din1 => tmp_fu_535_p4,
        dout => mul_ln55_2_fu_549_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= add_ln55_fu_493_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= add_ln55_1_fu_529_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= add_ln55_2_fu_565_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_data_0_val113_phi_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val113_phi_reg_330 <= data_0_val1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_val113_phi_reg_330 <= ap_phi_reg_pp0_iter0_data_0_val113_phi_reg_330;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_1_val214_phi_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val214_phi_reg_342 <= data_1_val2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_val214_phi_reg_342 <= ap_phi_reg_pp0_iter0_data_1_val214_phi_reg_342;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_2_val315_phi_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val315_phi_reg_354 <= data_2_val3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_val315_phi_reg_354 <= ap_phi_reg_pp0_iter0_data_2_val315_phi_reg_354;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_3_val416_phi_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val416_phi_reg_366 <= data_3_val4;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_val416_phi_reg_366 <= ap_phi_reg_pp0_iter0_data_3_val416_phi_reg_366;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_4_val517_phi_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val517_phi_reg_378 <= data_4_val5;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_val517_phi_reg_378 <= ap_phi_reg_pp0_iter0_data_4_val517_phi_reg_378;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_5_val618_phi_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val618_phi_reg_390 <= data_5_val6;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_val618_phi_reg_390 <= ap_phi_reg_pp0_iter0_data_5_val618_phi_reg_390;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_6_val719_phi_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_6_val719_phi_reg_402 <= data_6_val7;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_6_val719_phi_reg_402 <= ap_phi_reg_pp0_iter0_data_6_val719_phi_reg_402;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_7_val820_phi_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_39)) then
                if ((ap_phi_mux_do_init_phi_fu_149_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_7_val820_phi_reg_414 <= data_7_val8;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_7_val820_phi_reg_414 <= ap_phi_reg_pp0_iter0_data_7_val820_phi_reg_414;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_0))) then 
                do_init_reg_145 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_145 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    res_0_08_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_0))) then 
                res_0_08_reg_288 <= add_ln55_fu_493_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_0_08_reg_288 <= ap_const_lv16_FFE5;
            end if; 
        end if;
    end process;

    res_1_06_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_0))) then 
                res_1_06_reg_302 <= add_ln55_1_fu_529_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_1_06_reg_302 <= ap_const_lv16_FFE7;
            end if; 
        end if;
    end process;

    res_2_04_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_0))) then 
                res_2_04_reg_316 <= add_ln55_2_fu_565_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_2_04_reg_316 <= ap_const_lv16_1B;
            end if; 
        end if;
    end process;

    w_index3_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_0))) then 
                w_index3_reg_161 <= w_index_reg_638;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                w_index3_reg_161 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_0))) then
                data_0_val113_rewind_reg_176 <= ap_phi_mux_data_0_val113_phi_phi_fu_334_p4;
                data_1_val214_rewind_reg_190 <= ap_phi_mux_data_1_val214_phi_phi_fu_346_p4;
                data_2_val315_rewind_reg_204 <= ap_phi_mux_data_2_val315_phi_phi_fu_358_p4;
                data_3_val416_rewind_reg_218 <= ap_phi_mux_data_3_val416_phi_phi_fu_370_p4;
                data_4_val517_rewind_reg_232 <= ap_phi_mux_data_4_val517_phi_phi_fu_382_p4;
                data_5_val618_rewind_reg_246 <= ap_phi_mux_data_5_val618_phi_phi_fu_394_p4;
                data_6_val719_rewind_reg_260 <= ap_phi_mux_data_6_val719_phi_phi_fu_406_p4;
                data_7_val820_rewind_reg_274 <= ap_phi_mux_data_7_val820_phi_phi_fu_418_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln43_reg_643 <= icmp_ln43_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_index_reg_638 <= w_index_fu_431_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln55_1_fu_529_p2 <= std_logic_vector(unsigned(trunc_ln55_1_fu_519_p4) + unsigned(res_1_06_reg_302));
    add_ln55_2_fu_565_p2 <= std_logic_vector(unsigned(trunc_ln55_2_fu_555_p4) + unsigned(res_2_04_reg_316));
    add_ln55_fu_493_p2 <= std_logic_vector(unsigned(trunc_ln_fu_483_p4) + unsigned(res_0_08_reg_288));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_151_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_151 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_39_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_39 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln43_reg_643, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_0_val113_phi_phi_fu_334_p4_assign_proc : process(do_init_reg_145, data_0_val113_rewind_reg_176, ap_phi_reg_pp0_iter1_data_0_val113_phi_reg_330)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_0_val113_phi_phi_fu_334_p4 <= data_0_val113_rewind_reg_176;
        else 
            ap_phi_mux_data_0_val113_phi_phi_fu_334_p4 <= ap_phi_reg_pp0_iter1_data_0_val113_phi_reg_330;
        end if; 
    end process;


    ap_phi_mux_data_1_val214_phi_phi_fu_346_p4_assign_proc : process(do_init_reg_145, data_1_val214_rewind_reg_190, ap_phi_reg_pp0_iter1_data_1_val214_phi_reg_342)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_1_val214_phi_phi_fu_346_p4 <= data_1_val214_rewind_reg_190;
        else 
            ap_phi_mux_data_1_val214_phi_phi_fu_346_p4 <= ap_phi_reg_pp0_iter1_data_1_val214_phi_reg_342;
        end if; 
    end process;


    ap_phi_mux_data_2_val315_phi_phi_fu_358_p4_assign_proc : process(do_init_reg_145, data_2_val315_rewind_reg_204, ap_phi_reg_pp0_iter1_data_2_val315_phi_reg_354)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_2_val315_phi_phi_fu_358_p4 <= data_2_val315_rewind_reg_204;
        else 
            ap_phi_mux_data_2_val315_phi_phi_fu_358_p4 <= ap_phi_reg_pp0_iter1_data_2_val315_phi_reg_354;
        end if; 
    end process;


    ap_phi_mux_data_3_val416_phi_phi_fu_370_p4_assign_proc : process(do_init_reg_145, data_3_val416_rewind_reg_218, ap_phi_reg_pp0_iter1_data_3_val416_phi_reg_366)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_3_val416_phi_phi_fu_370_p4 <= data_3_val416_rewind_reg_218;
        else 
            ap_phi_mux_data_3_val416_phi_phi_fu_370_p4 <= ap_phi_reg_pp0_iter1_data_3_val416_phi_reg_366;
        end if; 
    end process;


    ap_phi_mux_data_4_val517_phi_phi_fu_382_p4_assign_proc : process(do_init_reg_145, data_4_val517_rewind_reg_232, ap_phi_reg_pp0_iter1_data_4_val517_phi_reg_378)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_4_val517_phi_phi_fu_382_p4 <= data_4_val517_rewind_reg_232;
        else 
            ap_phi_mux_data_4_val517_phi_phi_fu_382_p4 <= ap_phi_reg_pp0_iter1_data_4_val517_phi_reg_378;
        end if; 
    end process;


    ap_phi_mux_data_5_val618_phi_phi_fu_394_p4_assign_proc : process(do_init_reg_145, data_5_val618_rewind_reg_246, ap_phi_reg_pp0_iter1_data_5_val618_phi_reg_390)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_5_val618_phi_phi_fu_394_p4 <= data_5_val618_rewind_reg_246;
        else 
            ap_phi_mux_data_5_val618_phi_phi_fu_394_p4 <= ap_phi_reg_pp0_iter1_data_5_val618_phi_reg_390;
        end if; 
    end process;


    ap_phi_mux_data_6_val719_phi_phi_fu_406_p4_assign_proc : process(do_init_reg_145, data_6_val719_rewind_reg_260, ap_phi_reg_pp0_iter1_data_6_val719_phi_reg_402)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_6_val719_phi_phi_fu_406_p4 <= data_6_val719_rewind_reg_260;
        else 
            ap_phi_mux_data_6_val719_phi_phi_fu_406_p4 <= ap_phi_reg_pp0_iter1_data_6_val719_phi_reg_402;
        end if; 
    end process;


    ap_phi_mux_data_7_val820_phi_phi_fu_418_p4_assign_proc : process(do_init_reg_145, data_7_val820_rewind_reg_274, ap_phi_reg_pp0_iter1_data_7_val820_phi_reg_414)
    begin
        if ((do_init_reg_145 = ap_const_lv1_0)) then 
            ap_phi_mux_data_7_val820_phi_phi_fu_418_p4 <= data_7_val820_rewind_reg_274;
        else 
            ap_phi_mux_data_7_val820_phi_phi_fu_418_p4 <= ap_phi_reg_pp0_iter1_data_7_val820_phi_reg_414;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_149_p6_assign_proc : process(do_init_reg_145, icmp_ln43_reg_643, ap_condition_151)
    begin
        if ((ap_const_boolean_1 = ap_condition_151)) then
            if ((icmp_ln43_reg_643 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_149_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln43_reg_643 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_149_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_149_p6 <= do_init_reg_145;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_149_p6 <= do_init_reg_145;
        end if; 
    end process;


    ap_phi_mux_w_index3_phi_fu_165_p6_assign_proc : process(w_index3_reg_161, w_index_reg_638, icmp_ln43_reg_643, ap_condition_151)
    begin
        if ((ap_const_boolean_1 = ap_condition_151)) then
            if ((icmp_ln43_reg_643 = ap_const_lv1_1)) then 
                ap_phi_mux_w_index3_phi_fu_165_p6 <= ap_const_lv3_0;
            elsif ((icmp_ln43_reg_643 = ap_const_lv1_0)) then 
                ap_phi_mux_w_index3_phi_fu_165_p6 <= w_index_reg_638;
            else 
                ap_phi_mux_w_index3_phi_fu_165_p6 <= w_index3_reg_161;
            end if;
        else 
            ap_phi_mux_w_index3_phi_fu_165_p6 <= w_index3_reg_161;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_0_val113_phi_reg_330 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_1_val214_phi_reg_342 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_2_val315_phi_reg_354 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_3_val416_phi_reg_366 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_4_val517_phi_reg_378 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_5_val618_phi_reg_390 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_6_val719_phi_reg_402 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_7_val820_phi_reg_414 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln43_fu_437_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln43_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln43_reg_643, add_ln55_fu_493_p2, ap_enable_reg_pp0_iter1, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1))) then 
            ap_return_0 <= add_ln55_fu_493_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln43_reg_643, ap_enable_reg_pp0_iter1, add_ln55_1_fu_529_p2, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1))) then 
            ap_return_1 <= add_ln55_1_fu_529_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln43_reg_643, ap_enable_reg_pp0_iter1, add_ln55_2_fu_565_p2, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln43_reg_643 = ap_const_lv1_1))) then 
            ap_return_2 <= add_ln55_2_fu_565_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    icmp_ln43_fu_437_p2 <= "1" when (ap_phi_mux_w_index3_phi_fu_165_p6 = ap_const_lv3_7) else "0";
    mul_ln55_1_fu_513_p1 <= sext_ln73_1_fu_473_p1(16 - 1 downto 0);
    mul_ln55_2_fu_549_p0 <= sext_ln73_1_fu_473_p1(16 - 1 downto 0);
    mul_ln55_fu_477_p1 <= sext_ln73_1_fu_473_p1(16 - 1 downto 0);
        sext_ln73_1_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_fu_443_p10),26));

    tmp_fu_535_p4 <= w18_q0(42 downto 32);
    trunc_ln55_1_fu_519_p4 <= mul_ln55_1_fu_513_p2(25 downto 10);
    trunc_ln55_2_fu_555_p4 <= mul_ln55_2_fu_549_p2(25 downto 10);
    trunc_ln_fu_483_p4 <= mul_ln55_fu_477_p2(25 downto 10);
    w18_address0 <= zext_ln43_fu_426_p1(3 - 1 downto 0);

    w18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w18_ce0 <= ap_const_logic_1;
        else 
            w18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_1_fu_499_p4 <= w18_q0(31 downto 16);
    w_fu_465_p1 <= w18_q0(16 - 1 downto 0);
    w_index_fu_431_p2 <= std_logic_vector(unsigned(ap_phi_mux_w_index3_phi_fu_165_p6) + unsigned(ap_const_lv3_1));
    zext_ln43_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index3_phi_fu_165_p6),64));
end behav;
