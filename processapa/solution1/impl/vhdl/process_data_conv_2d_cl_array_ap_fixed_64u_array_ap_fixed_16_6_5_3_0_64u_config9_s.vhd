-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_data_conv_2d_cl_array_ap_fixed_64u_array_ap_fixed_16_6_5_3_0_64u_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer8_out_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    layer8_out_empty_n : IN STD_LOGIC;
    layer8_out_read : OUT STD_LOGIC;
    layer9_out_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    layer9_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    layer9_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    layer9_out_full_n : IN STD_LOGIC;
    layer9_out_write : OUT STD_LOGIC );
end;


architecture behav of process_data_conv_2d_cl_array_ap_fixed_64u_array_ap_fixed_16_6_5_3_0_64u_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_364 : STD_LOGIC_VECTOR (9 downto 0) := "1101100100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101111";
    constant ap_const_lv32_3F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111110000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101111";
    constant ap_const_lv32_2B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101111";
    constant ap_const_lv32_2F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_30F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001111";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_lv32_320 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100000";
    constant ap_const_lv32_32F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101111";
    constant ap_const_lv32_330 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_34F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101001111";
    constant ap_const_lv32_350 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101010000";
    constant ap_const_lv32_35F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011111";
    constant ap_const_lv32_360 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100000";
    constant ap_const_lv32_36F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101101111";
    constant ap_const_lv32_370 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101110000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_38F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110001111";
    constant ap_const_lv32_390 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110010000";
    constant ap_const_lv32_39F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011111";
    constant ap_const_lv32_3A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100000";
    constant ap_const_lv32_3AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110101111";
    constant ap_const_lv32_3B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110110000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111001111";
    constant ap_const_lv32_3D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111010000";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer8_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln79_fu_3214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln87_fu_3226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_reg_3939 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal trunc_ln87_s_reg_3944 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_1_reg_3949 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_1_i_reg_3954 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_2_i_reg_3959 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_3_i_reg_3964 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_4_i_reg_3969 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_5_i_reg_3974 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_6_i_reg_3979 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_7_i_reg_3984 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_8_i_reg_3989 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_9_i_reg_3994 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_10_i_reg_3999 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_11_i_reg_4004 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_12_i_reg_4009 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_13_i_reg_4014 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_14_i_reg_4019 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_15_i_reg_4024 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_16_i_reg_4029 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_17_i_reg_4034 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_18_i_reg_4039 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_19_i_reg_4044 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_20_i_reg_4049 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_21_i_reg_4054 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_22_i_reg_4059 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_23_i_reg_4064 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_24_i_reg_4069 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_25_i_reg_4074 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_26_i_reg_4079 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_27_i_reg_4084 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_28_i_reg_4089 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_29_i_reg_4094 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_30_i_reg_4099 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_31_i_reg_4104 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_32_i_reg_4109 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_33_i_reg_4114 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_34_i_reg_4119 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_35_i_reg_4124 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_36_i_reg_4129 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_37_i_reg_4134 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_38_i_reg_4139 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_39_i_reg_4144 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_40_i_reg_4149 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_41_i_reg_4154 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_42_i_reg_4159 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_43_i_reg_4164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_44_i_reg_4169 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_45_i_reg_4174 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_46_i_reg_4179 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_47_i_reg_4184 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_48_i_reg_4189 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_49_i_reg_4194 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_50_i_reg_4199 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_51_i_reg_4204 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_52_i_reg_4209 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_53_i_reg_4214 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_54_i_reg_4219 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_55_i_reg_4224 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_56_i_reg_4229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_57_i_reg_4234 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_58_i_reg_4239 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_59_i_reg_4244 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_60_i_reg_4249 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_61_i_reg_4254 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_done : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_idle : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_ready : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_layer9_out_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_layer9_out_write : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call68 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvar_flatten_fu_1708 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln79_fu_3220_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_data_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read32 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read40 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read42 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read43 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read44 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read45 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read46 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read47 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read48 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read49 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read50 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read51 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read52 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read53 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read54 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read55 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read56 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read57 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read58 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read59 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read60 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read61 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read62 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read63 : IN STD_LOGIC_VECTOR (15 downto 0);
        layer9_out_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        layer9_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        layer9_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        layer9_out_full_n : IN STD_LOGIC;
        layer9_out_write : OUT STD_LOGIC );
    end component;



begin
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718 : component process_data_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start,
        ap_done => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_done,
        ap_idle => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_idle,
        ap_ready => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_ready,
        p_read => trunc_ln87_reg_3939,
        p_read1 => ref_tmp_1_i_reg_3954,
        p_read2 => ref_tmp_2_i_reg_3959,
        p_read3 => ref_tmp_3_i_reg_3964,
        p_read4 => ref_tmp_4_i_reg_3969,
        p_read5 => ref_tmp_5_i_reg_3974,
        p_read6 => ref_tmp_6_i_reg_3979,
        p_read7 => ref_tmp_7_i_reg_3984,
        p_read8 => ref_tmp_8_i_reg_3989,
        p_read9 => ref_tmp_9_i_reg_3994,
        p_read10 => ref_tmp_10_i_reg_3999,
        p_read11 => ref_tmp_11_i_reg_4004,
        p_read12 => ref_tmp_12_i_reg_4009,
        p_read13 => ref_tmp_13_i_reg_4014,
        p_read14 => ref_tmp_14_i_reg_4019,
        p_read15 => ref_tmp_15_i_reg_4024,
        p_read16 => ref_tmp_16_i_reg_4029,
        p_read17 => ref_tmp_17_i_reg_4034,
        p_read18 => ref_tmp_18_i_reg_4039,
        p_read19 => ref_tmp_19_i_reg_4044,
        p_read20 => ref_tmp_20_i_reg_4049,
        p_read21 => ref_tmp_21_i_reg_4054,
        p_read22 => ref_tmp_22_i_reg_4059,
        p_read23 => ref_tmp_23_i_reg_4064,
        p_read24 => ref_tmp_24_i_reg_4069,
        p_read25 => ref_tmp_25_i_reg_4074,
        p_read26 => ref_tmp_26_i_reg_4079,
        p_read27 => ref_tmp_27_i_reg_4084,
        p_read28 => ref_tmp_28_i_reg_4089,
        p_read29 => ref_tmp_29_i_reg_4094,
        p_read30 => ref_tmp_30_i_reg_4099,
        p_read31 => ref_tmp_31_i_reg_4104,
        p_read32 => ref_tmp_32_i_reg_4109,
        p_read33 => ref_tmp_33_i_reg_4114,
        p_read34 => ref_tmp_34_i_reg_4119,
        p_read35 => ref_tmp_35_i_reg_4124,
        p_read36 => ref_tmp_36_i_reg_4129,
        p_read37 => ref_tmp_37_i_reg_4134,
        p_read38 => ref_tmp_38_i_reg_4139,
        p_read39 => ref_tmp_39_i_reg_4144,
        p_read40 => ref_tmp_40_i_reg_4149,
        p_read41 => ref_tmp_41_i_reg_4154,
        p_read42 => ref_tmp_42_i_reg_4159,
        p_read43 => ref_tmp_43_i_reg_4164,
        p_read44 => ref_tmp_44_i_reg_4169,
        p_read45 => ref_tmp_45_i_reg_4174,
        p_read46 => ref_tmp_46_i_reg_4179,
        p_read47 => ref_tmp_47_i_reg_4184,
        p_read48 => ref_tmp_48_i_reg_4189,
        p_read49 => ref_tmp_49_i_reg_4194,
        p_read50 => ref_tmp_50_i_reg_4199,
        p_read51 => ref_tmp_51_i_reg_4204,
        p_read52 => ref_tmp_52_i_reg_4209,
        p_read53 => ref_tmp_53_i_reg_4214,
        p_read54 => ref_tmp_54_i_reg_4219,
        p_read55 => ref_tmp_55_i_reg_4224,
        p_read56 => ref_tmp_56_i_reg_4229,
        p_read57 => ref_tmp_57_i_reg_4234,
        p_read58 => ref_tmp_58_i_reg_4239,
        p_read59 => ref_tmp_59_i_reg_4244,
        p_read60 => ref_tmp_60_i_reg_4249,
        p_read61 => ref_tmp_61_i_reg_4254,
        p_read62 => trunc_ln87_s_reg_3944,
        p_read63 => trunc_ln87_1_reg_3949,
        layer9_out_din => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_layer9_out_din,
        layer9_out_num_data_valid => ap_const_lv11_0,
        layer9_out_fifo_cap => ap_const_lv11_0,
        layer9_out_full_n => layer9_out_full_n,
        layer9_out_write => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_layer9_out_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_ready = ap_const_logic_1)) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_1708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_1708 <= ap_const_lv10_0;
            elsif ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_1708 <= add_ln79_fu_3220_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ref_tmp_10_i_reg_3999 <= layer8_out_dout(175 downto 160);
                ref_tmp_11_i_reg_4004 <= layer8_out_dout(191 downto 176);
                ref_tmp_12_i_reg_4009 <= layer8_out_dout(207 downto 192);
                ref_tmp_13_i_reg_4014 <= layer8_out_dout(223 downto 208);
                ref_tmp_14_i_reg_4019 <= layer8_out_dout(239 downto 224);
                ref_tmp_15_i_reg_4024 <= layer8_out_dout(255 downto 240);
                ref_tmp_16_i_reg_4029 <= layer8_out_dout(271 downto 256);
                ref_tmp_17_i_reg_4034 <= layer8_out_dout(287 downto 272);
                ref_tmp_18_i_reg_4039 <= layer8_out_dout(303 downto 288);
                ref_tmp_19_i_reg_4044 <= layer8_out_dout(319 downto 304);
                ref_tmp_1_i_reg_3954 <= layer8_out_dout(31 downto 16);
                ref_tmp_20_i_reg_4049 <= layer8_out_dout(335 downto 320);
                ref_tmp_21_i_reg_4054 <= layer8_out_dout(351 downto 336);
                ref_tmp_22_i_reg_4059 <= layer8_out_dout(367 downto 352);
                ref_tmp_23_i_reg_4064 <= layer8_out_dout(383 downto 368);
                ref_tmp_24_i_reg_4069 <= layer8_out_dout(399 downto 384);
                ref_tmp_25_i_reg_4074 <= layer8_out_dout(415 downto 400);
                ref_tmp_26_i_reg_4079 <= layer8_out_dout(431 downto 416);
                ref_tmp_27_i_reg_4084 <= layer8_out_dout(447 downto 432);
                ref_tmp_28_i_reg_4089 <= layer8_out_dout(463 downto 448);
                ref_tmp_29_i_reg_4094 <= layer8_out_dout(479 downto 464);
                ref_tmp_2_i_reg_3959 <= layer8_out_dout(47 downto 32);
                ref_tmp_30_i_reg_4099 <= layer8_out_dout(495 downto 480);
                ref_tmp_31_i_reg_4104 <= layer8_out_dout(511 downto 496);
                ref_tmp_32_i_reg_4109 <= layer8_out_dout(527 downto 512);
                ref_tmp_33_i_reg_4114 <= layer8_out_dout(543 downto 528);
                ref_tmp_34_i_reg_4119 <= layer8_out_dout(559 downto 544);
                ref_tmp_35_i_reg_4124 <= layer8_out_dout(575 downto 560);
                ref_tmp_36_i_reg_4129 <= layer8_out_dout(591 downto 576);
                ref_tmp_37_i_reg_4134 <= layer8_out_dout(607 downto 592);
                ref_tmp_38_i_reg_4139 <= layer8_out_dout(623 downto 608);
                ref_tmp_39_i_reg_4144 <= layer8_out_dout(639 downto 624);
                ref_tmp_3_i_reg_3964 <= layer8_out_dout(63 downto 48);
                ref_tmp_40_i_reg_4149 <= layer8_out_dout(655 downto 640);
                ref_tmp_41_i_reg_4154 <= layer8_out_dout(671 downto 656);
                ref_tmp_42_i_reg_4159 <= layer8_out_dout(687 downto 672);
                ref_tmp_43_i_reg_4164 <= layer8_out_dout(703 downto 688);
                ref_tmp_44_i_reg_4169 <= layer8_out_dout(719 downto 704);
                ref_tmp_45_i_reg_4174 <= layer8_out_dout(735 downto 720);
                ref_tmp_46_i_reg_4179 <= layer8_out_dout(751 downto 736);
                ref_tmp_47_i_reg_4184 <= layer8_out_dout(767 downto 752);
                ref_tmp_48_i_reg_4189 <= layer8_out_dout(783 downto 768);
                ref_tmp_49_i_reg_4194 <= layer8_out_dout(799 downto 784);
                ref_tmp_4_i_reg_3969 <= layer8_out_dout(79 downto 64);
                ref_tmp_50_i_reg_4199 <= layer8_out_dout(815 downto 800);
                ref_tmp_51_i_reg_4204 <= layer8_out_dout(831 downto 816);
                ref_tmp_52_i_reg_4209 <= layer8_out_dout(847 downto 832);
                ref_tmp_53_i_reg_4214 <= layer8_out_dout(863 downto 848);
                ref_tmp_54_i_reg_4219 <= layer8_out_dout(879 downto 864);
                ref_tmp_55_i_reg_4224 <= layer8_out_dout(895 downto 880);
                ref_tmp_56_i_reg_4229 <= layer8_out_dout(911 downto 896);
                ref_tmp_57_i_reg_4234 <= layer8_out_dout(927 downto 912);
                ref_tmp_58_i_reg_4239 <= layer8_out_dout(943 downto 928);
                ref_tmp_59_i_reg_4244 <= layer8_out_dout(959 downto 944);
                ref_tmp_5_i_reg_3974 <= layer8_out_dout(95 downto 80);
                ref_tmp_60_i_reg_4249 <= layer8_out_dout(975 downto 960);
                ref_tmp_61_i_reg_4254 <= layer8_out_dout(991 downto 976);
                ref_tmp_6_i_reg_3979 <= layer8_out_dout(111 downto 96);
                ref_tmp_7_i_reg_3984 <= layer8_out_dout(127 downto 112);
                ref_tmp_8_i_reg_3989 <= layer8_out_dout(143 downto 128);
                ref_tmp_9_i_reg_3994 <= layer8_out_dout(159 downto 144);
                trunc_ln87_1_reg_3949 <= layer8_out_dout(1023 downto 1008);
                trunc_ln87_reg_3939 <= trunc_ln87_fu_3226_p1;
                trunc_ln87_s_reg_3944 <= layer8_out_dout(1007 downto 992);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer8_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_3214_p2, grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln79_fu_3220_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_1708) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg)
    begin
        if (((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer8_out_empty_n, icmp_ln79_fu_3214_p2)
    begin
        if (((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_done)
    begin
        if ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(layer8_out_empty_n, icmp_ln79_fu_3214_p2)
    begin
                ap_block_state2 <= ((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call68_assign_proc : process(layer8_out_empty_n, icmp_ln79_fu_3214_p2)
    begin
                ap_block_state2_ignore_call68 <= ((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer8_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_3214_p2)
    begin
        if ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_ap_start_reg;
    icmp_ln79_fu_3214_p2 <= "1" when (indvar_flatten_fu_1708 = ap_const_lv10_364) else "0";

    internal_ap_ready_assign_proc : process(layer8_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_3214_p2)
    begin
        if ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(layer8_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_3214_p2)
    begin
        if (((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer8_out_blk_n <= layer8_out_empty_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer8_out_read_assign_proc : process(layer8_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_3214_p2)
    begin
        if ((not(((icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (layer8_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_3214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer8_out_read <= ap_const_logic_1;
        else 
            layer8_out_read <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_din <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_layer9_out_din;

    layer9_out_write_assign_proc : process(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_layer9_out_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer9_out_write <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_64u_config9_s_fu_1718_layer9_out_write;
        else 
            layer9_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln87_fu_3226_p1 <= layer8_out_dout(16 - 1 downto 0);
end behav;
